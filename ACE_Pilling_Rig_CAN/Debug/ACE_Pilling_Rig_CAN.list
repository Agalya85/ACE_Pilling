
ACE_Pilling_Rig_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000800  08000800  00000800  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001aa74  08000990  08000990  00000990  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001294  0801b408  0801b408  0001b408  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c69c  0801c69c  000216c8  2**0
                  CONTENTS
  4 .ARM          00000008  0801c69c  0801c69c  0001c69c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c6a4  0801c6a4  000216c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c6a4  0801c6a4  0001c6a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c6a8  0801c6a8  0001c6a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000016c8  20000000  0801c6ac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005a74  200016c8  0801dd74  000216c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000713c  0801dd74  0002713c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000216c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005e65a  00000000  00000000  000216f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007dcf  00000000  00000000  0007fd52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002390  00000000  00000000  00087b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020a0  00000000  00000000  00089eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031cd8  00000000  00000000  0008bf58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003974c  00000000  00000000  000bdc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104724  00000000  00000000  000f737c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001fbaa0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ab84  00000000  00000000  001fbaf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000990 <__do_global_dtors_aux>:
 8000990:	b510      	push	{r4, lr}
 8000992:	4c05      	ldr	r4, [pc, #20]	; (80009a8 <__do_global_dtors_aux+0x18>)
 8000994:	7823      	ldrb	r3, [r4, #0]
 8000996:	b933      	cbnz	r3, 80009a6 <__do_global_dtors_aux+0x16>
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <__do_global_dtors_aux+0x1c>)
 800099a:	b113      	cbz	r3, 80009a2 <__do_global_dtors_aux+0x12>
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <__do_global_dtors_aux+0x20>)
 800099e:	f3af 8000 	nop.w
 80009a2:	2301      	movs	r3, #1
 80009a4:	7023      	strb	r3, [r4, #0]
 80009a6:	bd10      	pop	{r4, pc}
 80009a8:	200016c8 	.word	0x200016c8
 80009ac:	00000000 	.word	0x00000000
 80009b0:	0801b3ec 	.word	0x0801b3ec

080009b4 <frame_dummy>:
 80009b4:	b508      	push	{r3, lr}
 80009b6:	4b03      	ldr	r3, [pc, #12]	; (80009c4 <frame_dummy+0x10>)
 80009b8:	b11b      	cbz	r3, 80009c2 <frame_dummy+0xe>
 80009ba:	4903      	ldr	r1, [pc, #12]	; (80009c8 <frame_dummy+0x14>)
 80009bc:	4803      	ldr	r0, [pc, #12]	; (80009cc <frame_dummy+0x18>)
 80009be:	f3af 8000 	nop.w
 80009c2:	bd08      	pop	{r3, pc}
 80009c4:	00000000 	.word	0x00000000
 80009c8:	200016cc 	.word	0x200016cc
 80009cc:	0801b3ec 	.word	0x0801b3ec

080009d0 <strcmp>:
 80009d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80009d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80009d8:	2a01      	cmp	r2, #1
 80009da:	bf28      	it	cs
 80009dc:	429a      	cmpcs	r2, r3
 80009de:	d0f7      	beq.n	80009d0 <strcmp>
 80009e0:	1ad0      	subs	r0, r2, r3
 80009e2:	4770      	bx	lr

080009e4 <strlen>:
 80009e4:	4603      	mov	r3, r0
 80009e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80009ea:	2a00      	cmp	r2, #0
 80009ec:	d1fb      	bne.n	80009e6 <strlen+0x2>
 80009ee:	1a18      	subs	r0, r3, r0
 80009f0:	3801      	subs	r0, #1
 80009f2:	4770      	bx	lr
	...

08000a00 <memchr>:
 8000a00:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000a04:	2a10      	cmp	r2, #16
 8000a06:	db2b      	blt.n	8000a60 <memchr+0x60>
 8000a08:	f010 0f07 	tst.w	r0, #7
 8000a0c:	d008      	beq.n	8000a20 <memchr+0x20>
 8000a0e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000a12:	3a01      	subs	r2, #1
 8000a14:	428b      	cmp	r3, r1
 8000a16:	d02d      	beq.n	8000a74 <memchr+0x74>
 8000a18:	f010 0f07 	tst.w	r0, #7
 8000a1c:	b342      	cbz	r2, 8000a70 <memchr+0x70>
 8000a1e:	d1f6      	bne.n	8000a0e <memchr+0xe>
 8000a20:	b4f0      	push	{r4, r5, r6, r7}
 8000a22:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000a26:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8000a2a:	f022 0407 	bic.w	r4, r2, #7
 8000a2e:	f07f 0700 	mvns.w	r7, #0
 8000a32:	2300      	movs	r3, #0
 8000a34:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000a38:	3c08      	subs	r4, #8
 8000a3a:	ea85 0501 	eor.w	r5, r5, r1
 8000a3e:	ea86 0601 	eor.w	r6, r6, r1
 8000a42:	fa85 f547 	uadd8	r5, r5, r7
 8000a46:	faa3 f587 	sel	r5, r3, r7
 8000a4a:	fa86 f647 	uadd8	r6, r6, r7
 8000a4e:	faa5 f687 	sel	r6, r5, r7
 8000a52:	b98e      	cbnz	r6, 8000a78 <memchr+0x78>
 8000a54:	d1ee      	bne.n	8000a34 <memchr+0x34>
 8000a56:	bcf0      	pop	{r4, r5, r6, r7}
 8000a58:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000a5c:	f002 0207 	and.w	r2, r2, #7
 8000a60:	b132      	cbz	r2, 8000a70 <memchr+0x70>
 8000a62:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000a66:	3a01      	subs	r2, #1
 8000a68:	ea83 0301 	eor.w	r3, r3, r1
 8000a6c:	b113      	cbz	r3, 8000a74 <memchr+0x74>
 8000a6e:	d1f8      	bne.n	8000a62 <memchr+0x62>
 8000a70:	2000      	movs	r0, #0
 8000a72:	4770      	bx	lr
 8000a74:	3801      	subs	r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	2d00      	cmp	r5, #0
 8000a7a:	bf06      	itte	eq
 8000a7c:	4635      	moveq	r5, r6
 8000a7e:	3803      	subeq	r0, #3
 8000a80:	3807      	subne	r0, #7
 8000a82:	f015 0f01 	tst.w	r5, #1
 8000a86:	d107      	bne.n	8000a98 <memchr+0x98>
 8000a88:	3001      	adds	r0, #1
 8000a8a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8000a8e:	bf02      	ittt	eq
 8000a90:	3001      	addeq	r0, #1
 8000a92:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000a96:	3001      	addeq	r0, #1
 8000a98:	bcf0      	pop	{r4, r5, r6, r7}
 8000a9a:	3801      	subs	r0, #1
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_drsub>:
 8000aa0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000aa4:	e002      	b.n	8000aac <__adddf3>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dsub>:
 8000aa8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000aac <__adddf3>:
 8000aac:	b530      	push	{r4, r5, lr}
 8000aae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000ab2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000ab6:	ea94 0f05 	teq	r4, r5
 8000aba:	bf08      	it	eq
 8000abc:	ea90 0f02 	teqeq	r0, r2
 8000ac0:	bf1f      	itttt	ne
 8000ac2:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000ac6:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000aca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000ace:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000ad2:	f000 80e2 	beq.w	8000c9a <__adddf3+0x1ee>
 8000ad6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000ada:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000ade:	bfb8      	it	lt
 8000ae0:	426d      	neglt	r5, r5
 8000ae2:	dd0c      	ble.n	8000afe <__adddf3+0x52>
 8000ae4:	442c      	add	r4, r5
 8000ae6:	ea80 0202 	eor.w	r2, r0, r2
 8000aea:	ea81 0303 	eor.w	r3, r1, r3
 8000aee:	ea82 0000 	eor.w	r0, r2, r0
 8000af2:	ea83 0101 	eor.w	r1, r3, r1
 8000af6:	ea80 0202 	eor.w	r2, r0, r2
 8000afa:	ea81 0303 	eor.w	r3, r1, r3
 8000afe:	2d36      	cmp	r5, #54	; 0x36
 8000b00:	bf88      	it	hi
 8000b02:	bd30      	pophi	{r4, r5, pc}
 8000b04:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b08:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000b0c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000b10:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000b14:	d002      	beq.n	8000b1c <__adddf3+0x70>
 8000b16:	4240      	negs	r0, r0
 8000b18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b1c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000b20:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000b24:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000b28:	d002      	beq.n	8000b30 <__adddf3+0x84>
 8000b2a:	4252      	negs	r2, r2
 8000b2c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b30:	ea94 0f05 	teq	r4, r5
 8000b34:	f000 80a7 	beq.w	8000c86 <__adddf3+0x1da>
 8000b38:	f1a4 0401 	sub.w	r4, r4, #1
 8000b3c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000b40:	db0d      	blt.n	8000b5e <__adddf3+0xb2>
 8000b42:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000b46:	fa22 f205 	lsr.w	r2, r2, r5
 8000b4a:	1880      	adds	r0, r0, r2
 8000b4c:	f141 0100 	adc.w	r1, r1, #0
 8000b50:	fa03 f20e 	lsl.w	r2, r3, lr
 8000b54:	1880      	adds	r0, r0, r2
 8000b56:	fa43 f305 	asr.w	r3, r3, r5
 8000b5a:	4159      	adcs	r1, r3
 8000b5c:	e00e      	b.n	8000b7c <__adddf3+0xd0>
 8000b5e:	f1a5 0520 	sub.w	r5, r5, #32
 8000b62:	f10e 0e20 	add.w	lr, lr, #32
 8000b66:	2a01      	cmp	r2, #1
 8000b68:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000b6c:	bf28      	it	cs
 8000b6e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000b72:	fa43 f305 	asr.w	r3, r3, r5
 8000b76:	18c0      	adds	r0, r0, r3
 8000b78:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000b7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000b80:	d507      	bpl.n	8000b92 <__adddf3+0xe6>
 8000b82:	f04f 0e00 	mov.w	lr, #0
 8000b86:	f1dc 0c00 	rsbs	ip, ip, #0
 8000b8a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000b8e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000b92:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000b96:	d31b      	bcc.n	8000bd0 <__adddf3+0x124>
 8000b98:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000b9c:	d30c      	bcc.n	8000bb8 <__adddf3+0x10c>
 8000b9e:	0849      	lsrs	r1, r1, #1
 8000ba0:	ea5f 0030 	movs.w	r0, r0, rrx
 8000ba4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000ba8:	f104 0401 	add.w	r4, r4, #1
 8000bac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000bb0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000bb4:	f080 809a 	bcs.w	8000cec <__adddf3+0x240>
 8000bb8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bbc:	bf08      	it	eq
 8000bbe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000bc2:	f150 0000 	adcs.w	r0, r0, #0
 8000bc6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000bca:	ea41 0105 	orr.w	r1, r1, r5
 8000bce:	bd30      	pop	{r4, r5, pc}
 8000bd0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000bd4:	4140      	adcs	r0, r0
 8000bd6:	eb41 0101 	adc.w	r1, r1, r1
 8000bda:	3c01      	subs	r4, #1
 8000bdc:	bf28      	it	cs
 8000bde:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000be2:	d2e9      	bcs.n	8000bb8 <__adddf3+0x10c>
 8000be4:	f091 0f00 	teq	r1, #0
 8000be8:	bf04      	itt	eq
 8000bea:	4601      	moveq	r1, r0
 8000bec:	2000      	moveq	r0, #0
 8000bee:	fab1 f381 	clz	r3, r1
 8000bf2:	bf08      	it	eq
 8000bf4:	3320      	addeq	r3, #32
 8000bf6:	f1a3 030b 	sub.w	r3, r3, #11
 8000bfa:	f1b3 0220 	subs.w	r2, r3, #32
 8000bfe:	da0c      	bge.n	8000c1a <__adddf3+0x16e>
 8000c00:	320c      	adds	r2, #12
 8000c02:	dd08      	ble.n	8000c16 <__adddf3+0x16a>
 8000c04:	f102 0c14 	add.w	ip, r2, #20
 8000c08:	f1c2 020c 	rsb	r2, r2, #12
 8000c0c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000c10:	fa21 f102 	lsr.w	r1, r1, r2
 8000c14:	e00c      	b.n	8000c30 <__adddf3+0x184>
 8000c16:	f102 0214 	add.w	r2, r2, #20
 8000c1a:	bfd8      	it	le
 8000c1c:	f1c2 0c20 	rsble	ip, r2, #32
 8000c20:	fa01 f102 	lsl.w	r1, r1, r2
 8000c24:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c28:	bfdc      	itt	le
 8000c2a:	ea41 010c 	orrle.w	r1, r1, ip
 8000c2e:	4090      	lslle	r0, r2
 8000c30:	1ae4      	subs	r4, r4, r3
 8000c32:	bfa2      	ittt	ge
 8000c34:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000c38:	4329      	orrge	r1, r5
 8000c3a:	bd30      	popge	{r4, r5, pc}
 8000c3c:	ea6f 0404 	mvn.w	r4, r4
 8000c40:	3c1f      	subs	r4, #31
 8000c42:	da1c      	bge.n	8000c7e <__adddf3+0x1d2>
 8000c44:	340c      	adds	r4, #12
 8000c46:	dc0e      	bgt.n	8000c66 <__adddf3+0x1ba>
 8000c48:	f104 0414 	add.w	r4, r4, #20
 8000c4c:	f1c4 0220 	rsb	r2, r4, #32
 8000c50:	fa20 f004 	lsr.w	r0, r0, r4
 8000c54:	fa01 f302 	lsl.w	r3, r1, r2
 8000c58:	ea40 0003 	orr.w	r0, r0, r3
 8000c5c:	fa21 f304 	lsr.w	r3, r1, r4
 8000c60:	ea45 0103 	orr.w	r1, r5, r3
 8000c64:	bd30      	pop	{r4, r5, pc}
 8000c66:	f1c4 040c 	rsb	r4, r4, #12
 8000c6a:	f1c4 0220 	rsb	r2, r4, #32
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	fa01 f304 	lsl.w	r3, r1, r4
 8000c76:	ea40 0003 	orr.w	r0, r0, r3
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	bd30      	pop	{r4, r5, pc}
 8000c7e:	fa21 f004 	lsr.w	r0, r1, r4
 8000c82:	4629      	mov	r1, r5
 8000c84:	bd30      	pop	{r4, r5, pc}
 8000c86:	f094 0f00 	teq	r4, #0
 8000c8a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000c8e:	bf06      	itte	eq
 8000c90:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000c94:	3401      	addeq	r4, #1
 8000c96:	3d01      	subne	r5, #1
 8000c98:	e74e      	b.n	8000b38 <__adddf3+0x8c>
 8000c9a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000c9e:	bf18      	it	ne
 8000ca0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000ca4:	d029      	beq.n	8000cfa <__adddf3+0x24e>
 8000ca6:	ea94 0f05 	teq	r4, r5
 8000caa:	bf08      	it	eq
 8000cac:	ea90 0f02 	teqeq	r0, r2
 8000cb0:	d005      	beq.n	8000cbe <__adddf3+0x212>
 8000cb2:	ea54 0c00 	orrs.w	ip, r4, r0
 8000cb6:	bf04      	itt	eq
 8000cb8:	4619      	moveq	r1, r3
 8000cba:	4610      	moveq	r0, r2
 8000cbc:	bd30      	pop	{r4, r5, pc}
 8000cbe:	ea91 0f03 	teq	r1, r3
 8000cc2:	bf1e      	ittt	ne
 8000cc4:	2100      	movne	r1, #0
 8000cc6:	2000      	movne	r0, #0
 8000cc8:	bd30      	popne	{r4, r5, pc}
 8000cca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000cce:	d105      	bne.n	8000cdc <__adddf3+0x230>
 8000cd0:	0040      	lsls	r0, r0, #1
 8000cd2:	4149      	adcs	r1, r1
 8000cd4:	bf28      	it	cs
 8000cd6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000cda:	bd30      	pop	{r4, r5, pc}
 8000cdc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000ce0:	bf3c      	itt	cc
 8000ce2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000ce6:	bd30      	popcc	{r4, r5, pc}
 8000ce8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000cec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000cf0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000cf4:	f04f 0000 	mov.w	r0, #0
 8000cf8:	bd30      	pop	{r4, r5, pc}
 8000cfa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000cfe:	bf1a      	itte	ne
 8000d00:	4619      	movne	r1, r3
 8000d02:	4610      	movne	r0, r2
 8000d04:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000d08:	bf1c      	itt	ne
 8000d0a:	460b      	movne	r3, r1
 8000d0c:	4602      	movne	r2, r0
 8000d0e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000d12:	bf06      	itte	eq
 8000d14:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000d18:	ea91 0f03 	teqeq	r1, r3
 8000d1c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000d20:	bd30      	pop	{r4, r5, pc}
 8000d22:	bf00      	nop

08000d24 <__aeabi_ui2d>:
 8000d24:	f090 0f00 	teq	r0, #0
 8000d28:	bf04      	itt	eq
 8000d2a:	2100      	moveq	r1, #0
 8000d2c:	4770      	bxeq	lr
 8000d2e:	b530      	push	{r4, r5, lr}
 8000d30:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000d34:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000d38:	f04f 0500 	mov.w	r5, #0
 8000d3c:	f04f 0100 	mov.w	r1, #0
 8000d40:	e750      	b.n	8000be4 <__adddf3+0x138>
 8000d42:	bf00      	nop

08000d44 <__aeabi_i2d>:
 8000d44:	f090 0f00 	teq	r0, #0
 8000d48:	bf04      	itt	eq
 8000d4a:	2100      	moveq	r1, #0
 8000d4c:	4770      	bxeq	lr
 8000d4e:	b530      	push	{r4, r5, lr}
 8000d50:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000d54:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000d58:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000d5c:	bf48      	it	mi
 8000d5e:	4240      	negmi	r0, r0
 8000d60:	f04f 0100 	mov.w	r1, #0
 8000d64:	e73e      	b.n	8000be4 <__adddf3+0x138>
 8000d66:	bf00      	nop

08000d68 <__aeabi_f2d>:
 8000d68:	0042      	lsls	r2, r0, #1
 8000d6a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000d6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d72:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000d76:	bf1f      	itttt	ne
 8000d78:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000d7c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000d80:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000d84:	4770      	bxne	lr
 8000d86:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000d8a:	bf08      	it	eq
 8000d8c:	4770      	bxeq	lr
 8000d8e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000d92:	bf04      	itt	eq
 8000d94:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000d98:	4770      	bxeq	lr
 8000d9a:	b530      	push	{r4, r5, lr}
 8000d9c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000da0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000da4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000da8:	e71c      	b.n	8000be4 <__adddf3+0x138>
 8000daa:	bf00      	nop

08000dac <__aeabi_ul2d>:
 8000dac:	ea50 0201 	orrs.w	r2, r0, r1
 8000db0:	bf08      	it	eq
 8000db2:	4770      	bxeq	lr
 8000db4:	b530      	push	{r4, r5, lr}
 8000db6:	f04f 0500 	mov.w	r5, #0
 8000dba:	e00a      	b.n	8000dd2 <__aeabi_l2d+0x16>

08000dbc <__aeabi_l2d>:
 8000dbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	b530      	push	{r4, r5, lr}
 8000dc6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000dca:	d502      	bpl.n	8000dd2 <__aeabi_l2d+0x16>
 8000dcc:	4240      	negs	r0, r0
 8000dce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dd2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000dd6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000dda:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000dde:	f43f aed8 	beq.w	8000b92 <__adddf3+0xe6>
 8000de2:	f04f 0203 	mov.w	r2, #3
 8000de6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000dea:	bf18      	it	ne
 8000dec:	3203      	addne	r2, #3
 8000dee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000df2:	bf18      	it	ne
 8000df4:	3203      	addne	r2, #3
 8000df6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000dfa:	f1c2 0320 	rsb	r3, r2, #32
 8000dfe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000e02:	fa20 f002 	lsr.w	r0, r0, r2
 8000e06:	fa01 fe03 	lsl.w	lr, r1, r3
 8000e0a:	ea40 000e 	orr.w	r0, r0, lr
 8000e0e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e12:	4414      	add	r4, r2
 8000e14:	e6bd      	b.n	8000b92 <__adddf3+0xe6>
 8000e16:	bf00      	nop

08000e18 <__aeabi_dmul>:
 8000e18:	b570      	push	{r4, r5, r6, lr}
 8000e1a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e1e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000e22:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000e26:	bf1d      	ittte	ne
 8000e28:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000e2c:	ea94 0f0c 	teqne	r4, ip
 8000e30:	ea95 0f0c 	teqne	r5, ip
 8000e34:	f000 f8de 	bleq	8000ff4 <__aeabi_dmul+0x1dc>
 8000e38:	442c      	add	r4, r5
 8000e3a:	ea81 0603 	eor.w	r6, r1, r3
 8000e3e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000e42:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000e46:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000e4a:	bf18      	it	ne
 8000e4c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000e50:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000e54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e58:	d038      	beq.n	8000ecc <__aeabi_dmul+0xb4>
 8000e5a:	fba0 ce02 	umull	ip, lr, r0, r2
 8000e5e:	f04f 0500 	mov.w	r5, #0
 8000e62:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000e66:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000e6a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000e6e:	f04f 0600 	mov.w	r6, #0
 8000e72:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000e76:	f09c 0f00 	teq	ip, #0
 8000e7a:	bf18      	it	ne
 8000e7c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000e80:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000e84:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000e88:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000e8c:	d204      	bcs.n	8000e98 <__aeabi_dmul+0x80>
 8000e8e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000e92:	416d      	adcs	r5, r5
 8000e94:	eb46 0606 	adc.w	r6, r6, r6
 8000e98:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000e9c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000ea0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000ea4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000ea8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000eac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000eb0:	bf88      	it	hi
 8000eb2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000eb6:	d81e      	bhi.n	8000ef6 <__aeabi_dmul+0xde>
 8000eb8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000ebc:	bf08      	it	eq
 8000ebe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000ec2:	f150 0000 	adcs.w	r0, r0, #0
 8000ec6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000eca:	bd70      	pop	{r4, r5, r6, pc}
 8000ecc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000ed0:	ea46 0101 	orr.w	r1, r6, r1
 8000ed4:	ea40 0002 	orr.w	r0, r0, r2
 8000ed8:	ea81 0103 	eor.w	r1, r1, r3
 8000edc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000ee0:	bfc2      	ittt	gt
 8000ee2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ee6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000eea:	bd70      	popgt	{r4, r5, r6, pc}
 8000eec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ef0:	f04f 0e00 	mov.w	lr, #0
 8000ef4:	3c01      	subs	r4, #1
 8000ef6:	f300 80ab 	bgt.w	8001050 <__aeabi_dmul+0x238>
 8000efa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000efe:	bfde      	ittt	le
 8000f00:	2000      	movle	r0, #0
 8000f02:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000f06:	bd70      	pople	{r4, r5, r6, pc}
 8000f08:	f1c4 0400 	rsb	r4, r4, #0
 8000f0c:	3c20      	subs	r4, #32
 8000f0e:	da35      	bge.n	8000f7c <__aeabi_dmul+0x164>
 8000f10:	340c      	adds	r4, #12
 8000f12:	dc1b      	bgt.n	8000f4c <__aeabi_dmul+0x134>
 8000f14:	f104 0414 	add.w	r4, r4, #20
 8000f18:	f1c4 0520 	rsb	r5, r4, #32
 8000f1c:	fa00 f305 	lsl.w	r3, r0, r5
 8000f20:	fa20 f004 	lsr.w	r0, r0, r4
 8000f24:	fa01 f205 	lsl.w	r2, r1, r5
 8000f28:	ea40 0002 	orr.w	r0, r0, r2
 8000f2c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000f30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000f34:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000f38:	fa21 f604 	lsr.w	r6, r1, r4
 8000f3c:	eb42 0106 	adc.w	r1, r2, r6
 8000f40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000f44:	bf08      	it	eq
 8000f46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000f4a:	bd70      	pop	{r4, r5, r6, pc}
 8000f4c:	f1c4 040c 	rsb	r4, r4, #12
 8000f50:	f1c4 0520 	rsb	r5, r4, #32
 8000f54:	fa00 f304 	lsl.w	r3, r0, r4
 8000f58:	fa20 f005 	lsr.w	r0, r0, r5
 8000f5c:	fa01 f204 	lsl.w	r2, r1, r4
 8000f60:	ea40 0002 	orr.w	r0, r0, r2
 8000f64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000f68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000f6c:	f141 0100 	adc.w	r1, r1, #0
 8000f70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000f74:	bf08      	it	eq
 8000f76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000f7a:	bd70      	pop	{r4, r5, r6, pc}
 8000f7c:	f1c4 0520 	rsb	r5, r4, #32
 8000f80:	fa00 f205 	lsl.w	r2, r0, r5
 8000f84:	ea4e 0e02 	orr.w	lr, lr, r2
 8000f88:	fa20 f304 	lsr.w	r3, r0, r4
 8000f8c:	fa01 f205 	lsl.w	r2, r1, r5
 8000f90:	ea43 0302 	orr.w	r3, r3, r2
 8000f94:	fa21 f004 	lsr.w	r0, r1, r4
 8000f98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000f9c:	fa21 f204 	lsr.w	r2, r1, r4
 8000fa0:	ea20 0002 	bic.w	r0, r0, r2
 8000fa4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000fa8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000fac:	bf08      	it	eq
 8000fae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000fb2:	bd70      	pop	{r4, r5, r6, pc}
 8000fb4:	f094 0f00 	teq	r4, #0
 8000fb8:	d10f      	bne.n	8000fda <__aeabi_dmul+0x1c2>
 8000fba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000fbe:	0040      	lsls	r0, r0, #1
 8000fc0:	eb41 0101 	adc.w	r1, r1, r1
 8000fc4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000fc8:	bf08      	it	eq
 8000fca:	3c01      	subeq	r4, #1
 8000fcc:	d0f7      	beq.n	8000fbe <__aeabi_dmul+0x1a6>
 8000fce:	ea41 0106 	orr.w	r1, r1, r6
 8000fd2:	f095 0f00 	teq	r5, #0
 8000fd6:	bf18      	it	ne
 8000fd8:	4770      	bxne	lr
 8000fda:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000fde:	0052      	lsls	r2, r2, #1
 8000fe0:	eb43 0303 	adc.w	r3, r3, r3
 8000fe4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000fe8:	bf08      	it	eq
 8000fea:	3d01      	subeq	r5, #1
 8000fec:	d0f7      	beq.n	8000fde <__aeabi_dmul+0x1c6>
 8000fee:	ea43 0306 	orr.w	r3, r3, r6
 8000ff2:	4770      	bx	lr
 8000ff4:	ea94 0f0c 	teq	r4, ip
 8000ff8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ffc:	bf18      	it	ne
 8000ffe:	ea95 0f0c 	teqne	r5, ip
 8001002:	d00c      	beq.n	800101e <__aeabi_dmul+0x206>
 8001004:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001008:	bf18      	it	ne
 800100a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800100e:	d1d1      	bne.n	8000fb4 <__aeabi_dmul+0x19c>
 8001010:	ea81 0103 	eor.w	r1, r1, r3
 8001014:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001018:	f04f 0000 	mov.w	r0, #0
 800101c:	bd70      	pop	{r4, r5, r6, pc}
 800101e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001022:	bf06      	itte	eq
 8001024:	4610      	moveq	r0, r2
 8001026:	4619      	moveq	r1, r3
 8001028:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800102c:	d019      	beq.n	8001062 <__aeabi_dmul+0x24a>
 800102e:	ea94 0f0c 	teq	r4, ip
 8001032:	d102      	bne.n	800103a <__aeabi_dmul+0x222>
 8001034:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8001038:	d113      	bne.n	8001062 <__aeabi_dmul+0x24a>
 800103a:	ea95 0f0c 	teq	r5, ip
 800103e:	d105      	bne.n	800104c <__aeabi_dmul+0x234>
 8001040:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8001044:	bf1c      	itt	ne
 8001046:	4610      	movne	r0, r2
 8001048:	4619      	movne	r1, r3
 800104a:	d10a      	bne.n	8001062 <__aeabi_dmul+0x24a>
 800104c:	ea81 0103 	eor.w	r1, r1, r3
 8001050:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001054:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8001058:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	bd70      	pop	{r4, r5, r6, pc}
 8001062:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8001066:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800106a:	bd70      	pop	{r4, r5, r6, pc}

0800106c <__aeabi_ddiv>:
 800106c:	b570      	push	{r4, r5, r6, lr}
 800106e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001072:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8001076:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800107a:	bf1d      	ittte	ne
 800107c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8001080:	ea94 0f0c 	teqne	r4, ip
 8001084:	ea95 0f0c 	teqne	r5, ip
 8001088:	f000 f8a7 	bleq	80011da <__aeabi_ddiv+0x16e>
 800108c:	eba4 0405 	sub.w	r4, r4, r5
 8001090:	ea81 0e03 	eor.w	lr, r1, r3
 8001094:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8001098:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800109c:	f000 8088 	beq.w	80011b0 <__aeabi_ddiv+0x144>
 80010a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80010a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80010a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80010ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80010b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80010b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80010b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80010bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80010c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80010c4:	429d      	cmp	r5, r3
 80010c6:	bf08      	it	eq
 80010c8:	4296      	cmpeq	r6, r2
 80010ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80010ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80010d2:	d202      	bcs.n	80010da <__aeabi_ddiv+0x6e>
 80010d4:	085b      	lsrs	r3, r3, #1
 80010d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80010da:	1ab6      	subs	r6, r6, r2
 80010dc:	eb65 0503 	sbc.w	r5, r5, r3
 80010e0:	085b      	lsrs	r3, r3, #1
 80010e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80010e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80010ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80010ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80010f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80010f6:	bf22      	ittt	cs
 80010f8:	1ab6      	subcs	r6, r6, r2
 80010fa:	4675      	movcs	r5, lr
 80010fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8001100:	085b      	lsrs	r3, r3, #1
 8001102:	ea4f 0232 	mov.w	r2, r2, rrx
 8001106:	ebb6 0e02 	subs.w	lr, r6, r2
 800110a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800110e:	bf22      	ittt	cs
 8001110:	1ab6      	subcs	r6, r6, r2
 8001112:	4675      	movcs	r5, lr
 8001114:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001118:	085b      	lsrs	r3, r3, #1
 800111a:	ea4f 0232 	mov.w	r2, r2, rrx
 800111e:	ebb6 0e02 	subs.w	lr, r6, r2
 8001122:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001126:	bf22      	ittt	cs
 8001128:	1ab6      	subcs	r6, r6, r2
 800112a:	4675      	movcs	r5, lr
 800112c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001130:	085b      	lsrs	r3, r3, #1
 8001132:	ea4f 0232 	mov.w	r2, r2, rrx
 8001136:	ebb6 0e02 	subs.w	lr, r6, r2
 800113a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800113e:	bf22      	ittt	cs
 8001140:	1ab6      	subcs	r6, r6, r2
 8001142:	4675      	movcs	r5, lr
 8001144:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001148:	ea55 0e06 	orrs.w	lr, r5, r6
 800114c:	d018      	beq.n	8001180 <__aeabi_ddiv+0x114>
 800114e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8001152:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8001156:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800115a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800115e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8001162:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8001166:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800116a:	d1c0      	bne.n	80010ee <__aeabi_ddiv+0x82>
 800116c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001170:	d10b      	bne.n	800118a <__aeabi_ddiv+0x11e>
 8001172:	ea41 0100 	orr.w	r1, r1, r0
 8001176:	f04f 0000 	mov.w	r0, #0
 800117a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800117e:	e7b6      	b.n	80010ee <__aeabi_ddiv+0x82>
 8001180:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001184:	bf04      	itt	eq
 8001186:	4301      	orreq	r1, r0
 8001188:	2000      	moveq	r0, #0
 800118a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800118e:	bf88      	it	hi
 8001190:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8001194:	f63f aeaf 	bhi.w	8000ef6 <__aeabi_dmul+0xde>
 8001198:	ebb5 0c03 	subs.w	ip, r5, r3
 800119c:	bf04      	itt	eq
 800119e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80011a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80011a6:	f150 0000 	adcs.w	r0, r0, #0
 80011aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80011ae:	bd70      	pop	{r4, r5, r6, pc}
 80011b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80011b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80011b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80011bc:	bfc2      	ittt	gt
 80011be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80011c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80011c6:	bd70      	popgt	{r4, r5, r6, pc}
 80011c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80011cc:	f04f 0e00 	mov.w	lr, #0
 80011d0:	3c01      	subs	r4, #1
 80011d2:	e690      	b.n	8000ef6 <__aeabi_dmul+0xde>
 80011d4:	ea45 0e06 	orr.w	lr, r5, r6
 80011d8:	e68d      	b.n	8000ef6 <__aeabi_dmul+0xde>
 80011da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80011de:	ea94 0f0c 	teq	r4, ip
 80011e2:	bf08      	it	eq
 80011e4:	ea95 0f0c 	teqeq	r5, ip
 80011e8:	f43f af3b 	beq.w	8001062 <__aeabi_dmul+0x24a>
 80011ec:	ea94 0f0c 	teq	r4, ip
 80011f0:	d10a      	bne.n	8001208 <__aeabi_ddiv+0x19c>
 80011f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80011f6:	f47f af34 	bne.w	8001062 <__aeabi_dmul+0x24a>
 80011fa:	ea95 0f0c 	teq	r5, ip
 80011fe:	f47f af25 	bne.w	800104c <__aeabi_dmul+0x234>
 8001202:	4610      	mov	r0, r2
 8001204:	4619      	mov	r1, r3
 8001206:	e72c      	b.n	8001062 <__aeabi_dmul+0x24a>
 8001208:	ea95 0f0c 	teq	r5, ip
 800120c:	d106      	bne.n	800121c <__aeabi_ddiv+0x1b0>
 800120e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8001212:	f43f aefd 	beq.w	8001010 <__aeabi_dmul+0x1f8>
 8001216:	4610      	mov	r0, r2
 8001218:	4619      	mov	r1, r3
 800121a:	e722      	b.n	8001062 <__aeabi_dmul+0x24a>
 800121c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001220:	bf18      	it	ne
 8001222:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8001226:	f47f aec5 	bne.w	8000fb4 <__aeabi_dmul+0x19c>
 800122a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800122e:	f47f af0d 	bne.w	800104c <__aeabi_dmul+0x234>
 8001232:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8001236:	f47f aeeb 	bne.w	8001010 <__aeabi_dmul+0x1f8>
 800123a:	e712      	b.n	8001062 <__aeabi_dmul+0x24a>

0800123c <__gedf2>:
 800123c:	f04f 3cff 	mov.w	ip, #4294967295
 8001240:	e006      	b.n	8001250 <__cmpdf2+0x4>
 8001242:	bf00      	nop

08001244 <__ledf2>:
 8001244:	f04f 0c01 	mov.w	ip, #1
 8001248:	e002      	b.n	8001250 <__cmpdf2+0x4>
 800124a:	bf00      	nop

0800124c <__cmpdf2>:
 800124c:	f04f 0c01 	mov.w	ip, #1
 8001250:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001254:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8001258:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800125c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001260:	bf18      	it	ne
 8001262:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8001266:	d01b      	beq.n	80012a0 <__cmpdf2+0x54>
 8001268:	b001      	add	sp, #4
 800126a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800126e:	bf0c      	ite	eq
 8001270:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8001274:	ea91 0f03 	teqne	r1, r3
 8001278:	bf02      	ittt	eq
 800127a:	ea90 0f02 	teqeq	r0, r2
 800127e:	2000      	moveq	r0, #0
 8001280:	4770      	bxeq	lr
 8001282:	f110 0f00 	cmn.w	r0, #0
 8001286:	ea91 0f03 	teq	r1, r3
 800128a:	bf58      	it	pl
 800128c:	4299      	cmppl	r1, r3
 800128e:	bf08      	it	eq
 8001290:	4290      	cmpeq	r0, r2
 8001292:	bf2c      	ite	cs
 8001294:	17d8      	asrcs	r0, r3, #31
 8001296:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800129a:	f040 0001 	orr.w	r0, r0, #1
 800129e:	4770      	bx	lr
 80012a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80012a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80012a8:	d102      	bne.n	80012b0 <__cmpdf2+0x64>
 80012aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80012ae:	d107      	bne.n	80012c0 <__cmpdf2+0x74>
 80012b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80012b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80012b8:	d1d6      	bne.n	8001268 <__cmpdf2+0x1c>
 80012ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80012be:	d0d3      	beq.n	8001268 <__cmpdf2+0x1c>
 80012c0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop

080012c8 <__aeabi_cdrcmple>:
 80012c8:	4684      	mov	ip, r0
 80012ca:	4610      	mov	r0, r2
 80012cc:	4662      	mov	r2, ip
 80012ce:	468c      	mov	ip, r1
 80012d0:	4619      	mov	r1, r3
 80012d2:	4663      	mov	r3, ip
 80012d4:	e000      	b.n	80012d8 <__aeabi_cdcmpeq>
 80012d6:	bf00      	nop

080012d8 <__aeabi_cdcmpeq>:
 80012d8:	b501      	push	{r0, lr}
 80012da:	f7ff ffb7 	bl	800124c <__cmpdf2>
 80012de:	2800      	cmp	r0, #0
 80012e0:	bf48      	it	mi
 80012e2:	f110 0f00 	cmnmi.w	r0, #0
 80012e6:	bd01      	pop	{r0, pc}

080012e8 <__aeabi_dcmpeq>:
 80012e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80012ec:	f7ff fff4 	bl	80012d8 <__aeabi_cdcmpeq>
 80012f0:	bf0c      	ite	eq
 80012f2:	2001      	moveq	r0, #1
 80012f4:	2000      	movne	r0, #0
 80012f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80012fa:	bf00      	nop

080012fc <__aeabi_dcmplt>:
 80012fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001300:	f7ff ffea 	bl	80012d8 <__aeabi_cdcmpeq>
 8001304:	bf34      	ite	cc
 8001306:	2001      	movcc	r0, #1
 8001308:	2000      	movcs	r0, #0
 800130a:	f85d fb08 	ldr.w	pc, [sp], #8
 800130e:	bf00      	nop

08001310 <__aeabi_dcmple>:
 8001310:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001314:	f7ff ffe0 	bl	80012d8 <__aeabi_cdcmpeq>
 8001318:	bf94      	ite	ls
 800131a:	2001      	movls	r0, #1
 800131c:	2000      	movhi	r0, #0
 800131e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001322:	bf00      	nop

08001324 <__aeabi_dcmpge>:
 8001324:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001328:	f7ff ffce 	bl	80012c8 <__aeabi_cdrcmple>
 800132c:	bf94      	ite	ls
 800132e:	2001      	movls	r0, #1
 8001330:	2000      	movhi	r0, #0
 8001332:	f85d fb08 	ldr.w	pc, [sp], #8
 8001336:	bf00      	nop

08001338 <__aeabi_dcmpgt>:
 8001338:	f84d ed08 	str.w	lr, [sp, #-8]!
 800133c:	f7ff ffc4 	bl	80012c8 <__aeabi_cdrcmple>
 8001340:	bf34      	ite	cc
 8001342:	2001      	movcc	r0, #1
 8001344:	2000      	movcs	r0, #0
 8001346:	f85d fb08 	ldr.w	pc, [sp], #8
 800134a:	bf00      	nop

0800134c <__aeabi_dcmpun>:
 800134c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8001350:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001354:	d102      	bne.n	800135c <__aeabi_dcmpun+0x10>
 8001356:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800135a:	d10a      	bne.n	8001372 <__aeabi_dcmpun+0x26>
 800135c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001360:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001364:	d102      	bne.n	800136c <__aeabi_dcmpun+0x20>
 8001366:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800136a:	d102      	bne.n	8001372 <__aeabi_dcmpun+0x26>
 800136c:	f04f 0000 	mov.w	r0, #0
 8001370:	4770      	bx	lr
 8001372:	f04f 0001 	mov.w	r0, #1
 8001376:	4770      	bx	lr

08001378 <__aeabi_d2iz>:
 8001378:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800137c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001380:	d215      	bcs.n	80013ae <__aeabi_d2iz+0x36>
 8001382:	d511      	bpl.n	80013a8 <__aeabi_d2iz+0x30>
 8001384:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001388:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800138c:	d912      	bls.n	80013b4 <__aeabi_d2iz+0x3c>
 800138e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8001392:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001396:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800139a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800139e:	fa23 f002 	lsr.w	r0, r3, r2
 80013a2:	bf18      	it	ne
 80013a4:	4240      	negne	r0, r0
 80013a6:	4770      	bx	lr
 80013a8:	f04f 0000 	mov.w	r0, #0
 80013ac:	4770      	bx	lr
 80013ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80013b2:	d105      	bne.n	80013c0 <__aeabi_d2iz+0x48>
 80013b4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80013b8:	bf08      	it	eq
 80013ba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80013be:	4770      	bx	lr
 80013c0:	f04f 0000 	mov.w	r0, #0
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop

080013c8 <__aeabi_d2uiz>:
 80013c8:	004a      	lsls	r2, r1, #1
 80013ca:	d211      	bcs.n	80013f0 <__aeabi_d2uiz+0x28>
 80013cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80013d0:	d211      	bcs.n	80013f6 <__aeabi_d2uiz+0x2e>
 80013d2:	d50d      	bpl.n	80013f0 <__aeabi_d2uiz+0x28>
 80013d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80013d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80013dc:	d40e      	bmi.n	80013fc <__aeabi_d2uiz+0x34>
 80013de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80013e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80013e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80013ea:	fa23 f002 	lsr.w	r0, r3, r2
 80013ee:	4770      	bx	lr
 80013f0:	f04f 0000 	mov.w	r0, #0
 80013f4:	4770      	bx	lr
 80013f6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80013fa:	d102      	bne.n	8001402 <__aeabi_d2uiz+0x3a>
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	4770      	bx	lr
 8001402:	f04f 0000 	mov.w	r0, #0
 8001406:	4770      	bx	lr

08001408 <__aeabi_d2f>:
 8001408:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800140c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8001410:	bf24      	itt	cs
 8001412:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8001416:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800141a:	d90d      	bls.n	8001438 <__aeabi_d2f+0x30>
 800141c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001420:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8001424:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8001428:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800142c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8001430:	bf08      	it	eq
 8001432:	f020 0001 	biceq.w	r0, r0, #1
 8001436:	4770      	bx	lr
 8001438:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800143c:	d121      	bne.n	8001482 <__aeabi_d2f+0x7a>
 800143e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8001442:	bfbc      	itt	lt
 8001444:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8001448:	4770      	bxlt	lr
 800144a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800144e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8001452:	f1c2 0218 	rsb	r2, r2, #24
 8001456:	f1c2 0c20 	rsb	ip, r2, #32
 800145a:	fa10 f30c 	lsls.w	r3, r0, ip
 800145e:	fa20 f002 	lsr.w	r0, r0, r2
 8001462:	bf18      	it	ne
 8001464:	f040 0001 	orrne.w	r0, r0, #1
 8001468:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800146c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8001470:	fa03 fc0c 	lsl.w	ip, r3, ip
 8001474:	ea40 000c 	orr.w	r0, r0, ip
 8001478:	fa23 f302 	lsr.w	r3, r3, r2
 800147c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001480:	e7cc      	b.n	800141c <__aeabi_d2f+0x14>
 8001482:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8001486:	d107      	bne.n	8001498 <__aeabi_d2f+0x90>
 8001488:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800148c:	bf1e      	ittt	ne
 800148e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8001492:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8001496:	4770      	bxne	lr
 8001498:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800149c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80014a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop

080014a8 <__aeabi_uldivmod>:
 80014a8:	b953      	cbnz	r3, 80014c0 <__aeabi_uldivmod+0x18>
 80014aa:	b94a      	cbnz	r2, 80014c0 <__aeabi_uldivmod+0x18>
 80014ac:	2900      	cmp	r1, #0
 80014ae:	bf08      	it	eq
 80014b0:	2800      	cmpeq	r0, #0
 80014b2:	bf1c      	itt	ne
 80014b4:	f04f 31ff 	movne.w	r1, #4294967295
 80014b8:	f04f 30ff 	movne.w	r0, #4294967295
 80014bc:	f000 b9a4 	b.w	8001808 <__aeabi_idiv0>
 80014c0:	f1ad 0c08 	sub.w	ip, sp, #8
 80014c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80014c8:	f000 f83c 	bl	8001544 <__udivmoddi4>
 80014cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80014d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80014d4:	b004      	add	sp, #16
 80014d6:	4770      	bx	lr

080014d8 <__aeabi_d2lz>:
 80014d8:	b538      	push	{r3, r4, r5, lr}
 80014da:	2200      	movs	r2, #0
 80014dc:	2300      	movs	r3, #0
 80014de:	4604      	mov	r4, r0
 80014e0:	460d      	mov	r5, r1
 80014e2:	f7ff ff0b 	bl	80012fc <__aeabi_dcmplt>
 80014e6:	b928      	cbnz	r0, 80014f4 <__aeabi_d2lz+0x1c>
 80014e8:	4620      	mov	r0, r4
 80014ea:	4629      	mov	r1, r5
 80014ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80014f0:	f000 b80a 	b.w	8001508 <__aeabi_d2ulz>
 80014f4:	4620      	mov	r0, r4
 80014f6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 80014fa:	f000 f805 	bl	8001508 <__aeabi_d2ulz>
 80014fe:	4240      	negs	r0, r0
 8001500:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001504:	bd38      	pop	{r3, r4, r5, pc}
 8001506:	bf00      	nop

08001508 <__aeabi_d2ulz>:
 8001508:	b5d0      	push	{r4, r6, r7, lr}
 800150a:	4b0c      	ldr	r3, [pc, #48]	; (800153c <__aeabi_d2ulz+0x34>)
 800150c:	2200      	movs	r2, #0
 800150e:	4606      	mov	r6, r0
 8001510:	460f      	mov	r7, r1
 8001512:	f7ff fc81 	bl	8000e18 <__aeabi_dmul>
 8001516:	f7ff ff57 	bl	80013c8 <__aeabi_d2uiz>
 800151a:	4604      	mov	r4, r0
 800151c:	f7ff fc02 	bl	8000d24 <__aeabi_ui2d>
 8001520:	4b07      	ldr	r3, [pc, #28]	; (8001540 <__aeabi_d2ulz+0x38>)
 8001522:	2200      	movs	r2, #0
 8001524:	f7ff fc78 	bl	8000e18 <__aeabi_dmul>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4630      	mov	r0, r6
 800152e:	4639      	mov	r1, r7
 8001530:	f7ff faba 	bl	8000aa8 <__aeabi_dsub>
 8001534:	f7ff ff48 	bl	80013c8 <__aeabi_d2uiz>
 8001538:	4621      	mov	r1, r4
 800153a:	bdd0      	pop	{r4, r6, r7, pc}
 800153c:	3df00000 	.word	0x3df00000
 8001540:	41f00000 	.word	0x41f00000

08001544 <__udivmoddi4>:
 8001544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001548:	9d08      	ldr	r5, [sp, #32]
 800154a:	4604      	mov	r4, r0
 800154c:	468c      	mov	ip, r1
 800154e:	2b00      	cmp	r3, #0
 8001550:	f040 8083 	bne.w	800165a <__udivmoddi4+0x116>
 8001554:	428a      	cmp	r2, r1
 8001556:	4617      	mov	r7, r2
 8001558:	d947      	bls.n	80015ea <__udivmoddi4+0xa6>
 800155a:	fab2 f282 	clz	r2, r2
 800155e:	b142      	cbz	r2, 8001572 <__udivmoddi4+0x2e>
 8001560:	f1c2 0020 	rsb	r0, r2, #32
 8001564:	fa24 f000 	lsr.w	r0, r4, r0
 8001568:	4091      	lsls	r1, r2
 800156a:	4097      	lsls	r7, r2
 800156c:	ea40 0c01 	orr.w	ip, r0, r1
 8001570:	4094      	lsls	r4, r2
 8001572:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001576:	0c23      	lsrs	r3, r4, #16
 8001578:	fbbc f6f8 	udiv	r6, ip, r8
 800157c:	fa1f fe87 	uxth.w	lr, r7
 8001580:	fb08 c116 	mls	r1, r8, r6, ip
 8001584:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001588:	fb06 f10e 	mul.w	r1, r6, lr
 800158c:	4299      	cmp	r1, r3
 800158e:	d909      	bls.n	80015a4 <__udivmoddi4+0x60>
 8001590:	18fb      	adds	r3, r7, r3
 8001592:	f106 30ff 	add.w	r0, r6, #4294967295
 8001596:	f080 8119 	bcs.w	80017cc <__udivmoddi4+0x288>
 800159a:	4299      	cmp	r1, r3
 800159c:	f240 8116 	bls.w	80017cc <__udivmoddi4+0x288>
 80015a0:	3e02      	subs	r6, #2
 80015a2:	443b      	add	r3, r7
 80015a4:	1a5b      	subs	r3, r3, r1
 80015a6:	b2a4      	uxth	r4, r4
 80015a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80015ac:	fb08 3310 	mls	r3, r8, r0, r3
 80015b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80015b4:	fb00 fe0e 	mul.w	lr, r0, lr
 80015b8:	45a6      	cmp	lr, r4
 80015ba:	d909      	bls.n	80015d0 <__udivmoddi4+0x8c>
 80015bc:	193c      	adds	r4, r7, r4
 80015be:	f100 33ff 	add.w	r3, r0, #4294967295
 80015c2:	f080 8105 	bcs.w	80017d0 <__udivmoddi4+0x28c>
 80015c6:	45a6      	cmp	lr, r4
 80015c8:	f240 8102 	bls.w	80017d0 <__udivmoddi4+0x28c>
 80015cc:	3802      	subs	r0, #2
 80015ce:	443c      	add	r4, r7
 80015d0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80015d4:	eba4 040e 	sub.w	r4, r4, lr
 80015d8:	2600      	movs	r6, #0
 80015da:	b11d      	cbz	r5, 80015e4 <__udivmoddi4+0xa0>
 80015dc:	40d4      	lsrs	r4, r2
 80015de:	2300      	movs	r3, #0
 80015e0:	e9c5 4300 	strd	r4, r3, [r5]
 80015e4:	4631      	mov	r1, r6
 80015e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015ea:	b902      	cbnz	r2, 80015ee <__udivmoddi4+0xaa>
 80015ec:	deff      	udf	#255	; 0xff
 80015ee:	fab2 f282 	clz	r2, r2
 80015f2:	2a00      	cmp	r2, #0
 80015f4:	d150      	bne.n	8001698 <__udivmoddi4+0x154>
 80015f6:	1bcb      	subs	r3, r1, r7
 80015f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80015fc:	fa1f f887 	uxth.w	r8, r7
 8001600:	2601      	movs	r6, #1
 8001602:	fbb3 fcfe 	udiv	ip, r3, lr
 8001606:	0c21      	lsrs	r1, r4, #16
 8001608:	fb0e 331c 	mls	r3, lr, ip, r3
 800160c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001610:	fb08 f30c 	mul.w	r3, r8, ip
 8001614:	428b      	cmp	r3, r1
 8001616:	d907      	bls.n	8001628 <__udivmoddi4+0xe4>
 8001618:	1879      	adds	r1, r7, r1
 800161a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800161e:	d202      	bcs.n	8001626 <__udivmoddi4+0xe2>
 8001620:	428b      	cmp	r3, r1
 8001622:	f200 80e9 	bhi.w	80017f8 <__udivmoddi4+0x2b4>
 8001626:	4684      	mov	ip, r0
 8001628:	1ac9      	subs	r1, r1, r3
 800162a:	b2a3      	uxth	r3, r4
 800162c:	fbb1 f0fe 	udiv	r0, r1, lr
 8001630:	fb0e 1110 	mls	r1, lr, r0, r1
 8001634:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8001638:	fb08 f800 	mul.w	r8, r8, r0
 800163c:	45a0      	cmp	r8, r4
 800163e:	d907      	bls.n	8001650 <__udivmoddi4+0x10c>
 8001640:	193c      	adds	r4, r7, r4
 8001642:	f100 33ff 	add.w	r3, r0, #4294967295
 8001646:	d202      	bcs.n	800164e <__udivmoddi4+0x10a>
 8001648:	45a0      	cmp	r8, r4
 800164a:	f200 80d9 	bhi.w	8001800 <__udivmoddi4+0x2bc>
 800164e:	4618      	mov	r0, r3
 8001650:	eba4 0408 	sub.w	r4, r4, r8
 8001654:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001658:	e7bf      	b.n	80015da <__udivmoddi4+0x96>
 800165a:	428b      	cmp	r3, r1
 800165c:	d909      	bls.n	8001672 <__udivmoddi4+0x12e>
 800165e:	2d00      	cmp	r5, #0
 8001660:	f000 80b1 	beq.w	80017c6 <__udivmoddi4+0x282>
 8001664:	2600      	movs	r6, #0
 8001666:	e9c5 0100 	strd	r0, r1, [r5]
 800166a:	4630      	mov	r0, r6
 800166c:	4631      	mov	r1, r6
 800166e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001672:	fab3 f683 	clz	r6, r3
 8001676:	2e00      	cmp	r6, #0
 8001678:	d14a      	bne.n	8001710 <__udivmoddi4+0x1cc>
 800167a:	428b      	cmp	r3, r1
 800167c:	d302      	bcc.n	8001684 <__udivmoddi4+0x140>
 800167e:	4282      	cmp	r2, r0
 8001680:	f200 80b8 	bhi.w	80017f4 <__udivmoddi4+0x2b0>
 8001684:	1a84      	subs	r4, r0, r2
 8001686:	eb61 0103 	sbc.w	r1, r1, r3
 800168a:	2001      	movs	r0, #1
 800168c:	468c      	mov	ip, r1
 800168e:	2d00      	cmp	r5, #0
 8001690:	d0a8      	beq.n	80015e4 <__udivmoddi4+0xa0>
 8001692:	e9c5 4c00 	strd	r4, ip, [r5]
 8001696:	e7a5      	b.n	80015e4 <__udivmoddi4+0xa0>
 8001698:	f1c2 0320 	rsb	r3, r2, #32
 800169c:	fa20 f603 	lsr.w	r6, r0, r3
 80016a0:	4097      	lsls	r7, r2
 80016a2:	fa01 f002 	lsl.w	r0, r1, r2
 80016a6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80016aa:	40d9      	lsrs	r1, r3
 80016ac:	4330      	orrs	r0, r6
 80016ae:	0c03      	lsrs	r3, r0, #16
 80016b0:	fbb1 f6fe 	udiv	r6, r1, lr
 80016b4:	fa1f f887 	uxth.w	r8, r7
 80016b8:	fb0e 1116 	mls	r1, lr, r6, r1
 80016bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80016c0:	fb06 f108 	mul.w	r1, r6, r8
 80016c4:	4299      	cmp	r1, r3
 80016c6:	fa04 f402 	lsl.w	r4, r4, r2
 80016ca:	d909      	bls.n	80016e0 <__udivmoddi4+0x19c>
 80016cc:	18fb      	adds	r3, r7, r3
 80016ce:	f106 3cff 	add.w	ip, r6, #4294967295
 80016d2:	f080 808d 	bcs.w	80017f0 <__udivmoddi4+0x2ac>
 80016d6:	4299      	cmp	r1, r3
 80016d8:	f240 808a 	bls.w	80017f0 <__udivmoddi4+0x2ac>
 80016dc:	3e02      	subs	r6, #2
 80016de:	443b      	add	r3, r7
 80016e0:	1a5b      	subs	r3, r3, r1
 80016e2:	b281      	uxth	r1, r0
 80016e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80016e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80016ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80016f0:	fb00 f308 	mul.w	r3, r0, r8
 80016f4:	428b      	cmp	r3, r1
 80016f6:	d907      	bls.n	8001708 <__udivmoddi4+0x1c4>
 80016f8:	1879      	adds	r1, r7, r1
 80016fa:	f100 3cff 	add.w	ip, r0, #4294967295
 80016fe:	d273      	bcs.n	80017e8 <__udivmoddi4+0x2a4>
 8001700:	428b      	cmp	r3, r1
 8001702:	d971      	bls.n	80017e8 <__udivmoddi4+0x2a4>
 8001704:	3802      	subs	r0, #2
 8001706:	4439      	add	r1, r7
 8001708:	1acb      	subs	r3, r1, r3
 800170a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800170e:	e778      	b.n	8001602 <__udivmoddi4+0xbe>
 8001710:	f1c6 0c20 	rsb	ip, r6, #32
 8001714:	fa03 f406 	lsl.w	r4, r3, r6
 8001718:	fa22 f30c 	lsr.w	r3, r2, ip
 800171c:	431c      	orrs	r4, r3
 800171e:	fa20 f70c 	lsr.w	r7, r0, ip
 8001722:	fa01 f306 	lsl.w	r3, r1, r6
 8001726:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800172a:	fa21 f10c 	lsr.w	r1, r1, ip
 800172e:	431f      	orrs	r7, r3
 8001730:	0c3b      	lsrs	r3, r7, #16
 8001732:	fbb1 f9fe 	udiv	r9, r1, lr
 8001736:	fa1f f884 	uxth.w	r8, r4
 800173a:	fb0e 1119 	mls	r1, lr, r9, r1
 800173e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001742:	fb09 fa08 	mul.w	sl, r9, r8
 8001746:	458a      	cmp	sl, r1
 8001748:	fa02 f206 	lsl.w	r2, r2, r6
 800174c:	fa00 f306 	lsl.w	r3, r0, r6
 8001750:	d908      	bls.n	8001764 <__udivmoddi4+0x220>
 8001752:	1861      	adds	r1, r4, r1
 8001754:	f109 30ff 	add.w	r0, r9, #4294967295
 8001758:	d248      	bcs.n	80017ec <__udivmoddi4+0x2a8>
 800175a:	458a      	cmp	sl, r1
 800175c:	d946      	bls.n	80017ec <__udivmoddi4+0x2a8>
 800175e:	f1a9 0902 	sub.w	r9, r9, #2
 8001762:	4421      	add	r1, r4
 8001764:	eba1 010a 	sub.w	r1, r1, sl
 8001768:	b2bf      	uxth	r7, r7
 800176a:	fbb1 f0fe 	udiv	r0, r1, lr
 800176e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001772:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001776:	fb00 f808 	mul.w	r8, r0, r8
 800177a:	45b8      	cmp	r8, r7
 800177c:	d907      	bls.n	800178e <__udivmoddi4+0x24a>
 800177e:	19e7      	adds	r7, r4, r7
 8001780:	f100 31ff 	add.w	r1, r0, #4294967295
 8001784:	d22e      	bcs.n	80017e4 <__udivmoddi4+0x2a0>
 8001786:	45b8      	cmp	r8, r7
 8001788:	d92c      	bls.n	80017e4 <__udivmoddi4+0x2a0>
 800178a:	3802      	subs	r0, #2
 800178c:	4427      	add	r7, r4
 800178e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001792:	eba7 0708 	sub.w	r7, r7, r8
 8001796:	fba0 8902 	umull	r8, r9, r0, r2
 800179a:	454f      	cmp	r7, r9
 800179c:	46c6      	mov	lr, r8
 800179e:	4649      	mov	r1, r9
 80017a0:	d31a      	bcc.n	80017d8 <__udivmoddi4+0x294>
 80017a2:	d017      	beq.n	80017d4 <__udivmoddi4+0x290>
 80017a4:	b15d      	cbz	r5, 80017be <__udivmoddi4+0x27a>
 80017a6:	ebb3 020e 	subs.w	r2, r3, lr
 80017aa:	eb67 0701 	sbc.w	r7, r7, r1
 80017ae:	fa07 fc0c 	lsl.w	ip, r7, ip
 80017b2:	40f2      	lsrs	r2, r6
 80017b4:	ea4c 0202 	orr.w	r2, ip, r2
 80017b8:	40f7      	lsrs	r7, r6
 80017ba:	e9c5 2700 	strd	r2, r7, [r5]
 80017be:	2600      	movs	r6, #0
 80017c0:	4631      	mov	r1, r6
 80017c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017c6:	462e      	mov	r6, r5
 80017c8:	4628      	mov	r0, r5
 80017ca:	e70b      	b.n	80015e4 <__udivmoddi4+0xa0>
 80017cc:	4606      	mov	r6, r0
 80017ce:	e6e9      	b.n	80015a4 <__udivmoddi4+0x60>
 80017d0:	4618      	mov	r0, r3
 80017d2:	e6fd      	b.n	80015d0 <__udivmoddi4+0x8c>
 80017d4:	4543      	cmp	r3, r8
 80017d6:	d2e5      	bcs.n	80017a4 <__udivmoddi4+0x260>
 80017d8:	ebb8 0e02 	subs.w	lr, r8, r2
 80017dc:	eb69 0104 	sbc.w	r1, r9, r4
 80017e0:	3801      	subs	r0, #1
 80017e2:	e7df      	b.n	80017a4 <__udivmoddi4+0x260>
 80017e4:	4608      	mov	r0, r1
 80017e6:	e7d2      	b.n	800178e <__udivmoddi4+0x24a>
 80017e8:	4660      	mov	r0, ip
 80017ea:	e78d      	b.n	8001708 <__udivmoddi4+0x1c4>
 80017ec:	4681      	mov	r9, r0
 80017ee:	e7b9      	b.n	8001764 <__udivmoddi4+0x220>
 80017f0:	4666      	mov	r6, ip
 80017f2:	e775      	b.n	80016e0 <__udivmoddi4+0x19c>
 80017f4:	4630      	mov	r0, r6
 80017f6:	e74a      	b.n	800168e <__udivmoddi4+0x14a>
 80017f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80017fc:	4439      	add	r1, r7
 80017fe:	e713      	b.n	8001628 <__udivmoddi4+0xe4>
 8001800:	3802      	subs	r0, #2
 8001802:	443c      	add	r4, r7
 8001804:	e724      	b.n	8001650 <__udivmoddi4+0x10c>
 8001806:	bf00      	nop

08001808 <__aeabi_idiv0>:
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop

0800180c <EEPROM_CalcCheckSum>:
static uint32_t EEPROM_CalcCheckSum(uint8_t* pu8Data, uint16_t u16Size);
/* Private Functions Declaration End  */

/* Private Functions Definition Start */
static uint32_t EEPROM_CalcCheckSum(uint8_t* pu8Data, uint16_t u16Size)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	807b      	strh	r3, [r7, #2]
	uint32_t u32Checksum = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	60fb      	str	r3, [r7, #12]
	uint16_t u16LoopCntr = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	817b      	strh	r3, [r7, #10]
	for(u16LoopCntr =0;u16LoopCntr<(u16Size-4);u16LoopCntr++)
 8001820:	2300      	movs	r3, #0
 8001822:	817b      	strh	r3, [r7, #10]
 8001824:	e00a      	b.n	800183c <EEPROM_CalcCheckSum+0x30>
	{
		u32Checksum += (pu8Data[u16LoopCntr]);
 8001826:	897b      	ldrh	r3, [r7, #10]
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	4413      	add	r3, r2
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
	for(u16LoopCntr =0;u16LoopCntr<(u16Size-4);u16LoopCntr++)
 8001836:	897b      	ldrh	r3, [r7, #10]
 8001838:	3301      	adds	r3, #1
 800183a:	817b      	strh	r3, [r7, #10]
 800183c:	897a      	ldrh	r2, [r7, #10]
 800183e:	887b      	ldrh	r3, [r7, #2]
 8001840:	3b04      	subs	r3, #4
 8001842:	429a      	cmp	r2, r3
 8001844:	dbef      	blt.n	8001826 <EEPROM_CalcCheckSum+0x1a>
	}

	//Increment it by one for Ignoring the  All Zeros data
	u32Checksum++;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	3301      	adds	r3, #1
 800184a:	60fb      	str	r3, [r7, #12]
	return u32Checksum;
 800184c:	68fb      	ldr	r3, [r7, #12]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
	...

0800185c <EEPROM_RetriveBuffMemData>:

/* Private Functions Definition End */
void EEPROM_RetriveBuffMemData(void)
{
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b085      	sub	sp, #20
 8001860:	af04      	add	r7, sp, #16
	/*1 read first copy*/
	memset((uint8_t*)&g_stEepromBuffMemAdd,0x00,sizeof(g_stEepromBuffMemAdd));
 8001862:	220c      	movs	r2, #12
 8001864:	2100      	movs	r1, #0
 8001866:	482d      	ldr	r0, [pc, #180]	; (800191c <EEPROM_RetriveBuffMemData+0xc0>)
 8001868:	f014 f8be 	bl	80159e8 <memset>
	if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, EEPROM_BUFF_MEM_ADD_DATA_COPY_1_ADD ,I2C_MEMADD_SIZE_16BIT,	(uint8_t *)&g_stEepromBuffMemAdd,sizeof(g_stEepromBuffMemAdd),1000) != HAL_OK)
 800186c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001870:	9302      	str	r3, [sp, #8]
 8001872:	230c      	movs	r3, #12
 8001874:	9301      	str	r3, [sp, #4]
 8001876:	4b29      	ldr	r3, [pc, #164]	; (800191c <EEPROM_RetriveBuffMemData+0xc0>)
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2302      	movs	r3, #2
 800187c:	2200      	movs	r2, #0
 800187e:	21a0      	movs	r1, #160	; 0xa0
 8001880:	4827      	ldr	r0, [pc, #156]	; (8001920 <EEPROM_RetriveBuffMemData+0xc4>)
 8001882:	f00d fe89 	bl	800f598 <HAL_I2C_Mem_Read>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d004      	beq.n	8001896 <EEPROM_RetriveBuffMemData+0x3a>
		assertError(enmTORERRORS_MEM_I2C,enmERRORSTATE_ACTIVE);
 800188c:	2101      	movs	r1, #1
 800188e:	2008      	movs	r0, #8
 8001890:	f000 fb18 	bl	8001ec4 <assertError>
 8001894:	e003      	b.n	800189e <EEPROM_RetriveBuffMemData+0x42>
	else
		assertError(enmTORERRORS_MEM_I2C,enmERRORSTATE_NOERROR);
 8001896:	2100      	movs	r1, #0
 8001898:	2008      	movs	r0, #8
 800189a:	f000 fb13 	bl	8001ec4 <assertError>

	if(g_stEepromBuffMemAdd.u32CheckSum  != EEPROM_CalcCheckSum((uint8_t*)&g_stEepromBuffMemAdd,sizeof(g_stEepromBuffMemAdd)))
 800189e:	4b1f      	ldr	r3, [pc, #124]	; (800191c <EEPROM_RetriveBuffMemData+0xc0>)
 80018a0:	689c      	ldr	r4, [r3, #8]
 80018a2:	210c      	movs	r1, #12
 80018a4:	481d      	ldr	r0, [pc, #116]	; (800191c <EEPROM_RetriveBuffMemData+0xc0>)
 80018a6:	f7ff ffb1 	bl	800180c <EEPROM_CalcCheckSum>
 80018aa:	4603      	mov	r3, r0
 80018ac:	429c      	cmp	r4, r3
 80018ae:	d031      	beq.n	8001914 <EEPROM_RetriveBuffMemData+0xb8>
	{
		/*2 First copy CRC is not matched Read Second copy*/
		memset((uint8_t*)&g_stEepromBuffMemAdd,0x00,sizeof(g_stEepromBuffMemAdd));
 80018b0:	220c      	movs	r2, #12
 80018b2:	2100      	movs	r1, #0
 80018b4:	4819      	ldr	r0, [pc, #100]	; (800191c <EEPROM_RetriveBuffMemData+0xc0>)
 80018b6:	f014 f897 	bl	80159e8 <memset>
		if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, EEPROM_BUFF_MEM_ADD_DATA_COPY_2_ADD ,I2C_MEMADD_SIZE_16BIT,	(uint8_t *)&g_stEepromBuffMemAdd,sizeof(g_stEepromBuffMemAdd),1000) != HAL_OK)
 80018ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018be:	9302      	str	r3, [sp, #8]
 80018c0:	230c      	movs	r3, #12
 80018c2:	9301      	str	r3, [sp, #4]
 80018c4:	4b15      	ldr	r3, [pc, #84]	; (800191c <EEPROM_RetriveBuffMemData+0xc0>)
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	2302      	movs	r3, #2
 80018ca:	2210      	movs	r2, #16
 80018cc:	21a0      	movs	r1, #160	; 0xa0
 80018ce:	4814      	ldr	r0, [pc, #80]	; (8001920 <EEPROM_RetriveBuffMemData+0xc4>)
 80018d0:	f00d fe62 	bl	800f598 <HAL_I2C_Mem_Read>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d004      	beq.n	80018e4 <EEPROM_RetriveBuffMemData+0x88>
			assertError(enmTORERRORS_MEM_I2C,enmERRORSTATE_ACTIVE);
 80018da:	2101      	movs	r1, #1
 80018dc:	2008      	movs	r0, #8
 80018de:	f000 faf1 	bl	8001ec4 <assertError>
 80018e2:	e003      	b.n	80018ec <EEPROM_RetriveBuffMemData+0x90>
		else
			assertError(enmTORERRORS_MEM_I2C,enmERRORSTATE_NOERROR);
 80018e4:	2100      	movs	r1, #0
 80018e6:	2008      	movs	r0, #8
 80018e8:	f000 faec 	bl	8001ec4 <assertError>

		if(g_stEepromBuffMemAdd.u32CheckSum != EEPROM_CalcCheckSum((uint8_t*)&g_stEepromBuffMemAdd,sizeof(g_stEepromBuffMemAdd)))
 80018ec:	4b0b      	ldr	r3, [pc, #44]	; (800191c <EEPROM_RetriveBuffMemData+0xc0>)
 80018ee:	689c      	ldr	r4, [r3, #8]
 80018f0:	210c      	movs	r1, #12
 80018f2:	480a      	ldr	r0, [pc, #40]	; (800191c <EEPROM_RetriveBuffMemData+0xc0>)
 80018f4:	f7ff ff8a 	bl	800180c <EEPROM_CalcCheckSum>
 80018f8:	4603      	mov	r3, r0
 80018fa:	429c      	cmp	r4, r3
 80018fc:	d00a      	beq.n	8001914 <EEPROM_RetriveBuffMemData+0xb8>
		{
			/*3. If both copy are corrupted the fill default values*/
			memset((uint8_t*)&g_stEepromBuffMemAdd,0x00,sizeof(g_stEepromBuffMemAdd));
 80018fe:	220c      	movs	r2, #12
 8001900:	2100      	movs	r1, #0
 8001902:	4806      	ldr	r0, [pc, #24]	; (800191c <EEPROM_RetriveBuffMemData+0xc0>)
 8001904:	f014 f870 	bl	80159e8 <memset>
			g_stEepromBuffMemAdd.u32BuffFlashReadAddress = 0;
 8001908:	4b04      	ldr	r3, [pc, #16]	; (800191c <EEPROM_RetriveBuffMemData+0xc0>)
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
			g_stEepromBuffMemAdd.u32BuffFlashWriteAddress  = 0;
 800190e:	4b03      	ldr	r3, [pc, #12]	; (800191c <EEPROM_RetriveBuffMemData+0xc0>)
 8001910:	2200      	movs	r2, #0
 8001912:	605a      	str	r2, [r3, #4]
	}
	else
	{
		//First copy read successfully.
	}
}
 8001914:	bf00      	nop
 8001916:	3704      	adds	r7, #4
 8001918:	46bd      	mov	sp, r7
 800191a:	bd90      	pop	{r4, r7, pc}
 800191c:	200021b0 	.word	0x200021b0
 8001920:	200036c4 	.word	0x200036c4

08001924 <EEPROM_WriteBuffMemData>:

void EEPROM_WriteBuffMemData(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af04      	add	r7, sp, #16
	  HAL_IWDG_Refresh(&hiwdg);
 800192a:	4822      	ldr	r0, [pc, #136]	; (80019b4 <EEPROM_WriteBuffMemData+0x90>)
 800192c:	f00f f924 	bl	8010b78 <HAL_IWDG_Refresh>

	g_stEepromBuffMemAdd.u32CheckSum = EEPROM_CalcCheckSum((uint8_t*)&g_stEepromBuffMemAdd,sizeof(g_stEepromBuffMemAdd));
 8001930:	210c      	movs	r1, #12
 8001932:	4821      	ldr	r0, [pc, #132]	; (80019b8 <EEPROM_WriteBuffMemData+0x94>)
 8001934:	f7ff ff6a 	bl	800180c <EEPROM_CalcCheckSum>
 8001938:	4603      	mov	r3, r0
 800193a:	4a1f      	ldr	r2, [pc, #124]	; (80019b8 <EEPROM_WriteBuffMemData+0x94>)
 800193c:	6093      	str	r3, [r2, #8]
	if(HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, EEPROM_BUFF_MEM_ADD_DATA_COPY_1_ADD ,I2C_MEMADD_SIZE_16BIT,(uint8_t *)&g_stEepromBuffMemAdd,sizeof(g_stEepromBuffMemAdd),1000) != HAL_OK)
 800193e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001942:	9302      	str	r3, [sp, #8]
 8001944:	230c      	movs	r3, #12
 8001946:	9301      	str	r3, [sp, #4]
 8001948:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <EEPROM_WriteBuffMemData+0x94>)
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	2302      	movs	r3, #2
 800194e:	2200      	movs	r2, #0
 8001950:	21a0      	movs	r1, #160	; 0xa0
 8001952:	481a      	ldr	r0, [pc, #104]	; (80019bc <EEPROM_WriteBuffMemData+0x98>)
 8001954:	f00d fcfe 	bl	800f354 <HAL_I2C_Mem_Write>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d004      	beq.n	8001968 <EEPROM_WriteBuffMemData+0x44>
		assertError(enmTORERRORS_MEM_I2C,enmERRORSTATE_ACTIVE);
 800195e:	2101      	movs	r1, #1
 8001960:	2008      	movs	r0, #8
 8001962:	f000 faaf 	bl	8001ec4 <assertError>
 8001966:	e003      	b.n	8001970 <EEPROM_WriteBuffMemData+0x4c>
	else
		assertError(enmTORERRORS_MEM_I2C,enmERRORSTATE_NOERROR);
 8001968:	2100      	movs	r1, #0
 800196a:	2008      	movs	r0, #8
 800196c:	f000 faaa 	bl	8001ec4 <assertError>

	HAL_IWDG_Refresh(&hiwdg);
 8001970:	4810      	ldr	r0, [pc, #64]	; (80019b4 <EEPROM_WriteBuffMemData+0x90>)
 8001972:	f00f f901 	bl	8010b78 <HAL_IWDG_Refresh>
	HAL_Delay(6);
 8001976:	2006      	movs	r0, #6
 8001978:	f008 fde0 	bl	800a53c <HAL_Delay>

	if(HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, EEPROM_BUFF_MEM_ADD_DATA_COPY_2_ADD ,I2C_MEMADD_SIZE_16BIT,(uint8_t *)&g_stEepromBuffMemAdd,sizeof(g_stEepromBuffMemAdd),1000) != HAL_OK)
 800197c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001980:	9302      	str	r3, [sp, #8]
 8001982:	230c      	movs	r3, #12
 8001984:	9301      	str	r3, [sp, #4]
 8001986:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <EEPROM_WriteBuffMemData+0x94>)
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	2302      	movs	r3, #2
 800198c:	2210      	movs	r2, #16
 800198e:	21a0      	movs	r1, #160	; 0xa0
 8001990:	480a      	ldr	r0, [pc, #40]	; (80019bc <EEPROM_WriteBuffMemData+0x98>)
 8001992:	f00d fcdf 	bl	800f354 <HAL_I2C_Mem_Write>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d004      	beq.n	80019a6 <EEPROM_WriteBuffMemData+0x82>
		assertError(enmTORERRORS_MEM_I2C,enmERRORSTATE_ACTIVE);
 800199c:	2101      	movs	r1, #1
 800199e:	2008      	movs	r0, #8
 80019a0:	f000 fa90 	bl	8001ec4 <assertError>
	else
		assertError(enmTORERRORS_MEM_I2C,enmERRORSTATE_NOERROR);

}
 80019a4:	e003      	b.n	80019ae <EEPROM_WriteBuffMemData+0x8a>
		assertError(enmTORERRORS_MEM_I2C,enmERRORSTATE_NOERROR);
 80019a6:	2100      	movs	r1, #0
 80019a8:	2008      	movs	r0, #8
 80019aa:	f000 fa8b 	bl	8001ec4 <assertError>
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20003718 	.word	0x20003718
 80019b8:	200021b0 	.word	0x200021b0
 80019bc:	200036c4 	.word	0x200036c4

080019c0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019c6:	463b      	mov	r3, r7
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
 80019d4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80019d6:	4b3e      	ldr	r3, [pc, #248]	; (8001ad0 <MX_ADC1_Init+0x110>)
 80019d8:	4a3e      	ldr	r2, [pc, #248]	; (8001ad4 <MX_ADC1_Init+0x114>)
 80019da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80019dc:	4b3c      	ldr	r3, [pc, #240]	; (8001ad0 <MX_ADC1_Init+0x110>)
 80019de:	2200      	movs	r2, #0
 80019e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019e2:	4b3b      	ldr	r3, [pc, #236]	; (8001ad0 <MX_ADC1_Init+0x110>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019e8:	4b39      	ldr	r3, [pc, #228]	; (8001ad0 <MX_ADC1_Init+0x110>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80019ee:	4b38      	ldr	r3, [pc, #224]	; (8001ad0 <MX_ADC1_Init+0x110>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019f4:	4b36      	ldr	r3, [pc, #216]	; (8001ad0 <MX_ADC1_Init+0x110>)
 80019f6:	2204      	movs	r2, #4
 80019f8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80019fa:	4b35      	ldr	r3, [pc, #212]	; (8001ad0 <MX_ADC1_Init+0x110>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a00:	4b33      	ldr	r3, [pc, #204]	; (8001ad0 <MX_ADC1_Init+0x110>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8001a06:	4b32      	ldr	r3, [pc, #200]	; (8001ad0 <MX_ADC1_Init+0x110>)
 8001a08:	2204      	movs	r2, #4
 8001a0a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a0c:	4b30      	ldr	r3, [pc, #192]	; (8001ad0 <MX_ADC1_Init+0x110>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a14:	4b2e      	ldr	r3, [pc, #184]	; (8001ad0 <MX_ADC1_Init+0x110>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a1a:	4b2d      	ldr	r3, [pc, #180]	; (8001ad0 <MX_ADC1_Init+0x110>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001a20:	4b2b      	ldr	r3, [pc, #172]	; (8001ad0 <MX_ADC1_Init+0x110>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a28:	4b29      	ldr	r3, [pc, #164]	; (8001ad0 <MX_ADC1_Init+0x110>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001a2e:	4b28      	ldr	r3, [pc, #160]	; (8001ad0 <MX_ADC1_Init+0x110>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a36:	4826      	ldr	r0, [pc, #152]	; (8001ad0 <MX_ADC1_Init+0x110>)
 8001a38:	f008 ffda 	bl	800a9f0 <HAL_ADC_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001a42:	f002 fd9a 	bl	800457a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001a46:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <MX_ADC1_Init+0x118>)
 8001a48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a4a:	2306      	movs	r3, #6
 8001a4c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001a4e:	2307      	movs	r3, #7
 8001a50:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a52:	237f      	movs	r3, #127	; 0x7f
 8001a54:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a56:	2304      	movs	r3, #4
 8001a58:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a5e:	463b      	mov	r3, r7
 8001a60:	4619      	mov	r1, r3
 8001a62:	481b      	ldr	r0, [pc, #108]	; (8001ad0 <MX_ADC1_Init+0x110>)
 8001a64:	f009 fdfe 	bl	800b664 <HAL_ADC_ConfigChannel>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001a6e:	f002 fd84 	bl	800457a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001a72:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <MX_ADC1_Init+0x11c>)
 8001a74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001a76:	230c      	movs	r3, #12
 8001a78:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a7a:	463b      	mov	r3, r7
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4814      	ldr	r0, [pc, #80]	; (8001ad0 <MX_ADC1_Init+0x110>)
 8001a80:	f009 fdf0 	bl	800b664 <HAL_ADC_ConfigChannel>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8001a8a:	f002 fd76 	bl	800457a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001a8e:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <MX_ADC1_Init+0x120>)
 8001a90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001a92:	2312      	movs	r3, #18
 8001a94:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a96:	463b      	mov	r3, r7
 8001a98:	4619      	mov	r1, r3
 8001a9a:	480d      	ldr	r0, [pc, #52]	; (8001ad0 <MX_ADC1_Init+0x110>)
 8001a9c:	f009 fde2 	bl	800b664 <HAL_ADC_ConfigChannel>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8001aa6:	f002 fd68 	bl	800457a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <MX_ADC1_Init+0x124>)
 8001aac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001aae:	2318      	movs	r3, #24
 8001ab0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ab2:	463b      	mov	r3, r7
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4806      	ldr	r0, [pc, #24]	; (8001ad0 <MX_ADC1_Init+0x110>)
 8001ab8:	f009 fdd4 	bl	800b664 <HAL_ADC_ConfigChannel>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8001ac2:	f002 fd5a 	bl	800457a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ac6:	bf00      	nop
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200021bc 	.word	0x200021bc
 8001ad4:	50040000 	.word	0x50040000
 8001ad8:	25b00200 	.word	0x25b00200
 8001adc:	2a000400 	.word	0x2a000400
 8001ae0:	2e300800 	.word	0x2e300800
 8001ae4:	32601000 	.word	0x32601000

08001ae8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b0a2      	sub	sp, #136	; 0x88
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	2260      	movs	r2, #96	; 0x60
 8001b06:	2100      	movs	r1, #0
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f013 ff6d 	bl	80159e8 <memset>
  if(adcHandle->Instance==ADC1)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a3f      	ldr	r2, [pc, #252]	; (8001c10 <HAL_ADC_MspInit+0x128>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d176      	bne.n	8001c06 <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b18:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b1c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001b1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001b22:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001b24:	2303      	movs	r3, #3
 8001b26:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8001b28:	2305      	movs	r3, #5
 8001b2a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 13;
 8001b2c:	230d      	movs	r3, #13
 8001b2e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001b30:	2307      	movs	r3, #7
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b34:	2302      	movs	r3, #2
 8001b36:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001b3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b40:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b42:	f107 0314 	add.w	r3, r7, #20
 8001b46:	4618      	mov	r0, r3
 8001b48:	f010 f86e 	bl	8011c28 <HAL_RCCEx_PeriphCLKConfig>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001b52:	f002 fd12 	bl	800457a <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b56:	4b2f      	ldr	r3, [pc, #188]	; (8001c14 <HAL_ADC_MspInit+0x12c>)
 8001b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5a:	4a2e      	ldr	r2, [pc, #184]	; (8001c14 <HAL_ADC_MspInit+0x12c>)
 8001b5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b62:	4b2c      	ldr	r3, [pc, #176]	; (8001c14 <HAL_ADC_MspInit+0x12c>)
 8001b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6e:	4b29      	ldr	r3, [pc, #164]	; (8001c14 <HAL_ADC_MspInit+0x12c>)
 8001b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b72:	4a28      	ldr	r2, [pc, #160]	; (8001c14 <HAL_ADC_MspInit+0x12c>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7a:	4b26      	ldr	r3, [pc, #152]	; (8001c14 <HAL_ADC_MspInit+0x12c>)
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Batt_Voltage_ADC1_9_Pin|GPIO_PIN_5|GPIO_PIN_6|Input_Voltage_ADC1_12_Pin;
 8001b86:	23f0      	movs	r3, #240	; 0xf0
 8001b88:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001b8a:	230b      	movs	r3, #11
 8001b8c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b92:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b96:	4619      	mov	r1, r3
 8001b98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b9c:	f00c feda 	bl	800e954 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001ba0:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <HAL_ADC_MspInit+0x130>)
 8001ba2:	4a1e      	ldr	r2, [pc, #120]	; (8001c1c <HAL_ADC_MspInit+0x134>)
 8001ba4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001ba6:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <HAL_ADC_MspInit+0x130>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bac:	4b1a      	ldr	r3, [pc, #104]	; (8001c18 <HAL_ADC_MspInit+0x130>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bb2:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <HAL_ADC_MspInit+0x130>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001bb8:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <HAL_ADC_MspInit+0x130>)
 8001bba:	2280      	movs	r2, #128	; 0x80
 8001bbc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001bbe:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <HAL_ADC_MspInit+0x130>)
 8001bc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bc4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001bc6:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <HAL_ADC_MspInit+0x130>)
 8001bc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bcc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001bce:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_ADC_MspInit+0x130>)
 8001bd0:	2220      	movs	r2, #32
 8001bd2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001bd4:	4b10      	ldr	r3, [pc, #64]	; (8001c18 <HAL_ADC_MspInit+0x130>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bda:	480f      	ldr	r0, [pc, #60]	; (8001c18 <HAL_ADC_MspInit+0x130>)
 8001bdc:	f00b ffce 	bl	800db7c <HAL_DMA_Init>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8001be6:	f002 fcc8 	bl	800457a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a0a      	ldr	r2, [pc, #40]	; (8001c18 <HAL_ADC_MspInit+0x130>)
 8001bee:	64da      	str	r2, [r3, #76]	; 0x4c
 8001bf0:	4a09      	ldr	r2, [pc, #36]	; (8001c18 <HAL_ADC_MspInit+0x130>)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 6, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2106      	movs	r1, #6
 8001bfa:	2012      	movs	r0, #18
 8001bfc:	f00b ff56 	bl	800daac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001c00:	2012      	movs	r0, #18
 8001c02:	f00b ff7f 	bl	800db04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001c06:	bf00      	nop
 8001c08:	3788      	adds	r7, #136	; 0x88
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	50040000 	.word	0x50040000
 8001c14:	40021000 	.word	0x40021000
 8001c18:	20002220 	.word	0x20002220
 8001c1c:	40020008 	.word	0x40020008

08001c20 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001c24:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <MX_CAN1_Init+0x64>)
 8001c26:	4a18      	ldr	r2, [pc, #96]	; (8001c88 <MX_CAN1_Init+0x68>)
 8001c28:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8001c2a:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <MX_CAN1_Init+0x64>)
 8001c2c:	220a      	movs	r2, #10
 8001c2e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001c30:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <MX_CAN1_Init+0x64>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c36:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <MX_CAN1_Init+0x64>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001c3c:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <MX_CAN1_Init+0x64>)
 8001c3e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8001c42:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001c44:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <MX_CAN1_Init+0x64>)
 8001c46:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c4a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = ENABLE;
 8001c4c:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <MX_CAN1_Init+0x64>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8001c52:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <MX_CAN1_Init+0x64>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8001c58:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <MX_CAN1_Init+0x64>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <MX_CAN1_Init+0x64>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001c64:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <MX_CAN1_Init+0x64>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <MX_CAN1_Init+0x64>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001c70:	4804      	ldr	r0, [pc, #16]	; (8001c84 <MX_CAN1_Init+0x64>)
 8001c72:	f00a fd3b 	bl	800c6ec <HAL_CAN_Init>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001c7c:	f002 fc7d 	bl	800457a <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20002268 	.word	0x20002268
 8001c88:	40006400 	.word	0x40006400

08001c8c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08a      	sub	sp, #40	; 0x28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a27      	ldr	r2, [pc, #156]	; (8001d48 <HAL_CAN_MspInit+0xbc>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d148      	bne.n	8001d40 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001cae:	4b27      	ldr	r3, [pc, #156]	; (8001d4c <HAL_CAN_MspInit+0xc0>)
 8001cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb2:	4a26      	ldr	r2, [pc, #152]	; (8001d4c <HAL_CAN_MspInit+0xc0>)
 8001cb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cb8:	6593      	str	r3, [r2, #88]	; 0x58
 8001cba:	4b24      	ldr	r3, [pc, #144]	; (8001d4c <HAL_CAN_MspInit+0xc0>)
 8001cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc6:	4b21      	ldr	r3, [pc, #132]	; (8001d4c <HAL_CAN_MspInit+0xc0>)
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cca:	4a20      	ldr	r2, [pc, #128]	; (8001d4c <HAL_CAN_MspInit+0xc0>)
 8001ccc:	f043 0302 	orr.w	r3, r3, #2
 8001cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cd2:	4b1e      	ldr	r3, [pc, #120]	; (8001d4c <HAL_CAN_MspInit+0xc0>)
 8001cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cec:	2303      	movs	r3, #3
 8001cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001cf0:	2309      	movs	r3, #9
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4815      	ldr	r0, [pc, #84]	; (8001d50 <HAL_CAN_MspInit+0xc4>)
 8001cfc:	f00c fe2a 	bl	800e954 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 1, 0);
 8001d00:	2200      	movs	r2, #0
 8001d02:	2101      	movs	r1, #1
 8001d04:	2013      	movs	r0, #19
 8001d06:	f00b fed1 	bl	800daac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001d0a:	2013      	movs	r0, #19
 8001d0c:	f00b fefa 	bl	800db04 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 8001d10:	2200      	movs	r2, #0
 8001d12:	2101      	movs	r1, #1
 8001d14:	2014      	movs	r0, #20
 8001d16:	f00b fec9 	bl	800daac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001d1a:	2014      	movs	r0, #20
 8001d1c:	f00b fef2 	bl	800db04 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
 8001d20:	2200      	movs	r2, #0
 8001d22:	2101      	movs	r1, #1
 8001d24:	2015      	movs	r0, #21
 8001d26:	f00b fec1 	bl	800daac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001d2a:	2015      	movs	r0, #21
 8001d2c:	f00b feea 	bl	800db04 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 1, 0);
 8001d30:	2200      	movs	r2, #0
 8001d32:	2101      	movs	r1, #1
 8001d34:	2016      	movs	r0, #22
 8001d36:	f00b feb9 	bl	800daac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001d3a:	2016      	movs	r0, #22
 8001d3c:	f00b fee2 	bl	800db04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001d40:	bf00      	nop
 8001d42:	3728      	adds	r7, #40	; 0x28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40006400 	.word	0x40006400
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	48000400 	.word	0x48000400

08001d54 <HAL_CAN_MspDeInit>:

void HAL_CAN_MspDeInit(CAN_HandleTypeDef* canHandle)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]

  if(canHandle->Instance==CAN1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a0e      	ldr	r2, [pc, #56]	; (8001d9c <HAL_CAN_MspDeInit+0x48>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d116      	bne.n	8001d94 <HAL_CAN_MspDeInit+0x40>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 8001d66:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <HAL_CAN_MspDeInit+0x4c>)
 8001d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6a:	4a0d      	ldr	r2, [pc, #52]	; (8001da0 <HAL_CAN_MspDeInit+0x4c>)
 8001d6c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001d70:	6593      	str	r3, [r2, #88]	; 0x58

    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8001d72:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001d76:	480b      	ldr	r0, [pc, #44]	; (8001da4 <HAL_CAN_MspDeInit+0x50>)
 8001d78:	f00d f834 	bl	800ede4 <HAL_GPIO_DeInit>

    /* CAN1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(CAN1_TX_IRQn);
 8001d7c:	2013      	movs	r0, #19
 8001d7e:	f00b fed9 	bl	800db34 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8001d82:	2014      	movs	r0, #20
 8001d84:	f00b fed6 	bl	800db34 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX1_IRQn);
 8001d88:	2015      	movs	r0, #21
 8001d8a:	f00b fed3 	bl	800db34 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_SCE_IRQn);
 8001d8e:	2016      	movs	r0, #22
 8001d90:	f00b fed0 	bl	800db34 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }
}
 8001d94:	bf00      	nop
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40006400 	.word	0x40006400
 8001da0:	40021000 	.word	0x40021000
 8001da4:	48000400 	.word	0x48000400

08001da8 <updateDeviceSignature>:
 Author           	Date                Remarks
 KloudQ Team       11-04-18
 KloudQ Team	   19-09-18				Update . Flash Size removed from payload
******************************************************************************/
void updateDeviceSignature(void)
{
 8001da8:	b5b0      	push	{r4, r5, r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
	char buffflash[16] = {'0'};

	u32FlashSize = (uint16_t)STM32_FLASHSIZE;
#endif

	gu32DeviceID = STM32_UUID[0];
 8001dae:	4b2d      	ldr	r3, [pc, #180]	; (8001e64 <updateDeviceSignature+0xbc>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a2d      	ldr	r2, [pc, #180]	; (8001e68 <updateDeviceSignature+0xc0>)
 8001db4:	6013      	str	r3, [r2, #0]
	uint32_t u32UUID0 = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
	uint32_t u32UUID1 = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60bb      	str	r3, [r7, #8]
	uint32_t u32UUID2 = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	607b      	str	r3, [r7, #4]
	u32UUID0 = STM32_UUID[0];
 8001dc2:	4b28      	ldr	r3, [pc, #160]	; (8001e64 <updateDeviceSignature+0xbc>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	60fb      	str	r3, [r7, #12]
	u32UUID1 = STM32_UUID[1];
 8001dc8:	4b28      	ldr	r3, [pc, #160]	; (8001e6c <updateDeviceSignature+0xc4>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	60bb      	str	r3, [r7, #8]
	u32UUID2 = STM32_UUID[2];
 8001dce:	4b28      	ldr	r3, [pc, #160]	; (8001e70 <updateDeviceSignature+0xc8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	607b      	str	r3, [r7, #4]
#if(USEMEMSIZEINDINFO == TRUE)
	/*Integer to ASCII Flash Size */
	itoa(u32FlashSize,buffflash,10);
#endif
	/* Append Device Info to Array */
	itoa(u32UUID2,buffuuid2,10);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	220a      	movs	r2, #10
 8001dd8:	4926      	ldr	r1, [pc, #152]	; (8001e74 <updateDeviceSignature+0xcc>)
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f013 fde4 	bl	80159a8 <itoa>
	strcat(dinfo,buffuuid2);
 8001de0:	4924      	ldr	r1, [pc, #144]	; (8001e74 <updateDeviceSignature+0xcc>)
 8001de2:	4825      	ldr	r0, [pc, #148]	; (8001e78 <updateDeviceSignature+0xd0>)
 8001de4:	f014 fdca 	bl	801697c <strcat>

	itoa(u32UUID1,buffuuid2,10);
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	220a      	movs	r2, #10
 8001dec:	4921      	ldr	r1, [pc, #132]	; (8001e74 <updateDeviceSignature+0xcc>)
 8001dee:	4618      	mov	r0, r3
 8001df0:	f013 fdda 	bl	80159a8 <itoa>
	strcat(dinfo,buffuuid2);
 8001df4:	491f      	ldr	r1, [pc, #124]	; (8001e74 <updateDeviceSignature+0xcc>)
 8001df6:	4820      	ldr	r0, [pc, #128]	; (8001e78 <updateDeviceSignature+0xd0>)
 8001df8:	f014 fdc0 	bl	801697c <strcat>

	itoa(u32UUID0,buffuuid2,10);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	220a      	movs	r2, #10
 8001e00:	491c      	ldr	r1, [pc, #112]	; (8001e74 <updateDeviceSignature+0xcc>)
 8001e02:	4618      	mov	r0, r3
 8001e04:	f013 fdd0 	bl	80159a8 <itoa>
	strcat(dinfo,buffuuid2);
 8001e08:	491a      	ldr	r1, [pc, #104]	; (8001e74 <updateDeviceSignature+0xcc>)
 8001e0a:	481b      	ldr	r0, [pc, #108]	; (8001e78 <updateDeviceSignature+0xd0>)
 8001e0c:	f014 fdb6 	bl	801697c <strcat>
#if(USEMEMSIZEINDINFO == TRUE)
	/* 16 bit Flash Size use if required */
	//strcat(dinfo,buffflash);
#endif

	memset(g_u8PaylodLenMsgBuff,0,sizeof(g_u8PaylodLenMsgBuff));
 8001e10:	223c      	movs	r2, #60	; 0x3c
 8001e12:	2100      	movs	r1, #0
 8001e14:	4819      	ldr	r0, [pc, #100]	; (8001e7c <updateDeviceSignature+0xd4>)
 8001e16:	f013 fde7 	bl	80159e8 <memset>
	strcpy(g_u8PaylodLenMsgBuff,(char * )"*,");
 8001e1a:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <updateDeviceSignature+0xd4>)
 8001e1c:	4a18      	ldr	r2, [pc, #96]	; (8001e80 <updateDeviceSignature+0xd8>)
 8001e1e:	8811      	ldrh	r1, [r2, #0]
 8001e20:	7892      	ldrb	r2, [r2, #2]
 8001e22:	8019      	strh	r1, [r3, #0]
 8001e24:	709a      	strb	r2, [r3, #2]
	strcat(g_u8PaylodLenMsgBuff,(char * )dinfo);
 8001e26:	4914      	ldr	r1, [pc, #80]	; (8001e78 <updateDeviceSignature+0xd0>)
 8001e28:	4814      	ldr	r0, [pc, #80]	; (8001e7c <updateDeviceSignature+0xd4>)
 8001e2a:	f014 fda7 	bl	801697c <strcat>
	strcat(g_u8PaylodLenMsgBuff,",Memory allocation error,#");
 8001e2e:	4813      	ldr	r0, [pc, #76]	; (8001e7c <updateDeviceSignature+0xd4>)
 8001e30:	f7fe fdd8 	bl	80009e4 <strlen>
 8001e34:	4603      	mov	r3, r0
 8001e36:	461a      	mov	r2, r3
 8001e38:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <updateDeviceSignature+0xd4>)
 8001e3a:	4413      	add	r3, r2
 8001e3c:	4a11      	ldr	r2, [pc, #68]	; (8001e84 <updateDeviceSignature+0xdc>)
 8001e3e:	461d      	mov	r5, r3
 8001e40:	4614      	mov	r4, r2
 8001e42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e44:	6028      	str	r0, [r5, #0]
 8001e46:	6069      	str	r1, [r5, #4]
 8001e48:	60aa      	str	r2, [r5, #8]
 8001e4a:	60eb      	str	r3, [r5, #12]
 8001e4c:	cc03      	ldmia	r4!, {r0, r1}
 8001e4e:	6128      	str	r0, [r5, #16]
 8001e50:	6169      	str	r1, [r5, #20]
 8001e52:	8823      	ldrh	r3, [r4, #0]
 8001e54:	78a2      	ldrb	r2, [r4, #2]
 8001e56:	832b      	strh	r3, [r5, #24]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	76ab      	strb	r3, [r5, #26]
}
 8001e5c:	bf00      	nop
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bdb0      	pop	{r4, r5, r7, pc}
 8001e64:	1fff7590 	.word	0x1fff7590
 8001e68:	20001830 	.word	0x20001830
 8001e6c:	1fff7594 	.word	0x1fff7594
 8001e70:	1fff7598 	.word	0x1fff7598
 8001e74:	20000034 	.word	0x20000034
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	20001834 	.word	0x20001834
 8001e80:	0801b408 	.word	0x0801b408
 8001e84:	0801b40c 	.word	0x0801b40c

08001e88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <MX_DMA_Init+0x38>)
 8001e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e92:	4a0b      	ldr	r2, [pc, #44]	; (8001ec0 <MX_DMA_Init+0x38>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	6493      	str	r3, [r2, #72]	; 0x48
 8001e9a:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <MX_DMA_Init+0x38>)
 8001e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 6, 0);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	2106      	movs	r1, #6
 8001eaa:	200b      	movs	r0, #11
 8001eac:	f00b fdfe 	bl	800daac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001eb0:	200b      	movs	r0, #11
 8001eb2:	f00b fe27 	bl	800db04 <HAL_NVIC_EnableIRQ>

}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40021000 	.word	0x40021000

08001ec4 <assertError>:
 Change History:
 Author           	Date                Remarks
 KTL   				12-2-19				Initial Draft
******************************************************************************/
void assertError(enmSystemErrorType errorType ,enmErrorStatus errorStatus)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	460a      	mov	r2, r1
 8001ece:	71fb      	strb	r3, [r7, #7]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	71bb      	strb	r3, [r7, #6]
	switch(errorType)
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	2b09      	cmp	r3, #9
 8001ed8:	d826      	bhi.n	8001f28 <assertError+0x64>
 8001eda:	a201      	add	r2, pc, #4	; (adr r2, 8001ee0 <assertError+0x1c>)
 8001edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee0:	08001f09 	.word	0x08001f09
 8001ee4:	08001f29 	.word	0x08001f29
 8001ee8:	08001f29 	.word	0x08001f29
 8001eec:	08001f29 	.word	0x08001f29
 8001ef0:	08001f29 	.word	0x08001f29
 8001ef4:	08001f29 	.word	0x08001f29
 8001ef8:	08001f29 	.word	0x08001f29
 8001efc:	08001f11 	.word	0x08001f11
 8001f00:	08001f19 	.word	0x08001f19
 8001f04:	08001f21 	.word	0x08001f21
	{
		case enmTORERRORS_TIMER7:
			strsystemErrorLog.u32Timer7Error = errorStatus;
 8001f08:	79bb      	ldrb	r3, [r7, #6]
 8001f0a:	4a0b      	ldr	r2, [pc, #44]	; (8001f38 <assertError+0x74>)
 8001f0c:	6013      	str	r3, [r2, #0]
		break;
 8001f0e:	e00c      	b.n	8001f2a <assertError+0x66>

		case enmTORERRORS_ENQUEUE:
			strsystemErrorLog.u32EnqueueError = errorStatus;
 8001f10:	79bb      	ldrb	r3, [r7, #6]
 8001f12:	4a09      	ldr	r2, [pc, #36]	; (8001f38 <assertError+0x74>)
 8001f14:	61d3      	str	r3, [r2, #28]
		break;
 8001f16:	e008      	b.n	8001f2a <assertError+0x66>

		case enmTORERRORS_MEM_I2C:
			strsystemErrorLog.u32MemI2CError = errorStatus;
 8001f18:	79bb      	ldrb	r3, [r7, #6]
 8001f1a:	4a07      	ldr	r2, [pc, #28]	; (8001f38 <assertError+0x74>)
 8001f1c:	6213      	str	r3, [r2, #32]
		break;
 8001f1e:	e004      	b.n	8001f2a <assertError+0x66>

		case enmTORERRORS_MEM_QUEUE:
			strsystemErrorLog.u32MemQueueError = errorStatus;
 8001f20:	79bb      	ldrb	r3, [r7, #6]
 8001f22:	4a05      	ldr	r2, [pc, #20]	; (8001f38 <assertError+0x74>)
 8001f24:	6253      	str	r3, [r2, #36]	; 0x24
		break;
 8001f26:	e000      	b.n	8001f2a <assertError+0x66>

		default :
			/* Unwanted / Undefined Error Occured
			 * System Will Halt Completely */
			//systemReset();
			break;
 8001f28:	bf00      	nop
	}
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	20002290 	.word	0x20002290

08001f3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08a      	sub	sp, #40	; 0x28
 8001f40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f42:	f107 0314 	add.w	r3, r7, #20
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	605a      	str	r2, [r3, #4]
 8001f4c:	609a      	str	r2, [r3, #8]
 8001f4e:	60da      	str	r2, [r3, #12]
 8001f50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f52:	4b45      	ldr	r3, [pc, #276]	; (8002068 <MX_GPIO_Init+0x12c>)
 8001f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f56:	4a44      	ldr	r2, [pc, #272]	; (8002068 <MX_GPIO_Init+0x12c>)
 8001f58:	f043 0304 	orr.w	r3, r3, #4
 8001f5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f5e:	4b42      	ldr	r3, [pc, #264]	; (8002068 <MX_GPIO_Init+0x12c>)
 8001f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f62:	f003 0304 	and.w	r3, r3, #4
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f6a:	4b3f      	ldr	r3, [pc, #252]	; (8002068 <MX_GPIO_Init+0x12c>)
 8001f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6e:	4a3e      	ldr	r2, [pc, #248]	; (8002068 <MX_GPIO_Init+0x12c>)
 8001f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f76:	4b3c      	ldr	r3, [pc, #240]	; (8002068 <MX_GPIO_Init+0x12c>)
 8001f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f82:	4b39      	ldr	r3, [pc, #228]	; (8002068 <MX_GPIO_Init+0x12c>)
 8001f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f86:	4a38      	ldr	r2, [pc, #224]	; (8002068 <MX_GPIO_Init+0x12c>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f8e:	4b36      	ldr	r3, [pc, #216]	; (8002068 <MX_GPIO_Init+0x12c>)
 8001f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9a:	4b33      	ldr	r3, [pc, #204]	; (8002068 <MX_GPIO_Init+0x12c>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	4a32      	ldr	r2, [pc, #200]	; (8002068 <MX_GPIO_Init+0x12c>)
 8001fa0:	f043 0302 	orr.w	r3, r3, #2
 8001fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fa6:	4b30      	ldr	r3, [pc, #192]	; (8002068 <MX_GPIO_Init+0x12c>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	607b      	str	r3, [r7, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GSM_PWR_KEY_GPIO_Port, GSM_PWR_KEY_Pin, GPIO_PIN_RESET);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fb8:	482c      	ldr	r0, [pc, #176]	; (800206c <MX_GPIO_Init+0x130>)
 8001fba:	f00d f841 	bl	800f040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MB_RE_Pin|MB_DE_Pin|GPS_LED_Pin, GPIO_PIN_RESET);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f248 0103 	movw	r1, #32771	; 0x8003
 8001fc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fc8:	f00d f83a 	bl	800f040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|DO_uC_Pin|WD_FEED_uC_Pin|Comm_LED_Pin, GPIO_PIN_RESET);
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f241 010d 	movw	r1, #4109	; 0x100d
 8001fd2:	4827      	ldr	r0, [pc, #156]	; (8002070 <MX_GPIO_Init+0x134>)
 8001fd4:	f00d f834 	bl	800f040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GSM_PWR_KEY_Pin;
 8001fd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GSM_PWR_KEY_GPIO_Port, &GPIO_InitStruct);
 8001fea:	f107 0314 	add.w	r3, r7, #20
 8001fee:	4619      	mov	r1, r3
 8001ff0:	481e      	ldr	r0, [pc, #120]	; (800206c <MX_GPIO_Init+0x130>)
 8001ff2:	f00c fcaf 	bl	800e954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MB_RE_Pin|MB_DE_Pin|GPS_LED_Pin;
 8001ff6:	f248 0303 	movw	r3, #32771	; 0x8003
 8001ffa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002004:	2300      	movs	r3, #0
 8002006:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	4619      	mov	r1, r3
 800200e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002012:	f00c fc9f 	bl	800e954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|DO_uC_Pin|WD_FEED_uC_Pin|Comm_LED_Pin;
 8002016:	f241 030d 	movw	r3, #4109	; 0x100d
 800201a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800201c:	2301      	movs	r3, #1
 800201e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002024:	2300      	movs	r3, #0
 8002026:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	4619      	mov	r1, r3
 800202e:	4810      	ldr	r0, [pc, #64]	; (8002070 <MX_GPIO_Init+0x134>)
 8002030:	f00c fc90 	bl	800e954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DI_EXTI4_Pin;
 8002034:	2310      	movs	r3, #16
 8002036:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002038:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800203c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DI_EXTI4_GPIO_Port, &GPIO_InitStruct);
 8002042:	f107 0314 	add.w	r3, r7, #20
 8002046:	4619      	mov	r1, r3
 8002048:	4809      	ldr	r0, [pc, #36]	; (8002070 <MX_GPIO_Init+0x134>)
 800204a:	f00c fc83 	bl	800e954 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 800204e:	2200      	movs	r2, #0
 8002050:	2102      	movs	r1, #2
 8002052:	200a      	movs	r0, #10
 8002054:	f00b fd2a 	bl	800daac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002058:	200a      	movs	r0, #10
 800205a:	f00b fd53 	bl	800db04 <HAL_NVIC_EnableIRQ>

}
 800205e:	bf00      	nop
 8002060:	3728      	adds	r7, #40	; 0x28
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40021000 	.word	0x40021000
 800206c:	48000800 	.word	0x48000800
 8002070:	48000400 	.word	0x48000400

08002074 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002084:	2b80      	cmp	r3, #128	; 0x80
 8002086:	d101      	bne.n	800208c <LL_USART_IsActiveFlag_TXE+0x18>
 8002088:	2301      	movs	r3, #1
 800208a:	e000      	b.n	800208e <LL_USART_IsActiveFlag_TXE+0x1a>
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	460b      	mov	r3, r1
 80020a4:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 80020a6:	78fb      	ldrb	r3, [r7, #3]
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
	...

080020bc <initGSMSIM868>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void initGSMSIM868(void)
{
 80020bc:	b5b0      	push	{r4, r5, r7, lr}
 80020be:	af00      	add	r7, sp, #0
	/* Init Buffers */
	memset(gsmInstance.agpsLocationData, GSM_ARRAY_INIT_CHAR, (GPS_LOCATION_ARRAY_SIZE * sizeof(char)));
 80020c0:	2296      	movs	r2, #150	; 0x96
 80020c2:	2100      	movs	r1, #0
 80020c4:	48c5      	ldr	r0, [pc, #788]	; (80023dc <initGSMSIM868+0x320>)
 80020c6:	f013 fc8f 	bl	80159e8 <memset>
	memset(gsmInstance.agsmNetworkIP, GSM_ARRAY_INIT_CHAR, (GPRS_NETWORKIP_ARRAY_SIZE * sizeof(char)));
 80020ca:	2223      	movs	r2, #35	; 0x23
 80020cc:	2100      	movs	r1, #0
 80020ce:	48c4      	ldr	r0, [pc, #784]	; (80023e0 <initGSMSIM868+0x324>)
 80020d0:	f013 fc8a 	bl	80159e8 <memset>
	memset(gsmInstance.agsmSignalStrength, GSM_ARRAY_INIT_CHAR, (GSM_SIGSTRGTH_ARRAY_SIZE * sizeof(char)));
 80020d4:	220a      	movs	r2, #10
 80020d6:	2100      	movs	r1, #0
 80020d8:	48c2      	ldr	r0, [pc, #776]	; (80023e4 <initGSMSIM868+0x328>)
 80020da:	f013 fc85 	bl	80159e8 <memset>
	memset((char *)gsmInstance.as8GSM_Response_Buff,GSM_ARRAY_INIT_CHAR,(GSM_RESPONSE_ARRAY_SIZE * sizeof(char)));
 80020de:	f640 228c 	movw	r2, #2700	; 0xa8c
 80020e2:	2100      	movs	r1, #0
 80020e4:	48c0      	ldr	r0, [pc, #768]	; (80023e8 <initGSMSIM868+0x32c>)
 80020e6:	f013 fc7f 	bl	80159e8 <memset>
	memset(gsmInstance.agsmCommandResponse, DATA_UNKNOWN, sizeof(gsmInstance.agsmCommandResponse[0][0])
 80020ea:	f44f 7261 	mov.w	r2, #900	; 0x384
 80020ee:	213f      	movs	r1, #63	; 0x3f
 80020f0:	48be      	ldr	r0, [pc, #760]	; (80023ec <initGSMSIM868+0x330>)
 80020f2:	f013 fc79 	bl	80159e8 <memset>
		   * GSM_TOTAL_COMMANDS * GSM_TOTAL_COMMANDS);
	memset(gsmInstance.agsmHTTPRequestStatus,DATA_UNKNOWN,GSM_HTTP_RESPONSE_CODE_SIZE * sizeof(char));
 80020f6:	2208      	movs	r2, #8
 80020f8:	213f      	movs	r1, #63	; 0x3f
 80020fa:	48bd      	ldr	r0, [pc, #756]	; (80023f0 <initGSMSIM868+0x334>)
 80020fc:	f013 fc74 	bl	80159e8 <memset>
	memset(gsmInstance.strSystemSMS.agsmSMSRecipient,DATA_UNKNOWN,SMS_MOB_NO_LENGTH * sizeof(char));
 8002100:	220d      	movs	r2, #13
 8002102:	213f      	movs	r1, #63	; 0x3f
 8002104:	48bb      	ldr	r0, [pc, #748]	; (80023f4 <initGSMSIM868+0x338>)
 8002106:	f013 fc6f 	bl	80159e8 <memset>
	memset(gsmInstance.strSystemSMS.agsmSMSMessageBody,0x00,SMS_MAX_MSG_LENGTH * sizeof(char));
 800210a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800210e:	2100      	movs	r1, #0
 8002110:	48b9      	ldr	r0, [pc, #740]	; (80023f8 <initGSMSIM868+0x33c>)
 8002112:	f013 fc69 	bl	80159e8 <memset>
	memset(gsmInstance.u32GSMHttpResponseCode,0x00,sizeof(char) * 3);
 8002116:	2203      	movs	r2, #3
 8002118:	2100      	movs	r1, #0
 800211a:	48b8      	ldr	r0, [pc, #736]	; (80023fc <initGSMSIM868+0x340>)
 800211c:	f013 fc64 	bl	80159e8 <memset>
	memset(gau8GSM_ATAPN, 0x00, (180 * sizeof(char)));
 8002120:	22b4      	movs	r2, #180	; 0xb4
 8002122:	2100      	movs	r1, #0
 8002124:	48b6      	ldr	r0, [pc, #728]	; (8002400 <initGSMSIM868+0x344>)
 8002126:	f013 fc5f 	bl	80159e8 <memset>
	memset(gau8GSM_ATURL, 0x00, (180 * sizeof(char)));
 800212a:	22b4      	movs	r2, #180	; 0xb4
 800212c:	2100      	movs	r1, #0
 800212e:	48b5      	ldr	r0, [pc, #724]	; (8002404 <initGSMSIM868+0x348>)
 8002130:	f013 fc5a 	bl	80159e8 <memset>
	memset(gau8GSM_SMSRecepient, 0x00, ( 180 * sizeof(char)));
 8002134:	22b4      	movs	r2, #180	; 0xb4
 8002136:	2100      	movs	r1, #0
 8002138:	48b3      	ldr	r0, [pc, #716]	; (8002408 <initGSMSIM868+0x34c>)
 800213a:	f013 fc55 	bl	80159e8 <memset>

	strcat((char *)gau8GSM_ATAPN,(char *)gau8GSM_ATSETAPN);
 800213e:	49b3      	ldr	r1, [pc, #716]	; (800240c <initGSMSIM868+0x350>)
 8002140:	48af      	ldr	r0, [pc, #700]	; (8002400 <initGSMSIM868+0x344>)
 8002142:	f014 fc1b 	bl	801697c <strcat>
	strcat((char *)gau8GSM_ATAPN,(char *)"\"");
 8002146:	48ae      	ldr	r0, [pc, #696]	; (8002400 <initGSMSIM868+0x344>)
 8002148:	f7fe fc4c 	bl	80009e4 <strlen>
 800214c:	4603      	mov	r3, r0
 800214e:	461a      	mov	r2, r3
 8002150:	4bab      	ldr	r3, [pc, #684]	; (8002400 <initGSMSIM868+0x344>)
 8002152:	4413      	add	r3, r2
 8002154:	49ae      	ldr	r1, [pc, #696]	; (8002410 <initGSMSIM868+0x354>)
 8002156:	461a      	mov	r2, r3
 8002158:	460b      	mov	r3, r1
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	8013      	strh	r3, [r2, #0]
	strcat((char *)gau8GSM_ATAPN,(char *)gau8GSM_apn);
 800215e:	49ad      	ldr	r1, [pc, #692]	; (8002414 <initGSMSIM868+0x358>)
 8002160:	48a7      	ldr	r0, [pc, #668]	; (8002400 <initGSMSIM868+0x344>)
 8002162:	f014 fc0b 	bl	801697c <strcat>
	strcat((char *)gau8GSM_ATAPN,(char *)"\"");
 8002166:	48a6      	ldr	r0, [pc, #664]	; (8002400 <initGSMSIM868+0x344>)
 8002168:	f7fe fc3c 	bl	80009e4 <strlen>
 800216c:	4603      	mov	r3, r0
 800216e:	461a      	mov	r2, r3
 8002170:	4ba3      	ldr	r3, [pc, #652]	; (8002400 <initGSMSIM868+0x344>)
 8002172:	4413      	add	r3, r2
 8002174:	49a6      	ldr	r1, [pc, #664]	; (8002410 <initGSMSIM868+0x354>)
 8002176:	461a      	mov	r2, r3
 8002178:	460b      	mov	r3, r1
 800217a:	881b      	ldrh	r3, [r3, #0]
 800217c:	8013      	strh	r3, [r2, #0]
	strcat((char *)gau8GSM_ATAPN,(char *)",\"\",\"\",1\r\n");
 800217e:	48a0      	ldr	r0, [pc, #640]	; (8002400 <initGSMSIM868+0x344>)
 8002180:	f7fe fc30 	bl	80009e4 <strlen>
 8002184:	4603      	mov	r3, r0
 8002186:	461a      	mov	r2, r3
 8002188:	4b9d      	ldr	r3, [pc, #628]	; (8002400 <initGSMSIM868+0x344>)
 800218a:	4413      	add	r3, r2
 800218c:	49a2      	ldr	r1, [pc, #648]	; (8002418 <initGSMSIM868+0x35c>)
 800218e:	461a      	mov	r2, r3
 8002190:	460b      	mov	r3, r1
 8002192:	cb03      	ldmia	r3!, {r0, r1}
 8002194:	6010      	str	r0, [r2, #0]
 8002196:	6051      	str	r1, [r2, #4]
 8002198:	8819      	ldrh	r1, [r3, #0]
 800219a:	789b      	ldrb	r3, [r3, #2]
 800219c:	8111      	strh	r1, [r2, #8]
 800219e:	7293      	strb	r3, [r2, #10]

	strcpy((char *)gau8GSM_ATURL,"http://kloudqpocapi.remotemonitor.in/api/Values/PostStringData");
 80021a0:	4a98      	ldr	r2, [pc, #608]	; (8002404 <initGSMSIM868+0x348>)
 80021a2:	4b9e      	ldr	r3, [pc, #632]	; (800241c <initGSMSIM868+0x360>)
 80021a4:	4614      	mov	r4, r2
 80021a6:	461d      	mov	r5, r3
 80021a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80021b8:	c407      	stmia	r4!, {r0, r1, r2}
 80021ba:	8023      	strh	r3, [r4, #0]
 80021bc:	3402      	adds	r4, #2
 80021be:	0c1b      	lsrs	r3, r3, #16
 80021c0:	7023      	strb	r3, [r4, #0]
	strcat(gau8GSM_ATURL,"\r\n");
 80021c2:	4890      	ldr	r0, [pc, #576]	; (8002404 <initGSMSIM868+0x348>)
 80021c4:	f7fe fc0e 	bl	80009e4 <strlen>
 80021c8:	4603      	mov	r3, r0
 80021ca:	461a      	mov	r2, r3
 80021cc:	4b8d      	ldr	r3, [pc, #564]	; (8002404 <initGSMSIM868+0x348>)
 80021ce:	4413      	add	r3, r2
 80021d0:	4a93      	ldr	r2, [pc, #588]	; (8002420 <initGSMSIM868+0x364>)
 80021d2:	8811      	ldrh	r1, [r2, #0]
 80021d4:	7892      	ldrb	r2, [r2, #2]
 80021d6:	8019      	strh	r1, [r3, #0]
 80021d8:	709a      	strb	r2, [r3, #2]
//	itoa(temp_len,buffer,PAYLOAD_DATA_STRING_RADIX);
//	strcat((char*)gau8GSM_ATAPNL,(char *)buffer);
//	strcat((char*)gau8GSM_ATAPNL,",80\r\n"); // time out


	memset(gau8GSM_MQTTOPEN, 0x00, (100 * sizeof(char)));
 80021da:	2264      	movs	r2, #100	; 0x64
 80021dc:	2100      	movs	r1, #0
 80021de:	4891      	ldr	r0, [pc, #580]	; (8002424 <initGSMSIM868+0x368>)
 80021e0:	f013 fc02 	bl	80159e8 <memset>
	strcat((char *)gau8GSM_MQTTOPEN,(char *)gau8GSM_ATQMQTTOPEN);
 80021e4:	4990      	ldr	r1, [pc, #576]	; (8002428 <initGSMSIM868+0x36c>)
 80021e6:	488f      	ldr	r0, [pc, #572]	; (8002424 <initGSMSIM868+0x368>)
 80021e8:	f014 fbc8 	bl	801697c <strcat>
	strcat((char *)gau8GSM_MQTTOPEN,(char *)"\"");
 80021ec:	488d      	ldr	r0, [pc, #564]	; (8002424 <initGSMSIM868+0x368>)
 80021ee:	f7fe fbf9 	bl	80009e4 <strlen>
 80021f2:	4603      	mov	r3, r0
 80021f4:	461a      	mov	r2, r3
 80021f6:	4b8b      	ldr	r3, [pc, #556]	; (8002424 <initGSMSIM868+0x368>)
 80021f8:	4413      	add	r3, r2
 80021fa:	4985      	ldr	r1, [pc, #532]	; (8002410 <initGSMSIM868+0x354>)
 80021fc:	461a      	mov	r2, r3
 80021fe:	460b      	mov	r3, r1
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	8013      	strh	r3, [r2, #0]
	strcat((char *)gau8GSM_MQTTOPEN,(char *)MQTTUrl);
 8002204:	4887      	ldr	r0, [pc, #540]	; (8002424 <initGSMSIM868+0x368>)
 8002206:	f7fe fbed 	bl	80009e4 <strlen>
 800220a:	4603      	mov	r3, r0
 800220c:	461a      	mov	r2, r3
 800220e:	4b85      	ldr	r3, [pc, #532]	; (8002424 <initGSMSIM868+0x368>)
 8002210:	4413      	add	r3, r2
 8002212:	4a86      	ldr	r2, [pc, #536]	; (800242c <initGSMSIM868+0x370>)
 8002214:	461d      	mov	r5, r3
 8002216:	4614      	mov	r4, r2
 8002218:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800221a:	6028      	str	r0, [r5, #0]
 800221c:	6069      	str	r1, [r5, #4]
 800221e:	60aa      	str	r2, [r5, #8]
 8002220:	60eb      	str	r3, [r5, #12]
 8002222:	8823      	ldrh	r3, [r4, #0]
 8002224:	78a2      	ldrb	r2, [r4, #2]
 8002226:	822b      	strh	r3, [r5, #16]
 8002228:	4613      	mov	r3, r2
 800222a:	74ab      	strb	r3, [r5, #18]
	strcat((char *)gau8GSM_MQTTOPEN,(char *)"\"");
 800222c:	487d      	ldr	r0, [pc, #500]	; (8002424 <initGSMSIM868+0x368>)
 800222e:	f7fe fbd9 	bl	80009e4 <strlen>
 8002232:	4603      	mov	r3, r0
 8002234:	461a      	mov	r2, r3
 8002236:	4b7b      	ldr	r3, [pc, #492]	; (8002424 <initGSMSIM868+0x368>)
 8002238:	4413      	add	r3, r2
 800223a:	4975      	ldr	r1, [pc, #468]	; (8002410 <initGSMSIM868+0x354>)
 800223c:	461a      	mov	r2, r3
 800223e:	460b      	mov	r3, r1
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	8013      	strh	r3, [r2, #0]
	strcat((char *)gau8GSM_MQTTOPEN,(char *)",");
 8002244:	4877      	ldr	r0, [pc, #476]	; (8002424 <initGSMSIM868+0x368>)
 8002246:	f7fe fbcd 	bl	80009e4 <strlen>
 800224a:	4603      	mov	r3, r0
 800224c:	461a      	mov	r2, r3
 800224e:	4b75      	ldr	r3, [pc, #468]	; (8002424 <initGSMSIM868+0x368>)
 8002250:	4413      	add	r3, r2
 8002252:	4977      	ldr	r1, [pc, #476]	; (8002430 <initGSMSIM868+0x374>)
 8002254:	461a      	mov	r2, r3
 8002256:	460b      	mov	r3, r1
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	8013      	strh	r3, [r2, #0]
	strcat((char *)gau8GSM_MQTTOPEN,(char *)MQTTPort);
 800225c:	4871      	ldr	r0, [pc, #452]	; (8002424 <initGSMSIM868+0x368>)
 800225e:	f7fe fbc1 	bl	80009e4 <strlen>
 8002262:	4603      	mov	r3, r0
 8002264:	461a      	mov	r2, r3
 8002266:	4b6f      	ldr	r3, [pc, #444]	; (8002424 <initGSMSIM868+0x368>)
 8002268:	4413      	add	r3, r2
 800226a:	4a72      	ldr	r2, [pc, #456]	; (8002434 <initGSMSIM868+0x378>)
 800226c:	6810      	ldr	r0, [r2, #0]
 800226e:	6018      	str	r0, [r3, #0]
 8002270:	7912      	ldrb	r2, [r2, #4]
 8002272:	711a      	strb	r2, [r3, #4]
	strcat((char *)gau8GSM_MQTTOPEN,(char *)"\r\n");
 8002274:	486b      	ldr	r0, [pc, #428]	; (8002424 <initGSMSIM868+0x368>)
 8002276:	f7fe fbb5 	bl	80009e4 <strlen>
 800227a:	4603      	mov	r3, r0
 800227c:	461a      	mov	r2, r3
 800227e:	4b69      	ldr	r3, [pc, #420]	; (8002424 <initGSMSIM868+0x368>)
 8002280:	4413      	add	r3, r2
 8002282:	4a67      	ldr	r2, [pc, #412]	; (8002420 <initGSMSIM868+0x364>)
 8002284:	8811      	ldrh	r1, [r2, #0]
 8002286:	7892      	ldrb	r2, [r2, #2]
 8002288:	8019      	strh	r1, [r3, #0]
 800228a:	709a      	strb	r2, [r3, #2]

	memset(gau8GSM_MQTTCONN, 0x00, (150 * sizeof(char)));
 800228c:	2296      	movs	r2, #150	; 0x96
 800228e:	2100      	movs	r1, #0
 8002290:	4869      	ldr	r0, [pc, #420]	; (8002438 <initGSMSIM868+0x37c>)
 8002292:	f013 fba9 	bl	80159e8 <memset>
	strcat((char *)gau8GSM_MQTTCONN,(char *)gau8GSM_ATQMTCONN);
 8002296:	4969      	ldr	r1, [pc, #420]	; (800243c <initGSMSIM868+0x380>)
 8002298:	4867      	ldr	r0, [pc, #412]	; (8002438 <initGSMSIM868+0x37c>)
 800229a:	f014 fb6f 	bl	801697c <strcat>
	strcat((char *)gau8GSM_MQTTCONN,(char *)"\"");
 800229e:	4866      	ldr	r0, [pc, #408]	; (8002438 <initGSMSIM868+0x37c>)
 80022a0:	f7fe fba0 	bl	80009e4 <strlen>
 80022a4:	4603      	mov	r3, r0
 80022a6:	461a      	mov	r2, r3
 80022a8:	4b63      	ldr	r3, [pc, #396]	; (8002438 <initGSMSIM868+0x37c>)
 80022aa:	4413      	add	r3, r2
 80022ac:	4958      	ldr	r1, [pc, #352]	; (8002410 <initGSMSIM868+0x354>)
 80022ae:	461a      	mov	r2, r3
 80022b0:	460b      	mov	r3, r1
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	8013      	strh	r3, [r2, #0]
	strcpy(MQTT_ClientID,(char * )dinfo);
 80022b6:	4962      	ldr	r1, [pc, #392]	; (8002440 <initGSMSIM868+0x384>)
 80022b8:	4862      	ldr	r0, [pc, #392]	; (8002444 <initGSMSIM868+0x388>)
 80022ba:	f014 fb7b 	bl	80169b4 <strcpy>
	strcat((char *)gau8GSM_MQTTCONN,(char *)MQTT_ClientID);
 80022be:	4961      	ldr	r1, [pc, #388]	; (8002444 <initGSMSIM868+0x388>)
 80022c0:	485d      	ldr	r0, [pc, #372]	; (8002438 <initGSMSIM868+0x37c>)
 80022c2:	f014 fb5b 	bl	801697c <strcat>
	strcat((char *)gau8GSM_MQTTCONN,(char *)"\",\"");
 80022c6:	485c      	ldr	r0, [pc, #368]	; (8002438 <initGSMSIM868+0x37c>)
 80022c8:	f7fe fb8c 	bl	80009e4 <strlen>
 80022cc:	4603      	mov	r3, r0
 80022ce:	461a      	mov	r2, r3
 80022d0:	4b59      	ldr	r3, [pc, #356]	; (8002438 <initGSMSIM868+0x37c>)
 80022d2:	4413      	add	r3, r2
 80022d4:	4a5c      	ldr	r2, [pc, #368]	; (8002448 <initGSMSIM868+0x38c>)
 80022d6:	6810      	ldr	r0, [r2, #0]
 80022d8:	6018      	str	r0, [r3, #0]
	strcat((char *)gau8GSM_MQTTCONN,(char *)MQTT_UserName);
	strcat((char *)gau8GSM_MQTTCONN,(char *)"\",\"");
 80022da:	4857      	ldr	r0, [pc, #348]	; (8002438 <initGSMSIM868+0x37c>)
 80022dc:	f7fe fb82 	bl	80009e4 <strlen>
 80022e0:	4603      	mov	r3, r0
 80022e2:	461a      	mov	r2, r3
 80022e4:	4b54      	ldr	r3, [pc, #336]	; (8002438 <initGSMSIM868+0x37c>)
 80022e6:	4413      	add	r3, r2
 80022e8:	4a57      	ldr	r2, [pc, #348]	; (8002448 <initGSMSIM868+0x38c>)
 80022ea:	6810      	ldr	r0, [r2, #0]
 80022ec:	6018      	str	r0, [r3, #0]
	strcat((char *)gau8GSM_MQTTCONN,(char *)MQTT_Password);
	strcat((char *)gau8GSM_MQTTCONN,(char *)"\"\r\n");
 80022ee:	4852      	ldr	r0, [pc, #328]	; (8002438 <initGSMSIM868+0x37c>)
 80022f0:	f7fe fb78 	bl	80009e4 <strlen>
 80022f4:	4603      	mov	r3, r0
 80022f6:	461a      	mov	r2, r3
 80022f8:	4b4f      	ldr	r3, [pc, #316]	; (8002438 <initGSMSIM868+0x37c>)
 80022fa:	4413      	add	r3, r2
 80022fc:	4a53      	ldr	r2, [pc, #332]	; (800244c <initGSMSIM868+0x390>)
 80022fe:	6810      	ldr	r0, [r2, #0]
 8002300:	6018      	str	r0, [r3, #0]

	memset(gau8GSM_MQTTSUB, 0x00, (200 * sizeof(char)));
 8002302:	22c8      	movs	r2, #200	; 0xc8
 8002304:	2100      	movs	r1, #0
 8002306:	4852      	ldr	r0, [pc, #328]	; (8002450 <initGSMSIM868+0x394>)
 8002308:	f013 fb6e 	bl	80159e8 <memset>
	strcat((char *)gau8GSM_MQTTSUB,(char *)gau8GSM_ATQMTSUB);
 800230c:	4951      	ldr	r1, [pc, #324]	; (8002454 <initGSMSIM868+0x398>)
 800230e:	4850      	ldr	r0, [pc, #320]	; (8002450 <initGSMSIM868+0x394>)
 8002310:	f014 fb34 	bl	801697c <strcat>
	strcat((char *)gau8GSM_MQTTSUB,(char *)"\"");
 8002314:	484e      	ldr	r0, [pc, #312]	; (8002450 <initGSMSIM868+0x394>)
 8002316:	f7fe fb65 	bl	80009e4 <strlen>
 800231a:	4603      	mov	r3, r0
 800231c:	461a      	mov	r2, r3
 800231e:	4b4c      	ldr	r3, [pc, #304]	; (8002450 <initGSMSIM868+0x394>)
 8002320:	4413      	add	r3, r2
 8002322:	493b      	ldr	r1, [pc, #236]	; (8002410 <initGSMSIM868+0x354>)
 8002324:	461a      	mov	r2, r3
 8002326:	460b      	mov	r3, r1
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	8013      	strh	r3, [r2, #0]
	strcat((char *)gau8GSM_MQTTSUB,(char *) MQTT_SUBConfig);
 800232c:	4848      	ldr	r0, [pc, #288]	; (8002450 <initGSMSIM868+0x394>)
 800232e:	f7fe fb59 	bl	80009e4 <strlen>
 8002332:	4603      	mov	r3, r0
 8002334:	461a      	mov	r2, r3
 8002336:	4b46      	ldr	r3, [pc, #280]	; (8002450 <initGSMSIM868+0x394>)
 8002338:	4413      	add	r3, r2
 800233a:	4a47      	ldr	r2, [pc, #284]	; (8002458 <initGSMSIM868+0x39c>)
 800233c:	461d      	mov	r5, r3
 800233e:	4614      	mov	r4, r2
 8002340:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002342:	6028      	str	r0, [r5, #0]
 8002344:	6069      	str	r1, [r5, #4]
 8002346:	60aa      	str	r2, [r5, #8]
 8002348:	60eb      	str	r3, [r5, #12]
 800234a:	cc03      	ldmia	r4!, {r0, r1}
 800234c:	6128      	str	r0, [r5, #16]
 800234e:	6169      	str	r1, [r5, #20]
 8002350:	8823      	ldrh	r3, [r4, #0]
 8002352:	832b      	strh	r3, [r5, #24]
	strcat((char *)gau8GSM_MQTTSUB,(char *)"\",2\r\n");
 8002354:	483e      	ldr	r0, [pc, #248]	; (8002450 <initGSMSIM868+0x394>)
 8002356:	f7fe fb45 	bl	80009e4 <strlen>
 800235a:	4603      	mov	r3, r0
 800235c:	461a      	mov	r2, r3
 800235e:	4b3c      	ldr	r3, [pc, #240]	; (8002450 <initGSMSIM868+0x394>)
 8002360:	4413      	add	r3, r2
 8002362:	4a3e      	ldr	r2, [pc, #248]	; (800245c <initGSMSIM868+0x3a0>)
 8002364:	6810      	ldr	r0, [r2, #0]
 8002366:	6018      	str	r0, [r3, #0]
 8002368:	8892      	ldrh	r2, [r2, #4]
 800236a:	809a      	strh	r2, [r3, #4]


	strcat(gau8GSM_SMSRecepient,"\r\n");
 800236c:	4826      	ldr	r0, [pc, #152]	; (8002408 <initGSMSIM868+0x34c>)
 800236e:	f7fe fb39 	bl	80009e4 <strlen>
 8002372:	4603      	mov	r3, r0
 8002374:	461a      	mov	r2, r3
 8002376:	4b24      	ldr	r3, [pc, #144]	; (8002408 <initGSMSIM868+0x34c>)
 8002378:	4413      	add	r3, r2
 800237a:	4a29      	ldr	r2, [pc, #164]	; (8002420 <initGSMSIM868+0x364>)
 800237c:	8811      	ldrh	r1, [r2, #0]
 800237e:	7892      	ldrb	r2, [r2, #2]
 8002380:	8019      	strh	r1, [r3, #0]
 8002382:	709a      	strb	r2, [r3, #2]

	gsmInstance.strSystemSMS.u8NewMessage = FALSE;
 8002384:	4b15      	ldr	r3, [pc, #84]	; (80023dc <initGSMSIM868+0x320>)
 8002386:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 800238a:	331e      	adds	r3, #30
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]
	gsmInstance.enmcurrentTask = enmGSMTASK_RESET;
 8002390:	4b12      	ldr	r3, [pc, #72]	; (80023dc <initGSMSIM868+0x320>)
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2fae 	strb.w	r2, [r3, #4014]	; 0xfae
	gsmInstance.enmGSMPwrState = enmGSM_PWRNOTSTARTED;
 8002398:	4b10      	ldr	r3, [pc, #64]	; (80023dc <initGSMSIM868+0x320>)
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2fb0 	strb.w	r2, [r3, #4016]	; 0xfb0
	gsmInstance.u8isConnected = FALSE;
 80023a0:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <initGSMSIM868+0x320>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2f86 	strb.w	r2, [r3, #3974]	; 0xf86
	gsmInstance.u8GSM_Response_Character_Counter = 0;
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <initGSMSIM868+0x320>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	f8c3 2fa8 	str.w	r2, [r3, #4008]	; 0xfa8
	gsmInstance.u8gsmRegistrationStatus = FALSE;
 80023b0:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <initGSMSIM868+0x320>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2f84 	strb.w	r2, [r3, #3972]	; 0xf84
	gsmInstance.u8gsmSIMReadyStatus = FALSE;
 80023b8:	4b08      	ldr	r3, [pc, #32]	; (80023dc <initGSMSIM868+0x320>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2f83 	strb.w	r2, [r3, #3971]	; 0xf83
	gsmInstance.u8gsmRetryCount = GSM_MAX_RETRY;
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <initGSMSIM868+0x320>)
 80023c2:	2205      	movs	r2, #5
 80023c4:	f883 2f85 	strb.w	r2, [r3, #3973]	; 0xf85
	gsmInstance.boolAttemptFota= FALSE;
 80023c8:	4b04      	ldr	r3, [pc, #16]	; (80023dc <initGSMSIM868+0x320>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2f88 	strb.w	r2, [r3, #3976]	; 0xf88
	gsmInstance.u32GSMTimer = ONE_SEC;
 80023d0:	4b02      	ldr	r3, [pc, #8]	; (80023dc <initGSMSIM868+0x320>)
 80023d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023d6:	f8c3 2f90 	str.w	r2, [r3, #3984]	; 0xf90
 80023da:	e041      	b.n	8002460 <initGSMSIM868+0x3a4>
 80023dc:	200023e4 	.word	0x200023e4
 80023e0:	2000251a 	.word	0x2000251a
 80023e4:	20002510 	.word	0x20002510
 80023e8:	200028db 	.word	0x200028db
 80023ec:	2000253d 	.word	0x2000253d
 80023f0:	200028c1 	.word	0x200028c1
 80023f4:	20003395 	.word	0x20003395
 80023f8:	200033a2 	.word	0x200033a2
 80023fc:	200028c9 	.word	0x200028c9
 8002400:	20000310 	.word	0x20000310
 8002404:	200003c4 	.word	0x200003c4
 8002408:	20000478 	.word	0x20000478
 800240c:	20000228 	.word	0x20000228
 8002410:	0801b4c8 	.word	0x0801b4c8
 8002414:	2000074c 	.word	0x2000074c
 8002418:	0801b4cc 	.word	0x0801b4cc
 800241c:	0801b4d8 	.word	0x0801b4d8
 8002420:	0801b518 	.word	0x0801b518
 8002424:	20000568 	.word	0x20000568
 8002428:	20000558 	.word	0x20000558
 800242c:	0801bc94 	.word	0x0801bc94
 8002430:	0801b51c 	.word	0x0801b51c
 8002434:	0801bca8 	.word	0x0801bca8
 8002438:	200005dc 	.word	0x200005dc
 800243c:	200005cc 	.word	0x200005cc
 8002440:	20000000 	.word	0x20000000
 8002444:	200019ec 	.word	0x200019ec
 8002448:	0801b520 	.word	0x0801b520
 800244c:	0801b524 	.word	0x0801b524
 8002450:	20000684 	.word	0x20000684
 8002454:	20000674 	.word	0x20000674
 8002458:	0801bd20 	.word	0x0801bd20
 800245c:	0801b528 	.word	0x0801b528
	gu32GSMHangTimer = THREE_MIN;
 8002460:	4b1f      	ldr	r3, [pc, #124]	; (80024e0 <initGSMSIM868+0x424>)
 8002462:	4a20      	ldr	r2, [pc, #128]	; (80024e4 <initGSMSIM868+0x428>)
 8002464:	601a      	str	r2, [r3, #0]
	gsmInstance.u32GSMHeartbeatTimer = 0;
 8002466:	4b20      	ldr	r3, [pc, #128]	; (80024e8 <initGSMSIM868+0x42c>)
 8002468:	2200      	movs	r2, #0
 800246a:	f8c3 2f9c 	str.w	r2, [r3, #3996]	; 0xf9c
	gsmInstance.u8IllegalHttpResponseCounter = 0;
 800246e:	4b1e      	ldr	r3, [pc, #120]	; (80024e8 <initGSMSIM868+0x42c>)
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2f8a 	strb.w	r2, [r3, #3978]	; 0xf8a
	gsmInstance.enmGSMCommandResponseState = enmGSM_SENDCMD;
 8002476:	4b1c      	ldr	r3, [pc, #112]	; (80024e8 <initGSMSIM868+0x42c>)
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2fac 	strb.w	r2, [r3, #4012]	; 0xfac
	gsmInstance.enmGSMCommand = enmGSMSTATE_ATE0;
 800247e:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <initGSMSIM868+0x42c>)
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
	gsmInstance.enmGSMCommandState = enmGSM_CMDSEND;
 8002486:	4b18      	ldr	r3, [pc, #96]	; (80024e8 <initGSMSIM868+0x42c>)
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2fad 	strb.w	r2, [r3, #4013]	; 0xfad

	gu32ModuleInitTimer = FIVEHUNDRED_MS;
 800248e:	4b17      	ldr	r3, [pc, #92]	; (80024ec <initGSMSIM868+0x430>)
 8002490:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002494:	601a      	str	r2, [r3, #0]
	gu8ModuleInitFlag = TRUE;
 8002496:	4b16      	ldr	r3, [pc, #88]	; (80024f0 <initGSMSIM868+0x434>)
 8002498:	2201      	movs	r2, #1
 800249a:	701a      	strb	r2, [r3, #0]
	gu8ModuleInitNotifyCnt = 0;
 800249c:	4b15      	ldr	r3, [pc, #84]	; (80024f4 <initGSMSIM868+0x438>)
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPS_LED_GPIO_Port, GPS_LED_Pin,GPIO_PIN_RESET);
 80024a2:	2200      	movs	r2, #0
 80024a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024ac:	f00c fdc8 	bl	800f040 <HAL_GPIO_WritePin>

	g_u8HttpConEstablishedFlag = 0;
 80024b0:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <initGSMSIM868+0x43c>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	701a      	strb	r2, [r3, #0]
	/* Potential Hang Issue due to this variable */
	gu32ModuleInitComplete = 0;
 80024b6:	4b11      	ldr	r3, [pc, #68]	; (80024fc <initGSMSIM868+0x440>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
	 u8daignostic|=(1<<6);
 80024bc:	4b10      	ldr	r3, [pc, #64]	; (8002500 <initGSMSIM868+0x444>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <initGSMSIM868+0x444>)
 80024c8:	701a      	strb	r2, [r3, #0]
	GSMInitCompleteFlag = FALSE;
 80024ca:	4b0e      	ldr	r3, [pc, #56]	; (8002504 <initGSMSIM868+0x448>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	701a      	strb	r2, [r3, #0]

	SUBTriggerFlag = FALSE;
 80024d0:	4b0d      	ldr	r3, [pc, #52]	; (8002508 <initGSMSIM868+0x44c>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	701a      	strb	r2, [r3, #0]
	gu32FotaRquestFlag =FALSE;
 80024d6:	4b0d      	ldr	r3, [pc, #52]	; (800250c <initGSMSIM868+0x450>)
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
//	FOTACompleteFlag = FALSE;
#if(DEBUGENABLE == TRUE)
	strcat(DebugBuff,"\r\nGSM Module Init ......\r\n");
#endif					
}
 80024dc:	bf00      	nop
 80024de:	bdb0      	pop	{r4, r5, r7, pc}
 80024e0:	20002170 	.word	0x20002170
 80024e4:	0002bf20 	.word	0x0002bf20
 80024e8:	200023e4 	.word	0x200023e4
 80024ec:	20002174 	.word	0x20002174
 80024f0:	20001a55 	.word	0x20001a55
 80024f4:	20001a84 	.word	0x20001a84
 80024f8:	20001a1e 	.word	0x20001a1e
 80024fc:	20001a50 	.word	0x20001a50
 8002500:	20001a86 	.word	0x20001a86
 8002504:	20001a85 	.word	0x20001a85
 8002508:	20001871 	.word	0x20001871
 800250c:	20001874 	.word	0x20001874

08002510 <operateGSMSIM868>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void operateGSMSIM868()
{
 8002510:	b590      	push	{r4, r7, lr}
 8002512:	f5ad 5d96 	sub.w	sp, sp, #4800	; 0x12c0
 8002516:	b085      	sub	sp, #20
 8002518:	f241 27d0 	movw	r7, #4816	; 0x12d0
 800251c:	446f      	add	r7, sp
	if(gsmInstance.u32GSMTimer != 0)
 800251e:	4bbd      	ldr	r3, [pc, #756]	; (8002814 <operateGSMSIM868+0x304>)
 8002520:	f8d3 3f90 	ldr.w	r3, [r3, #3984]	; 0xf90
 8002524:	2b00      	cmp	r3, #0
 8002526:	f040 81a4 	bne.w	8002872 <operateGSMSIM868+0x362>
		return;

	if(gsmInstance.enmcurrentTask > 9)
 800252a:	4bba      	ldr	r3, [pc, #744]	; (8002814 <operateGSMSIM868+0x304>)
 800252c:	f893 3fae 	ldrb.w	r3, [r3, #4014]	; 0xfae
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b09      	cmp	r3, #9
 8002534:	d903      	bls.n	800253e <operateGSMSIM868+0x2e>
	{
		gsmInstance.enmcurrentTask = 0;
 8002536:	4bb7      	ldr	r3, [pc, #732]	; (8002814 <operateGSMSIM868+0x304>)
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2fae 	strb.w	r2, [r3, #4014]	; 0xfae
	}

	/* Operate Current Task */
	switch(gsmInstance.enmcurrentTask)
 800253e:	4bb5      	ldr	r3, [pc, #724]	; (8002814 <operateGSMSIM868+0x304>)
 8002540:	f893 3fae 	ldrb.w	r3, [r3, #4014]	; 0xfae
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b09      	cmp	r3, #9
 8002548:	f200 818b 	bhi.w	8002862 <operateGSMSIM868+0x352>
 800254c:	a201      	add	r2, pc, #4	; (adr r2, 8002554 <operateGSMSIM868+0x44>)
 800254e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002552:	bf00      	nop
 8002554:	0800257d 	.word	0x0800257d
 8002558:	0800260d 	.word	0x0800260d
 800255c:	08002719 	.word	0x08002719
 8002560:	08002735 	.word	0x08002735
 8002564:	08002699 	.word	0x08002699
 8002568:	080026d9 	.word	0x080026d9
 800256c:	0800267d 	.word	0x0800267d
 8002570:	0800280f 	.word	0x0800280f
 8002574:	08002835 	.word	0x08002835
 8002578:	08002851 	.word	0x08002851
	{
		case enmGSMTASK_RESET:

			if(gsmInstance.enmGSMPwrState == enmGSM_PWRNOTSTARTED)
 800257c:	4ba5      	ldr	r3, [pc, #660]	; (8002814 <operateGSMSIM868+0x304>)
 800257e:	f893 3fb0 	ldrb.w	r3, [r3, #4016]	; 0xfb0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10f      	bne.n	80025a6 <operateGSMSIM868+0x96>
			{
				HAL_GPIO_WritePin(GSM_PWR_KEY_GPIO_Port,GSM_PWR_KEY_Pin,GPIO_PIN_SET);
 8002586:	2201      	movs	r2, #1
 8002588:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800258c:	48a2      	ldr	r0, [pc, #648]	; (8002818 <operateGSMSIM868+0x308>)
 800258e:	f00c fd57 	bl	800f040 <HAL_GPIO_WritePin>
				gsmInstance.u32GSMTimer =  SEVEN_SEC;
 8002592:	4ba0      	ldr	r3, [pc, #640]	; (8002814 <operateGSMSIM868+0x304>)
 8002594:	f641 3258 	movw	r2, #7000	; 0x1b58
 8002598:	f8c3 2f90 	str.w	r2, [r3, #3984]	; 0xf90
				gsmInstance.enmGSMPwrState = enmGSM_PWRSTARTED;
 800259c:	4b9d      	ldr	r3, [pc, #628]	; (8002814 <operateGSMSIM868+0x304>)
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2fb0 	strb.w	r2, [r3, #4016]	; 0xfb0
 80025a4:	e027      	b.n	80025f6 <operateGSMSIM868+0xe6>
			}
			else if(gsmInstance.enmGSMPwrState == enmGSM_PWRSTARTED)
 80025a6:	4b9b      	ldr	r3, [pc, #620]	; (8002814 <operateGSMSIM868+0x304>)
 80025a8:	f893 3fb0 	ldrb.w	r3, [r3, #4016]	; 0xfb0
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d113      	bne.n	80025d8 <operateGSMSIM868+0xc8>
			{
				HAL_GPIO_WritePin(GSM_PWR_KEY_GPIO_Port,GSM_PWR_KEY_Pin,GPIO_PIN_RESET);
 80025b0:	2200      	movs	r2, #0
 80025b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025b6:	4898      	ldr	r0, [pc, #608]	; (8002818 <operateGSMSIM868+0x308>)
 80025b8:	f00c fd42 	bl	800f040 <HAL_GPIO_WritePin>
				gsmInstance.u32GSMTimer = FOUR_SEC;
 80025bc:	4b95      	ldr	r3, [pc, #596]	; (8002814 <operateGSMSIM868+0x304>)
 80025be:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80025c2:	f8c3 2f90 	str.w	r2, [r3, #3984]	; 0xf90
				gsmInstance.enmcurrentTask = enmGSMTASK_INITMODULE;
 80025c6:	4b93      	ldr	r3, [pc, #588]	; (8002814 <operateGSMSIM868+0x304>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 2fae 	strb.w	r2, [r3, #4014]	; 0xfae
				gsmInstance.enmGSMPwrState = enmGSM_PWRCOMPLETED;
 80025ce:	4b91      	ldr	r3, [pc, #580]	; (8002814 <operateGSMSIM868+0x304>)
 80025d0:	2202      	movs	r2, #2
 80025d2:	f883 2fb0 	strb.w	r2, [r3, #4016]	; 0xfb0
 80025d6:	e00e      	b.n	80025f6 <operateGSMSIM868+0xe6>
			}
			else
			{
				if((gsmInstance.enmGSMPwrState == enmGSM_PWRCOMPLETED) && (gsmInstance.enmcurrentTask == enmGSMTASK_RESET))
 80025d8:	4b8e      	ldr	r3, [pc, #568]	; (8002814 <operateGSMSIM868+0x304>)
 80025da:	f893 3fb0 	ldrb.w	r3, [r3, #4016]	; 0xfb0
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d109      	bne.n	80025f6 <operateGSMSIM868+0xe6>
 80025e2:	4b8c      	ldr	r3, [pc, #560]	; (8002814 <operateGSMSIM868+0x304>)
 80025e4:	f893 3fae 	ldrb.w	r3, [r3, #4014]	; 0xfae
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d103      	bne.n	80025f6 <operateGSMSIM868+0xe6>
				{
					gsmInstance.enmGSMPwrState = enmGSM_PWRNOTSTARTED;
 80025ee:	4b89      	ldr	r3, [pc, #548]	; (8002814 <operateGSMSIM868+0x304>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2fb0 	strb.w	r2, [r3, #4016]	; 0xfb0
				}
			}

			if(gsmInstance.enmGSMPwrState > 2)
 80025f6:	4b87      	ldr	r3, [pc, #540]	; (8002814 <operateGSMSIM868+0x304>)
 80025f8:	f893 3fb0 	ldrb.w	r3, [r3, #4016]	; 0xfb0
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	f240 8133 	bls.w	8002868 <operateGSMSIM868+0x358>
			{
				gsmInstance.enmGSMPwrState = enmGSM_PWRNOTSTARTED;
 8002602:	4b84      	ldr	r3, [pc, #528]	; (8002814 <operateGSMSIM868+0x304>)
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2fb0 	strb.w	r2, [r3, #4016]	; 0xfb0
			}
			break;
 800260a:	e12d      	b.n	8002868 <operateGSMSIM868+0x358>


		case enmGSMTASK_INITMODULE:
			/* Initialize Module : ATE0 to HTTP URL */
			if(gsmInstance.enmGSMCommandState == enmGSM_CMDTIMEOUT)
 800260c:	4b81      	ldr	r3, [pc, #516]	; (8002814 <operateGSMSIM868+0x304>)
 800260e:	f893 3fad 	ldrb.w	r3, [r3, #4013]	; 0xfad
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b05      	cmp	r3, #5
 8002616:	d102      	bne.n	800261e <operateGSMSIM868+0x10e>
			{
				/* Reset Module */
				initGSMSIM868();
 8002618:	f7ff fd50 	bl	80020bc <initGSMSIM868>
				else
				{
					sendGSMCommand(gsmInstance);
				}
			}
			break;
 800261c:	e125      	b.n	800286a <operateGSMSIM868+0x35a>
				if(gsmInstance.enmGSMCommand == enmGSMSTATE_MQTTPUBEX)
 800261e:	4b7d      	ldr	r3, [pc, #500]	; (8002814 <operateGSMSIM868+0x304>)
 8002620:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 8002624:	2b19      	cmp	r3, #25
 8002626:	d11b      	bne.n	8002660 <operateGSMSIM868+0x150>
					if(gu8CheckSMS == TRUE)
 8002628:	4b7c      	ldr	r3, [pc, #496]	; (800281c <operateGSMSIM868+0x30c>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d10e      	bne.n	800264e <operateGSMSIM868+0x13e>
						gsmInstance.enmGSMCommand =  enmGSMSTATE_GPSNMEA;
 8002630:	4b78      	ldr	r3, [pc, #480]	; (8002814 <operateGSMSIM868+0x304>)
 8002632:	2214      	movs	r2, #20
 8002634:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
						gsmInstance.enmcurrentTask = enmGSMTASK_UPDATELOCATION;
 8002638:	4b76      	ldr	r3, [pc, #472]	; (8002814 <operateGSMSIM868+0x304>)
 800263a:	2202      	movs	r2, #2
 800263c:	f883 2fae 	strb.w	r2, [r3, #4014]	; 0xfae
						gu8ReadSMS = TRUE;
 8002640:	4b77      	ldr	r3, [pc, #476]	; (8002820 <operateGSMSIM868+0x310>)
 8002642:	2201      	movs	r2, #1
 8002644:	701a      	strb	r2, [r3, #0]
						gu8CheckSMS = FALSE;
 8002646:	4b75      	ldr	r3, [pc, #468]	; (800281c <operateGSMSIM868+0x30c>)
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
			break;
 800264c:	e10d      	b.n	800286a <operateGSMSIM868+0x35a>
						gsmInstance.enmGSMCommand =  enmGSMSTATE_GPSNMEA;
 800264e:	4b71      	ldr	r3, [pc, #452]	; (8002814 <operateGSMSIM868+0x304>)
 8002650:	2214      	movs	r2, #20
 8002652:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
						gsmInstance.enmcurrentTask = enmGSMTASK_UPDATELOCATION;
 8002656:	4b6f      	ldr	r3, [pc, #444]	; (8002814 <operateGSMSIM868+0x304>)
 8002658:	2202      	movs	r2, #2
 800265a:	f883 2fae 	strb.w	r2, [r3, #4014]	; 0xfae
			break;
 800265e:	e104      	b.n	800286a <operateGSMSIM868+0x35a>
					sendGSMCommand(gsmInstance);
 8002660:	4c6c      	ldr	r4, [pc, #432]	; (8002814 <operateGSMSIM868+0x304>)
 8002662:	4668      	mov	r0, sp
 8002664:	f104 0310 	add.w	r3, r4, #16
 8002668:	f241 22d0 	movw	r2, #4816	; 0x12d0
 800266c:	4619      	mov	r1, r3
 800266e:	f013 f9ad 	bl	80159cc <memcpy>
 8002672:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002676:	f000 f907 	bl	8002888 <sendGSMCommand>
			break;
 800267a:	e0f6      	b.n	800286a <operateGSMSIM868+0x35a>

		case enmGSMTASK_ISALIVE:
				sendGSMCommand(gsmInstance);
 800267c:	4c65      	ldr	r4, [pc, #404]	; (8002814 <operateGSMSIM868+0x304>)
 800267e:	4668      	mov	r0, sp
 8002680:	f104 0310 	add.w	r3, r4, #16
 8002684:	f241 22d0 	movw	r2, #4816	; 0x12d0
 8002688:	4619      	mov	r1, r3
 800268a:	f013 f99f 	bl	80159cc <memcpy>
 800268e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002692:	f000 f8f9 	bl	8002888 <sendGSMCommand>
			break;
 8002696:	e0e8      	b.n	800286a <operateGSMSIM868+0x35a>

		case enmGSMTASK_READSMS:
			if(gu8ReadSMS == TRUE)
 8002698:	4b61      	ldr	r3, [pc, #388]	; (8002820 <operateGSMSIM868+0x310>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d10d      	bne.n	80026bc <operateGSMSIM868+0x1ac>
				sendGSMCommand(gsmInstance);
 80026a0:	4c5c      	ldr	r4, [pc, #368]	; (8002814 <operateGSMSIM868+0x304>)
 80026a2:	4668      	mov	r0, sp
 80026a4:	f104 0310 	add.w	r3, r4, #16
 80026a8:	f241 22d0 	movw	r2, #4816	; 0x12d0
 80026ac:	4619      	mov	r1, r3
 80026ae:	f013 f98d 	bl	80159cc <memcpy>
 80026b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80026b6:	f000 f8e7 	bl	8002888 <sendGSMCommand>
				gsmInstance.enmGSMCommand = enmGSMSTATE_GPSNMEA;
				gsmInstance.enmcurrentTask = enmGSMTASK_UPDATELOCATION;
				gsmInstance.u32GSMTimer = TWO_SEC;
			}

			break;
 80026ba:	e0d6      	b.n	800286a <operateGSMSIM868+0x35a>
				gsmInstance.enmGSMCommand = enmGSMSTATE_GPSNMEA;
 80026bc:	4b55      	ldr	r3, [pc, #340]	; (8002814 <operateGSMSIM868+0x304>)
 80026be:	2214      	movs	r2, #20
 80026c0:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
				gsmInstance.enmcurrentTask = enmGSMTASK_UPDATELOCATION;
 80026c4:	4b53      	ldr	r3, [pc, #332]	; (8002814 <operateGSMSIM868+0x304>)
 80026c6:	2202      	movs	r2, #2
 80026c8:	f883 2fae 	strb.w	r2, [r3, #4014]	; 0xfae
				gsmInstance.u32GSMTimer = TWO_SEC;
 80026cc:	4b51      	ldr	r3, [pc, #324]	; (8002814 <operateGSMSIM868+0x304>)
 80026ce:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80026d2:	f8c3 2f90 	str.w	r2, [r3, #3984]	; 0xf90
			break;
 80026d6:	e0c8      	b.n	800286a <operateGSMSIM868+0x35a>

		case enmGSMTASK_SENDSMS:
			if(gu8SendSMS == TRUE)
 80026d8:	4b52      	ldr	r3, [pc, #328]	; (8002824 <operateGSMSIM868+0x314>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d10d      	bne.n	80026fc <operateGSMSIM868+0x1ec>
				sendGSMCommand(gsmInstance);
 80026e0:	4c4c      	ldr	r4, [pc, #304]	; (8002814 <operateGSMSIM868+0x304>)
 80026e2:	4668      	mov	r0, sp
 80026e4:	f104 0310 	add.w	r3, r4, #16
 80026e8:	f241 22d0 	movw	r2, #4816	; 0x12d0
 80026ec:	4619      	mov	r1, r3
 80026ee:	f013 f96d 	bl	80159cc <memcpy>
 80026f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80026f6:	f000 f8c7 	bl	8002888 <sendGSMCommand>
			{
				gsmInstance.enmGSMCommand = enmGSMSTATE_GPSNMEA;
				gsmInstance.enmcurrentTask = enmGSMTASK_UPDATELOCATION;
				gsmInstance.u32GSMTimer = TWO_SEC;
			}
			break;
 80026fa:	e0b6      	b.n	800286a <operateGSMSIM868+0x35a>
				gsmInstance.enmGSMCommand = enmGSMSTATE_GPSNMEA;
 80026fc:	4b45      	ldr	r3, [pc, #276]	; (8002814 <operateGSMSIM868+0x304>)
 80026fe:	2214      	movs	r2, #20
 8002700:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
				gsmInstance.enmcurrentTask = enmGSMTASK_UPDATELOCATION;
 8002704:	4b43      	ldr	r3, [pc, #268]	; (8002814 <operateGSMSIM868+0x304>)
 8002706:	2202      	movs	r2, #2
 8002708:	f883 2fae 	strb.w	r2, [r3, #4014]	; 0xfae
				gsmInstance.u32GSMTimer = TWO_SEC;
 800270c:	4b41      	ldr	r3, [pc, #260]	; (8002814 <operateGSMSIM868+0x304>)
 800270e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002712:	f8c3 2f90 	str.w	r2, [r3, #3984]	; 0xf90
			break;
 8002716:	e0a8      	b.n	800286a <operateGSMSIM868+0x35a>

		case enmGSMTASK_UPDATELOCATION:
			/*Every 30 Sec */
			sendGSMCommand(gsmInstance);
 8002718:	4c3e      	ldr	r4, [pc, #248]	; (8002814 <operateGSMSIM868+0x304>)
 800271a:	4668      	mov	r0, sp
 800271c:	f104 0310 	add.w	r3, r4, #16
 8002720:	f241 22d0 	movw	r2, #4816	; 0x12d0
 8002724:	4619      	mov	r1, r3
 8002726:	f013 f951 	bl	80159cc <memcpy>
 800272a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800272e:	f000 f8ab 	bl	8002888 <sendGSMCommand>
			break;
 8002732:	e09a      	b.n	800286a <operateGSMSIM868+0x35a>
		case enmGSMTASK_UPLOADDATA:
		{

			/* Send Data from the Queue with upload Time Interval */
			//if((Queue_IsLiveQueueEmpty(&gsmLivePayload) == FALSE )&& (gsmLivePayload.data[gsmLivePayload.tail] != NULL))
			if(((Queue_IsLiveQueueEmpty(&gsmLivePayload) == FALSE )&& (gsmLivePayload.data[gsmLivePayload.tail] != NULL))
 8002734:	483c      	ldr	r0, [pc, #240]	; (8002828 <operateGSMSIM868+0x318>)
 8002736:	f003 fc8a 	bl	800604e <Queue_IsLiveQueueEmpty>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d107      	bne.n	8002750 <operateGSMSIM868+0x240>
 8002740:	4b39      	ldr	r3, [pc, #228]	; (8002828 <operateGSMSIM868+0x318>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	4a38      	ldr	r2, [pc, #224]	; (8002828 <operateGSMSIM868+0x318>)
 8002746:	3302      	adds	r3, #2
 8002748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10d      	bne.n	800276c <operateGSMSIM868+0x25c>
							||((Queue_IsBuffQueueEmpty(&gsmBuffPayload) == FALSE )&& (gsmBuffPayload.data[gsmBuffPayload.tail] != NULL)))
 8002750:	4836      	ldr	r0, [pc, #216]	; (800282c <operateGSMSIM868+0x31c>)
 8002752:	f003 fd4b 	bl	80061ec <Queue_IsBuffQueueEmpty>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d14e      	bne.n	80027fa <operateGSMSIM868+0x2ea>
 800275c:	4b33      	ldr	r3, [pc, #204]	; (800282c <operateGSMSIM868+0x31c>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	4a32      	ldr	r2, [pc, #200]	; (800282c <operateGSMSIM868+0x31c>)
 8002762:	3302      	adds	r3, #2
 8002764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d046      	beq.n	80027fa <operateGSMSIM868+0x2ea>
			{
				if((gu8HttpPayloadFlag == 0) && (gsmInstance.enmGSMCommand == enmGSMSTATE_ATHTTPDATA))
 800276c:	4b30      	ldr	r3, [pc, #192]	; (8002830 <operateGSMSIM868+0x320>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10a      	bne.n	800278a <operateGSMSIM868+0x27a>
 8002774:	4b27      	ldr	r3, [pc, #156]	; (8002814 <operateGSMSIM868+0x304>)
 8002776:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 800277a:	2b20      	cmp	r3, #32
 800277c:	d105      	bne.n	800278a <operateGSMSIM868+0x27a>
				{
					/* Update Payload Length once Every Cycle */
					updateHttpDataLength();
 800277e:	f001 f893 	bl	80038a8 <updateHttpDataLength>
					gu8HttpPayloadFlag = 1;
 8002782:	4b2b      	ldr	r3, [pc, #172]	; (8002830 <operateGSMSIM868+0x320>)
 8002784:	2201      	movs	r2, #1
 8002786:	701a      	strb	r2, [r3, #0]
 8002788:	e036      	b.n	80027f8 <operateGSMSIM868+0x2e8>
				}
				else if((gu8HttpPayloadFlag == 1) && (gsmInstance.enmGSMCommand == enmGSMSTATE_SENDDATA))
 800278a:	4b29      	ldr	r3, [pc, #164]	; (8002830 <operateGSMSIM868+0x320>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d108      	bne.n	80027a4 <operateGSMSIM868+0x294>
 8002792:	4b20      	ldr	r3, [pc, #128]	; (8002814 <operateGSMSIM868+0x304>)
 8002794:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 8002798:	2b22      	cmp	r3, #34	; 0x22
 800279a:	d103      	bne.n	80027a4 <operateGSMSIM868+0x294>
				{
					/* Flag to update new data length */
					gu8HttpPayloadFlag = 0;
 800279c:	4b24      	ldr	r3, [pc, #144]	; (8002830 <operateGSMSIM868+0x320>)
 800279e:	2200      	movs	r2, #0
 80027a0:	701a      	strb	r2, [r3, #0]
 80027a2:	e029      	b.n	80027f8 <operateGSMSIM868+0x2e8>
				}
				else if((gu8HttpPayloadFlag == 0) && (gsmInstance.enmGSMCommand ==enmGSMSTATE_MQTTPUBEX))
 80027a4:	4b22      	ldr	r3, [pc, #136]	; (8002830 <operateGSMSIM868+0x320>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10a      	bne.n	80027c2 <operateGSMSIM868+0x2b2>
 80027ac:	4b19      	ldr	r3, [pc, #100]	; (8002814 <operateGSMSIM868+0x304>)
 80027ae:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 80027b2:	2b19      	cmp	r3, #25
 80027b4:	d105      	bne.n	80027c2 <operateGSMSIM868+0x2b2>
				{
					updateHttpDataLength();
 80027b6:	f001 f877 	bl	80038a8 <updateHttpDataLength>
					gu8HttpPayloadFlag = 1;
 80027ba:	4b1d      	ldr	r3, [pc, #116]	; (8002830 <operateGSMSIM868+0x320>)
 80027bc:	2201      	movs	r2, #1
 80027be:	701a      	strb	r2, [r3, #0]
 80027c0:	e01a      	b.n	80027f8 <operateGSMSIM868+0x2e8>
				}
				else if((gu8HttpPayloadFlag == 1) && (gsmInstance.enmGSMCommand == enmGSMSTATE_SENDDATA))
 80027c2:	4b1b      	ldr	r3, [pc, #108]	; (8002830 <operateGSMSIM868+0x320>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d108      	bne.n	80027dc <operateGSMSIM868+0x2cc>
 80027ca:	4b12      	ldr	r3, [pc, #72]	; (8002814 <operateGSMSIM868+0x304>)
 80027cc:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 80027d0:	2b22      	cmp	r3, #34	; 0x22
 80027d2:	d103      	bne.n	80027dc <operateGSMSIM868+0x2cc>
				{
					/* Flag to update new data length */
					gu8HttpPayloadFlag = 0;
 80027d4:	4b16      	ldr	r3, [pc, #88]	; (8002830 <operateGSMSIM868+0x320>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	701a      	strb	r2, [r3, #0]
 80027da:	e00d      	b.n	80027f8 <operateGSMSIM868+0x2e8>
				}
				else
				{
					sendGSMCommand(gsmInstance);
 80027dc:	4c0d      	ldr	r4, [pc, #52]	; (8002814 <operateGSMSIM868+0x304>)
 80027de:	4668      	mov	r0, sp
 80027e0:	f104 0310 	add.w	r3, r4, #16
 80027e4:	f241 22d0 	movw	r2, #4816	; 0x12d0
 80027e8:	4619      	mov	r1, r3
 80027ea:	f013 f8ef 	bl	80159cc <memcpy>
 80027ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80027f2:	f000 f849 	bl	8002888 <sendGSMCommand>
				if((gu8HttpPayloadFlag == 0) && (gsmInstance.enmGSMCommand == enmGSMSTATE_ATHTTPDATA))
 80027f6:	e009      	b.n	800280c <operateGSMSIM868+0x2fc>
 80027f8:	e008      	b.n	800280c <operateGSMSIM868+0x2fc>
				}
			}
			else
			{
				gsmInstance.enmGSMCommand = enmGSMSTATE_GPSNMEA;
 80027fa:	4b06      	ldr	r3, [pc, #24]	; (8002814 <operateGSMSIM868+0x304>)
 80027fc:	2214      	movs	r2, #20
 80027fe:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
				gsmInstance.enmcurrentTask = enmGSMTASK_UPDATELOCATION;
 8002802:	4b04      	ldr	r3, [pc, #16]	; (8002814 <operateGSMSIM868+0x304>)
 8002804:	2202      	movs	r2, #2
 8002806:	f883 2fae 	strb.w	r2, [r3, #4014]	; 0xfae
			}
		}
			break;
 800280a:	e02e      	b.n	800286a <operateGSMSIM868+0x35a>
 800280c:	e02d      	b.n	800286a <operateGSMSIM868+0x35a>

		case enmGSMTASK_GETDATA:
			/* Provision for Two Way communication with Server : ex Modbus . Not Implemented
			 * In this Firmware */
			initGSMSIM868();
 800280e:	f7ff fc55 	bl	80020bc <initGSMSIM868>
			break;
 8002812:	e02a      	b.n	800286a <operateGSMSIM868+0x35a>
 8002814:	200023e4 	.word	0x200023e4
 8002818:	48000800 	.word	0x48000800
 800281c:	20001889 	.word	0x20001889
 8002820:	20001a20 	.word	0x20001a20
 8002824:	20001a1f 	.word	0x20001a1f
 8002828:	200023b4 	.word	0x200023b4
 800282c:	20002384 	.word	0x20002384
 8002830:	20001888 	.word	0x20001888

		case enmGSMTASK_DOWNLOADFOTAFILE:
				sendGSMCommand(gsmInstance);
 8002834:	4c11      	ldr	r4, [pc, #68]	; (800287c <operateGSMSIM868+0x36c>)
 8002836:	4668      	mov	r0, sp
 8002838:	f104 0310 	add.w	r3, r4, #16
 800283c:	f241 22d0 	movw	r2, #4816	; 0x12d0
 8002840:	4619      	mov	r1, r3
 8002842:	f013 f8c3 	bl	80159cc <memcpy>
 8002846:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800284a:	f000 f81d 	bl	8002888 <sendGSMCommand>
			break;
 800284e:	e00c      	b.n	800286a <operateGSMSIM868+0x35a>

		case enmGSMTASK_IDLE:
			gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 8002850:	4b0a      	ldr	r3, [pc, #40]	; (800287c <operateGSMSIM868+0x36c>)
 8002852:	2203      	movs	r2, #3
 8002854:	f883 2fae 	strb.w	r2, [r3, #4014]	; 0xfae
			gsmInstance.enmGSMCommand = enmGSMSTATE_MQTTPUBEX;
 8002858:	4b08      	ldr	r3, [pc, #32]	; (800287c <operateGSMSIM868+0x36c>)
 800285a:	2219      	movs	r2, #25
 800285c:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
			break;
 8002860:	e003      	b.n	800286a <operateGSMSIM868+0x35a>

		default:
			/* Log illegal State Error */
			initGSMSIM868();
 8002862:	f7ff fc2b 	bl	80020bc <initGSMSIM868>
			break;
 8002866:	e000      	b.n	800286a <operateGSMSIM868+0x35a>
			break;
 8002868:	bf00      	nop
	}
	gu32GSMHangTimer = THREE_MIN;
 800286a:	4b05      	ldr	r3, [pc, #20]	; (8002880 <operateGSMSIM868+0x370>)
 800286c:	4a05      	ldr	r2, [pc, #20]	; (8002884 <operateGSMSIM868+0x374>)
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	e000      	b.n	8002874 <operateGSMSIM868+0x364>
		return;
 8002872:	bf00      	nop
}
 8002874:	3704      	adds	r7, #4
 8002876:	46bd      	mov	sp, r7
 8002878:	bd90      	pop	{r4, r7, pc}
 800287a:	bf00      	nop
 800287c:	200023e4 	.word	0x200023e4
 8002880:	20002170 	.word	0x20002170
 8002884:	0002bf20 	.word	0x0002bf20

08002888 <sendGSMCommand>:
* <hr>
*
*******************************************************************************/
char bufferChunkBytes[6] = {'0'};
void sendGSMCommand()
{
 8002888:	b590      	push	{r4, r7, lr}
 800288a:	b091      	sub	sp, #68	; 0x44
 800288c:	af00      	add	r7, sp, #0
	static char * command;
	static uint32_t u8CharacterCounter;
	static uint32_t u8LoopCounter ;

	switch (gsmInstance.enmGSMCommandResponseState)
 800288e:	4b9b      	ldr	r3, [pc, #620]	; (8002afc <sendGSMCommand+0x274>)
 8002890:	f893 3fac 	ldrb.w	r3, [r3, #4012]	; 0xfac
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d004      	beq.n	80028a4 <sendGSMCommand+0x1c>
 800289a:	2b01      	cmp	r3, #1
 800289c:	f000 80e5 	beq.w	8002a6a <sendGSMCommand+0x1e2>
				u8GSMCharRcv = 0;
			}

			break;
	}
}
 80028a0:	f000 bff8 	b.w	8003894 <sendGSMCommand+0x100c>
			if(gsmInstance.enmGSMCommandState == enmGSM_CMDSEND)
 80028a4:	4b95      	ldr	r3, [pc, #596]	; (8002afc <sendGSMCommand+0x274>)
 80028a6:	f893 3fad 	ldrb.w	r3, [r3, #4013]	; 0xfad
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	f040 8083 	bne.w	80029b8 <sendGSMCommand+0x130>
				u8LoopCounter = 0;
 80028b2:	4b93      	ldr	r3, [pc, #588]	; (8002b00 <sendGSMCommand+0x278>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
				if(gsmInstance.enmGSMCommand == enmGSMSTATE_SENDDATA)
 80028b8:	4b90      	ldr	r3, [pc, #576]	; (8002afc <sendGSMCommand+0x274>)
 80028ba:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 80028be:	2b22      	cmp	r3, #34	; 0x22
 80028c0:	d128      	bne.n	8002914 <sendGSMCommand+0x8c>
					if(g_u8PayloadType == PAYLOD_TYPE_LIVE)
 80028c2:	4b90      	ldr	r3, [pc, #576]	; (8002b04 <sendGSMCommand+0x27c>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d108      	bne.n	80028dc <sendGSMCommand+0x54>
						command = gsmLivePayload.data[gsmLivePayload.tail];
 80028ca:	4b8f      	ldr	r3, [pc, #572]	; (8002b08 <sendGSMCommand+0x280>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	4a8e      	ldr	r2, [pc, #568]	; (8002b08 <sendGSMCommand+0x280>)
 80028d0:	3302      	adds	r3, #2
 80028d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d6:	4a8d      	ldr	r2, [pc, #564]	; (8002b0c <sendGSMCommand+0x284>)
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	e00b      	b.n	80028f4 <sendGSMCommand+0x6c>
					else if(g_u8PayloadType == PAYLOD_TYPE_BUFF)
 80028dc:	4b89      	ldr	r3, [pc, #548]	; (8002b04 <sendGSMCommand+0x27c>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d107      	bne.n	80028f4 <sendGSMCommand+0x6c>
						command = gsmBuffPayload.data[gsmBuffPayload.tail];
 80028e4:	4b8a      	ldr	r3, [pc, #552]	; (8002b10 <sendGSMCommand+0x288>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	4a89      	ldr	r2, [pc, #548]	; (8002b10 <sendGSMCommand+0x288>)
 80028ea:	3302      	adds	r3, #2
 80028ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f0:	4a86      	ldr	r2, [pc, #536]	; (8002b0c <sendGSMCommand+0x284>)
 80028f2:	6013      	str	r3, [r2, #0]
					if((command == NULL)||(strlen(command) < 20 ))
 80028f4:	4b85      	ldr	r3, [pc, #532]	; (8002b0c <sendGSMCommand+0x284>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d007      	beq.n	800290c <sendGSMCommand+0x84>
 80028fc:	4b83      	ldr	r3, [pc, #524]	; (8002b0c <sendGSMCommand+0x284>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f7fe f86f 	bl	80009e4 <strlen>
 8002906:	4603      	mov	r3, r0
 8002908:	2b13      	cmp	r3, #19
 800290a:	d83a      	bhi.n	8002982 <sendGSMCommand+0xfa>
						command = &g_u8PaylodLenMsgBuff[0];
 800290c:	4b7f      	ldr	r3, [pc, #508]	; (8002b0c <sendGSMCommand+0x284>)
 800290e:	4a81      	ldr	r2, [pc, #516]	; (8002b14 <sendGSMCommand+0x28c>)
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	e036      	b.n	8002982 <sendGSMCommand+0xfa>
				else if(gsmInstance.enmGSMCommand == enmGSMSTATE_MQTTPAYLOADDATA)
 8002914:	4b79      	ldr	r3, [pc, #484]	; (8002afc <sendGSMCommand+0x274>)
 8002916:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 800291a:	2b1a      	cmp	r3, #26
 800291c:	d128      	bne.n	8002970 <sendGSMCommand+0xe8>
					if(g_u8PayloadType == PAYLOD_TYPE_LIVE)
 800291e:	4b79      	ldr	r3, [pc, #484]	; (8002b04 <sendGSMCommand+0x27c>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d108      	bne.n	8002938 <sendGSMCommand+0xb0>
						command = gsmLivePayload.data[gsmLivePayload.tail];
 8002926:	4b78      	ldr	r3, [pc, #480]	; (8002b08 <sendGSMCommand+0x280>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	4a77      	ldr	r2, [pc, #476]	; (8002b08 <sendGSMCommand+0x280>)
 800292c:	3302      	adds	r3, #2
 800292e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002932:	4a76      	ldr	r2, [pc, #472]	; (8002b0c <sendGSMCommand+0x284>)
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	e00b      	b.n	8002950 <sendGSMCommand+0xc8>
					else if(g_u8PayloadType == PAYLOD_TYPE_BUFF)
 8002938:	4b72      	ldr	r3, [pc, #456]	; (8002b04 <sendGSMCommand+0x27c>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b02      	cmp	r3, #2
 800293e:	d107      	bne.n	8002950 <sendGSMCommand+0xc8>
						command = gsmBuffPayload.data[gsmBuffPayload.tail];
 8002940:	4b73      	ldr	r3, [pc, #460]	; (8002b10 <sendGSMCommand+0x288>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	4a72      	ldr	r2, [pc, #456]	; (8002b10 <sendGSMCommand+0x288>)
 8002946:	3302      	adds	r3, #2
 8002948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800294c:	4a6f      	ldr	r2, [pc, #444]	; (8002b0c <sendGSMCommand+0x284>)
 800294e:	6013      	str	r3, [r2, #0]
					if((command == NULL)||(strlen(command) < 20 ))
 8002950:	4b6e      	ldr	r3, [pc, #440]	; (8002b0c <sendGSMCommand+0x284>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d007      	beq.n	8002968 <sendGSMCommand+0xe0>
 8002958:	4b6c      	ldr	r3, [pc, #432]	; (8002b0c <sendGSMCommand+0x284>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f7fe f841 	bl	80009e4 <strlen>
 8002962:	4603      	mov	r3, r0
 8002964:	2b13      	cmp	r3, #19
 8002966:	d80c      	bhi.n	8002982 <sendGSMCommand+0xfa>
						command = &g_u8PaylodLenMsgBuff[0];
 8002968:	4b68      	ldr	r3, [pc, #416]	; (8002b0c <sendGSMCommand+0x284>)
 800296a:	4a6a      	ldr	r2, [pc, #424]	; (8002b14 <sendGSMCommand+0x28c>)
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	e008      	b.n	8002982 <sendGSMCommand+0xfa>
					command = gsmStateTableArray[gsmInstance.enmGSMCommand].atCommand;
 8002970:	4b62      	ldr	r3, [pc, #392]	; (8002afc <sendGSMCommand+0x274>)
 8002972:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 8002976:	4a68      	ldr	r2, [pc, #416]	; (8002b18 <sendGSMCommand+0x290>)
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	4413      	add	r3, r2
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a63      	ldr	r2, [pc, #396]	; (8002b0c <sendGSMCommand+0x284>)
 8002980:	6013      	str	r3, [r2, #0]
				u8CharacterCounter = strlen((const char *)command);
 8002982:	4b62      	ldr	r3, [pc, #392]	; (8002b0c <sendGSMCommand+0x284>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f7fe f82c 	bl	80009e4 <strlen>
 800298c:	4603      	mov	r3, r0
 800298e:	4a63      	ldr	r2, [pc, #396]	; (8002b1c <sendGSMCommand+0x294>)
 8002990:	6013      	str	r3, [r2, #0]
				LL_USART_TransmitData8(USART1,command[u8LoopCounter++]);
 8002992:	4b5e      	ldr	r3, [pc, #376]	; (8002b0c <sendGSMCommand+0x284>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	4b5a      	ldr	r3, [pc, #360]	; (8002b00 <sendGSMCommand+0x278>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	1c59      	adds	r1, r3, #1
 800299c:	4858      	ldr	r0, [pc, #352]	; (8002b00 <sendGSMCommand+0x278>)
 800299e:	6001      	str	r1, [r0, #0]
 80029a0:	4413      	add	r3, r2
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	4619      	mov	r1, r3
 80029a6:	485e      	ldr	r0, [pc, #376]	; (8002b20 <sendGSMCommand+0x298>)
 80029a8:	f7ff fb77 	bl	800209a <LL_USART_TransmitData8>
				gsmInstance.enmGSMCommandState = enmGSM_CMDINPROCESS;
 80029ac:	4b53      	ldr	r3, [pc, #332]	; (8002afc <sendGSMCommand+0x274>)
 80029ae:	2202      	movs	r2, #2
 80029b0:	f883 2fad 	strb.w	r2, [r3, #4013]	; 0xfad
			break;
 80029b4:	f000 bf6b 	b.w	800388e <sendGSMCommand+0x1006>
			else if(gsmInstance.enmGSMCommandState == enmGSM_CMDINPROCESS)
 80029b8:	4b50      	ldr	r3, [pc, #320]	; (8002afc <sendGSMCommand+0x274>)
 80029ba:	f893 3fad 	ldrb.w	r3, [r3, #4013]	; 0xfad
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d14e      	bne.n	8002a62 <sendGSMCommand+0x1da>
				if(!LL_USART_IsActiveFlag_TXE(USART1))
 80029c4:	4856      	ldr	r0, [pc, #344]	; (8002b20 <sendGSMCommand+0x298>)
 80029c6:	f7ff fb55 	bl	8002074 <LL_USART_IsActiveFlag_TXE>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 875e 	beq.w	800388e <sendGSMCommand+0x1006>
					if(u8LoopCounter < (u8CharacterCounter))
 80029d2:	4b4b      	ldr	r3, [pc, #300]	; (8002b00 <sendGSMCommand+0x278>)
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	4b51      	ldr	r3, [pc, #324]	; (8002b1c <sendGSMCommand+0x294>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d20e      	bcs.n	80029fc <sendGSMCommand+0x174>
						LL_USART_TransmitData8(USART1,command[u8LoopCounter++]);
 80029de:	4b4b      	ldr	r3, [pc, #300]	; (8002b0c <sendGSMCommand+0x284>)
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	4b47      	ldr	r3, [pc, #284]	; (8002b00 <sendGSMCommand+0x278>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	1c59      	adds	r1, r3, #1
 80029e8:	4845      	ldr	r0, [pc, #276]	; (8002b00 <sendGSMCommand+0x278>)
 80029ea:	6001      	str	r1, [r0, #0]
 80029ec:	4413      	add	r3, r2
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	4619      	mov	r1, r3
 80029f2:	484b      	ldr	r0, [pc, #300]	; (8002b20 <sendGSMCommand+0x298>)
 80029f4:	f7ff fb51 	bl	800209a <LL_USART_TransmitData8>
			break;
 80029f8:	f000 bf49 	b.w	800388e <sendGSMCommand+0x1006>
						u8LoopCounter = 0;
 80029fc:	4b40      	ldr	r3, [pc, #256]	; (8002b00 <sendGSMCommand+0x278>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
						gu32GSMCharacterTimeout = FIVEHUNDRED_MS;
 8002a02:	4b48      	ldr	r3, [pc, #288]	; (8002b24 <sendGSMCommand+0x29c>)
 8002a04:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002a08:	601a      	str	r2, [r3, #0]
						u8CharacterCounter = 0;
 8002a0a:	4b44      	ldr	r3, [pc, #272]	; (8002b1c <sendGSMCommand+0x294>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
						gsmInstance.enmGSMCommandResponseState = enmGSM_CHKRESPONSE;
 8002a10:	4b3a      	ldr	r3, [pc, #232]	; (8002afc <sendGSMCommand+0x274>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2fac 	strb.w	r2, [r3, #4012]	; 0xfac
						gsmInstance.u32GSMResponseTimer = gsmStateTableArray[gsmInstance.enmGSMCommand].msTimeOut;
 8002a18:	4b38      	ldr	r3, [pc, #224]	; (8002afc <sendGSMCommand+0x274>)
 8002a1a:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 8002a1e:	4a3e      	ldr	r2, [pc, #248]	; (8002b18 <sendGSMCommand+0x290>)
 8002a20:	011b      	lsls	r3, r3, #4
 8002a22:	4413      	add	r3, r2
 8002a24:	3308      	adds	r3, #8
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a34      	ldr	r2, [pc, #208]	; (8002afc <sendGSMCommand+0x274>)
 8002a2a:	f8c2 3fa4 	str.w	r3, [r2, #4004]	; 0xfa4
						if((gsmInstance.enmGSMCommand == enmGSMSTATE_FOTAHTTPACTION) ||(gsmInstance.enmGSMCommand == enmGSMSTATE_ATQHTTPGETEX) || (gsmInstance.enmGSMCommand == enmGSMSTATE_READFILE))
 8002a2e:	4b33      	ldr	r3, [pc, #204]	; (8002afc <sendGSMCommand+0x274>)
 8002a30:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 8002a34:	2b1d      	cmp	r3, #29
 8002a36:	d009      	beq.n	8002a4c <sendGSMCommand+0x1c4>
 8002a38:	4b30      	ldr	r3, [pc, #192]	; (8002afc <sendGSMCommand+0x274>)
 8002a3a:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 8002a3e:	2b1e      	cmp	r3, #30
 8002a40:	d004      	beq.n	8002a4c <sendGSMCommand+0x1c4>
 8002a42:	4b2e      	ldr	r3, [pc, #184]	; (8002afc <sendGSMCommand+0x274>)
 8002a44:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 8002a48:	2b1f      	cmp	r3, #31
 8002a4a:	d105      	bne.n	8002a58 <sendGSMCommand+0x1d0>
							gu32FotaFileReadTimer = FIFTEEN_SEC;
 8002a4c:	4b36      	ldr	r3, [pc, #216]	; (8002b28 <sendGSMCommand+0x2a0>)
 8002a4e:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002a52:	601a      	str	r2, [r3, #0]
			break;
 8002a54:	f000 bf1b 	b.w	800388e <sendGSMCommand+0x1006>
							gu32FotaFileReadTimer = 0;
 8002a58:	4b33      	ldr	r3, [pc, #204]	; (8002b28 <sendGSMCommand+0x2a0>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]
			break;
 8002a5e:	f000 bf16 	b.w	800388e <sendGSMCommand+0x1006>
				initGSMSIM868();
 8002a62:	f7ff fb2b 	bl	80020bc <initGSMSIM868>
			break;
 8002a66:	f000 bf12 	b.w	800388e <sendGSMCommand+0x1006>
			if((gu32GSMCharacterTimeout == 0) && (gsmInstance.u32GSMResponseTimer != 0) && (u8GSMCharRcv == 1) && (gu32FotaFileReadTimer == 0))
 8002a6a:	4b2e      	ldr	r3, [pc, #184]	; (8002b24 <sendGSMCommand+0x29c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f040 86b5 	bne.w	80037de <sendGSMCommand+0xf56>
 8002a74:	4b21      	ldr	r3, [pc, #132]	; (8002afc <sendGSMCommand+0x274>)
 8002a76:	f8d3 3fa4 	ldr.w	r3, [r3, #4004]	; 0xfa4
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 86af 	beq.w	80037de <sendGSMCommand+0xf56>
 8002a80:	4b2a      	ldr	r3, [pc, #168]	; (8002b2c <sendGSMCommand+0x2a4>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	f040 86aa 	bne.w	80037de <sendGSMCommand+0xf56>
 8002a8a:	4b27      	ldr	r3, [pc, #156]	; (8002b28 <sendGSMCommand+0x2a0>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f040 86a5 	bne.w	80037de <sendGSMCommand+0xf56>
				const char *SOF = strstr((const char *)gsmInstance.as8GSM_Response_Buff, "$,");
 8002a94:	4926      	ldr	r1, [pc, #152]	; (8002b30 <sendGSMCommand+0x2a8>)
 8002a96:	4827      	ldr	r0, [pc, #156]	; (8002b34 <sendGSMCommand+0x2ac>)
 8002a98:	f013 ffb9 	bl	8016a0e <strstr>
 8002a9c:	6338      	str	r0, [r7, #48]	; 0x30
				if(SOF != NULL)
 8002a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d051      	beq.n	8002b48 <sendGSMCommand+0x2c0>
					const char *EOF = strstr((const char *)gsmInstance.as8GSM_Response_Buff, ",@");
 8002aa4:	4924      	ldr	r1, [pc, #144]	; (8002b38 <sendGSMCommand+0x2b0>)
 8002aa6:	4823      	ldr	r0, [pc, #140]	; (8002b34 <sendGSMCommand+0x2ac>)
 8002aa8:	f013 ffb1 	bl	8016a0e <strstr>
 8002aac:	62f8      	str	r0, [r7, #44]	; 0x2c
					if(EOF != NULL)
 8002aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d01f      	beq.n	8002af4 <sendGSMCommand+0x26c>
						if(strstr((const char *)gsmInstance.as8GSM_Response_Buff,(const char *)dinfo) != NULL)
 8002ab4:	4921      	ldr	r1, [pc, #132]	; (8002b3c <sendGSMCommand+0x2b4>)
 8002ab6:	481f      	ldr	r0, [pc, #124]	; (8002b34 <sendGSMCommand+0x2ac>)
 8002ab8:	f013 ffa9 	bl	8016a0e <strstr>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d014      	beq.n	8002aec <sendGSMCommand+0x264>
							const size_t mlen = EOF - SOF;
 8002ac2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	62bb      	str	r3, [r7, #40]	; 0x28
							memset(gau8SUBRequest,0x00,sizeof(gau8SUBRequest));
 8002aca:	2296      	movs	r2, #150	; 0x96
 8002acc:	2100      	movs	r1, #0
 8002ace:	481c      	ldr	r0, [pc, #112]	; (8002b40 <sendGSMCommand+0x2b8>)
 8002ad0:	f012 ff8a 	bl	80159e8 <memset>
							memcpy(gau8SUBRequest,SOF-1, (mlen+3));
 8002ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad6:	1e59      	subs	r1, r3, #1
 8002ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ada:	3303      	adds	r3, #3
 8002adc:	461a      	mov	r2, r3
 8002ade:	4818      	ldr	r0, [pc, #96]	; (8002b40 <sendGSMCommand+0x2b8>)
 8002ae0:	f012 ff74 	bl	80159cc <memcpy>
							SUBTriggerFlag = TRUE;
 8002ae4:	4b17      	ldr	r3, [pc, #92]	; (8002b44 <sendGSMCommand+0x2bc>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	701a      	strb	r2, [r3, #0]
 8002aea:	e030      	b.n	8002b4e <sendGSMCommand+0x2c6>
							SUBTriggerFlag = FALSE;
 8002aec:	4b15      	ldr	r3, [pc, #84]	; (8002b44 <sendGSMCommand+0x2bc>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	701a      	strb	r2, [r3, #0]
 8002af2:	e02c      	b.n	8002b4e <sendGSMCommand+0x2c6>
						SUBTriggerFlag = FALSE;
 8002af4:	4b13      	ldr	r3, [pc, #76]	; (8002b44 <sendGSMCommand+0x2bc>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	701a      	strb	r2, [r3, #0]
 8002afa:	e028      	b.n	8002b4e <sendGSMCommand+0x2c6>
 8002afc:	200023e4 	.word	0x200023e4
 8002b00:	20001a78 	.word	0x20001a78
 8002b04:	20001870 	.word	0x20001870
 8002b08:	200023b4 	.word	0x200023b4
 8002b0c:	20001a7c 	.word	0x20001a7c
 8002b10:	20002384 	.word	0x20002384
 8002b14:	20001834 	.word	0x20001834
 8002b18:	0801bd3c 	.word	0x0801bd3c
 8002b1c:	20001a80 	.word	0x20001a80
 8002b20:	40013800 	.word	0x40013800
 8002b24:	20002154 	.word	0x20002154
 8002b28:	2000216c 	.word	0x2000216c
 8002b2c:	20001abc 	.word	0x20001abc
 8002b30:	0801b530 	.word	0x0801b530
 8002b34:	200028db 	.word	0x200028db
 8002b38:	0801b534 	.word	0x0801b534
 8002b3c:	20000000 	.word	0x20000000
 8002b40:	20000058 	.word	0x20000058
 8002b44:	20001871 	.word	0x20001871
					SUBTriggerFlag = FALSE;
 8002b48:	4bcb      	ldr	r3, [pc, #812]	; (8002e78 <sendGSMCommand+0x5f0>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	701a      	strb	r2, [r3, #0]
						,(const char *)gsmStateTableArray[gsmInstance.enmGSMCommand].atCommandResponse) != NULL)
 8002b4e:	4bcb      	ldr	r3, [pc, #812]	; (8002e7c <sendGSMCommand+0x5f4>)
 8002b50:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 8002b54:	4aca      	ldr	r2, [pc, #808]	; (8002e80 <sendGSMCommand+0x5f8>)
 8002b56:	011b      	lsls	r3, r3, #4
 8002b58:	4413      	add	r3, r2
 8002b5a:	3304      	adds	r3, #4
 8002b5c:	681b      	ldr	r3, [r3, #0]
				if(strstr((const char *)gsmInstance.as8GSM_Response_Buff
 8002b5e:	4619      	mov	r1, r3
 8002b60:	48c8      	ldr	r0, [pc, #800]	; (8002e84 <sendGSMCommand+0x5fc>)
 8002b62:	f013 ff54 	bl	8016a0e <strstr>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 8626 	beq.w	80037ba <sendGSMCommand+0xf32>
					switch(gsmInstance.enmGSMCommand)
 8002b6e:	4bc3      	ldr	r3, [pc, #780]	; (8002e7c <sendGSMCommand+0x5f4>)
 8002b70:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 8002b74:	2b22      	cmp	r3, #34	; 0x22
 8002b76:	f200 85dc 	bhi.w	8003732 <sendGSMCommand+0xeaa>
 8002b7a:	a201      	add	r2, pc, #4	; (adr r2, 8002b80 <sendGSMCommand+0x2f8>)
 8002b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b80:	08002c0d 	.word	0x08002c0d
 8002b84:	08002c19 	.word	0x08002c19
 8002b88:	08002c77 	.word	0x08002c77
 8002b8c:	08002c83 	.word	0x08002c83
 8002b90:	08002d5f 	.word	0x08002d5f
 8002b94:	08002cdf 	.word	0x08002cdf
 8002b98:	08002c25 	.word	0x08002c25
 8002b9c:	08002dc1 	.word	0x08002dc1
 8002ba0:	08002e03 	.word	0x08002e03
 8002ba4:	08002e0f 	.word	0x08002e0f
 8002ba8:	08002e1b 	.word	0x08002e1b
 8002bac:	08002e27 	.word	0x08002e27
 8002bb0:	08002e33 	.word	0x08002e33
 8002bb4:	08003733 	.word	0x08003733
 8002bb8:	08002e3f 	.word	0x08002e3f
 8002bbc:	08002e4b 	.word	0x08002e4b
 8002bc0:	08002e53 	.word	0x08002e53
 8002bc4:	08002e5f 	.word	0x08002e5f
 8002bc8:	08002e6b 	.word	0x08002e6b
 8002bcc:	08003733 	.word	0x08003733
 8002bd0:	08002ed1 	.word	0x08002ed1
 8002bd4:	08003091 	.word	0x08003091
 8002bd8:	0800309b 	.word	0x0800309b
 8002bdc:	080030a5 	.word	0x080030a5
 8002be0:	080030af 	.word	0x080030af
 8002be4:	08002f73 	.word	0x08002f73
 8002be8:	080030bf 	.word	0x080030bf
 8002bec:	08003413 	.word	0x08003413
 8002bf0:	08003733 	.word	0x08003733
 8002bf4:	0800341d 	.word	0x0800341d
 8002bf8:	0800356d 	.word	0x0800356d
 8002bfc:	080035a1 	.word	0x080035a1
 8002c00:	08002f7d 	.word	0x08002f7d
 8002c04:	08002fad 	.word	0x08002fad
 8002c08:	08002fa3 	.word	0x08002fa3
							gsmInstance.u8IncrementGsmState = TRUE;
 8002c0c:	4b9b      	ldr	r3, [pc, #620]	; (8002e7c <sendGSMCommand+0x5f4>)
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8002c14:	f000 bd98 	b.w	8003748 <sendGSMCommand+0xec0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8002c18:	4b98      	ldr	r3, [pc, #608]	; (8002e7c <sendGSMCommand+0x5f4>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8002c20:	f000 bd92 	b.w	8003748 <sendGSMCommand+0xec0>
							char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff
 8002c24:	4998      	ldr	r1, [pc, #608]	; (8002e88 <sendGSMCommand+0x600>)
 8002c26:	4897      	ldr	r0, [pc, #604]	; (8002e84 <sendGSMCommand+0x5fc>)
 8002c28:	f013 fef1 	bl	8016a0e <strstr>
 8002c2c:	60f8      	str	r0, [r7, #12]
							memset(gau8GSM_TimeStamp,0x00,(sizeof(char ) * strlen(gau8GSM_TimeStamp)));
 8002c2e:	4897      	ldr	r0, [pc, #604]	; (8002e8c <sendGSMCommand+0x604>)
 8002c30:	f7fd fed8 	bl	80009e4 <strlen>
 8002c34:	4603      	mov	r3, r0
 8002c36:	461a      	mov	r2, r3
 8002c38:	2100      	movs	r1, #0
 8002c3a:	4894      	ldr	r0, [pc, #592]	; (8002e8c <sendGSMCommand+0x604>)
 8002c3c:	f012 fed4 	bl	80159e8 <memset>
							memcpy( gau8GSM_TimeStamp, &strLoc[10], strlen(strtok(&strLoc[10],"\0")));
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f103 040a 	add.w	r4, r3, #10
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	330a      	adds	r3, #10
 8002c4a:	4991      	ldr	r1, [pc, #580]	; (8002e90 <sendGSMCommand+0x608>)
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f014 fd29 	bl	80176a4 <strtok>
 8002c52:	4603      	mov	r3, r0
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7fd fec5 	bl	80009e4 <strlen>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4621      	mov	r1, r4
 8002c60:	488a      	ldr	r0, [pc, #552]	; (8002e8c <sendGSMCommand+0x604>)
 8002c62:	f012 feb3 	bl	80159cc <memcpy>
							syncrtcwithNetworkTime();
 8002c66:	f000 ffe7 	bl	8003c38 <syncrtcwithNetworkTime>
							gsmInstance.u8IncrementGsmState = TRUE;
 8002c6a:	4b84      	ldr	r3, [pc, #528]	; (8002e7c <sendGSMCommand+0x5f4>)
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
						break;
 8002c72:	f000 bd69 	b.w	8003748 <sendGSMCommand+0xec0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8002c76:	4b81      	ldr	r3, [pc, #516]	; (8002e7c <sendGSMCommand+0x5f4>)
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8002c7e:	f000 bd63 	b.w	8003748 <sendGSMCommand+0xec0>
								char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff,(const char *)"+GSN:");
 8002c82:	4984      	ldr	r1, [pc, #528]	; (8002e94 <sendGSMCommand+0x60c>)
 8002c84:	487f      	ldr	r0, [pc, #508]	; (8002e84 <sendGSMCommand+0x5fc>)
 8002c86:	f013 fec2 	bl	8016a0e <strstr>
 8002c8a:	6038      	str	r0, [r7, #0]
								memset(gau8GSM_IMEI,0x00,(sizeof(char ) * strlen(gau8GSM_IMEI)));
 8002c8c:	4882      	ldr	r0, [pc, #520]	; (8002e98 <sendGSMCommand+0x610>)
 8002c8e:	f7fd fea9 	bl	80009e4 <strlen>
 8002c92:	4603      	mov	r3, r0
 8002c94:	461a      	mov	r2, r3
 8002c96:	2100      	movs	r1, #0
 8002c98:	487f      	ldr	r0, [pc, #508]	; (8002e98 <sendGSMCommand+0x610>)
 8002c9a:	f012 fea5 	bl	80159e8 <memset>
								memcpy( gau8GSM_IMEI, &strLoc[7], strlen(strtok(&strLoc[7],"\"\r\n")));
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	1ddc      	adds	r4, r3, #7
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	3307      	adds	r3, #7
 8002ca6:	497d      	ldr	r1, [pc, #500]	; (8002e9c <sendGSMCommand+0x614>)
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f014 fcfb 	bl	80176a4 <strtok>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fd fe97 	bl	80009e4 <strlen>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4621      	mov	r1, r4
 8002cbc:	4876      	ldr	r0, [pc, #472]	; (8002e98 <sendGSMCommand+0x610>)
 8002cbe:	f012 fe85 	bl	80159cc <memcpy>
								cu32IMEI = (atoll(gau8GSM_IMEI));
 8002cc2:	4875      	ldr	r0, [pc, #468]	; (8002e98 <sendGSMCommand+0x610>)
 8002cc4:	f012 fe29 	bl	801591a <atoll>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4974      	ldr	r1, [pc, #464]	; (8002ea0 <sendGSMCommand+0x618>)
 8002cce:	e9c1 2300 	strd	r2, r3, [r1]
								gsmInstance.u8IncrementGsmState = TRUE;
 8002cd2:	4b6a      	ldr	r3, [pc, #424]	; (8002e7c <sendGSMCommand+0x5f4>)
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
								break;
 8002cda:	f000 bd35 	b.w	8003748 <sendGSMCommand+0xec0>
								char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff
 8002cde:	4971      	ldr	r1, [pc, #452]	; (8002ea4 <sendGSMCommand+0x61c>)
 8002ce0:	4868      	ldr	r0, [pc, #416]	; (8002e84 <sendGSMCommand+0x5fc>)
 8002ce2:	f013 fe94 	bl	8016a0e <strstr>
 8002ce6:	60b8      	str	r0, [r7, #8]
								memcpy(gsmInstance.agsmSignalStrength, &strLoc[6], strlen(strtok(strLoc,"\r")));
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	1d9c      	adds	r4, r3, #6
 8002cec:	496e      	ldr	r1, [pc, #440]	; (8002ea8 <sendGSMCommand+0x620>)
 8002cee:	68b8      	ldr	r0, [r7, #8]
 8002cf0:	f014 fcd8 	bl	80176a4 <strtok>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fd fe74 	bl	80009e4 <strlen>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	461a      	mov	r2, r3
 8002d00:	4621      	mov	r1, r4
 8002d02:	486a      	ldr	r0, [pc, #424]	; (8002eac <sendGSMCommand+0x624>)
 8002d04:	f012 fe62 	bl	80159cc <memcpy>
 8002d08:	4b5c      	ldr	r3, [pc, #368]	; (8002e7c <sendGSMCommand+0x5f4>)
 8002d0a:	f8b3 212c 	ldrh.w	r2, [r3, #300]	; 0x12c
								memcpy(gau8GSM_Signal,gsmInstance.agsmSignalStrength,2);
 8002d0e:	4b68      	ldr	r3, [pc, #416]	; (8002eb0 <sendGSMCommand+0x628>)
 8002d10:	801a      	strh	r2, [r3, #0]
								signal_qaulity = atoi(gau8GSM_Signal);
 8002d12:	4867      	ldr	r0, [pc, #412]	; (8002eb0 <sendGSMCommand+0x628>)
 8002d14:	f012 fdfd 	bl	8015912 <atoi>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	4b65      	ldr	r3, [pc, #404]	; (8002eb4 <sendGSMCommand+0x62c>)
 8002d1e:	701a      	strb	r2, [r3, #0]
								if(gsmInstance.enmcurrentTask == enmGSMTASK_ISALIVE)
 8002d20:	4b56      	ldr	r3, [pc, #344]	; (8002e7c <sendGSMCommand+0x5f4>)
 8002d22:	f893 3fae 	ldrb.w	r3, [r3, #4014]	; 0xfae
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b06      	cmp	r3, #6
 8002d2a:	d112      	bne.n	8002d52 <sendGSMCommand+0x4ca>
									gsmInstance.u32GSMTimer = FIVE_SEC;
 8002d2c:	4b53      	ldr	r3, [pc, #332]	; (8002e7c <sendGSMCommand+0x5f4>)
 8002d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d32:	f8c3 2f90 	str.w	r2, [r3, #3984]	; 0xf90
									gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 8002d36:	4b51      	ldr	r3, [pc, #324]	; (8002e7c <sendGSMCommand+0x5f4>)
 8002d38:	2203      	movs	r2, #3
 8002d3a:	f883 2fae 	strb.w	r2, [r3, #4014]	; 0xfae
									gsmInstance.enmGSMCommand = enmGSMSTATE_MQTTPUBEX;
 8002d3e:	4b4f      	ldr	r3, [pc, #316]	; (8002e7c <sendGSMCommand+0x5f4>)
 8002d40:	2219      	movs	r2, #25
 8002d42:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
									gsmInstance.u8IncrementGsmState = FALSE;
 8002d46:	4b4d      	ldr	r3, [pc, #308]	; (8002e7c <sendGSMCommand+0x5f4>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8002d4e:	f000 bcfb 	b.w	8003748 <sendGSMCommand+0xec0>
									gsmInstance.u8IncrementGsmState = TRUE;
 8002d52:	4b4a      	ldr	r3, [pc, #296]	; (8002e7c <sendGSMCommand+0x5f4>)
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8002d5a:	f000 bcf5 	b.w	8003748 <sendGSMCommand+0xec0>
							if(strstr((const char *)gsmInstance.as8GSM_Response_Buff,(const char *)"+CREG:") != NULL)
 8002d5e:	4956      	ldr	r1, [pc, #344]	; (8002eb8 <sendGSMCommand+0x630>)
 8002d60:	4848      	ldr	r0, [pc, #288]	; (8002e84 <sendGSMCommand+0x5fc>)
 8002d62:	f013 fe54 	bl	8016a0e <strstr>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d023      	beq.n	8002db4 <sendGSMCommand+0x52c>
								char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff
 8002d6c:	212c      	movs	r1, #44	; 0x2c
 8002d6e:	4845      	ldr	r0, [pc, #276]	; (8002e84 <sendGSMCommand+0x5fc>)
 8002d70:	f013 fe13 	bl	801699a <strchr>
 8002d74:	6078      	str	r0, [r7, #4]
								if(strLoc[1] == '0')
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b30      	cmp	r3, #48	; 0x30
 8002d7e:	d108      	bne.n	8002d92 <sendGSMCommand+0x50a>
									TelematicHeartBeat[enumTeleHearBeat_SIM_CARD_ACTIVE_STATUS] = 0x00;
 8002d80:	4b4e      	ldr	r3, [pc, #312]	; (8002ebc <sendGSMCommand+0x634>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	711a      	strb	r2, [r3, #4]
									initGSMSIM868();
 8002d86:	f7ff f999 	bl	80020bc <initGSMSIM868>
									gu8CheckSMS = TRUE;
 8002d8a:	4b4d      	ldr	r3, [pc, #308]	; (8002ec0 <sendGSMCommand+0x638>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	701a      	strb	r2, [r3, #0]
 8002d90:	e010      	b.n	8002db4 <sendGSMCommand+0x52c>
								else if((strLoc[1] == '1')||(strLoc[1] == '5'))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3301      	adds	r3, #1
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b31      	cmp	r3, #49	; 0x31
 8002d9a:	d004      	beq.n	8002da6 <sendGSMCommand+0x51e>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b35      	cmp	r3, #53	; 0x35
 8002da4:	d103      	bne.n	8002dae <sendGSMCommand+0x526>
									TelematicHeartBeat[enumTeleHearBeat_SIM_CARD_ACTIVE_STATUS] = 0x01;
 8002da6:	4b45      	ldr	r3, [pc, #276]	; (8002ebc <sendGSMCommand+0x634>)
 8002da8:	2201      	movs	r2, #1
 8002daa:	711a      	strb	r2, [r3, #4]
 8002dac:	e002      	b.n	8002db4 <sendGSMCommand+0x52c>
									TelematicHeartBeat[enumTeleHearBeat_SIM_CARD_ACTIVE_STATUS] = 0x00;
 8002dae:	4b43      	ldr	r3, [pc, #268]	; (8002ebc <sendGSMCommand+0x634>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	711a      	strb	r2, [r3, #4]
							gsmInstance.u8IncrementGsmState = TRUE;
 8002db4:	4b31      	ldr	r3, [pc, #196]	; (8002e7c <sendGSMCommand+0x5f4>)
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8002dbc:	f000 bcc4 	b.w	8003748 <sendGSMCommand+0xec0>
								char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff,(const char *)"+QNWINFO:");
 8002dc0:	4940      	ldr	r1, [pc, #256]	; (8002ec4 <sendGSMCommand+0x63c>)
 8002dc2:	4830      	ldr	r0, [pc, #192]	; (8002e84 <sendGSMCommand+0x5fc>)
 8002dc4:	f013 fe23 	bl	8016a0e <strstr>
 8002dc8:	6138      	str	r0, [r7, #16]
								memset(gau8GSM_NWINFO,0x00,sizeof(gau8GSM_NWINFO));
 8002dca:	220f      	movs	r2, #15
 8002dcc:	2100      	movs	r1, #0
 8002dce:	483e      	ldr	r0, [pc, #248]	; (8002ec8 <sendGSMCommand+0x640>)
 8002dd0:	f012 fe0a 	bl	80159e8 <memset>
								memcpy(gau8GSM_NWINFO, &strLoc[10], strlen(strtok(strLoc,",")));
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f103 040a 	add.w	r4, r3, #10
 8002dda:	493c      	ldr	r1, [pc, #240]	; (8002ecc <sendGSMCommand+0x644>)
 8002ddc:	6938      	ldr	r0, [r7, #16]
 8002dde:	f014 fc61 	bl	80176a4 <strtok>
 8002de2:	4603      	mov	r3, r0
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7fd fdfd 	bl	80009e4 <strlen>
 8002dea:	4603      	mov	r3, r0
 8002dec:	461a      	mov	r2, r3
 8002dee:	4621      	mov	r1, r4
 8002df0:	4835      	ldr	r0, [pc, #212]	; (8002ec8 <sendGSMCommand+0x640>)
 8002df2:	f012 fdeb 	bl	80159cc <memcpy>
								gsmInstance.u8IncrementGsmState = TRUE;
 8002df6:	4b21      	ldr	r3, [pc, #132]	; (8002e7c <sendGSMCommand+0x5f4>)
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
								break;
 8002dfe:	f000 bca3 	b.w	8003748 <sendGSMCommand+0xec0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8002e02:	4b1e      	ldr	r3, [pc, #120]	; (8002e7c <sendGSMCommand+0x5f4>)
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8002e0a:	f000 bc9d 	b.w	8003748 <sendGSMCommand+0xec0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8002e0e:	4b1b      	ldr	r3, [pc, #108]	; (8002e7c <sendGSMCommand+0x5f4>)
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8002e16:	f000 bc97 	b.w	8003748 <sendGSMCommand+0xec0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8002e1a:	4b18      	ldr	r3, [pc, #96]	; (8002e7c <sendGSMCommand+0x5f4>)
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8002e22:	f000 bc91 	b.w	8003748 <sendGSMCommand+0xec0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8002e26:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <sendGSMCommand+0x5f4>)
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8002e2e:	f000 bc8b 	b.w	8003748 <sendGSMCommand+0xec0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8002e32:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <sendGSMCommand+0x5f4>)
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8002e3a:	f000 bc85 	b.w	8003748 <sendGSMCommand+0xec0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8002e3e:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <sendGSMCommand+0x5f4>)
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8002e46:	f000 bc7f 	b.w	8003748 <sendGSMCommand+0xec0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8002e4a:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <sendGSMCommand+0x5f4>)
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							gsmInstance.u8IncrementGsmState = TRUE;
 8002e52:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <sendGSMCommand+0x5f4>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8002e5a:	f000 bc75 	b.w	8003748 <sendGSMCommand+0xec0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8002e5e:	4b07      	ldr	r3, [pc, #28]	; (8002e7c <sendGSMCommand+0x5f4>)
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8002e66:	f000 bc6f 	b.w	8003748 <sendGSMCommand+0xec0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8002e6a:	4b04      	ldr	r3, [pc, #16]	; (8002e7c <sendGSMCommand+0x5f4>)
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8002e72:	f000 bc69 	b.w	8003748 <sendGSMCommand+0xec0>
 8002e76:	bf00      	nop
 8002e78:	20001871 	.word	0x20001871
 8002e7c:	200023e4 	.word	0x200023e4
 8002e80:	0801bd3c 	.word	0x0801bd3c
 8002e84:	200028db 	.word	0x200028db
 8002e88:	0801b45c 	.word	0x0801b45c
 8002e8c:	200007b0 	.word	0x200007b0
 8002e90:	0801b538 	.word	0x0801b538
 8002e94:	0801b444 	.word	0x0801b444
 8002e98:	20000fc4 	.word	0x20000fc4
 8002e9c:	0801b524 	.word	0x0801b524
 8002ea0:	20001880 	.word	0x20001880
 8002ea4:	0801b53c 	.word	0x0801b53c
 8002ea8:	0801b544 	.word	0x0801b544
 8002eac:	20002510 	.word	0x20002510
 8002eb0:	20001a58 	.word	0x20001a58
 8002eb4:	20001a5a 	.word	0x20001a5a
 8002eb8:	0801b548 	.word	0x0801b548
 8002ebc:	20002018 	.word	0x20002018
 8002ec0:	20001889 	.word	0x20001889
 8002ec4:	0801b464 	.word	0x0801b464
 8002ec8:	20000fb4 	.word	0x20000fb4
 8002ecc:	0801b51c 	.word	0x0801b51c
							char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff,(const char *)"$GNRMC");
 8002ed0:	49b0      	ldr	r1, [pc, #704]	; (8003194 <sendGSMCommand+0x90c>)
 8002ed2:	48b1      	ldr	r0, [pc, #708]	; (8003198 <sendGSMCommand+0x910>)
 8002ed4:	f013 fd9b 	bl	8016a0e <strstr>
 8002ed8:	6178      	str	r0, [r7, #20]
							memset(gsmInstance.agpsLocationData,0x00, sizeof(gsmInstance.agpsLocationData));
 8002eda:	2296      	movs	r2, #150	; 0x96
 8002edc:	2100      	movs	r1, #0
 8002ede:	48af      	ldr	r0, [pc, #700]	; (800319c <sendGSMCommand+0x914>)
 8002ee0:	f012 fd82 	bl	80159e8 <memset>
							if(strLoc != NULL)
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00d      	beq.n	8002f06 <sendGSMCommand+0x67e>
								memcpy(gsmInstance.agpsLocationData, strLoc, strlen(strtok(strLoc,"\r\n")));
 8002eea:	49ad      	ldr	r1, [pc, #692]	; (80031a0 <sendGSMCommand+0x918>)
 8002eec:	6978      	ldr	r0, [r7, #20]
 8002eee:	f014 fbd9 	bl	80176a4 <strtok>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fd fd75 	bl	80009e4 <strlen>
 8002efa:	4603      	mov	r3, r0
 8002efc:	461a      	mov	r2, r3
 8002efe:	6979      	ldr	r1, [r7, #20]
 8002f00:	48a6      	ldr	r0, [pc, #664]	; (800319c <sendGSMCommand+0x914>)
 8002f02:	f012 fd63 	bl	80159cc <memcpy>
							if(gu32ModuleInitComplete == 1)
 8002f06:	4ba7      	ldr	r3, [pc, #668]	; (80031a4 <sendGSMCommand+0x91c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d124      	bne.n	8002f58 <sendGSMCommand+0x6d0>
								if((gu32FotaRquestFlag == TRUE) && (Queue_IsLiveQueueEmpty(&gsmLivePayload) == 1))
 8002f0e:	4ba6      	ldr	r3, [pc, #664]	; (80031a8 <sendGSMCommand+0x920>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d113      	bne.n	8002f3e <sendGSMCommand+0x6b6>
 8002f16:	48a5      	ldr	r0, [pc, #660]	; (80031ac <sendGSMCommand+0x924>)
 8002f18:	f003 f899 	bl	800604e <Queue_IsLiveQueueEmpty>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d10d      	bne.n	8002f3e <sendGSMCommand+0x6b6>
									UrlLenforFOTA();
 8002f22:	f001 f847 	bl	8003fb4 <UrlLenforFOTA>
									gsmInstance.enmGSMCommand = enmGSMSTATE_QFOTAURLLEN;
 8002f26:	4b9d      	ldr	r3, [pc, #628]	; (800319c <sendGSMCommand+0x914>)
 8002f28:	221b      	movs	r2, #27
 8002f2a:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
									gsmInstance.enmcurrentTask = enmGSMTASK_DOWNLOADFOTAFILE;
 8002f2e:	4b9b      	ldr	r3, [pc, #620]	; (800319c <sendGSMCommand+0x914>)
 8002f30:	2208      	movs	r2, #8
 8002f32:	f883 2fae 	strb.w	r2, [r3, #4014]	; 0xfae
									SUBTriggerFlag = FALSE;
 8002f36:	4b9e      	ldr	r3, [pc, #632]	; (80031b0 <sendGSMCommand+0x928>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	701a      	strb	r2, [r3, #0]
 8002f3c:	e007      	b.n	8002f4e <sendGSMCommand+0x6c6>
									gsmInstance.enmGSMCommand = enmGSMSTATE_ATCSQ;
 8002f3e:	4b97      	ldr	r3, [pc, #604]	; (800319c <sendGSMCommand+0x914>)
 8002f40:	2205      	movs	r2, #5
 8002f42:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
									gsmInstance.enmcurrentTask = enmGSMTASK_ISALIVE;
 8002f46:	4b95      	ldr	r3, [pc, #596]	; (800319c <sendGSMCommand+0x914>)
 8002f48:	2206      	movs	r2, #6
 8002f4a:	f883 2fae 	strb.w	r2, [r3, #4014]	; 0xfae
								gsmInstance.u8IncrementGsmState = FALSE;
 8002f4e:	4b93      	ldr	r3, [pc, #588]	; (800319c <sendGSMCommand+0x914>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
						break;
 8002f56:	e3f4      	b.n	8003742 <sendGSMCommand+0xeba>
							else if(gu32ModuleInitComplete == 0)
 8002f58:	4b92      	ldr	r3, [pc, #584]	; (80031a4 <sendGSMCommand+0x91c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f040 83f0 	bne.w	8003742 <sendGSMCommand+0xeba>
								gsmInstance.u8IncrementGsmState = TRUE;
 8002f62:	4b8e      	ldr	r3, [pc, #568]	; (800319c <sendGSMCommand+0x914>)
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
								gu32ModuleInitComplete = 1;
 8002f6a:	4b8e      	ldr	r3, [pc, #568]	; (80031a4 <sendGSMCommand+0x91c>)
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]
						break;
 8002f70:	e3e7      	b.n	8003742 <sendGSMCommand+0xeba>
							gsmInstance.u8IncrementGsmState = TRUE;
 8002f72:	4b8a      	ldr	r3, [pc, #552]	; (800319c <sendGSMCommand+0x914>)
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8002f7a:	e3e5      	b.n	8003748 <sendGSMCommand+0xec0>
							char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff,(const char *)": ");
 8002f7c:	498d      	ldr	r1, [pc, #564]	; (80031b4 <sendGSMCommand+0x92c>)
 8002f7e:	4886      	ldr	r0, [pc, #536]	; (8003198 <sendGSMCommand+0x910>)
 8002f80:	f013 fd45 	bl	8016a0e <strstr>
 8002f84:	6238      	str	r0, [r7, #32]
							memcpy(gsmInstance.u32GSMHttpResponseCode, (char *)&strLoc[4], 3);
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	1d1a      	adds	r2, r3, #4
 8002f8a:	4b84      	ldr	r3, [pc, #528]	; (800319c <sendGSMCommand+0x914>)
 8002f8c:	f203 43e5 	addw	r3, r3, #1253	; 0x4e5
 8002f90:	8811      	ldrh	r1, [r2, #0]
 8002f92:	7892      	ldrb	r2, [r2, #2]
 8002f94:	8019      	strh	r1, [r3, #0]
 8002f96:	709a      	strb	r2, [r3, #2]
							gsmInstance.u8IncrementGsmState = TRUE;
 8002f98:	4b80      	ldr	r3, [pc, #512]	; (800319c <sendGSMCommand+0x914>)
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8002fa0:	e3d2      	b.n	8003748 <sendGSMCommand+0xec0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8002fa2:	4b7e      	ldr	r3, [pc, #504]	; (800319c <sendGSMCommand+0x914>)
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8002faa:	e3cd      	b.n	8003748 <sendGSMCommand+0xec0>
							char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff
 8002fac:	4981      	ldr	r1, [pc, #516]	; (80031b4 <sendGSMCommand+0x92c>)
 8002fae:	487a      	ldr	r0, [pc, #488]	; (8003198 <sendGSMCommand+0x910>)
 8002fb0:	f013 fd2d 	bl	8016a0e <strstr>
 8002fb4:	6278      	str	r0, [r7, #36]	; 0x24
							memcpy(gsmInstance.u32GSMHttpResponseCode, (char *)&strLoc[4], 3);
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	1d1a      	adds	r2, r3, #4
 8002fba:	4b78      	ldr	r3, [pc, #480]	; (800319c <sendGSMCommand+0x914>)
 8002fbc:	f203 43e5 	addw	r3, r3, #1253	; 0x4e5
 8002fc0:	8811      	ldrh	r1, [r2, #0]
 8002fc2:	7892      	ldrb	r2, [r2, #2]
 8002fc4:	8019      	strh	r1, [r3, #0]
 8002fc6:	709a      	strb	r2, [r3, #2]
							switch(atoi(gsmInstance.u32GSMHttpResponseCode))
 8002fc8:	487b      	ldr	r0, [pc, #492]	; (80031b8 <sendGSMCommand+0x930>)
 8002fca:	f012 fca2 	bl	8015912 <atoi>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2bc8      	cmp	r3, #200	; 0xc8
 8002fd2:	d12a      	bne.n	800302a <sendGSMCommand+0x7a2>
									if(g_u8PayloadType == PAYLOD_TYPE_LIVE)
 8002fd4:	4b79      	ldr	r3, [pc, #484]	; (80031bc <sendGSMCommand+0x934>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d103      	bne.n	8002fe4 <sendGSMCommand+0x75c>
										Queue_LiveDequeue(&gsmLivePayload);
 8002fdc:	4873      	ldr	r0, [pc, #460]	; (80031ac <sendGSMCommand+0x924>)
 8002fde:	f002 ffd5 	bl	8005f8c <Queue_LiveDequeue>
 8002fe2:	e006      	b.n	8002ff2 <sendGSMCommand+0x76a>
									else if(g_u8PayloadType == PAYLOD_TYPE_BUFF)
 8002fe4:	4b75      	ldr	r3, [pc, #468]	; (80031bc <sendGSMCommand+0x934>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d102      	bne.n	8002ff2 <sendGSMCommand+0x76a>
										Queue_BuffDequeue(&gsmBuffPayload);
 8002fec:	4874      	ldr	r0, [pc, #464]	; (80031c0 <sendGSMCommand+0x938>)
 8002fee:	f003 f89c 	bl	800612a <Queue_BuffDequeue>
								gsmInstance.u32GSMTimer = TWO_SEC; // Replace with Upload Frequency
 8002ff2:	4b6a      	ldr	r3, [pc, #424]	; (800319c <sendGSMCommand+0x914>)
 8002ff4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002ff8:	f8c3 2f90 	str.w	r2, [r3, #3984]	; 0xf90
								gu8HttpPayloadFlag = 0;
 8002ffc:	4b71      	ldr	r3, [pc, #452]	; (80031c4 <sendGSMCommand+0x93c>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	701a      	strb	r2, [r3, #0]
								gsmInstance.enmGSMCommand = enmGSMSTATE_MQTTPUBEX;
 8003002:	4b66      	ldr	r3, [pc, #408]	; (800319c <sendGSMCommand+0x914>)
 8003004:	2219      	movs	r2, #25
 8003006:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
								gsmInstance.enmGSMCommand = enmGSMSTATE_ATHTTPDATA;
 800300a:	4b64      	ldr	r3, [pc, #400]	; (800319c <sendGSMCommand+0x914>)
 800300c:	2220      	movs	r2, #32
 800300e:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
								gsmInstance.u8IncrementGsmState = FALSE;
 8003012:	4b62      	ldr	r3, [pc, #392]	; (800319c <sendGSMCommand+0x914>)
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
								u8LastHttpResponseCode = atoi(gsmInstance.u32GSMHttpResponseCode);
 800301a:	4867      	ldr	r0, [pc, #412]	; (80031b8 <sendGSMCommand+0x930>)
 800301c:	f012 fc79 	bl	8015912 <atoi>
 8003020:	4603      	mov	r3, r0
 8003022:	461a      	mov	r2, r3
 8003024:	4b68      	ldr	r3, [pc, #416]	; (80031c8 <sendGSMCommand+0x940>)
 8003026:	601a      	str	r2, [r3, #0]
								break;
 8003028:	e031      	b.n	800308e <sendGSMCommand+0x806>
									u8LastHttpResponseCode = atoi(gsmInstance.u32GSMHttpResponseCode);
 800302a:	4863      	ldr	r0, [pc, #396]	; (80031b8 <sendGSMCommand+0x930>)
 800302c:	f012 fc71 	bl	8015912 <atoi>
 8003030:	4603      	mov	r3, r0
 8003032:	461a      	mov	r2, r3
 8003034:	4b64      	ldr	r3, [pc, #400]	; (80031c8 <sendGSMCommand+0x940>)
 8003036:	601a      	str	r2, [r3, #0]
									gsmInstance.u8IllegalHttpResponseCounter++;
 8003038:	4b58      	ldr	r3, [pc, #352]	; (800319c <sendGSMCommand+0x914>)
 800303a:	f893 3f8a 	ldrb.w	r3, [r3, #3978]	; 0xf8a
 800303e:	3301      	adds	r3, #1
 8003040:	b2da      	uxtb	r2, r3
 8003042:	4b56      	ldr	r3, [pc, #344]	; (800319c <sendGSMCommand+0x914>)
 8003044:	f883 2f8a 	strb.w	r2, [r3, #3978]	; 0xf8a
									if(gsmInstance.u8IllegalHttpResponseCounter >= MAX_HTTP_ATTEMPTS)
 8003048:	4b54      	ldr	r3, [pc, #336]	; (800319c <sendGSMCommand+0x914>)
 800304a:	f893 3f8a 	ldrb.w	r3, [r3, #3978]	; 0xf8a
 800304e:	2b04      	cmp	r3, #4
 8003050:	d905      	bls.n	800305e <sendGSMCommand+0x7d6>
										initGSMSIM868();
 8003052:	f7ff f833 	bl	80020bc <initGSMSIM868>
										gu8CheckSMS = TRUE;
 8003056:	4b5d      	ldr	r3, [pc, #372]	; (80031cc <sendGSMCommand+0x944>)
 8003058:	2201      	movs	r2, #1
 800305a:	701a      	strb	r2, [r3, #0]
										break;
 800305c:	e017      	b.n	800308e <sendGSMCommand+0x806>
									u8LastHttpResponseCode = atoi(gsmInstance.u32GSMHttpResponseCode);
 800305e:	4856      	ldr	r0, [pc, #344]	; (80031b8 <sendGSMCommand+0x930>)
 8003060:	f012 fc57 	bl	8015912 <atoi>
 8003064:	4603      	mov	r3, r0
 8003066:	461a      	mov	r2, r3
 8003068:	4b57      	ldr	r3, [pc, #348]	; (80031c8 <sendGSMCommand+0x940>)
 800306a:	601a      	str	r2, [r3, #0]
									gsmInstance.enmGSMCommand = enmGSMSTATE_MQTTPUBEX;
 800306c:	4b4b      	ldr	r3, [pc, #300]	; (800319c <sendGSMCommand+0x914>)
 800306e:	2219      	movs	r2, #25
 8003070:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
									gsmInstance.enmGSMCommand =enmGSMSTATE_ATHTTPDATA;
 8003074:	4b49      	ldr	r3, [pc, #292]	; (800319c <sendGSMCommand+0x914>)
 8003076:	2220      	movs	r2, #32
 8003078:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
									gsmInstance.u32GSMResponseTimer = 0;
 800307c:	4b47      	ldr	r3, [pc, #284]	; (800319c <sendGSMCommand+0x914>)
 800307e:	2200      	movs	r2, #0
 8003080:	f8c3 2fa4 	str.w	r2, [r3, #4004]	; 0xfa4
									gsmInstance.u8IncrementGsmState = FALSE;
 8003084:	4b45      	ldr	r3, [pc, #276]	; (800319c <sendGSMCommand+0x914>)
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
								break;
 800308c:	bf00      	nop
							break;
 800308e:	e35b      	b.n	8003748 <sendGSMCommand+0xec0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8003090:	4b42      	ldr	r3, [pc, #264]	; (800319c <sendGSMCommand+0x914>)
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8003098:	e356      	b.n	8003748 <sendGSMCommand+0xec0>
							gsmInstance.u8IncrementGsmState = TRUE;
 800309a:	4b40      	ldr	r3, [pc, #256]	; (800319c <sendGSMCommand+0x914>)
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 80030a2:	e351      	b.n	8003748 <sendGSMCommand+0xec0>
							gsmInstance.u8IncrementGsmState = TRUE;
 80030a4:	4b3d      	ldr	r3, [pc, #244]	; (800319c <sendGSMCommand+0x914>)
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 80030ac:	e34c      	b.n	8003748 <sendGSMCommand+0xec0>
							GSMInitCompleteFlag = TRUE;
 80030ae:	4b48      	ldr	r3, [pc, #288]	; (80031d0 <sendGSMCommand+0x948>)
 80030b0:	2201      	movs	r2, #1
 80030b2:	701a      	strb	r2, [r3, #0]
							gsmInstance.u8IncrementGsmState = TRUE;
 80030b4:	4b39      	ldr	r3, [pc, #228]	; (800319c <sendGSMCommand+0x914>)
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 80030bc:	e344      	b.n	8003748 <sendGSMCommand+0xec0>
							uint32_t i =0;
 80030be:	2300      	movs	r3, #0
 80030c0:	63fb      	str	r3, [r7, #60]	; 0x3c
							uint8_t cnt = 0;
 80030c2:	2300      	movs	r3, #0
 80030c4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							for(i=0;i<GSM_RESPONSE_ARRAY_SIZE && cnt<2;i++)
 80030c8:	2300      	movs	r3, #0
 80030ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030cc:	e01a      	b.n	8003104 <sendGSMCommand+0x87c>
								if(gsmInstance.as8GSM_Response_Buff[i] == '\0')
 80030ce:	4a33      	ldr	r2, [pc, #204]	; (800319c <sendGSMCommand+0x914>)
 80030d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030d2:	4413      	add	r3, r2
 80030d4:	f203 43f7 	addw	r3, r3, #1271	; 0x4f7
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10c      	bne.n	80030f8 <sendGSMCommand+0x870>
									gsmInstance.as8GSM_Response_Buff[i]='!';
 80030de:	4a2f      	ldr	r2, [pc, #188]	; (800319c <sendGSMCommand+0x914>)
 80030e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030e2:	4413      	add	r3, r2
 80030e4:	f203 43f7 	addw	r3, r3, #1271	; 0x4f7
 80030e8:	2221      	movs	r2, #33	; 0x21
 80030ea:	701a      	strb	r2, [r3, #0]
									cnt++;
 80030ec:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80030f0:	3301      	adds	r3, #1
 80030f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80030f6:	e002      	b.n	80030fe <sendGSMCommand+0x876>
								   cnt=0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							for(i=0;i<GSM_RESPONSE_ARRAY_SIZE && cnt<2;i++)
 80030fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003100:	3301      	adds	r3, #1
 8003102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003106:	f640 228b 	movw	r2, #2699	; 0xa8b
 800310a:	4293      	cmp	r3, r2
 800310c:	d803      	bhi.n	8003116 <sendGSMCommand+0x88e>
 800310e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003112:	2b01      	cmp	r3, #1
 8003114:	d9db      	bls.n	80030ce <sendGSMCommand+0x846>
							char *token = NULL;
 8003116:	2300      	movs	r3, #0
 8003118:	637b      	str	r3, [r7, #52]	; 0x34
							token = strtok(gsmInstance.as8GSM_Response_Buff,"+");
 800311a:	492e      	ldr	r1, [pc, #184]	; (80031d4 <sendGSMCommand+0x94c>)
 800311c:	481e      	ldr	r0, [pc, #120]	; (8003198 <sendGSMCommand+0x910>)
 800311e:	f014 fac1 	bl	80176a4 <strtok>
 8003122:	6378      	str	r0, [r7, #52]	; 0x34
							while(token != NULL)
 8003124:	e0d9      	b.n	80032da <sendGSMCommand+0xa52>
								if(strncmp(token,"QMTPUBEX",strlen("QMTPUBEX"))==0)
 8003126:	2208      	movs	r2, #8
 8003128:	492b      	ldr	r1, [pc, #172]	; (80031d8 <sendGSMCommand+0x950>)
 800312a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800312c:	f013 fc4a 	bl	80169c4 <strncmp>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10a      	bne.n	800314c <sendGSMCommand+0x8c4>
									memset(gsmInstance.u32GSMMQTTResponseCode,0x00,sizeof(gsmInstance.u32GSMMQTTResponseCode));
 8003136:	220f      	movs	r2, #15
 8003138:	2100      	movs	r1, #0
 800313a:	4828      	ldr	r0, [pc, #160]	; (80031dc <sendGSMCommand+0x954>)
 800313c:	f012 fc54 	bl	80159e8 <memset>
									memcpy(gsmInstance.u32GSMMQTTResponseCode, token, 13);
 8003140:	220d      	movs	r2, #13
 8003142:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003144:	4825      	ldr	r0, [pc, #148]	; (80031dc <sendGSMCommand+0x954>)
 8003146:	f012 fc41 	bl	80159cc <memcpy>
 800314a:	e0c1      	b.n	80032d0 <sendGSMCommand+0xa48>
								else if(strncmp(token,"CSQ",strlen("CSQ"))==0)
 800314c:	2203      	movs	r2, #3
 800314e:	4924      	ldr	r1, [pc, #144]	; (80031e0 <sendGSMCommand+0x958>)
 8003150:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003152:	f013 fc37 	bl	80169c4 <strncmp>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d149      	bne.n	80031f0 <sendGSMCommand+0x968>
									 memcpy(gsmInstance.agsmSignalStrength,&token[5],((strstr(token,"\r\n"))-(&token[5])));
 800315c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800315e:	1d5c      	adds	r4, r3, #5
 8003160:	490f      	ldr	r1, [pc, #60]	; (80031a0 <sendGSMCommand+0x918>)
 8003162:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003164:	f013 fc53 	bl	8016a0e <strstr>
 8003168:	4602      	mov	r2, r0
 800316a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800316c:	3305      	adds	r3, #5
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	461a      	mov	r2, r3
 8003172:	4621      	mov	r1, r4
 8003174:	481b      	ldr	r0, [pc, #108]	; (80031e4 <sendGSMCommand+0x95c>)
 8003176:	f012 fc29 	bl	80159cc <memcpy>
 800317a:	4b08      	ldr	r3, [pc, #32]	; (800319c <sendGSMCommand+0x914>)
 800317c:	f8b3 212c 	ldrh.w	r2, [r3, #300]	; 0x12c
									memcpy(gau8GSM_Signal,gsmInstance.agsmSignalStrength,2);
 8003180:	4b19      	ldr	r3, [pc, #100]	; (80031e8 <sendGSMCommand+0x960>)
 8003182:	801a      	strh	r2, [r3, #0]
									signal_qaulity = atoi(gau8GSM_Signal);
 8003184:	4818      	ldr	r0, [pc, #96]	; (80031e8 <sendGSMCommand+0x960>)
 8003186:	f012 fbc4 	bl	8015912 <atoi>
 800318a:	4603      	mov	r3, r0
 800318c:	b2da      	uxtb	r2, r3
 800318e:	4b17      	ldr	r3, [pc, #92]	; (80031ec <sendGSMCommand+0x964>)
 8003190:	701a      	strb	r2, [r3, #0]
 8003192:	e09d      	b.n	80032d0 <sendGSMCommand+0xa48>
 8003194:	0801b550 	.word	0x0801b550
 8003198:	200028db 	.word	0x200028db
 800319c:	200023e4 	.word	0x200023e4
 80031a0:	0801b518 	.word	0x0801b518
 80031a4:	20001a50 	.word	0x20001a50
 80031a8:	20001874 	.word	0x20001874
 80031ac:	200023b4 	.word	0x200023b4
 80031b0:	20001871 	.word	0x20001871
 80031b4:	0801b558 	.word	0x0801b558
 80031b8:	200028c9 	.word	0x200028c9
 80031bc:	20001870 	.word	0x20001870
 80031c0:	20002384 	.word	0x20002384
 80031c4:	20001888 	.word	0x20001888
 80031c8:	20001a24 	.word	0x20001a24
 80031cc:	20001889 	.word	0x20001889
 80031d0:	20001a85 	.word	0x20001a85
 80031d4:	0801b55c 	.word	0x0801b55c
 80031d8:	0801b560 	.word	0x0801b560
 80031dc:	200028cc 	.word	0x200028cc
 80031e0:	0801b56c 	.word	0x0801b56c
 80031e4:	20002510 	.word	0x20002510
 80031e8:	20001a58 	.word	0x20001a58
 80031ec:	20001a5a 	.word	0x20001a5a
								else if(strncmp(token,"QNWINFO",strlen("QNWINFO"))==0)
 80031f0:	2207      	movs	r2, #7
 80031f2:	49b3      	ldr	r1, [pc, #716]	; (80034c0 <sendGSMCommand+0xc38>)
 80031f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80031f6:	f013 fbe5 	bl	80169c4 <strncmp>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d14f      	bne.n	80032a0 <sendGSMCommand+0xa18>
									memset(gau8GSM_NWINFO,0x00,sizeof(gau8GSM_NWINFO));
 8003200:	220f      	movs	r2, #15
 8003202:	2100      	movs	r1, #0
 8003204:	48af      	ldr	r0, [pc, #700]	; (80034c4 <sendGSMCommand+0xc3c>)
 8003206:	f012 fbef 	bl	80159e8 <memset>
									memcpy(gau8GSM_NWINFO,&token[9],((strstr(token,","))-(&token[9])));
 800320a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320c:	f103 0409 	add.w	r4, r3, #9
 8003210:	212c      	movs	r1, #44	; 0x2c
 8003212:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003214:	f013 fbc1 	bl	801699a <strchr>
 8003218:	4602      	mov	r2, r0
 800321a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800321c:	3309      	adds	r3, #9
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	461a      	mov	r2, r3
 8003222:	4621      	mov	r1, r4
 8003224:	48a7      	ldr	r0, [pc, #668]	; (80034c4 <sendGSMCommand+0xc3c>)
 8003226:	f012 fbd1 	bl	80159cc <memcpy>
									if((strcmp(gau8GSM_NWINFO,"\"GSM\"") == 0) || (strcmp(gau8GSM_NWINFO,"\"GPRS\"") == 0) || (strcmp(gau8GSM_NWINFO,"\"EDGE\""))==0)
 800322a:	49a7      	ldr	r1, [pc, #668]	; (80034c8 <sendGSMCommand+0xc40>)
 800322c:	48a5      	ldr	r0, [pc, #660]	; (80034c4 <sendGSMCommand+0xc3c>)
 800322e:	f7fd fbcf 	bl	80009d0 <strcmp>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00d      	beq.n	8003254 <sendGSMCommand+0x9cc>
 8003238:	49a4      	ldr	r1, [pc, #656]	; (80034cc <sendGSMCommand+0xc44>)
 800323a:	48a2      	ldr	r0, [pc, #648]	; (80034c4 <sendGSMCommand+0xc3c>)
 800323c:	f7fd fbc8 	bl	80009d0 <strcmp>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d006      	beq.n	8003254 <sendGSMCommand+0x9cc>
 8003246:	49a2      	ldr	r1, [pc, #648]	; (80034d0 <sendGSMCommand+0xc48>)
 8003248:	489e      	ldr	r0, [pc, #632]	; (80034c4 <sendGSMCommand+0xc3c>)
 800324a:	f7fd fbc1 	bl	80009d0 <strcmp>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d107      	bne.n	8003264 <sendGSMCommand+0x9dc>
										u8daignostic|=(1<<1); // 2G
 8003254:	4b9f      	ldr	r3, [pc, #636]	; (80034d4 <sendGSMCommand+0xc4c>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	f043 0302 	orr.w	r3, r3, #2
 800325c:	b2da      	uxtb	r2, r3
 800325e:	4b9d      	ldr	r3, [pc, #628]	; (80034d4 <sendGSMCommand+0xc4c>)
 8003260:	701a      	strb	r2, [r3, #0]
 8003262:	e035      	b.n	80032d0 <sendGSMCommand+0xa48>
									else if((strcmp(gau8GSM_NWINFO,"\"TDD LTE\"")==0) || (strcmp(gau8GSM_NWINFO,"\"FDD LTE\""))==0)
 8003264:	499c      	ldr	r1, [pc, #624]	; (80034d8 <sendGSMCommand+0xc50>)
 8003266:	4897      	ldr	r0, [pc, #604]	; (80034c4 <sendGSMCommand+0xc3c>)
 8003268:	f7fd fbb2 	bl	80009d0 <strcmp>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d006      	beq.n	8003280 <sendGSMCommand+0x9f8>
 8003272:	499a      	ldr	r1, [pc, #616]	; (80034dc <sendGSMCommand+0xc54>)
 8003274:	4893      	ldr	r0, [pc, #588]	; (80034c4 <sendGSMCommand+0xc3c>)
 8003276:	f7fd fbab 	bl	80009d0 <strcmp>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d107      	bne.n	8003290 <sendGSMCommand+0xa08>
										u8daignostic|=(1<<2); // 4G
 8003280:	4b94      	ldr	r3, [pc, #592]	; (80034d4 <sendGSMCommand+0xc4c>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	f043 0304 	orr.w	r3, r3, #4
 8003288:	b2da      	uxtb	r2, r3
 800328a:	4b92      	ldr	r3, [pc, #584]	; (80034d4 <sendGSMCommand+0xc4c>)
 800328c:	701a      	strb	r2, [r3, #0]
 800328e:	e01f      	b.n	80032d0 <sendGSMCommand+0xa48>
										u8daignostic&=~((1<<0)|(1<<1)|(1<<2)); //
 8003290:	4b90      	ldr	r3, [pc, #576]	; (80034d4 <sendGSMCommand+0xc4c>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	f023 0307 	bic.w	r3, r3, #7
 8003298:	b2da      	uxtb	r2, r3
 800329a:	4b8e      	ldr	r3, [pc, #568]	; (80034d4 <sendGSMCommand+0xc4c>)
 800329c:	701a      	strb	r2, [r3, #0]
 800329e:	e017      	b.n	80032d0 <sendGSMCommand+0xa48>
								else if(strncmp(token,"QGPSGNMEA",strlen("QGPSGNMEA"))==0)
 80032a0:	2209      	movs	r2, #9
 80032a2:	498f      	ldr	r1, [pc, #572]	; (80034e0 <sendGSMCommand+0xc58>)
 80032a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80032a6:	f013 fb8d 	bl	80169c4 <strncmp>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10f      	bne.n	80032d0 <sendGSMCommand+0xa48>
									strncpy(gsmInstance.agpsLocationData,&token[11],((strstr(token,"\r\n"))-(&token[11])));
 80032b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b2:	f103 040b 	add.w	r4, r3, #11
 80032b6:	498b      	ldr	r1, [pc, #556]	; (80034e4 <sendGSMCommand+0xc5c>)
 80032b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80032ba:	f013 fba8 	bl	8016a0e <strstr>
 80032be:	4602      	mov	r2, r0
 80032c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c2:	330b      	adds	r3, #11
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	461a      	mov	r2, r3
 80032c8:	4621      	mov	r1, r4
 80032ca:	4887      	ldr	r0, [pc, #540]	; (80034e8 <sendGSMCommand+0xc60>)
 80032cc:	f013 fb8c 	bl	80169e8 <strncpy>
								token=strtok(NULL,"+");
 80032d0:	4986      	ldr	r1, [pc, #536]	; (80034ec <sendGSMCommand+0xc64>)
 80032d2:	2000      	movs	r0, #0
 80032d4:	f014 f9e6 	bl	80176a4 <strtok>
 80032d8:	6378      	str	r0, [r7, #52]	; 0x34
							while(token != NULL)
 80032da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f47f af22 	bne.w	8003126 <sendGSMCommand+0x89e>
							if(!(strcmp(gsmInstance.u32GSMMQTTResponseCode,"QMTPUBEX: 0,0")))
 80032e2:	4983      	ldr	r1, [pc, #524]	; (80034f0 <sendGSMCommand+0xc68>)
 80032e4:	4883      	ldr	r0, [pc, #524]	; (80034f4 <sendGSMCommand+0xc6c>)
 80032e6:	f7fd fb73 	bl	80009d0 <strcmp>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d102      	bne.n	80032f6 <sendGSMCommand+0xa6e>
								u8MqqtResponseFlag = TRUE;
 80032f0:	4b81      	ldr	r3, [pc, #516]	; (80034f8 <sendGSMCommand+0xc70>)
 80032f2:	2201      	movs	r2, #1
 80032f4:	701a      	strb	r2, [r3, #0]
							switch(u8MqqtResponseFlag)
 80032f6:	4b80      	ldr	r3, [pc, #512]	; (80034f8 <sendGSMCommand+0xc70>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d15a      	bne.n	80033b4 <sendGSMCommand+0xb2c>
									u8MqqtResponseFlag = FALSE;
 80032fe:	4b7e      	ldr	r3, [pc, #504]	; (80034f8 <sendGSMCommand+0xc70>)
 8003300:	2200      	movs	r2, #0
 8003302:	701a      	strb	r2, [r3, #0]
									g_u8HttpConEstablishedFlag = 1;
 8003304:	4b7d      	ldr	r3, [pc, #500]	; (80034fc <sendGSMCommand+0xc74>)
 8003306:	2201      	movs	r2, #1
 8003308:	701a      	strb	r2, [r3, #0]
									if(g_u8PayloadType == PAYLOD_TYPE_LIVE)
 800330a:	4b7d      	ldr	r3, [pc, #500]	; (8003500 <sendGSMCommand+0xc78>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d103      	bne.n	800331a <sendGSMCommand+0xa92>
										Queue_LiveDequeue(&gsmLivePayload);
 8003312:	487c      	ldr	r0, [pc, #496]	; (8003504 <sendGSMCommand+0xc7c>)
 8003314:	f002 fe3a 	bl	8005f8c <Queue_LiveDequeue>
 8003318:	e006      	b.n	8003328 <sendGSMCommand+0xaa0>
									else if(g_u8PayloadType == PAYLOD_TYPE_BUFF)
 800331a:	4b79      	ldr	r3, [pc, #484]	; (8003500 <sendGSMCommand+0xc78>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b02      	cmp	r3, #2
 8003320:	d102      	bne.n	8003328 <sendGSMCommand+0xaa0>
										Queue_BuffDequeue(&gsmBuffPayload);
 8003322:	4879      	ldr	r0, [pc, #484]	; (8003508 <sendGSMCommand+0xc80>)
 8003324:	f002 ff01 	bl	800612a <Queue_BuffDequeue>
									if(g_u8PayloadType == PAYLOD_TYPE_BUFF)
 8003328:	4b75      	ldr	r3, [pc, #468]	; (8003500 <sendGSMCommand+0xc78>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b02      	cmp	r3, #2
 800332e:	d120      	bne.n	8003372 <sendGSMCommand+0xaea>
										if(FlashStr.bitFlagSFlashData == 1)
 8003330:	4b76      	ldr	r3, [pc, #472]	; (800350c <sendGSMCommand+0xc84>)
 8003332:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003336:	3318      	adds	r3, #24
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d019      	beq.n	8003372 <sendGSMCommand+0xaea>
											FlashStr.u8BufferQueueCounts--;
 800333e:	4b73      	ldr	r3, [pc, #460]	; (800350c <sendGSMCommand+0xc84>)
 8003340:	7d1b      	ldrb	r3, [r3, #20]
 8003342:	3b01      	subs	r3, #1
 8003344:	b2da      	uxtb	r2, r3
 8003346:	4b71      	ldr	r3, [pc, #452]	; (800350c <sendGSMCommand+0xc84>)
 8003348:	751a      	strb	r2, [r3, #20]
											if(FlashStr.u8BufferQueueCounts == 0)
 800334a:	4b70      	ldr	r3, [pc, #448]	; (800350c <sendGSMCommand+0xc84>)
 800334c:	7d1b      	ldrb	r3, [r3, #20]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10f      	bne.n	8003372 <sendGSMCommand+0xaea>
												FlashStr.bitFlagSFlashData = 0;
 8003352:	4b6e      	ldr	r3, [pc, #440]	; (800350c <sendGSMCommand+0xc84>)
 8003354:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003358:	3318      	adds	r3, #24
 800335a:	2200      	movs	r2, #0
 800335c:	701a      	strb	r2, [r3, #0]
												g_stEepromBuffMemAdd.u32BuffFlashWriteAddress = FlashStr.u32FlashWriteAddress;
 800335e:	4b6b      	ldr	r3, [pc, #428]	; (800350c <sendGSMCommand+0xc84>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a6b      	ldr	r2, [pc, #428]	; (8003510 <sendGSMCommand+0xc88>)
 8003364:	6053      	str	r3, [r2, #4]
												g_stEepromBuffMemAdd.u32BuffFlashReadAddress =FlashStr.u32FlashReadAddress;
 8003366:	4b69      	ldr	r3, [pc, #420]	; (800350c <sendGSMCommand+0xc84>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	4a69      	ldr	r2, [pc, #420]	; (8003510 <sendGSMCommand+0xc88>)
 800336c:	6013      	str	r3, [r2, #0]
												EEPROM_WriteBuffMemData();
 800336e:	f7fe fad9 	bl	8001924 <EEPROM_WriteBuffMemData>
									g_u8PayloadType = 0;
 8003372:	4b63      	ldr	r3, [pc, #396]	; (8003500 <sendGSMCommand+0xc78>)
 8003374:	2200      	movs	r2, #0
 8003376:	701a      	strb	r2, [r3, #0]
								gu8HttpPayloadFlag = 0;
 8003378:	4b66      	ldr	r3, [pc, #408]	; (8003514 <sendGSMCommand+0xc8c>)
 800337a:	2200      	movs	r2, #0
 800337c:	701a      	strb	r2, [r3, #0]
								gu8HttpPayloadFlag = 0;
 800337e:	4b65      	ldr	r3, [pc, #404]	; (8003514 <sendGSMCommand+0xc8c>)
 8003380:	2200      	movs	r2, #0
 8003382:	701a      	strb	r2, [r3, #0]
								gsmInstance.u32GSMTimer = TWO_SEC; // Replace with Upload Frequency
 8003384:	4b58      	ldr	r3, [pc, #352]	; (80034e8 <sendGSMCommand+0xc60>)
 8003386:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800338a:	f8c3 2f90 	str.w	r2, [r3, #3984]	; 0xf90
								gu8HttpPayloadFlag = 0;
 800338e:	4b61      	ldr	r3, [pc, #388]	; (8003514 <sendGSMCommand+0xc8c>)
 8003390:	2200      	movs	r2, #0
 8003392:	701a      	strb	r2, [r3, #0]
								gsmInstance.enmGSMCommand = enmGSMSTATE_MQTTPUBEX;
 8003394:	4b54      	ldr	r3, [pc, #336]	; (80034e8 <sendGSMCommand+0xc60>)
 8003396:	2219      	movs	r2, #25
 8003398:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
								gsmInstance.u8IncrementGsmState = FALSE;
 800339c:	4b52      	ldr	r3, [pc, #328]	; (80034e8 <sendGSMCommand+0xc60>)
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
								u8LastMqttResponseCode = atoi(gsmInstance.u32GSMMQTTResponseCode);
 80033a4:	4853      	ldr	r0, [pc, #332]	; (80034f4 <sendGSMCommand+0xc6c>)
 80033a6:	f012 fab4 	bl	8015912 <atoi>
 80033aa:	4603      	mov	r3, r0
 80033ac:	461a      	mov	r2, r3
 80033ae:	4b5a      	ldr	r3, [pc, #360]	; (8003518 <sendGSMCommand+0xc90>)
 80033b0:	601a      	str	r2, [r3, #0]
								break;
 80033b2:	e02d      	b.n	8003410 <sendGSMCommand+0xb88>
									u8LastMqttResponseCode = atoi(gsmInstance.u32GSMMQTTResponseCode);
 80033b4:	484f      	ldr	r0, [pc, #316]	; (80034f4 <sendGSMCommand+0xc6c>)
 80033b6:	f012 faac 	bl	8015912 <atoi>
 80033ba:	4603      	mov	r3, r0
 80033bc:	461a      	mov	r2, r3
 80033be:	4b56      	ldr	r3, [pc, #344]	; (8003518 <sendGSMCommand+0xc90>)
 80033c0:	601a      	str	r2, [r3, #0]
									gsmInstance.u8IllegalHttpResponseCounter++;
 80033c2:	4b49      	ldr	r3, [pc, #292]	; (80034e8 <sendGSMCommand+0xc60>)
 80033c4:	f893 3f8a 	ldrb.w	r3, [r3, #3978]	; 0xf8a
 80033c8:	3301      	adds	r3, #1
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	4b46      	ldr	r3, [pc, #280]	; (80034e8 <sendGSMCommand+0xc60>)
 80033ce:	f883 2f8a 	strb.w	r2, [r3, #3978]	; 0xf8a
									if(gsmInstance.u8IllegalHttpResponseCounter >= MAX_HTTP_ATTEMPTS)
 80033d2:	4b45      	ldr	r3, [pc, #276]	; (80034e8 <sendGSMCommand+0xc60>)
 80033d4:	f893 3f8a 	ldrb.w	r3, [r3, #3978]	; 0xf8a
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d905      	bls.n	80033e8 <sendGSMCommand+0xb60>
										initGSMSIM868();
 80033dc:	f7fe fe6e 	bl	80020bc <initGSMSIM868>
										gu8CheckSMS = TRUE;
 80033e0:	4b4e      	ldr	r3, [pc, #312]	; (800351c <sendGSMCommand+0xc94>)
 80033e2:	2201      	movs	r2, #1
 80033e4:	701a      	strb	r2, [r3, #0]
										break;
 80033e6:	e013      	b.n	8003410 <sendGSMCommand+0xb88>
									u8LastMqttResponseCode = atoi(gsmInstance.u32GSMMQTTResponseCode);
 80033e8:	4842      	ldr	r0, [pc, #264]	; (80034f4 <sendGSMCommand+0xc6c>)
 80033ea:	f012 fa92 	bl	8015912 <atoi>
 80033ee:	4603      	mov	r3, r0
 80033f0:	461a      	mov	r2, r3
 80033f2:	4b49      	ldr	r3, [pc, #292]	; (8003518 <sendGSMCommand+0xc90>)
 80033f4:	601a      	str	r2, [r3, #0]
									gsmInstance.enmGSMCommand = enmGSMSTATE_MQTTPUBEX;
 80033f6:	4b3c      	ldr	r3, [pc, #240]	; (80034e8 <sendGSMCommand+0xc60>)
 80033f8:	2219      	movs	r2, #25
 80033fa:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
									gsmInstance.u32GSMResponseTimer = 0;
 80033fe:	4b3a      	ldr	r3, [pc, #232]	; (80034e8 <sendGSMCommand+0xc60>)
 8003400:	2200      	movs	r2, #0
 8003402:	f8c3 2fa4 	str.w	r2, [r3, #4004]	; 0xfa4
									gsmInstance.u8IncrementGsmState = FALSE;
 8003406:	4b38      	ldr	r3, [pc, #224]	; (80034e8 <sendGSMCommand+0xc60>)
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
									break;
 800340e:	bf00      	nop
						break;
 8003410:	e19a      	b.n	8003748 <sendGSMCommand+0xec0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8003412:	4b35      	ldr	r3, [pc, #212]	; (80034e8 <sendGSMCommand+0xc60>)
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 800341a:	e195      	b.n	8003748 <sendGSMCommand+0xec0>
						char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff
 800341c:	4940      	ldr	r1, [pc, #256]	; (8003520 <sendGSMCommand+0xc98>)
 800341e:	4841      	ldr	r0, [pc, #260]	; (8003524 <sendGSMCommand+0xc9c>)
 8003420:	f013 faf5 	bl	8016a0e <strstr>
 8003424:	61b8      	str	r0, [r7, #24]
						if(strLoc != NULL)
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 8092 	beq.w	8003552 <sendGSMCommand+0xcca>
							memset(gu32FotaFileSizeinBytes,0x00, strlen(gu32FotaFileSizeinBytes));
 800342e:	483e      	ldr	r0, [pc, #248]	; (8003528 <sendGSMCommand+0xca0>)
 8003430:	f7fd fad8 	bl	80009e4 <strlen>
 8003434:	4603      	mov	r3, r0
 8003436:	461a      	mov	r2, r3
 8003438:	2100      	movs	r1, #0
 800343a:	483b      	ldr	r0, [pc, #236]	; (8003528 <sendGSMCommand+0xca0>)
 800343c:	f012 fad4 	bl	80159e8 <memset>
							memcpy(gu32FotaFileSizeinBytes, &strLoc[4], strlen(strtok(&strLoc[4],"\r\n")));
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	1d1c      	adds	r4, r3, #4
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	3304      	adds	r3, #4
 8003448:	4926      	ldr	r1, [pc, #152]	; (80034e4 <sendGSMCommand+0xc5c>)
 800344a:	4618      	mov	r0, r3
 800344c:	f014 f92a 	bl	80176a4 <strtok>
 8003450:	4603      	mov	r3, r0
 8003452:	4618      	mov	r0, r3
 8003454:	f7fd fac6 	bl	80009e4 <strlen>
 8003458:	4603      	mov	r3, r0
 800345a:	461a      	mov	r2, r3
 800345c:	4621      	mov	r1, r4
 800345e:	4832      	ldr	r0, [pc, #200]	; (8003528 <sendGSMCommand+0xca0>)
 8003460:	f012 fab4 	bl	80159cc <memcpy>
							u32FotaFileSizeInBytes = strlen(gu32FotaFileSizeinBytes);
 8003464:	4830      	ldr	r0, [pc, #192]	; (8003528 <sendGSMCommand+0xca0>)
 8003466:	f7fd fabd 	bl	80009e4 <strlen>
 800346a:	4603      	mov	r3, r0
 800346c:	4a2f      	ldr	r2, [pc, #188]	; (800352c <sendGSMCommand+0xca4>)
 800346e:	6013      	str	r3, [r2, #0]
							gsmInstance.u32FotaFileSizeBytes = atoi(gu32FotaFileSizeinBytes);
 8003470:	482d      	ldr	r0, [pc, #180]	; (8003528 <sendGSMCommand+0xca0>)
 8003472:	f012 fa4e 	bl	8015912 <atoi>
 8003476:	4603      	mov	r3, r0
 8003478:	461a      	mov	r2, r3
 800347a:	4b1b      	ldr	r3, [pc, #108]	; (80034e8 <sendGSMCommand+0xc60>)
 800347c:	f8c3 2fa0 	str.w	r2, [r3, #4000]	; 0xfa0
							if(gsmInstance.u32FotaFileSizeBytes <= (126000))// as Flash is of 128K
 8003480:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <sendGSMCommand+0xc60>)
 8003482:	f8d3 3fa0 	ldr.w	r3, [r3, #4000]	; 0xfa0
 8003486:	4a2a      	ldr	r2, [pc, #168]	; (8003530 <sendGSMCommand+0xca8>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d855      	bhi.n	8003538 <sendGSMCommand+0xcb0>
								boolAttemptFota = TRUE;
 800348c:	4b29      	ldr	r3, [pc, #164]	; (8003534 <sendGSMCommand+0xcac>)
 800348e:	2201      	movs	r2, #1
 8003490:	701a      	strb	r2, [r3, #0]
								if(gsmInstance.u32FotaFileSizeBytes != 0)
 8003492:	4b15      	ldr	r3, [pc, #84]	; (80034e8 <sendGSMCommand+0xc60>)
 8003494:	f8d3 3fa0 	ldr.w	r3, [r3, #4000]	; 0xfa0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00a      	beq.n	80034b2 <sendGSMCommand+0xc2a>
									updateHTTPReadLength(gsmInstance.u32FotaFileSizeBytes);
 800349c:	4b12      	ldr	r3, [pc, #72]	; (80034e8 <sendGSMCommand+0xc60>)
 800349e:	f8d3 3fa0 	ldr.w	r3, [r3, #4000]	; 0xfa0
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 fcb2 	bl	8003e0c <updateHTTPReadLength>
							gsmInstance.u8IncrementGsmState = TRUE;
 80034a8:	4b0f      	ldr	r3, [pc, #60]	; (80034e8 <sendGSMCommand+0xc60>)
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
						break;
 80034b0:	e14a      	b.n	8003748 <sendGSMCommand+0xec0>
									Diagnostic(enmDiagnostic_RX_FILE_SIZE_ERROR);
 80034b2:	2006      	movs	r0, #6
 80034b4:	f001 fe94 	bl	80051e0 <Diagnostic>
									Deinit_FOTA_Fail();
 80034b8:	f000 fdac 	bl	8004014 <Deinit_FOTA_Fail>
									break;
 80034bc:	e144      	b.n	8003748 <sendGSMCommand+0xec0>
 80034be:	bf00      	nop
 80034c0:	0801b570 	.word	0x0801b570
 80034c4:	20000fb4 	.word	0x20000fb4
 80034c8:	0801b578 	.word	0x0801b578
 80034cc:	0801b580 	.word	0x0801b580
 80034d0:	0801b588 	.word	0x0801b588
 80034d4:	20001a86 	.word	0x20001a86
 80034d8:	0801b590 	.word	0x0801b590
 80034dc:	0801b59c 	.word	0x0801b59c
 80034e0:	0801b5a8 	.word	0x0801b5a8
 80034e4:	0801b518 	.word	0x0801b518
 80034e8:	200023e4 	.word	0x200023e4
 80034ec:	0801b55c 	.word	0x0801b55c
 80034f0:	0801b5b4 	.word	0x0801b5b4
 80034f4:	200028cc 	.word	0x200028cc
 80034f8:	20001a54 	.word	0x20001a54
 80034fc:	20001a1e 	.word	0x20001a1e
 8003500:	20001870 	.word	0x20001870
 8003504:	200023b4 	.word	0x200023b4
 8003508:	20002384 	.word	0x20002384
 800350c:	2000374c 	.word	0x2000374c
 8003510:	200021b0 	.word	0x200021b0
 8003514:	20001888 	.word	0x20001888
 8003518:	20001a28 	.word	0x20001a28
 800351c:	20001889 	.word	0x20001889
 8003520:	0801b5c4 	.word	0x0801b5c4
 8003524:	200028db 	.word	0x200028db
 8003528:	20000f9c 	.word	0x20000f9c
 800352c:	20001a44 	.word	0x20001a44
 8003530:	0001ec30 	.word	0x0001ec30
 8003534:	20001a2c 	.word	0x20001a2c
								gsmInstance.u8IncrementGsmState = FALSE;
 8003538:	4bbb      	ldr	r3, [pc, #748]	; (8003828 <sendGSMCommand+0xfa0>)
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
								gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 8003540:	4bb9      	ldr	r3, [pc, #740]	; (8003828 <sendGSMCommand+0xfa0>)
 8003542:	2203      	movs	r2, #3
 8003544:	f883 2fae 	strb.w	r2, [r3, #4014]	; 0xfae
								gsmInstance.enmGSMCommand = enmGSMSTATE_MQTTPUBEX;
 8003548:	4bb7      	ldr	r3, [pc, #732]	; (8003828 <sendGSMCommand+0xfa0>)
 800354a:	2219      	movs	r2, #25
 800354c:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
								break;
 8003550:	e0fa      	b.n	8003748 <sendGSMCommand+0xec0>
							gsmInstance.u8IncrementGsmState = FALSE;
 8003552:	4bb5      	ldr	r3, [pc, #724]	; (8003828 <sendGSMCommand+0xfa0>)
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 800355a:	4bb3      	ldr	r3, [pc, #716]	; (8003828 <sendGSMCommand+0xfa0>)
 800355c:	2203      	movs	r2, #3
 800355e:	f883 2fae 	strb.w	r2, [r3, #4014]	; 0xfae
							gsmInstance.enmGSMCommand = enmGSMSTATE_MQTTPUBEX;
 8003562:	4bb1      	ldr	r3, [pc, #708]	; (8003828 <sendGSMCommand+0xfa0>)
 8003564:	2219      	movs	r2, #25
 8003566:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
						break;
 800356a:	e0ed      	b.n	8003748 <sendGSMCommand+0xec0>
						char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff,(const char *)"206,");
 800356c:	49af      	ldr	r1, [pc, #700]	; (800382c <sendGSMCommand+0xfa4>)
 800356e:	48b0      	ldr	r0, [pc, #704]	; (8003830 <sendGSMCommand+0xfa8>)
 8003570:	f013 fa4d 	bl	8016a0e <strstr>
 8003574:	61f8      	str	r0, [r7, #28]
						if(strLoc != NULL)
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d004      	beq.n	8003586 <sendGSMCommand+0xcfe>
							gsmInstance.u8IncrementGsmState = TRUE;
 800357c:	4baa      	ldr	r3, [pc, #680]	; (8003828 <sendGSMCommand+0xfa0>)
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8003584:	e0e0      	b.n	8003748 <sendGSMCommand+0xec0>
							gsmInstance.u8IncrementGsmState = FALSE;
 8003586:	4ba8      	ldr	r3, [pc, #672]	; (8003828 <sendGSMCommand+0xfa0>)
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 800358e:	4ba6      	ldr	r3, [pc, #664]	; (8003828 <sendGSMCommand+0xfa0>)
 8003590:	2203      	movs	r2, #3
 8003592:	f883 2fae 	strb.w	r2, [r3, #4014]	; 0xfae
							gsmInstance.enmGSMCommand = enmGSMSTATE_MQTTPUBEX;
 8003596:	4ba4      	ldr	r3, [pc, #656]	; (8003828 <sendGSMCommand+0xfa0>)
 8003598:	2219      	movs	r2, #25
 800359a:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
							break;
 800359e:	e0d3      	b.n	8003748 <sendGSMCommand+0xec0>
						if(boolAttemptFota == TRUE)
 80035a0:	4ba4      	ldr	r3, [pc, #656]	; (8003834 <sendGSMCommand+0xfac>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 80bc 	beq.w	8003722 <sendGSMCommand+0xe9a>
							HAL_GPIO_TogglePin(GPS_LED_GPIO_Port, GPS_LED_Pin);
 80035aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035b2:	f00b fd75 	bl	800f0a0 <HAL_GPIO_TogglePin>
							if(u32FotaFileReadComplete == 0)
 80035b6:	4ba0      	ldr	r3, [pc, #640]	; (8003838 <sendGSMCommand+0xfb0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d171      	bne.n	80036a2 <sendGSMCommand+0xe1a>
								memset(gau8FotaData,0x00,sizeof(gau8FotaData));
 80035be:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80035c2:	2100      	movs	r1, #0
 80035c4:	489d      	ldr	r0, [pc, #628]	; (800383c <sendGSMCommand+0xfb4>)
 80035c6:	f012 fa0f 	bl	80159e8 <memset>
								memcpy(gau8FotaData,(const char *)&gsmInstance.as8GSM_Response_Buff[11],2000);
 80035ca:	4a9c      	ldr	r2, [pc, #624]	; (800383c <sendGSMCommand+0xfb4>)
 80035cc:	4b96      	ldr	r3, [pc, #600]	; (8003828 <sendGSMCommand+0xfa0>)
 80035ce:	4610      	mov	r0, r2
 80035d0:	f203 5302 	addw	r3, r3, #1282	; 0x502
 80035d4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80035d8:	4619      	mov	r1, r3
 80035da:	f012 f9f7 	bl	80159cc <memcpy>
								if(u32MemoryWriteCycle == FALSE)
 80035de:	4b98      	ldr	r3, [pc, #608]	; (8003840 <sendGSMCommand+0xfb8>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d136      	bne.n	8003654 <sendGSMCommand+0xdcc>
									FLASH_If_Init();
 80035e6:	f005 fef7 	bl	80093d8 <FLASH_If_Init>
									if(FLASH_If_Erase(0,getNewFirmwareStorageLocation()) != FLASHIF_ERASE_OK)
 80035ea:	f006 f871 	bl	80096d0 <getNewFirmwareStorageLocation>
 80035ee:	4603      	mov	r3, r0
 80035f0:	4619      	mov	r1, r3
 80035f2:	2000      	movs	r0, #0
 80035f4:	f005 fff2 	bl	80095dc <FLASH_If_Erase>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d005      	beq.n	800360a <sendGSMCommand+0xd82>
										Diagnostic(enmDiagnostic_FLASH_ERRASE_ERROR);
 80035fe:	2008      	movs	r0, #8
 8003600:	f001 fdee 	bl	80051e0 <Diagnostic>
										Deinit_FOTA_Fail();
 8003604:	f000 fd06 	bl	8004014 <Deinit_FOTA_Fail>
										break;
 8003608:	e09e      	b.n	8003748 <sendGSMCommand+0xec0>
									u32FlashMemoryWriteStatus = WriteDatatoFlash((uint8_t *)gau8FotaData,1);
 800360a:	2101      	movs	r1, #1
 800360c:	488b      	ldr	r0, [pc, #556]	; (800383c <sendGSMCommand+0xfb4>)
 800360e:	f005 fef5 	bl	80093fc <WriteDatatoFlash>
 8003612:	4603      	mov	r3, r0
 8003614:	4a8b      	ldr	r2, [pc, #556]	; (8003844 <sendGSMCommand+0xfbc>)
 8003616:	6013      	str	r3, [r2, #0]
									if(u32FlashMemoryWriteStatus == SUCCESS)
 8003618:	4b8a      	ldr	r3, [pc, #552]	; (8003844 <sendGSMCommand+0xfbc>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d113      	bne.n	8003648 <sendGSMCommand+0xdc0>
										u32MemoryWriteCycle = TRUE;
 8003620:	4b87      	ldr	r3, [pc, #540]	; (8003840 <sendGSMCommand+0xfb8>)
 8003622:	2201      	movs	r2, #1
 8003624:	601a      	str	r2, [r3, #0]
										updateHTTPReadLength(gsmInstance.u32FotaFileSizeBytes);
 8003626:	4b80      	ldr	r3, [pc, #512]	; (8003828 <sendGSMCommand+0xfa0>)
 8003628:	f8d3 3fa0 	ldr.w	r3, [r3, #4000]	; 0xfa0
 800362c:	4618      	mov	r0, r3
 800362e:	f000 fbed 	bl	8003e0c <updateHTTPReadLength>
										memset((char *)gsmInstance.as8GSM_Response_Buff, GSM_ARRAY_INIT_CHAR,(GSM_RESPONSE_ARRAY_SIZE * sizeof(uint8_t)));
 8003632:	f640 228c 	movw	r2, #2700	; 0xa8c
 8003636:	2100      	movs	r1, #0
 8003638:	487d      	ldr	r0, [pc, #500]	; (8003830 <sendGSMCommand+0xfa8>)
 800363a:	f012 f9d5 	bl	80159e8 <memset>
										gsmInstance.enmGSMCommand = enmGSMSTATE_ATQHTTPGETEX;
 800363e:	4b7a      	ldr	r3, [pc, #488]	; (8003828 <sendGSMCommand+0xfa0>)
 8003640:	221e      	movs	r2, #30
 8003642:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
 8003646:	e027      	b.n	8003698 <sendGSMCommand+0xe10>
										Diagnostic(enmDiagnostic_FLASH_Write_ERROR);
 8003648:	2009      	movs	r0, #9
 800364a:	f001 fdc9 	bl	80051e0 <Diagnostic>
										Deinit_FOTA_Fail();
 800364e:	f000 fce1 	bl	8004014 <Deinit_FOTA_Fail>
										break;
 8003652:	e079      	b.n	8003748 <sendGSMCommand+0xec0>
									u32FlashMemoryWriteStatus = WriteDatatoFlash((uint8_t *)gau8FotaData,0);
 8003654:	2100      	movs	r1, #0
 8003656:	4879      	ldr	r0, [pc, #484]	; (800383c <sendGSMCommand+0xfb4>)
 8003658:	f005 fed0 	bl	80093fc <WriteDatatoFlash>
 800365c:	4603      	mov	r3, r0
 800365e:	4a79      	ldr	r2, [pc, #484]	; (8003844 <sendGSMCommand+0xfbc>)
 8003660:	6013      	str	r3, [r2, #0]
									if(u32FlashMemoryWriteStatus == SUCCESS)
 8003662:	4b78      	ldr	r3, [pc, #480]	; (8003844 <sendGSMCommand+0xfbc>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d110      	bne.n	800368c <sendGSMCommand+0xe04>
										updateHTTPReadLength(gsmInstance.u32FotaFileSizeBytes);
 800366a:	4b6f      	ldr	r3, [pc, #444]	; (8003828 <sendGSMCommand+0xfa0>)
 800366c:	f8d3 3fa0 	ldr.w	r3, [r3, #4000]	; 0xfa0
 8003670:	4618      	mov	r0, r3
 8003672:	f000 fbcb 	bl	8003e0c <updateHTTPReadLength>
										memset((char *)gsmInstance.as8GSM_Response_Buff, GSM_ARRAY_INIT_CHAR,(GSM_RESPONSE_ARRAY_SIZE * sizeof(uint8_t)));
 8003676:	f640 228c 	movw	r2, #2700	; 0xa8c
 800367a:	2100      	movs	r1, #0
 800367c:	486c      	ldr	r0, [pc, #432]	; (8003830 <sendGSMCommand+0xfa8>)
 800367e:	f012 f9b3 	bl	80159e8 <memset>
										gsmInstance.enmGSMCommand = enmGSMSTATE_ATQHTTPGETEX;
 8003682:	4b69      	ldr	r3, [pc, #420]	; (8003828 <sendGSMCommand+0xfa0>)
 8003684:	221e      	movs	r2, #30
 8003686:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
 800368a:	e005      	b.n	8003698 <sendGSMCommand+0xe10>
										Diagnostic(enmDiagnostic_FLASH_Write_ERROR);
 800368c:	2009      	movs	r0, #9
 800368e:	f001 fda7 	bl	80051e0 <Diagnostic>
										Deinit_FOTA_Fail();
 8003692:	f000 fcbf 	bl	8004014 <Deinit_FOTA_Fail>
										break;
 8003696:	e057      	b.n	8003748 <sendGSMCommand+0xec0>
								gsmInstance.u8IncrementGsmState = FALSE;
 8003698:	4b63      	ldr	r3, [pc, #396]	; (8003828 <sendGSMCommand+0xfa0>)
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
					break;
 80036a0:	e051      	b.n	8003746 <sendGSMCommand+0xebe>
							else if(u32FotaFileReadComplete == 1)
 80036a2:	4b65      	ldr	r3, [pc, #404]	; (8003838 <sendGSMCommand+0xfb0>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d14d      	bne.n	8003746 <sendGSMCommand+0xebe>
								if(u32MemoryWriteCycle == FALSE)
 80036aa:	4b65      	ldr	r3, [pc, #404]	; (8003840 <sendGSMCommand+0xfb8>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <sendGSMCommand+0xe2e>
									FLASH_If_Init();
 80036b2:	f005 fe91 	bl	80093d8 <FLASH_If_Init>
								u32FlashMemoryWriteStatus = WriteDatatoFlash((uint8_t *)gau8FotaData,0);
 80036b6:	2100      	movs	r1, #0
 80036b8:	4860      	ldr	r0, [pc, #384]	; (800383c <sendGSMCommand+0xfb4>)
 80036ba:	f005 fe9f 	bl	80093fc <WriteDatatoFlash>
 80036be:	4603      	mov	r3, r0
 80036c0:	4a60      	ldr	r2, [pc, #384]	; (8003844 <sendGSMCommand+0xfbc>)
 80036c2:	6013      	str	r3, [r2, #0]
								if(u32FlashMemoryWriteStatus == SUCCESS)
 80036c4:	4b5f      	ldr	r3, [pc, #380]	; (8003844 <sendGSMCommand+0xfbc>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d124      	bne.n	8003716 <sendGSMCommand+0xe8e>
									if(flashWriteBootSection(getNewFirmwareStorageLocation()) == 0)
 80036cc:	f006 f800 	bl	80096d0 <getNewFirmwareStorageLocation>
 80036d0:	4603      	mov	r3, r0
 80036d2:	4618      	mov	r0, r3
 80036d4:	f006 f81a 	bl	800970c <flashWriteBootSection>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d115      	bne.n	800370a <sendGSMCommand+0xe82>
										boolAttemptFota =  FALSE;
 80036de:	4b55      	ldr	r3, [pc, #340]	; (8003834 <sendGSMCommand+0xfac>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	701a      	strb	r2, [r3, #0]
										if(u32MemoryWriteCycle == TRUE)
 80036e4:	4b56      	ldr	r3, [pc, #344]	; (8003840 <sendGSMCommand+0xfb8>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d102      	bne.n	80036f2 <sendGSMCommand+0xe6a>
											u32MemoryWriteCycle = FALSE;
 80036ec:	4b54      	ldr	r3, [pc, #336]	; (8003840 <sendGSMCommand+0xfb8>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	601a      	str	r2, [r3, #0]
										Diagnostic(enmDiagnostic_SUCCESS_OK);
 80036f2:	2000      	movs	r0, #0
 80036f4:	f001 fd74 	bl	80051e0 <Diagnostic>
										boolFOTACompleteFlag = TRUE;
 80036f8:	4b53      	ldr	r3, [pc, #332]	; (8003848 <sendGSMCommand+0xfc0>)
 80036fa:	2201      	movs	r2, #1
 80036fc:	701a      	strb	r2, [r3, #0]
										Deinit_FOTA_Fail();
 80036fe:	f000 fc89 	bl	8004014 <Deinit_FOTA_Fail>
								u32MemoryWriteCycle = TRUE;
 8003702:	4b4f      	ldr	r3, [pc, #316]	; (8003840 <sendGSMCommand+0xfb8>)
 8003704:	2201      	movs	r2, #1
 8003706:	601a      	str	r2, [r3, #0]
					break;
 8003708:	e01d      	b.n	8003746 <sendGSMCommand+0xebe>
										Diagnostic(enmDiagnostic_FLASH_Write_ERROR);
 800370a:	2009      	movs	r0, #9
 800370c:	f001 fd68 	bl	80051e0 <Diagnostic>
										Deinit_FOTA_Fail();
 8003710:	f000 fc80 	bl	8004014 <Deinit_FOTA_Fail>
										break;
 8003714:	e018      	b.n	8003748 <sendGSMCommand+0xec0>
									Diagnostic(enmDiagnostic_FLASH_Write_ERROR);
 8003716:	2009      	movs	r0, #9
 8003718:	f001 fd62 	bl	80051e0 <Diagnostic>
									Deinit_FOTA_Fail();
 800371c:	f000 fc7a 	bl	8004014 <Deinit_FOTA_Fail>
									break;
 8003720:	e012      	b.n	8003748 <sendGSMCommand+0xec0>
							HAL_GPIO_WritePin(GPS_LED_GPIO_Port, GPS_LED_Pin, GPIO_PIN_RESET);
 8003722:	2200      	movs	r2, #0
 8003724:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003728:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800372c:	f00b fc88 	bl	800f040 <HAL_GPIO_WritePin>
					break;
 8003730:	e009      	b.n	8003746 <sendGSMCommand+0xebe>
							HAL_GPIO_WritePin(GPS_LED_GPIO_Port, GPS_LED_Pin, GPIO_PIN_RESET);
 8003732:	2200      	movs	r2, #0
 8003734:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800373c:	f00b fc80 	bl	800f040 <HAL_GPIO_WritePin>
							break;
 8003740:	e002      	b.n	8003748 <sendGSMCommand+0xec0>
						break;
 8003742:	bf00      	nop
 8003744:	e000      	b.n	8003748 <sendGSMCommand+0xec0>
					break;
 8003746:	bf00      	nop
					gsmInstance.u8GSM_Response_Character_Counter = 0;
 8003748:	4b37      	ldr	r3, [pc, #220]	; (8003828 <sendGSMCommand+0xfa0>)
 800374a:	2200      	movs	r2, #0
 800374c:	f8c3 2fa8 	str.w	r2, [r3, #4008]	; 0xfa8
					gsmInstance.enmGSMCommandState = enmGSM_CMDSEND;
 8003750:	4b35      	ldr	r3, [pc, #212]	; (8003828 <sendGSMCommand+0xfa0>)
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2fad 	strb.w	r2, [r3, #4013]	; 0xfad
					gsmInstance.enmGSMCommandResponseState = enmGSM_SENDCMD;
 8003758:	4b33      	ldr	r3, [pc, #204]	; (8003828 <sendGSMCommand+0xfa0>)
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2fac 	strb.w	r2, [r3, #4012]	; 0xfac
					gsmInstance.u8gsmRetryCount = GSM_MAX_RETRY;
 8003760:	4b31      	ldr	r3, [pc, #196]	; (8003828 <sendGSMCommand+0xfa0>)
 8003762:	2205      	movs	r2, #5
 8003764:	f883 2f85 	strb.w	r2, [r3, #3973]	; 0xf85
					gsmInstance.u32GSMResponseTimer = 0;
 8003768:	4b2f      	ldr	r3, [pc, #188]	; (8003828 <sendGSMCommand+0xfa0>)
 800376a:	2200      	movs	r2, #0
 800376c:	f8c3 2fa4 	str.w	r2, [r3, #4004]	; 0xfa4
					u8GSMCharRcv = 0;
 8003770:	4b36      	ldr	r3, [pc, #216]	; (800384c <sendGSMCommand+0xfc4>)
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]
					gsmInstance.u8GSM_Response_Character_Counter = 0;
 8003776:	4b2c      	ldr	r3, [pc, #176]	; (8003828 <sendGSMCommand+0xfa0>)
 8003778:	2200      	movs	r2, #0
 800377a:	f8c3 2fa8 	str.w	r2, [r3, #4008]	; 0xfa8
					if(gsmInstance.enmGSMCommand != enmGSMSTATE_READFILE)
 800377e:	4b2a      	ldr	r3, [pc, #168]	; (8003828 <sendGSMCommand+0xfa0>)
 8003780:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 8003784:	2b1f      	cmp	r3, #31
 8003786:	d005      	beq.n	8003794 <sendGSMCommand+0xf0c>
						memset((char *)gsmInstance.as8GSM_Response_Buff, GSM_ARRAY_INIT_CHAR,(GSM_RESPONSE_ARRAY_SIZE * sizeof(uint8_t))); /* Clear Response Buffer */
 8003788:	f640 228c 	movw	r2, #2700	; 0xa8c
 800378c:	2100      	movs	r1, #0
 800378e:	4828      	ldr	r0, [pc, #160]	; (8003830 <sendGSMCommand+0xfa8>)
 8003790:	f012 f92a 	bl	80159e8 <memset>
					if(gsmInstance.u8IncrementGsmState == TRUE)
 8003794:	4b24      	ldr	r3, [pc, #144]	; (8003828 <sendGSMCommand+0xfa0>)
 8003796:	f893 3f89 	ldrb.w	r3, [r3, #3977]	; 0xf89
 800379a:	2b01      	cmp	r3, #1
 800379c:	d175      	bne.n	800388a <sendGSMCommand+0x1002>
							gsmInstance.u32GSMTimer = ONE_SEC;
 800379e:	4b22      	ldr	r3, [pc, #136]	; (8003828 <sendGSMCommand+0xfa0>)
 80037a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037a4:	f8c3 2f90 	str.w	r2, [r3, #3984]	; 0xf90
						gsmInstance.enmGSMCommand++;
 80037a8:	4b1f      	ldr	r3, [pc, #124]	; (8003828 <sendGSMCommand+0xfa0>)
 80037aa:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 80037ae:	3301      	adds	r3, #1
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	4b1d      	ldr	r3, [pc, #116]	; (8003828 <sendGSMCommand+0xfa0>)
 80037b4:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
			{
 80037b8:	e067      	b.n	800388a <sendGSMCommand+0x1002>
					gsmInstance.u8GSM_Response_Character_Counter = 0;
 80037ba:	4b1b      	ldr	r3, [pc, #108]	; (8003828 <sendGSMCommand+0xfa0>)
 80037bc:	2200      	movs	r2, #0
 80037be:	f8c3 2fa8 	str.w	r2, [r3, #4008]	; 0xfa8
					gsmInstance.enmGSMCommandResponseState = enmGSM_CMDSEND;//enmGSM_SENDCMD;
 80037c2:	4b19      	ldr	r3, [pc, #100]	; (8003828 <sendGSMCommand+0xfa0>)
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2fac 	strb.w	r2, [r3, #4012]	; 0xfac
					memset((char *)gsmInstance.as8GSM_Response_Buff, GSM_ARRAY_INIT_CHAR,(GSM_RESPONSE_ARRAY_SIZE * sizeof(uint8_t))); /* Clear Response Buffer */
 80037ca:	f640 228c 	movw	r2, #2700	; 0xa8c
 80037ce:	2100      	movs	r1, #0
 80037d0:	4817      	ldr	r0, [pc, #92]	; (8003830 <sendGSMCommand+0xfa8>)
 80037d2:	f012 f909 	bl	80159e8 <memset>
					u8GSMCharRcv = 0;
 80037d6:	4b1d      	ldr	r3, [pc, #116]	; (800384c <sendGSMCommand+0xfc4>)
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]
			{
 80037dc:	e055      	b.n	800388a <sendGSMCommand+0x1002>
			else if(gsmInstance.u32GSMResponseTimer == 0)
 80037de:	4b12      	ldr	r3, [pc, #72]	; (8003828 <sendGSMCommand+0xfa0>)
 80037e0:	f8d3 3fa4 	ldr.w	r3, [r3, #4004]	; 0xfa4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d154      	bne.n	8003892 <sendGSMCommand+0x100a>
				gsmInstance.u8gsmRetryCount--;
 80037e8:	4b0f      	ldr	r3, [pc, #60]	; (8003828 <sendGSMCommand+0xfa0>)
 80037ea:	f893 3f85 	ldrb.w	r3, [r3, #3973]	; 0xf85
 80037ee:	3b01      	subs	r3, #1
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	4b0d      	ldr	r3, [pc, #52]	; (8003828 <sendGSMCommand+0xfa0>)
 80037f4:	f883 2f85 	strb.w	r2, [r3, #3973]	; 0xf85
				if(gsmInstance.u8gsmRetryCount == 0)
 80037f8:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <sendGSMCommand+0xfa0>)
 80037fa:	f893 3f85 	ldrb.w	r3, [r3, #3973]	; 0xf85
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d128      	bne.n	8003854 <sendGSMCommand+0xfcc>
					memset((char *)gsmInstance.as8GSM_Response_Buff, GSM_ARRAY_INIT_CHAR, (GSM_RESPONSE_ARRAY_SIZE));
 8003802:	f640 228c 	movw	r2, #2700	; 0xa8c
 8003806:	2100      	movs	r1, #0
 8003808:	4809      	ldr	r0, [pc, #36]	; (8003830 <sendGSMCommand+0xfa8>)
 800380a:	f012 f8ed 	bl	80159e8 <memset>
					if(gsmInstance.enmcurrentTask == enmGSMTASK_UPLOADDATA)
 800380e:	4b06      	ldr	r3, [pc, #24]	; (8003828 <sendGSMCommand+0xfa0>)
 8003810:	f893 3fae 	ldrb.w	r3, [r3, #4014]	; 0xfae
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b03      	cmp	r3, #3
 8003818:	d102      	bne.n	8003820 <sendGSMCommand+0xf98>
						gu8CheckSMS = TRUE;
 800381a:	4b0d      	ldr	r3, [pc, #52]	; (8003850 <sendGSMCommand+0xfc8>)
 800381c:	2201      	movs	r2, #1
 800381e:	701a      	strb	r2, [r3, #0]
					initGSMSIM868();
 8003820:	f7fe fc4c 	bl	80020bc <initGSMSIM868>
 8003824:	e029      	b.n	800387a <sendGSMCommand+0xff2>
 8003826:	bf00      	nop
 8003828:	200023e4 	.word	0x200023e4
 800382c:	0801b5cc 	.word	0x0801b5cc
 8003830:	200028db 	.word	0x200028db
 8003834:	20001a2c 	.word	0x20001a2c
 8003838:	20001a3c 	.word	0x20001a3c
 800383c:	200007cc 	.word	0x200007cc
 8003840:	20001a40 	.word	0x20001a40
 8003844:	20001a4c 	.word	0x20001a4c
 8003848:	20001878 	.word	0x20001878
 800384c:	20001abc 	.word	0x20001abc
 8003850:	20001889 	.word	0x20001889
					gsmInstance.enmGSMCommandState = enmGSM_CMDSEND;
 8003854:	4b11      	ldr	r3, [pc, #68]	; (800389c <sendGSMCommand+0x1014>)
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2fad 	strb.w	r2, [r3, #4013]	; 0xfad
					gsmInstance.enmGSMCommandResponseState = enmGSM_SENDCMD;
 800385c:	4b0f      	ldr	r3, [pc, #60]	; (800389c <sendGSMCommand+0x1014>)
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2fac 	strb.w	r2, [r3, #4012]	; 0xfac
					memset((char *)gsmInstance.as8GSM_Response_Buff, GSM_ARRAY_INIT_CHAR, (GSM_RESPONSE_ARRAY_SIZE));
 8003864:	f640 228c 	movw	r2, #2700	; 0xa8c
 8003868:	2100      	movs	r1, #0
 800386a:	480d      	ldr	r0, [pc, #52]	; (80038a0 <sendGSMCommand+0x1018>)
 800386c:	f012 f8bc 	bl	80159e8 <memset>
					gsmInstance.u32GSMTimer = ONE_SEC;
 8003870:	4b0a      	ldr	r3, [pc, #40]	; (800389c <sendGSMCommand+0x1014>)
 8003872:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003876:	f8c3 2f90 	str.w	r2, [r3, #3984]	; 0xf90
				gsmInstance.u32GSMResponseTimer = 0;
 800387a:	4b08      	ldr	r3, [pc, #32]	; (800389c <sendGSMCommand+0x1014>)
 800387c:	2200      	movs	r2, #0
 800387e:	f8c3 2fa4 	str.w	r2, [r3, #4004]	; 0xfa4
				u8GSMCharRcv = 0;
 8003882:	4b08      	ldr	r3, [pc, #32]	; (80038a4 <sendGSMCommand+0x101c>)
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]
			break;
 8003888:	e003      	b.n	8003892 <sendGSMCommand+0x100a>
			{
 800388a:	bf00      	nop
			break;
 800388c:	e001      	b.n	8003892 <sendGSMCommand+0x100a>
			break;
 800388e:	bf00      	nop
 8003890:	e000      	b.n	8003894 <sendGSMCommand+0x100c>
			break;
 8003892:	bf00      	nop
}
 8003894:	bf00      	nop
 8003896:	3744      	adds	r7, #68	; 0x44
 8003898:	46bd      	mov	sp, r7
 800389a:	bd90      	pop	{r4, r7, pc}
 800389c:	200023e4 	.word	0x200023e4
 80038a0:	200028db 	.word	0x200028db
 80038a4:	20001abc 	.word	0x20001abc

080038a8 <updateHttpDataLength>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void updateHttpDataLength()
{
 80038a8:	b5b0      	push	{r4, r5, r7, lr}
 80038aa:	b088      	sub	sp, #32
 80038ac:	af00      	add	r7, sp, #0
	char* pDignosticPacket = NULL;
 80038ae:	2300      	movs	r3, #0
 80038b0:	61bb      	str	r3, [r7, #24]
	if((Queue_IsLiveQueueEmpty(&gsmLivePayload) == FALSE )&& (gsmLivePayload.data[gsmLivePayload.tail] != NULL))
 80038b2:	48a5      	ldr	r0, [pc, #660]	; (8003b48 <updateHttpDataLength+0x2a0>)
 80038b4:	f002 fbcb 	bl	800604e <Queue_IsLiveQueueEmpty>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d113      	bne.n	80038e6 <updateHttpDataLength+0x3e>
 80038be:	4ba2      	ldr	r3, [pc, #648]	; (8003b48 <updateHttpDataLength+0x2a0>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	4aa1      	ldr	r2, [pc, #644]	; (8003b48 <updateHttpDataLength+0x2a0>)
 80038c4:	3302      	adds	r3, #2
 80038c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00b      	beq.n	80038e6 <updateHttpDataLength+0x3e>
		{
			g_u8PayloadType = PAYLOD_TYPE_LIVE;
 80038ce:	4b9f      	ldr	r3, [pc, #636]	; (8003b4c <updateHttpDataLength+0x2a4>)
 80038d0:	2201      	movs	r2, #1
 80038d2:	701a      	strb	r2, [r3, #0]
			tempdata = gsmLivePayload.data[gsmLivePayload.tail];
 80038d4:	4b9c      	ldr	r3, [pc, #624]	; (8003b48 <updateHttpDataLength+0x2a0>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	4a9b      	ldr	r2, [pc, #620]	; (8003b48 <updateHttpDataLength+0x2a0>)
 80038da:	3302      	adds	r3, #2
 80038dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e0:	4a9b      	ldr	r2, [pc, #620]	; (8003b50 <updateHttpDataLength+0x2a8>)
 80038e2:	6013      	str	r3, [r2, #0]
 80038e4:	e018      	b.n	8003918 <updateHttpDataLength+0x70>
		}
		else if((Queue_IsBuffQueueEmpty(&gsmBuffPayload) == FALSE )&& (gsmBuffPayload.data[gsmBuffPayload.tail] != NULL))
 80038e6:	489b      	ldr	r0, [pc, #620]	; (8003b54 <updateHttpDataLength+0x2ac>)
 80038e8:	f002 fc80 	bl	80061ec <Queue_IsBuffQueueEmpty>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d112      	bne.n	8003918 <updateHttpDataLength+0x70>
 80038f2:	4b98      	ldr	r3, [pc, #608]	; (8003b54 <updateHttpDataLength+0x2ac>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	4a97      	ldr	r2, [pc, #604]	; (8003b54 <updateHttpDataLength+0x2ac>)
 80038f8:	3302      	adds	r3, #2
 80038fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00a      	beq.n	8003918 <updateHttpDataLength+0x70>
		{
			g_u8PayloadType = PAYLOD_TYPE_BUFF;
 8003902:	4b92      	ldr	r3, [pc, #584]	; (8003b4c <updateHttpDataLength+0x2a4>)
 8003904:	2202      	movs	r2, #2
 8003906:	701a      	strb	r2, [r3, #0]
			tempdata = gsmBuffPayload.data[gsmBuffPayload.tail];
 8003908:	4b92      	ldr	r3, [pc, #584]	; (8003b54 <updateHttpDataLength+0x2ac>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	4a91      	ldr	r2, [pc, #580]	; (8003b54 <updateHttpDataLength+0x2ac>)
 800390e:	3302      	adds	r3, #2
 8003910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003914:	4a8e      	ldr	r2, [pc, #568]	; (8003b50 <updateHttpDataLength+0x2a8>)
 8003916:	6013      	str	r3, [r2, #0]
		}

		uint32_t payloadLength;
		//= strlen(tempdata);
		payloadLength = strlen(tempdata);
 8003918:	4b8d      	ldr	r3, [pc, #564]	; (8003b50 <updateHttpDataLength+0x2a8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f7fd f861 	bl	80009e4 <strlen>
 8003922:	61f8      	str	r0, [r7, #28]
		if(payloadLength == 0 )
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d103      	bne.n	8003932 <updateHttpDataLength+0x8a>
		{
			payloadLength = strlen(g_u8PaylodLenMsgBuff);/*PAYLOAD LENGTH MISSMATCHED*/
 800392a:	488b      	ldr	r0, [pc, #556]	; (8003b58 <updateHttpDataLength+0x2b0>)
 800392c:	f7fd f85a 	bl	80009e4 <strlen>
 8003930:	61f8      	str	r0, [r7, #28]
		}


//		char buffer[payloadLength];
		char PUBTopic[15] = "";
 8003932:	2300      	movs	r3, #0
 8003934:	603b      	str	r3, [r7, #0]
 8003936:	1d3b      	adds	r3, r7, #4
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	605a      	str	r2, [r3, #4]
 800393e:	f8c3 2007 	str.w	r2, [r3, #7]
		char *strLoc = NULL,*strLoc1 = NULL;
 8003942:	2300      	movs	r3, #0
 8003944:	617b      	str	r3, [r7, #20]
 8003946:	2300      	movs	r3, #0
 8003948:	613b      	str	r3, [r7, #16]
		uint8_t len = 0;
 800394a:	2300      	movs	r3, #0
 800394c:	73fb      	strb	r3, [r7, #15]
		memset(buffer, 0x00, (6 * sizeof(char))); /* Clear Response Buffer */
 800394e:	2206      	movs	r2, #6
 8003950:	2100      	movs	r1, #0
 8003952:	4882      	ldr	r0, [pc, #520]	; (8003b5c <updateHttpDataLength+0x2b4>)
 8003954:	f012 f848 	bl	80159e8 <memset>
		/*MQTT*/

		memset(gau8GSM_ATQMTPUBEX, 0x00, ( 250 * sizeof(char)));
 8003958:	22fa      	movs	r2, #250	; 0xfa
 800395a:	2100      	movs	r1, #0
 800395c:	4880      	ldr	r0, [pc, #512]	; (8003b60 <updateHttpDataLength+0x2b8>)
 800395e:	f012 f843 	bl	80159e8 <memset>
		itoa(payloadLength,buffer,PAYLOAD_DATA_STRING_RADIX);
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	220a      	movs	r2, #10
 8003966:	497d      	ldr	r1, [pc, #500]	; (8003b5c <updateHttpDataLength+0x2b4>)
 8003968:	4618      	mov	r0, r3
 800396a:	f012 f81d 	bl	80159a8 <itoa>
		strcpy((char *)gau8GSM_ATQMTPUBEX,"AT+QMTPUBEX=0,0,0,0,");
 800396e:	4a7c      	ldr	r2, [pc, #496]	; (8003b60 <updateHttpDataLength+0x2b8>)
 8003970:	4b7c      	ldr	r3, [pc, #496]	; (8003b64 <updateHttpDataLength+0x2bc>)
 8003972:	4614      	mov	r4, r2
 8003974:	461d      	mov	r5, r3
 8003976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800397a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800397e:	6020      	str	r0, [r4, #0]
 8003980:	3404      	adds	r4, #4
 8003982:	7021      	strb	r1, [r4, #0]

		strcat((char *)gau8GSM_ATQMTPUBEX,(char *)"\"");
 8003984:	4876      	ldr	r0, [pc, #472]	; (8003b60 <updateHttpDataLength+0x2b8>)
 8003986:	f7fd f82d 	bl	80009e4 <strlen>
 800398a:	4603      	mov	r3, r0
 800398c:	461a      	mov	r2, r3
 800398e:	4b74      	ldr	r3, [pc, #464]	; (8003b60 <updateHttpDataLength+0x2b8>)
 8003990:	4413      	add	r3, r2
 8003992:	4975      	ldr	r1, [pc, #468]	; (8003b68 <updateHttpDataLength+0x2c0>)
 8003994:	461a      	mov	r2, r3
 8003996:	460b      	mov	r3, r1
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	8013      	strh	r3, [r2, #0]
		strLoc = strstr(tempdata,"_");
 800399c:	4b6c      	ldr	r3, [pc, #432]	; (8003b50 <updateHttpDataLength+0x2a8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	215f      	movs	r1, #95	; 0x5f
 80039a2:	4618      	mov	r0, r3
 80039a4:	f012 fff9 	bl	801699a <strchr>
 80039a8:	6178      	str	r0, [r7, #20]
		strLoc1 = strstr(strLoc+1,",");
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	3301      	adds	r3, #1
 80039ae:	212c      	movs	r1, #44	; 0x2c
 80039b0:	4618      	mov	r0, r3
 80039b2:	f012 fff2 	bl	801699a <strchr>
 80039b6:	6138      	str	r0, [r7, #16]
		len = strLoc1-strLoc;
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	73fb      	strb	r3, [r7, #15]
		memset(PUBTopic,0x00,sizeof(PUBTopic));
 80039c0:	463b      	mov	r3, r7
 80039c2:	220f      	movs	r2, #15
 80039c4:	2100      	movs	r1, #0
 80039c6:	4618      	mov	r0, r3
 80039c8:	f012 f80e 	bl	80159e8 <memset>
		memcpy(PUBTopic,(strLoc+1),(len-1));
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	1c59      	adds	r1, r3, #1
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	461a      	mov	r2, r3
 80039d6:	463b      	mov	r3, r7
 80039d8:	4618      	mov	r0, r3
 80039da:	f011 fff7 	bl	80159cc <memcpy>


		if(g_u8PayloadType == PAYLOD_TYPE_LIVE)
 80039de:	4b5b      	ldr	r3, [pc, #364]	; (8003b4c <updateHttpDataLength+0x2a4>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d174      	bne.n	8003ad0 <updateHttpDataLength+0x228>
		{
//			strcat((char *)gau8GSM_ATQMTPUBEX,(char *)MQTT_PUBPayload);
			if(!strcmp(PUBTopic,"Diagnostic"))
 80039e6:	463b      	mov	r3, r7
 80039e8:	4960      	ldr	r1, [pc, #384]	; (8003b6c <updateHttpDataLength+0x2c4>)
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fc fff0 	bl	80009d0 <strcmp>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d115      	bne.n	8003a22 <updateHttpDataLength+0x17a>
			{
				strcat((char *)gau8GSM_ATQMTPUBEX,(char *)MQTT_PUBDiagnostic);
 80039f6:	485a      	ldr	r0, [pc, #360]	; (8003b60 <updateHttpDataLength+0x2b8>)
 80039f8:	f7fc fff4 	bl	80009e4 <strlen>
 80039fc:	4603      	mov	r3, r0
 80039fe:	461a      	mov	r2, r3
 8003a00:	4b57      	ldr	r3, [pc, #348]	; (8003b60 <updateHttpDataLength+0x2b8>)
 8003a02:	4413      	add	r3, r2
 8003a04:	4a5a      	ldr	r2, [pc, #360]	; (8003b70 <updateHttpDataLength+0x2c8>)
 8003a06:	461d      	mov	r5, r3
 8003a08:	4614      	mov	r4, r2
 8003a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a0c:	6028      	str	r0, [r5, #0]
 8003a0e:	6069      	str	r1, [r5, #4]
 8003a10:	60aa      	str	r2, [r5, #8]
 8003a12:	60eb      	str	r3, [r5, #12]
 8003a14:	cc07      	ldmia	r4!, {r0, r1, r2}
 8003a16:	6128      	str	r0, [r5, #16]
 8003a18:	6169      	str	r1, [r5, #20]
 8003a1a:	61aa      	str	r2, [r5, #24]
 8003a1c:	8823      	ldrh	r3, [r4, #0]
 8003a1e:	83ab      	strh	r3, [r5, #28]
 8003a20:	e0c9      	b.n	8003bb6 <updateHttpDataLength+0x30e>
			}
			else if(!strcmp(PUBTopic,"Payload"))
 8003a22:	463b      	mov	r3, r7
 8003a24:	4953      	ldr	r1, [pc, #332]	; (8003b74 <updateHttpDataLength+0x2cc>)
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fc ffd2 	bl	80009d0 <strcmp>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d117      	bne.n	8003a62 <updateHttpDataLength+0x1ba>
			{
				strcat((char *)gau8GSM_ATQMTPUBEX,(char *)MQTT_PUBPayload);
 8003a32:	484b      	ldr	r0, [pc, #300]	; (8003b60 <updateHttpDataLength+0x2b8>)
 8003a34:	f7fc ffd6 	bl	80009e4 <strlen>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	4b48      	ldr	r3, [pc, #288]	; (8003b60 <updateHttpDataLength+0x2b8>)
 8003a3e:	4413      	add	r3, r2
 8003a40:	4a4d      	ldr	r2, [pc, #308]	; (8003b78 <updateHttpDataLength+0x2d0>)
 8003a42:	461d      	mov	r5, r3
 8003a44:	4614      	mov	r4, r2
 8003a46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a48:	6028      	str	r0, [r5, #0]
 8003a4a:	6069      	str	r1, [r5, #4]
 8003a4c:	60aa      	str	r2, [r5, #8]
 8003a4e:	60eb      	str	r3, [r5, #12]
 8003a50:	cc03      	ldmia	r4!, {r0, r1}
 8003a52:	6128      	str	r0, [r5, #16]
 8003a54:	6169      	str	r1, [r5, #20]
 8003a56:	8823      	ldrh	r3, [r4, #0]
 8003a58:	78a2      	ldrb	r2, [r4, #2]
 8003a5a:	832b      	strh	r3, [r5, #24]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	76ab      	strb	r3, [r5, #26]
 8003a60:	e0a9      	b.n	8003bb6 <updateHttpDataLength+0x30e>
			}
			else if(!strcmp(PUBTopic,"Geo"))
 8003a62:	463b      	mov	r3, r7
 8003a64:	4945      	ldr	r1, [pc, #276]	; (8003b7c <updateHttpDataLength+0x2d4>)
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fc ffb2 	bl	80009d0 <strcmp>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d116      	bne.n	8003aa0 <updateHttpDataLength+0x1f8>
			{
				strcat((char *)gau8GSM_ATQMTPUBEX,(char *)MQTT_PUBGeo);
 8003a72:	483b      	ldr	r0, [pc, #236]	; (8003b60 <updateHttpDataLength+0x2b8>)
 8003a74:	f7fc ffb6 	bl	80009e4 <strlen>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	4b38      	ldr	r3, [pc, #224]	; (8003b60 <updateHttpDataLength+0x2b8>)
 8003a7e:	4413      	add	r3, r2
 8003a80:	4a3f      	ldr	r2, [pc, #252]	; (8003b80 <updateHttpDataLength+0x2d8>)
 8003a82:	461c      	mov	r4, r3
 8003a84:	4615      	mov	r5, r2
 8003a86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a88:	6020      	str	r0, [r4, #0]
 8003a8a:	6061      	str	r1, [r4, #4]
 8003a8c:	60a2      	str	r2, [r4, #8]
 8003a8e:	60e3      	str	r3, [r4, #12]
 8003a90:	6828      	ldr	r0, [r5, #0]
 8003a92:	6120      	str	r0, [r4, #16]
 8003a94:	88ab      	ldrh	r3, [r5, #4]
 8003a96:	79aa      	ldrb	r2, [r5, #6]
 8003a98:	82a3      	strh	r3, [r4, #20]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	75a3      	strb	r3, [r4, #22]
 8003a9e:	e08a      	b.n	8003bb6 <updateHttpDataLength+0x30e>
			}
			else
			{
				strcat((char *)gau8GSM_ATQMTPUBEX,(char *)MQTT_PUBPayload);
 8003aa0:	482f      	ldr	r0, [pc, #188]	; (8003b60 <updateHttpDataLength+0x2b8>)
 8003aa2:	f7fc ff9f 	bl	80009e4 <strlen>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4b2d      	ldr	r3, [pc, #180]	; (8003b60 <updateHttpDataLength+0x2b8>)
 8003aac:	4413      	add	r3, r2
 8003aae:	4a32      	ldr	r2, [pc, #200]	; (8003b78 <updateHttpDataLength+0x2d0>)
 8003ab0:	461d      	mov	r5, r3
 8003ab2:	4614      	mov	r4, r2
 8003ab4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ab6:	6028      	str	r0, [r5, #0]
 8003ab8:	6069      	str	r1, [r5, #4]
 8003aba:	60aa      	str	r2, [r5, #8]
 8003abc:	60eb      	str	r3, [r5, #12]
 8003abe:	cc03      	ldmia	r4!, {r0, r1}
 8003ac0:	6128      	str	r0, [r5, #16]
 8003ac2:	6169      	str	r1, [r5, #20]
 8003ac4:	8823      	ldrh	r3, [r4, #0]
 8003ac6:	78a2      	ldrb	r2, [r4, #2]
 8003ac8:	832b      	strh	r3, [r5, #24]
 8003aca:	4613      	mov	r3, r2
 8003acc:	76ab      	strb	r3, [r5, #26]
 8003ace:	e072      	b.n	8003bb6 <updateHttpDataLength+0x30e>
			}
		}
		else if(g_u8PayloadType == PAYLOD_TYPE_BUFF)
 8003ad0:	4b1e      	ldr	r3, [pc, #120]	; (8003b4c <updateHttpDataLength+0x2a4>)
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d157      	bne.n	8003b88 <updateHttpDataLength+0x2e0>
		{
			/**/
			pDignosticPacket = NULL;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	61bb      	str	r3, [r7, #24]
			pDignosticPacket = strstr(tempdata,"Diagnostic");
 8003adc:	4b1c      	ldr	r3, [pc, #112]	; (8003b50 <updateHttpDataLength+0x2a8>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4922      	ldr	r1, [pc, #136]	; (8003b6c <updateHttpDataLength+0x2c4>)
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f012 ff93 	bl	8016a0e <strstr>
 8003ae8:	61b8      	str	r0, [r7, #24]
			if(pDignosticPacket == NULL)
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d114      	bne.n	8003b1a <updateHttpDataLength+0x272>
			{
				strcat((char *)gau8GSM_ATQMTPUBEX,(char *)MQTT_PUBBuffer);
 8003af0:	481b      	ldr	r0, [pc, #108]	; (8003b60 <updateHttpDataLength+0x2b8>)
 8003af2:	f7fc ff77 	bl	80009e4 <strlen>
 8003af6:	4603      	mov	r3, r0
 8003af8:	461a      	mov	r2, r3
 8003afa:	4b19      	ldr	r3, [pc, #100]	; (8003b60 <updateHttpDataLength+0x2b8>)
 8003afc:	4413      	add	r3, r2
 8003afe:	4a21      	ldr	r2, [pc, #132]	; (8003b84 <updateHttpDataLength+0x2dc>)
 8003b00:	461d      	mov	r5, r3
 8003b02:	4614      	mov	r4, r2
 8003b04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b06:	6028      	str	r0, [r5, #0]
 8003b08:	6069      	str	r1, [r5, #4]
 8003b0a:	60aa      	str	r2, [r5, #8]
 8003b0c:	60eb      	str	r3, [r5, #12]
 8003b0e:	cc03      	ldmia	r4!, {r0, r1}
 8003b10:	6128      	str	r0, [r5, #16]
 8003b12:	6169      	str	r1, [r5, #20]
 8003b14:	8823      	ldrh	r3, [r4, #0]
 8003b16:	832b      	strh	r3, [r5, #24]
 8003b18:	e04d      	b.n	8003bb6 <updateHttpDataLength+0x30e>
			}
			else
			{
				strcat((char *)gau8GSM_ATQMTPUBEX,(char *)MQTT_PUBDiagnostic);
 8003b1a:	4811      	ldr	r0, [pc, #68]	; (8003b60 <updateHttpDataLength+0x2b8>)
 8003b1c:	f7fc ff62 	bl	80009e4 <strlen>
 8003b20:	4603      	mov	r3, r0
 8003b22:	461a      	mov	r2, r3
 8003b24:	4b0e      	ldr	r3, [pc, #56]	; (8003b60 <updateHttpDataLength+0x2b8>)
 8003b26:	4413      	add	r3, r2
 8003b28:	4a11      	ldr	r2, [pc, #68]	; (8003b70 <updateHttpDataLength+0x2c8>)
 8003b2a:	461d      	mov	r5, r3
 8003b2c:	4614      	mov	r4, r2
 8003b2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b30:	6028      	str	r0, [r5, #0]
 8003b32:	6069      	str	r1, [r5, #4]
 8003b34:	60aa      	str	r2, [r5, #8]
 8003b36:	60eb      	str	r3, [r5, #12]
 8003b38:	cc07      	ldmia	r4!, {r0, r1, r2}
 8003b3a:	6128      	str	r0, [r5, #16]
 8003b3c:	6169      	str	r1, [r5, #20]
 8003b3e:	61aa      	str	r2, [r5, #24]
 8003b40:	8823      	ldrh	r3, [r4, #0]
 8003b42:	83ab      	strh	r3, [r5, #28]
 8003b44:	e037      	b.n	8003bb6 <updateHttpDataLength+0x30e>
 8003b46:	bf00      	nop
 8003b48:	200023b4 	.word	0x200023b4
 8003b4c:	20001870 	.word	0x20001870
 8003b50:	20000054 	.word	0x20000054
 8003b54:	20002384 	.word	0x20002384
 8003b58:	20001834 	.word	0x20001834
 8003b5c:	20000fa4 	.word	0x20000fa4
 8003b60:	2000188c 	.word	0x2000188c
 8003b64:	0801b5d4 	.word	0x0801b5d4
 8003b68:	0801b4c8 	.word	0x0801b4c8
 8003b6c:	0801b5ec 	.word	0x0801b5ec
 8003b70:	0801bccc 	.word	0x0801bccc
 8003b74:	0801b5f8 	.word	0x0801b5f8
 8003b78:	0801bcb0 	.word	0x0801bcb0
 8003b7c:	0801b600 	.word	0x0801b600
 8003b80:	0801bcec 	.word	0x0801bcec
 8003b84:	0801bd04 	.word	0x0801bd04
			//strcat((char *)gau8GSM_ATQMTPUBEX,(char *)MQTT_PUBBuffer);
		}
		else
		{
			/*This will never happens but this is for saftey purpose.*/
			strcat((char *)gau8GSM_ATQMTPUBEX,(char *)MQTT_PUBPayload);
 8003b88:	4825      	ldr	r0, [pc, #148]	; (8003c20 <updateHttpDataLength+0x378>)
 8003b8a:	f7fc ff2b 	bl	80009e4 <strlen>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	461a      	mov	r2, r3
 8003b92:	4b23      	ldr	r3, [pc, #140]	; (8003c20 <updateHttpDataLength+0x378>)
 8003b94:	4413      	add	r3, r2
 8003b96:	4a23      	ldr	r2, [pc, #140]	; (8003c24 <updateHttpDataLength+0x37c>)
 8003b98:	461d      	mov	r5, r3
 8003b9a:	4614      	mov	r4, r2
 8003b9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b9e:	6028      	str	r0, [r5, #0]
 8003ba0:	6069      	str	r1, [r5, #4]
 8003ba2:	60aa      	str	r2, [r5, #8]
 8003ba4:	60eb      	str	r3, [r5, #12]
 8003ba6:	cc03      	ldmia	r4!, {r0, r1}
 8003ba8:	6128      	str	r0, [r5, #16]
 8003baa:	6169      	str	r1, [r5, #20]
 8003bac:	8823      	ldrh	r3, [r4, #0]
 8003bae:	78a2      	ldrb	r2, [r4, #2]
 8003bb0:	832b      	strh	r3, [r5, #24]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	76ab      	strb	r3, [r5, #26]
//		else
//		{
//			strcat((char *)gau8GSM_ATQMTPUBEX,(char *)MQTT_PUBPayload);
//		}

		strcat((char *)gau8GSM_ATQMTPUBEX,(char *)"\",");
 8003bb6:	481a      	ldr	r0, [pc, #104]	; (8003c20 <updateHttpDataLength+0x378>)
 8003bb8:	f7fc ff14 	bl	80009e4 <strlen>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	4b17      	ldr	r3, [pc, #92]	; (8003c20 <updateHttpDataLength+0x378>)
 8003bc2:	4413      	add	r3, r2
 8003bc4:	4a18      	ldr	r2, [pc, #96]	; (8003c28 <updateHttpDataLength+0x380>)
 8003bc6:	8811      	ldrh	r1, [r2, #0]
 8003bc8:	7892      	ldrb	r2, [r2, #2]
 8003bca:	8019      	strh	r1, [r3, #0]
 8003bcc:	709a      	strb	r2, [r3, #2]
	//	strcpy((char *)gau8GSM_ATQMTPUBEX,"AT+QMTPUBEX=0,0,0,0,"<PUBTOPIC>",");

		strcat((char *)gau8GSM_ATQMTPUBEX,buffer); // lenght of payload
 8003bce:	4917      	ldr	r1, [pc, #92]	; (8003c2c <updateHttpDataLength+0x384>)
 8003bd0:	4813      	ldr	r0, [pc, #76]	; (8003c20 <updateHttpDataLength+0x378>)
 8003bd2:	f012 fed3 	bl	801697c <strcat>
		strcat((char *)gau8GSM_ATQMTPUBEX,";+QGPSGNMEA=\"RMC\";+CSQ;+QNWINFO");//
 8003bd6:	4812      	ldr	r0, [pc, #72]	; (8003c20 <updateHttpDataLength+0x378>)
 8003bd8:	f7fc ff04 	bl	80009e4 <strlen>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	461a      	mov	r2, r3
 8003be0:	4b0f      	ldr	r3, [pc, #60]	; (8003c20 <updateHttpDataLength+0x378>)
 8003be2:	4413      	add	r3, r2
 8003be4:	4a12      	ldr	r2, [pc, #72]	; (8003c30 <updateHttpDataLength+0x388>)
 8003be6:	461c      	mov	r4, r3
 8003be8:	4615      	mov	r5, r2
 8003bea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bec:	6020      	str	r0, [r4, #0]
 8003bee:	6061      	str	r1, [r4, #4]
 8003bf0:	60a2      	str	r2, [r4, #8]
 8003bf2:	60e3      	str	r3, [r4, #12]
 8003bf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bf6:	6120      	str	r0, [r4, #16]
 8003bf8:	6161      	str	r1, [r4, #20]
 8003bfa:	61a2      	str	r2, [r4, #24]
 8003bfc:	61e3      	str	r3, [r4, #28]
		strcat((char *)gau8GSM_ATQMTPUBEX,"\r\n");
 8003bfe:	4808      	ldr	r0, [pc, #32]	; (8003c20 <updateHttpDataLength+0x378>)
 8003c00:	f7fc fef0 	bl	80009e4 <strlen>
 8003c04:	4603      	mov	r3, r0
 8003c06:	461a      	mov	r2, r3
 8003c08:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <updateHttpDataLength+0x378>)
 8003c0a:	4413      	add	r3, r2
 8003c0c:	4a09      	ldr	r2, [pc, #36]	; (8003c34 <updateHttpDataLength+0x38c>)
 8003c0e:	8811      	ldrh	r1, [r2, #0]
 8003c10:	7892      	ldrb	r2, [r2, #2]
 8003c12:	8019      	strh	r1, [r3, #0]
 8003c14:	709a      	strb	r2, [r3, #2]

}
 8003c16:	bf00      	nop
 8003c18:	3720      	adds	r7, #32
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bdb0      	pop	{r4, r5, r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	2000188c 	.word	0x2000188c
 8003c24:	0801bcb0 	.word	0x0801bcb0
 8003c28:	0801b604 	.word	0x0801b604
 8003c2c:	20000fa4 	.word	0x20000fa4
 8003c30:	0801b608 	.word	0x0801b608
 8003c34:	0801b518 	.word	0x0801b518

08003c38 <syncrtcwithNetworkTime>:
uint32_t gu32Date = 0;
uint32_t gu32Hours = 0;
uint32_t gu32Minutes = 0;
uint32_t gu32Seconds = 0;
void syncrtcwithNetworkTime(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
	if(gu32TimeSyncFlag == 1)
 8003c3c:	4b65      	ldr	r3, [pc, #404]	; (8003dd4 <syncrtcwithNetworkTime+0x19c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	f000 80c5 	beq.w	8003dd0 <syncrtcwithNetworkTime+0x198>
	//
	//	gu32Hours = (((gau8GSM_TimeStamp[11]-'0') * 10) + (gau8GSM_TimeStamp[12]-'0'));
	//	gu32Minutes = (((gau8GSM_TimeStamp[14]-'0') * 10) + (gau8GSM_TimeStamp[15]-'0'));
	//	gu32Seconds = (((gau8GSM_TimeStamp[17]-'0') * 10) + (gau8GSM_TimeStamp[18]-'0'));

		gu8YY = ((gau8GSM_TimeStamp[0]-'0')*10)+(gau8GSM_TimeStamp[1]-'0');
 8003c46:	4b64      	ldr	r3, [pc, #400]	; (8003dd8 <syncrtcwithNetworkTime+0x1a0>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	3b30      	subs	r3, #48	; 0x30
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	461a      	mov	r2, r3
 8003c50:	0092      	lsls	r2, r2, #2
 8003c52:	4413      	add	r3, r2
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	4b5f      	ldr	r3, [pc, #380]	; (8003dd8 <syncrtcwithNetworkTime+0x1a0>)
 8003c5a:	785b      	ldrb	r3, [r3, #1]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	3b30      	subs	r3, #48	; 0x30
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	4b5d      	ldr	r3, [pc, #372]	; (8003ddc <syncrtcwithNetworkTime+0x1a4>)
 8003c66:	701a      	strb	r2, [r3, #0]
	//	gu32Year = (((gau8GSM_TimeStamp[0]-'0') * 1000) + ((gau8GSM_TimeStamp[1]-'0')*100)+((gau8GSM_TimeStamp[2]-'0')*10))+(gau8GSM_TimeStamp[3]-'0');
		gu32Year = ((gau8GSM_TimeStamp[0]-'0')*10)+(gau8GSM_TimeStamp[1]-'0');
 8003c68:	4b5b      	ldr	r3, [pc, #364]	; (8003dd8 <syncrtcwithNetworkTime+0x1a0>)
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003c70:	4613      	mov	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4413      	add	r3, r2
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	461a      	mov	r2, r3
 8003c7a:	4b57      	ldr	r3, [pc, #348]	; (8003dd8 <syncrtcwithNetworkTime+0x1a0>)
 8003c7c:	785b      	ldrb	r3, [r3, #1]
 8003c7e:	3b30      	subs	r3, #48	; 0x30
 8003c80:	4413      	add	r3, r2
 8003c82:	461a      	mov	r2, r3
 8003c84:	4b56      	ldr	r3, [pc, #344]	; (8003de0 <syncrtcwithNetworkTime+0x1a8>)
 8003c86:	601a      	str	r2, [r3, #0]
		gu32Month = (((gau8GSM_TimeStamp[3]-'0') * 10) + (gau8GSM_TimeStamp[4]-'0'));
 8003c88:	4b53      	ldr	r3, [pc, #332]	; (8003dd8 <syncrtcwithNetworkTime+0x1a0>)
 8003c8a:	78db      	ldrb	r3, [r3, #3]
 8003c8c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003c90:	4613      	mov	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	461a      	mov	r2, r3
 8003c9a:	4b4f      	ldr	r3, [pc, #316]	; (8003dd8 <syncrtcwithNetworkTime+0x1a0>)
 8003c9c:	791b      	ldrb	r3, [r3, #4]
 8003c9e:	3b30      	subs	r3, #48	; 0x30
 8003ca0:	4413      	add	r3, r2
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	4b4f      	ldr	r3, [pc, #316]	; (8003de4 <syncrtcwithNetworkTime+0x1ac>)
 8003ca6:	601a      	str	r2, [r3, #0]
		gu32Date = (((gau8GSM_TimeStamp[6]-'0') * 10) + (gau8GSM_TimeStamp[7]-'0'));
 8003ca8:	4b4b      	ldr	r3, [pc, #300]	; (8003dd8 <syncrtcwithNetworkTime+0x1a0>)
 8003caa:	799b      	ldrb	r3, [r3, #6]
 8003cac:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	461a      	mov	r2, r3
 8003cba:	4b47      	ldr	r3, [pc, #284]	; (8003dd8 <syncrtcwithNetworkTime+0x1a0>)
 8003cbc:	79db      	ldrb	r3, [r3, #7]
 8003cbe:	3b30      	subs	r3, #48	; 0x30
 8003cc0:	4413      	add	r3, r2
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	4b48      	ldr	r3, [pc, #288]	; (8003de8 <syncrtcwithNetworkTime+0x1b0>)
 8003cc6:	601a      	str	r2, [r3, #0]

		gu32Hours = (((gau8GSM_TimeStamp[9]-'0') * 10) + (gau8GSM_TimeStamp[10]-'0'));
 8003cc8:	4b43      	ldr	r3, [pc, #268]	; (8003dd8 <syncrtcwithNetworkTime+0x1a0>)
 8003cca:	7a5b      	ldrb	r3, [r3, #9]
 8003ccc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4413      	add	r3, r2
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	461a      	mov	r2, r3
 8003cda:	4b3f      	ldr	r3, [pc, #252]	; (8003dd8 <syncrtcwithNetworkTime+0x1a0>)
 8003cdc:	7a9b      	ldrb	r3, [r3, #10]
 8003cde:	3b30      	subs	r3, #48	; 0x30
 8003ce0:	4413      	add	r3, r2
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	4b41      	ldr	r3, [pc, #260]	; (8003dec <syncrtcwithNetworkTime+0x1b4>)
 8003ce6:	601a      	str	r2, [r3, #0]
		gu32Minutes = (((gau8GSM_TimeStamp[12]-'0') * 10) + (gau8GSM_TimeStamp[13]-'0'));
 8003ce8:	4b3b      	ldr	r3, [pc, #236]	; (8003dd8 <syncrtcwithNetworkTime+0x1a0>)
 8003cea:	7b1b      	ldrb	r3, [r3, #12]
 8003cec:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	4b37      	ldr	r3, [pc, #220]	; (8003dd8 <syncrtcwithNetworkTime+0x1a0>)
 8003cfc:	7b5b      	ldrb	r3, [r3, #13]
 8003cfe:	3b30      	subs	r3, #48	; 0x30
 8003d00:	4413      	add	r3, r2
 8003d02:	461a      	mov	r2, r3
 8003d04:	4b3a      	ldr	r3, [pc, #232]	; (8003df0 <syncrtcwithNetworkTime+0x1b8>)
 8003d06:	601a      	str	r2, [r3, #0]
		gu32Seconds = (((gau8GSM_TimeStamp[15]-'0') * 10) + (gau8GSM_TimeStamp[16]-'0'));
 8003d08:	4b33      	ldr	r3, [pc, #204]	; (8003dd8 <syncrtcwithNetworkTime+0x1a0>)
 8003d0a:	7bdb      	ldrb	r3, [r3, #15]
 8003d0c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003d10:	4613      	mov	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	461a      	mov	r2, r3
 8003d1a:	4b2f      	ldr	r3, [pc, #188]	; (8003dd8 <syncrtcwithNetworkTime+0x1a0>)
 8003d1c:	7c1b      	ldrb	r3, [r3, #16]
 8003d1e:	3b30      	subs	r3, #48	; 0x30
 8003d20:	4413      	add	r3, r2
 8003d22:	461a      	mov	r2, r3
 8003d24:	4b33      	ldr	r3, [pc, #204]	; (8003df4 <syncrtcwithNetworkTime+0x1bc>)
 8003d26:	601a      	str	r2, [r3, #0]

		/* Add 5 hr 30 Mins to get IST */

		SDate1.Year = DecimalToBCD(gu32Year);
 8003d28:	4b2d      	ldr	r3, [pc, #180]	; (8003de0 <syncrtcwithNetworkTime+0x1a8>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f006 fa15 	bl	800a15c <DecimalToBCD>
 8003d32:	4603      	mov	r3, r0
 8003d34:	b2da      	uxtb	r2, r3
 8003d36:	4b30      	ldr	r3, [pc, #192]	; (8003df8 <syncrtcwithNetworkTime+0x1c0>)
 8003d38:	70da      	strb	r2, [r3, #3]
		SDate1.Month = DecimalToBCD(gu32Month);
 8003d3a:	4b2a      	ldr	r3, [pc, #168]	; (8003de4 <syncrtcwithNetworkTime+0x1ac>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f006 fa0c 	bl	800a15c <DecimalToBCD>
 8003d44:	4603      	mov	r3, r0
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	4b2b      	ldr	r3, [pc, #172]	; (8003df8 <syncrtcwithNetworkTime+0x1c0>)
 8003d4a:	705a      	strb	r2, [r3, #1]
		SDate1.Date = DecimalToBCD(gu32Date);
 8003d4c:	4b26      	ldr	r3, [pc, #152]	; (8003de8 <syncrtcwithNetworkTime+0x1b0>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f006 fa03 	bl	800a15c <DecimalToBCD>
 8003d56:	4603      	mov	r3, r0
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	4b27      	ldr	r3, [pc, #156]	; (8003df8 <syncrtcwithNetworkTime+0x1c0>)
 8003d5c:	709a      	strb	r2, [r3, #2]
		STime1.Hours = DecimalToBCD(gu32Hours);
 8003d5e:	4b23      	ldr	r3, [pc, #140]	; (8003dec <syncrtcwithNetworkTime+0x1b4>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f006 f9fa 	bl	800a15c <DecimalToBCD>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	4b23      	ldr	r3, [pc, #140]	; (8003dfc <syncrtcwithNetworkTime+0x1c4>)
 8003d6e:	701a      	strb	r2, [r3, #0]
		STime1.Minutes = DecimalToBCD(gu32Minutes);
 8003d70:	4b1f      	ldr	r3, [pc, #124]	; (8003df0 <syncrtcwithNetworkTime+0x1b8>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f006 f9f1 	bl	800a15c <DecimalToBCD>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	4b1f      	ldr	r3, [pc, #124]	; (8003dfc <syncrtcwithNetworkTime+0x1c4>)
 8003d80:	705a      	strb	r2, [r3, #1]
		STime1.Seconds = DecimalToBCD(gu32Seconds);
 8003d82:	4b1c      	ldr	r3, [pc, #112]	; (8003df4 <syncrtcwithNetworkTime+0x1bc>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f006 f9e8 	bl	800a15c <DecimalToBCD>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	4b1a      	ldr	r3, [pc, #104]	; (8003dfc <syncrtcwithNetworkTime+0x1c4>)
 8003d92:	709a      	strb	r2, [r3, #2]

		/*Store Last Syncd date */
		lastKnownSDate1 = SDate1 ;
 8003d94:	4a1a      	ldr	r2, [pc, #104]	; (8003e00 <syncrtcwithNetworkTime+0x1c8>)
 8003d96:	4b18      	ldr	r3, [pc, #96]	; (8003df8 <syncrtcwithNetworkTime+0x1c0>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6013      	str	r3, [r2, #0]

		strTimeUpdate.u32RefTimeHH = gu32Hours;
 8003d9c:	4b13      	ldr	r3, [pc, #76]	; (8003dec <syncrtcwithNetworkTime+0x1b4>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a18      	ldr	r2, [pc, #96]	; (8003e04 <syncrtcwithNetworkTime+0x1cc>)
 8003da2:	6013      	str	r3, [r2, #0]
		strTimeUpdate.u32RefTimeMin = gu32Minutes;
 8003da4:	4b12      	ldr	r3, [pc, #72]	; (8003df0 <syncrtcwithNetworkTime+0x1b8>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a16      	ldr	r2, [pc, #88]	; (8003e04 <syncrtcwithNetworkTime+0x1cc>)
 8003daa:	6053      	str	r3, [r2, #4]
		strTimeUpdate.u32RefTimeSec = gu32Seconds;
 8003dac:	4b11      	ldr	r3, [pc, #68]	; (8003df4 <syncrtcwithNetworkTime+0x1bc>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a14      	ldr	r2, [pc, #80]	; (8003e04 <syncrtcwithNetworkTime+0x1cc>)
 8003db2:	6093      	str	r3, [r2, #8]

		HAL_RTC_SetTime(&hrtc,&STime1,RTC_FORMAT_BCD);
 8003db4:	2201      	movs	r2, #1
 8003db6:	4911      	ldr	r1, [pc, #68]	; (8003dfc <syncrtcwithNetworkTime+0x1c4>)
 8003db8:	4813      	ldr	r0, [pc, #76]	; (8003e08 <syncrtcwithNetworkTime+0x1d0>)
 8003dba:	f00e fd53 	bl	8012864 <HAL_RTC_SetTime>
		HAL_RTC_SetDate(&hrtc,&SDate1,RTC_FORMAT_BCD);
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	490d      	ldr	r1, [pc, #52]	; (8003df8 <syncrtcwithNetworkTime+0x1c0>)
 8003dc2:	4811      	ldr	r0, [pc, #68]	; (8003e08 <syncrtcwithNetworkTime+0x1d0>)
 8003dc4:	f00e ff04 	bl	8012bd0 <HAL_RTC_SetDate>
		/* Update/ Set RTC Structure */
		//backupCurrentRTC();
		gu32TimeSyncFlag = 1;
 8003dc8:	4b02      	ldr	r3, [pc, #8]	; (8003dd4 <syncrtcwithNetworkTime+0x19c>)
 8003dca:	2201      	movs	r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	e000      	b.n	8003dd2 <syncrtcwithNetworkTime+0x19a>
		return;
 8003dd0:	bf00      	nop
	//	gu32RTCTestFlag++;
}
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	20002150 	.word	0x20002150
 8003dd8:	200007b0 	.word	0x200007b0
 8003ddc:	20001a60 	.word	0x20001a60
 8003de0:	20001a5c 	.word	0x20001a5c
 8003de4:	20001a64 	.word	0x20001a64
 8003de8:	20001a68 	.word	0x20001a68
 8003dec:	20001a6c 	.word	0x20001a6c
 8003df0:	20001a70 	.word	0x20001a70
 8003df4:	20001a74 	.word	0x20001a74
 8003df8:	20007110 	.word	0x20007110
 8003dfc:	20007114 	.word	0x20007114
 8003e00:	200023b0 	.word	0x200023b0
 8003e04:	20002120 	.word	0x20002120
 8003e08:	20003728 	.word	0x20003728

08003e0c <updateHTTPReadLength>:
 KloudQ Team      8-04-2020			Initial Definition
 Kloudq Team	  10-04-2020		Strcpy logic added
******************************************************************************/
#define FOTAFILECHUNKSIZEBYTES	(2000)
uint32_t updateHTTPReadLength(uint32_t fotaFileSizeBytes)
{
 8003e0c:	b5b0      	push	{r4, r5, r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]

	if(fotaFileSizeBytes != 0)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 80ac 	beq.w	8003f74 <updateHTTPReadLength+0x168>
	{

		/* Start of File */
		if(u32FOTAFileBaseAddress == 0)
 8003e1c:	4b58      	ldr	r3, [pc, #352]	; (8003f80 <updateHTTPReadLength+0x174>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d11f      	bne.n	8003e64 <updateHTTPReadLength+0x58>
		{
			u32FotaFileChunkCounter = (fotaFileSizeBytes / FOTAFILECHUNKSIZEBYTES);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a57      	ldr	r2, [pc, #348]	; (8003f84 <updateHTTPReadLength+0x178>)
 8003e28:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2c:	09db      	lsrs	r3, r3, #7
 8003e2e:	4a56      	ldr	r2, [pc, #344]	; (8003f88 <updateHTTPReadLength+0x17c>)
 8003e30:	6013      	str	r3, [r2, #0]
			/* Calculates Remaining data bytes after multiples of 2000  */
			u32FotaFileRemainingBytes = (fotaFileSizeBytes % FOTAFILECHUNKSIZEBYTES);
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	4b53      	ldr	r3, [pc, #332]	; (8003f84 <updateHTTPReadLength+0x178>)
 8003e36:	fba3 1302 	umull	r1, r3, r3, r2
 8003e3a:	09db      	lsrs	r3, r3, #7
 8003e3c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003e40:	fb01 f303 	mul.w	r3, r1, r3
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	4a51      	ldr	r2, [pc, #324]	; (8003f8c <updateHTTPReadLength+0x180>)
 8003e48:	6013      	str	r3, [r2, #0]
			itoa(FOTAFILECHUNKSIZEBYTES,bufferChunkBytes,PAYLOAD_DATA_STRING_RADIX);
 8003e4a:	220a      	movs	r2, #10
 8003e4c:	4950      	ldr	r1, [pc, #320]	; (8003f90 <updateHTTPReadLength+0x184>)
 8003e4e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003e52:	f011 fda9 	bl	80159a8 <itoa>
			itoa(u32FotaFileRemainingBytes,bufferRemBytes,PAYLOAD_DATA_STRING_RADIX);
 8003e56:	4b4d      	ldr	r3, [pc, #308]	; (8003f8c <updateHTTPReadLength+0x180>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	220a      	movs	r2, #10
 8003e5c:	494d      	ldr	r1, [pc, #308]	; (8003f94 <updateHTTPReadLength+0x188>)
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f011 fda2 	bl	80159a8 <itoa>
		}

		strcpy(gau8GSM_ATQHTTPGETEXREAD,(char *)"AT+QHTTPGETEX=80,");
 8003e64:	4a4c      	ldr	r2, [pc, #304]	; (8003f98 <updateHTTPReadLength+0x18c>)
 8003e66:	4b4d      	ldr	r3, [pc, #308]	; (8003f9c <updateHTTPReadLength+0x190>)
 8003e68:	4614      	mov	r4, r2
 8003e6a:	461d      	mov	r5, r3
 8003e6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e70:	682b      	ldr	r3, [r5, #0]
 8003e72:	8023      	strh	r3, [r4, #0]
		memset(buffer,0x00,sizeof(char) * sizeof(buffer));
 8003e74:	2206      	movs	r2, #6
 8003e76:	2100      	movs	r1, #0
 8003e78:	4849      	ldr	r0, [pc, #292]	; (8003fa0 <updateHTTPReadLength+0x194>)
 8003e7a:	f011 fdb5 	bl	80159e8 <memset>

		if(u32FOTAFileBaseAddress < u32FotaFileChunkCounter)
 8003e7e:	4b40      	ldr	r3, [pc, #256]	; (8003f80 <updateHTTPReadLength+0x174>)
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	4b41      	ldr	r3, [pc, #260]	; (8003f88 <updateHTTPReadLength+0x17c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d236      	bcs.n	8003ef8 <updateHTTPReadLength+0xec>
		{
			itoa((u32FOTAFileBaseAddress * FOTAFILECHUNKSIZEBYTES),buffer,PAYLOAD_DATA_STRING_RADIX);
 8003e8a:	4b3d      	ldr	r3, [pc, #244]	; (8003f80 <updateHTTPReadLength+0x174>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003e92:	fb02 f303 	mul.w	r3, r2, r3
 8003e96:	220a      	movs	r2, #10
 8003e98:	4941      	ldr	r1, [pc, #260]	; (8003fa0 <updateHTTPReadLength+0x194>)
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f011 fd84 	bl	80159a8 <itoa>
			strcat(gau8GSM_ATQHTTPGETEXREAD,(char *)buffer);
 8003ea0:	493f      	ldr	r1, [pc, #252]	; (8003fa0 <updateHTTPReadLength+0x194>)
 8003ea2:	483d      	ldr	r0, [pc, #244]	; (8003f98 <updateHTTPReadLength+0x18c>)
 8003ea4:	f012 fd6a 	bl	801697c <strcat>
			strcat(gau8GSM_ATQHTTPGETEXREAD,(char *)",");
 8003ea8:	483b      	ldr	r0, [pc, #236]	; (8003f98 <updateHTTPReadLength+0x18c>)
 8003eaa:	f7fc fd9b 	bl	80009e4 <strlen>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	4b39      	ldr	r3, [pc, #228]	; (8003f98 <updateHTTPReadLength+0x18c>)
 8003eb4:	4413      	add	r3, r2
 8003eb6:	493b      	ldr	r1, [pc, #236]	; (8003fa4 <updateHTTPReadLength+0x198>)
 8003eb8:	461a      	mov	r2, r3
 8003eba:	460b      	mov	r3, r1
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	8013      	strh	r3, [r2, #0]
			strcat(gau8GSM_ATQHTTPGETEXREAD,(char *)bufferChunkBytes); /* Byte(s) Chunk to read*/
 8003ec0:	4933      	ldr	r1, [pc, #204]	; (8003f90 <updateHTTPReadLength+0x184>)
 8003ec2:	4835      	ldr	r0, [pc, #212]	; (8003f98 <updateHTTPReadLength+0x18c>)
 8003ec4:	f012 fd5a 	bl	801697c <strcat>
			strcat(gau8GSM_ATQHTTPGETEXREAD,(char *)"\r\n");
 8003ec8:	4833      	ldr	r0, [pc, #204]	; (8003f98 <updateHTTPReadLength+0x18c>)
 8003eca:	f7fc fd8b 	bl	80009e4 <strlen>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	4b31      	ldr	r3, [pc, #196]	; (8003f98 <updateHTTPReadLength+0x18c>)
 8003ed4:	4413      	add	r3, r2
 8003ed6:	4a34      	ldr	r2, [pc, #208]	; (8003fa8 <updateHTTPReadLength+0x19c>)
 8003ed8:	8811      	ldrh	r1, [r2, #0]
 8003eda:	7892      	ldrb	r2, [r2, #2]
 8003edc:	8019      	strh	r1, [r3, #0]
 8003ede:	709a      	strb	r2, [r3, #2]
			u32FOTAFileBaseAddress++;
 8003ee0:	4b27      	ldr	r3, [pc, #156]	; (8003f80 <updateHTTPReadLength+0x174>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	4a26      	ldr	r2, [pc, #152]	; (8003f80 <updateHTTPReadLength+0x174>)
 8003ee8:	6013      	str	r3, [r2, #0]
			gsmInstance.u32FotaFileSizeBytes = FOTAFILECHUNKSIZEBYTES;
 8003eea:	4b30      	ldr	r3, [pc, #192]	; (8003fac <updateHTTPReadLength+0x1a0>)
 8003eec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003ef0:	f8c3 2fa0 	str.w	r2, [r3, #4000]	; 0xfa0
			return 2;
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	e03e      	b.n	8003f76 <updateHTTPReadLength+0x16a>
		}
		else
		{
			itoa(u32FotaFileChunkCounter * FOTAFILECHUNKSIZEBYTES,buffer,PAYLOAD_DATA_STRING_RADIX);
 8003ef8:	4b23      	ldr	r3, [pc, #140]	; (8003f88 <updateHTTPReadLength+0x17c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003f00:	fb02 f303 	mul.w	r3, r2, r3
 8003f04:	220a      	movs	r2, #10
 8003f06:	4926      	ldr	r1, [pc, #152]	; (8003fa0 <updateHTTPReadLength+0x194>)
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f011 fd4d 	bl	80159a8 <itoa>
			strcat(gau8GSM_ATQHTTPGETEXREAD,(char *)buffer);
 8003f0e:	4924      	ldr	r1, [pc, #144]	; (8003fa0 <updateHTTPReadLength+0x194>)
 8003f10:	4821      	ldr	r0, [pc, #132]	; (8003f98 <updateHTTPReadLength+0x18c>)
 8003f12:	f012 fd33 	bl	801697c <strcat>
			strcat(gau8GSM_ATQHTTPGETEXREAD,(char *)",");
 8003f16:	4820      	ldr	r0, [pc, #128]	; (8003f98 <updateHTTPReadLength+0x18c>)
 8003f18:	f7fc fd64 	bl	80009e4 <strlen>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	461a      	mov	r2, r3
 8003f20:	4b1d      	ldr	r3, [pc, #116]	; (8003f98 <updateHTTPReadLength+0x18c>)
 8003f22:	4413      	add	r3, r2
 8003f24:	491f      	ldr	r1, [pc, #124]	; (8003fa4 <updateHTTPReadLength+0x198>)
 8003f26:	461a      	mov	r2, r3
 8003f28:	460b      	mov	r3, r1
 8003f2a:	881b      	ldrh	r3, [r3, #0]
 8003f2c:	8013      	strh	r3, [r2, #0]
			strcat(gau8GSM_ATQHTTPGETEXREAD,(char *)bufferRemBytes); /* Byte(s) Chunk to read*/
 8003f2e:	4919      	ldr	r1, [pc, #100]	; (8003f94 <updateHTTPReadLength+0x188>)
 8003f30:	4819      	ldr	r0, [pc, #100]	; (8003f98 <updateHTTPReadLength+0x18c>)
 8003f32:	f012 fd23 	bl	801697c <strcat>
			strcat(gau8GSM_ATQHTTPGETEXREAD,(char *)"\r\n");
 8003f36:	4818      	ldr	r0, [pc, #96]	; (8003f98 <updateHTTPReadLength+0x18c>)
 8003f38:	f7fc fd54 	bl	80009e4 <strlen>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	461a      	mov	r2, r3
 8003f40:	4b15      	ldr	r3, [pc, #84]	; (8003f98 <updateHTTPReadLength+0x18c>)
 8003f42:	4413      	add	r3, r2
 8003f44:	4a18      	ldr	r2, [pc, #96]	; (8003fa8 <updateHTTPReadLength+0x19c>)
 8003f46:	8811      	ldrh	r1, [r2, #0]
 8003f48:	7892      	ldrb	r2, [r2, #2]
 8003f4a:	8019      	strh	r1, [r3, #0]
 8003f4c:	709a      	strb	r2, [r3, #2]
			gsmInstance.u32FotaFileSizeBytes = u32FotaFileRemainingBytes;
 8003f4e:	4b0f      	ldr	r3, [pc, #60]	; (8003f8c <updateHTTPReadLength+0x180>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a16      	ldr	r2, [pc, #88]	; (8003fac <updateHTTPReadLength+0x1a0>)
 8003f54:	f8c2 3fa0 	str.w	r3, [r2, #4000]	; 0xfa0
			u32FOTAFileBaseAddress = 0;
 8003f58:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <updateHTTPReadLength+0x174>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]
			u32FotaFileChunkCounter = 0;
 8003f5e:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <updateHTTPReadLength+0x17c>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]
			u32FotaFileRemainingBytes = 0;
 8003f64:	4b09      	ldr	r3, [pc, #36]	; (8003f8c <updateHTTPReadLength+0x180>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]
			u32FotaFileReadComplete = 1;
 8003f6a:	4b11      	ldr	r3, [pc, #68]	; (8003fb0 <updateHTTPReadLength+0x1a4>)
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]
			return 1;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e000      	b.n	8003f76 <updateHTTPReadLength+0x16a>
		}
	}
	else
		return 0;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bdb0      	pop	{r4, r5, r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	20001a30 	.word	0x20001a30
 8003f84:	10624dd3 	.word	0x10624dd3
 8003f88:	20001a34 	.word	0x20001a34
 8003f8c:	20001a38 	.word	0x20001a38
 8003f90:	20000fd8 	.word	0x20000fd8
 8003f94:	20000fac 	.word	0x20000fac
 8003f98:	20000278 	.word	0x20000278
 8003f9c:	0801b628 	.word	0x0801b628
 8003fa0:	20000fa4 	.word	0x20000fa4
 8003fa4:	0801b51c 	.word	0x0801b51c
 8003fa8:	0801b518 	.word	0x0801b518
 8003fac:	200023e4 	.word	0x200023e4
 8003fb0:	20001a3c 	.word	0x20001a3c

08003fb4 <UrlLenforFOTA>:
//	strcat((char *)gau8GSM_ATURL,(char *)"\"");
//	strcat((char *)gau8GSM_ATURL,"\r\n");
}

void UrlLenforFOTA(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
	uint32_t temp_len = strlen(gau8FotaURL);
 8003fba:	4811      	ldr	r0, [pc, #68]	; (8004000 <UrlLenforFOTA+0x4c>)
 8003fbc:	f7fc fd12 	bl	80009e4 <strlen>
 8003fc0:	6078      	str	r0, [r7, #4]
	strcat((char*)gau8GSM_ATAPNL,(char *)gau8GSM_ATQHTTPURLLEN);
 8003fc2:	4910      	ldr	r1, [pc, #64]	; (8004004 <UrlLenforFOTA+0x50>)
 8003fc4:	4810      	ldr	r0, [pc, #64]	; (8004008 <UrlLenforFOTA+0x54>)
 8003fc6:	f012 fcd9 	bl	801697c <strcat>
	itoa(temp_len,buffer,PAYLOAD_DATA_STRING_RADIX);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	220a      	movs	r2, #10
 8003fce:	490f      	ldr	r1, [pc, #60]	; (800400c <UrlLenforFOTA+0x58>)
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f011 fce9 	bl	80159a8 <itoa>
	strcat((char*)gau8GSM_ATAPNL,(char *)buffer);
 8003fd6:	490d      	ldr	r1, [pc, #52]	; (800400c <UrlLenforFOTA+0x58>)
 8003fd8:	480b      	ldr	r0, [pc, #44]	; (8004008 <UrlLenforFOTA+0x54>)
 8003fda:	f012 fccf 	bl	801697c <strcat>
	strcat((char*)gau8GSM_ATAPNL,",80\r\n"); // time out
 8003fde:	480a      	ldr	r0, [pc, #40]	; (8004008 <UrlLenforFOTA+0x54>)
 8003fe0:	f7fc fd00 	bl	80009e4 <strlen>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	4b07      	ldr	r3, [pc, #28]	; (8004008 <UrlLenforFOTA+0x54>)
 8003fea:	4413      	add	r3, r2
 8003fec:	4a08      	ldr	r2, [pc, #32]	; (8004010 <UrlLenforFOTA+0x5c>)
 8003fee:	6810      	ldr	r0, [r2, #0]
 8003ff0:	6018      	str	r0, [r3, #0]
 8003ff2:	8892      	ldrh	r2, [r2, #4]
 8003ff4:	809a      	strh	r2, [r3, #4]

}
 8003ff6:	bf00      	nop
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	20001988 	.word	0x20001988
 8004004:	20000254 	.word	0x20000254
 8004008:	200002ac 	.word	0x200002ac
 800400c:	20000fa4 	.word	0x20000fa4
 8004010:	0801b63c 	.word	0x0801b63c

08004014 <Deinit_FOTA_Fail>:


void Deinit_FOTA_Fail()
{
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
	memset((char *)gsmInstance.as8GSM_Response_Buff, GSM_ARRAY_INIT_CHAR, (GSM_RESPONSE_ARRAY_SIZE));
 8004018:	f640 228c 	movw	r2, #2700	; 0xa8c
 800401c:	2100      	movs	r1, #0
 800401e:	4815      	ldr	r0, [pc, #84]	; (8004074 <Deinit_FOTA_Fail+0x60>)
 8004020:	f011 fce2 	bl	80159e8 <memset>
	HAL_GPIO_WritePin(GPS_LED_GPIO_Port, GPS_LED_Pin, GPIO_PIN_RESET);
 8004024:	2200      	movs	r2, #0
 8004026:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800402a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800402e:	f00b f807 	bl	800f040 <HAL_GPIO_WritePin>
	u32FOTAFileBaseAddress = 0;
 8004032:	4b11      	ldr	r3, [pc, #68]	; (8004078 <Deinit_FOTA_Fail+0x64>)
 8004034:	2200      	movs	r2, #0
 8004036:	601a      	str	r2, [r3, #0]
	u32FotaFileChunkCounter = 0;
 8004038:	4b10      	ldr	r3, [pc, #64]	; (800407c <Deinit_FOTA_Fail+0x68>)
 800403a:	2200      	movs	r2, #0
 800403c:	601a      	str	r2, [r3, #0]
	u32FotaFileRemainingBytes = 0;
 800403e:	4b10      	ldr	r3, [pc, #64]	; (8004080 <Deinit_FOTA_Fail+0x6c>)
 8004040:	2200      	movs	r2, #0
 8004042:	601a      	str	r2, [r3, #0]
	SUBTriggerFlag = FALSE;
 8004044:	4b0f      	ldr	r3, [pc, #60]	; (8004084 <Deinit_FOTA_Fail+0x70>)
 8004046:	2200      	movs	r2, #0
 8004048:	701a      	strb	r2, [r3, #0]
	boolAttemptFota = FALSE;
 800404a:	4b0f      	ldr	r3, [pc, #60]	; (8004088 <Deinit_FOTA_Fail+0x74>)
 800404c:	2200      	movs	r2, #0
 800404e:	701a      	strb	r2, [r3, #0]
	u32MemoryWriteCycle = FALSE;
 8004050:	4b0e      	ldr	r3, [pc, #56]	; (800408c <Deinit_FOTA_Fail+0x78>)
 8004052:	2200      	movs	r2, #0
 8004054:	601a      	str	r2, [r3, #0]
	gsmInstance.u8IncrementGsmState = FALSE;
 8004056:	4b0e      	ldr	r3, [pc, #56]	; (8004090 <Deinit_FOTA_Fail+0x7c>)
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
	gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 800405e:	4b0c      	ldr	r3, [pc, #48]	; (8004090 <Deinit_FOTA_Fail+0x7c>)
 8004060:	2203      	movs	r2, #3
 8004062:	f883 2fae 	strb.w	r2, [r3, #4014]	; 0xfae
	gsmInstance.enmGSMCommand = enmGSMSTATE_MQTTPUBEX;
 8004066:	4b0a      	ldr	r3, [pc, #40]	; (8004090 <Deinit_FOTA_Fail+0x7c>)
 8004068:	2219      	movs	r2, #25
 800406a:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf

}
 800406e:	bf00      	nop
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	200028db 	.word	0x200028db
 8004078:	20001a30 	.word	0x20001a30
 800407c:	20001a34 	.word	0x20001a34
 8004080:	20001a38 	.word	0x20001a38
 8004084:	20001871 	.word	0x20001871
 8004088:	20001a2c 	.word	0x20001a2c
 800408c:	20001a40 	.word	0x20001a40
 8004090:	200023e4 	.word	0x200023e4

08004094 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004098:	4b1b      	ldr	r3, [pc, #108]	; (8004108 <MX_I2C1_Init+0x74>)
 800409a:	4a1c      	ldr	r2, [pc, #112]	; (800410c <MX_I2C1_Init+0x78>)
 800409c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800409e:	4b1a      	ldr	r3, [pc, #104]	; (8004108 <MX_I2C1_Init+0x74>)
 80040a0:	4a1b      	ldr	r2, [pc, #108]	; (8004110 <MX_I2C1_Init+0x7c>)
 80040a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80040a4:	4b18      	ldr	r3, [pc, #96]	; (8004108 <MX_I2C1_Init+0x74>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80040aa:	4b17      	ldr	r3, [pc, #92]	; (8004108 <MX_I2C1_Init+0x74>)
 80040ac:	2201      	movs	r2, #1
 80040ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80040b0:	4b15      	ldr	r3, [pc, #84]	; (8004108 <MX_I2C1_Init+0x74>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80040b6:	4b14      	ldr	r3, [pc, #80]	; (8004108 <MX_I2C1_Init+0x74>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80040bc:	4b12      	ldr	r3, [pc, #72]	; (8004108 <MX_I2C1_Init+0x74>)
 80040be:	2200      	movs	r2, #0
 80040c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80040c2:	4b11      	ldr	r3, [pc, #68]	; (8004108 <MX_I2C1_Init+0x74>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80040c8:	4b0f      	ldr	r3, [pc, #60]	; (8004108 <MX_I2C1_Init+0x74>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80040ce:	480e      	ldr	r0, [pc, #56]	; (8004108 <MX_I2C1_Init+0x74>)
 80040d0:	f00b f826 	bl	800f120 <HAL_I2C_Init>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80040da:	f000 fa4e 	bl	800457a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80040de:	2100      	movs	r1, #0
 80040e0:	4809      	ldr	r0, [pc, #36]	; (8004108 <MX_I2C1_Init+0x74>)
 80040e2:	f00c fbdf 	bl	80108a4 <HAL_I2CEx_ConfigAnalogFilter>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80040ec:	f000 fa45 	bl	800457a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80040f0:	2100      	movs	r1, #0
 80040f2:	4805      	ldr	r0, [pc, #20]	; (8004108 <MX_I2C1_Init+0x74>)
 80040f4:	f00c fc46 	bl	8010984 <HAL_I2CEx_ConfigDigitalFilter>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80040fe:	f000 fa3c 	bl	800457a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004102:	bf00      	nop
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	200036c4 	.word	0x200036c4
 800410c:	40005400 	.word	0x40005400
 8004110:	10909cec 	.word	0x10909cec

08004114 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b0a2      	sub	sp, #136	; 0x88
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800411c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	605a      	str	r2, [r3, #4]
 8004126:	609a      	str	r2, [r3, #8]
 8004128:	60da      	str	r2, [r3, #12]
 800412a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800412c:	f107 0314 	add.w	r3, r7, #20
 8004130:	2260      	movs	r2, #96	; 0x60
 8004132:	2100      	movs	r1, #0
 8004134:	4618      	mov	r0, r3
 8004136:	f011 fc57 	bl	80159e8 <memset>
  if(i2cHandle->Instance==I2C1)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a27      	ldr	r2, [pc, #156]	; (80041dc <HAL_I2C_MspInit+0xc8>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d147      	bne.n	80041d4 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004144:	2340      	movs	r3, #64	; 0x40
 8004146:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004148:	2300      	movs	r3, #0
 800414a:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800414c:	f107 0314 	add.w	r3, r7, #20
 8004150:	4618      	mov	r0, r3
 8004152:	f00d fd69 	bl	8011c28 <HAL_RCCEx_PeriphCLKConfig>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800415c:	f000 fa0d 	bl	800457a <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004160:	4b1f      	ldr	r3, [pc, #124]	; (80041e0 <HAL_I2C_MspInit+0xcc>)
 8004162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004164:	4a1e      	ldr	r2, [pc, #120]	; (80041e0 <HAL_I2C_MspInit+0xcc>)
 8004166:	f043 0302 	orr.w	r3, r3, #2
 800416a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800416c:	4b1c      	ldr	r3, [pc, #112]	; (80041e0 <HAL_I2C_MspInit+0xcc>)
 800416e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	613b      	str	r3, [r7, #16]
 8004176:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004178:	23c0      	movs	r3, #192	; 0xc0
 800417a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800417c:	2312      	movs	r3, #18
 800417e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004180:	2300      	movs	r3, #0
 8004182:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004184:	2303      	movs	r3, #3
 8004186:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800418a:	2304      	movs	r3, #4
 800418c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004190:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004194:	4619      	mov	r1, r3
 8004196:	4813      	ldr	r0, [pc, #76]	; (80041e4 <HAL_I2C_MspInit+0xd0>)
 8004198:	f00a fbdc 	bl	800e954 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800419c:	4b10      	ldr	r3, [pc, #64]	; (80041e0 <HAL_I2C_MspInit+0xcc>)
 800419e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a0:	4a0f      	ldr	r2, [pc, #60]	; (80041e0 <HAL_I2C_MspInit+0xcc>)
 80041a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80041a6:	6593      	str	r3, [r2, #88]	; 0x58
 80041a8:	4b0d      	ldr	r3, [pc, #52]	; (80041e0 <HAL_I2C_MspInit+0xcc>)
 80041aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041b0:	60fb      	str	r3, [r7, #12]
 80041b2:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 4, 0);
 80041b4:	2200      	movs	r2, #0
 80041b6:	2104      	movs	r1, #4
 80041b8:	201f      	movs	r0, #31
 80041ba:	f009 fc77 	bl	800daac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80041be:	201f      	movs	r0, #31
 80041c0:	f009 fca0 	bl	800db04 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 4, 0);
 80041c4:	2200      	movs	r2, #0
 80041c6:	2104      	movs	r1, #4
 80041c8:	2020      	movs	r0, #32
 80041ca:	f009 fc6f 	bl	800daac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80041ce:	2020      	movs	r0, #32
 80041d0:	f009 fc98 	bl	800db04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80041d4:	bf00      	nop
 80041d6:	3788      	adds	r7, #136	; 0x88
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40005400 	.word	0x40005400
 80041e0:	40021000 	.word	0x40021000
 80041e4:	48000400 	.word	0x48000400

080041e8 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80041ec:	4b0b      	ldr	r3, [pc, #44]	; (800421c <MX_IWDG_Init+0x34>)
 80041ee:	4a0c      	ldr	r2, [pc, #48]	; (8004220 <MX_IWDG_Init+0x38>)
 80041f0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80041f2:	4b0a      	ldr	r3, [pc, #40]	; (800421c <MX_IWDG_Init+0x34>)
 80041f4:	2206      	movs	r2, #6
 80041f6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80041f8:	4b08      	ldr	r3, [pc, #32]	; (800421c <MX_IWDG_Init+0x34>)
 80041fa:	f640 72ff 	movw	r2, #4095	; 0xfff
 80041fe:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8004200:	4b06      	ldr	r3, [pc, #24]	; (800421c <MX_IWDG_Init+0x34>)
 8004202:	f640 72ff 	movw	r2, #4095	; 0xfff
 8004206:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8004208:	4804      	ldr	r0, [pc, #16]	; (800421c <MX_IWDG_Init+0x34>)
 800420a:	f00c fc27 	bl	8010a5c <HAL_IWDG_Init>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8004214:	f000 f9b1 	bl	800457a <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8004218:	bf00      	nop
 800421a:	bd80      	pop	{r7, pc}
 800421c:	20003718 	.word	0x20003718
 8004220:	40003000 	.word	0x40003000

08004224 <LL_USART_EnableIT_RXNE>:
{
 8004224:	b480      	push	{r7}
 8004226:	b089      	sub	sp, #36	; 0x24
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	e853 3f00 	ldrex	r3, [r3]
 8004236:	60bb      	str	r3, [r7, #8]
   return(result);
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	f043 0320 	orr.w	r3, r3, #32
 800423e:	61fb      	str	r3, [r7, #28]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	69fa      	ldr	r2, [r7, #28]
 8004244:	61ba      	str	r2, [r7, #24]
 8004246:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004248:	6979      	ldr	r1, [r7, #20]
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	e841 2300 	strex	r3, r2, [r1]
 8004250:	613b      	str	r3, [r7, #16]
   return(result);
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1e9      	bne.n	800422c <LL_USART_EnableIT_RXNE+0x8>
}
 8004258:	bf00      	nop
 800425a:	bf00      	nop
 800425c:	3724      	adds	r7, #36	; 0x24
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
	...

08004268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800426c:	f006 f8f1 	bl	800a452 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004270:	f000 f932 	bl	80044d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004274:	f7fd fe62 	bl	8001f3c <MX_GPIO_Init>
  MX_DMA_Init();
 8004278:	f7fd fe06 	bl	8001e88 <MX_DMA_Init>
  MX_ADC1_Init();
 800427c:	f7fd fba0 	bl	80019c0 <MX_ADC1_Init>
  MX_CAN1_Init();
 8004280:	f7fd fcce 	bl	8001c20 <MX_CAN1_Init>
  MX_IWDG_Init();
 8004284:	f7ff ffb0 	bl	80041e8 <MX_IWDG_Init>
  MX_I2C1_Init();
 8004288:	f7ff ff04 	bl	8004094 <MX_I2C1_Init>
  MX_RTC_Init();
 800428c:	f001 ffca 	bl	8006224 <MX_RTC_Init>
  MX_SPI2_Init();
 8004290:	f002 fe2c 	bl	8006eec <MX_SPI2_Init>
  MX_TIM7_Init();
 8004294:	f003 f884 	bl	80073a0 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8004298:	f003 f9e6 	bl	8007668 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800429c:	f003 fae0 	bl	8007860 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 80042a0:	f003 fa60 	bl	8007764 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  updateDeviceSignature();
 80042a4:	f7fd fd80 	bl	8001da8 <updateDeviceSignature>
  HAL_TIM_Base_Start_IT(&htim7);
 80042a8:	4876      	ldr	r0, [pc, #472]	; (8004484 <main+0x21c>)
 80042aa:	f010 f8cd 	bl	8014448 <HAL_TIM_Base_Start_IT>
  LL_USART_EnableIT_RXNE(USART1);
 80042ae:	4876      	ldr	r0, [pc, #472]	; (8004488 <main+0x220>)
 80042b0:	f7ff ffb8 	bl	8004224 <LL_USART_EnableIT_RXNE>

	#if(DEBUGENABLE == TRUE)
	 LL_USART_EnableIT_RXNE(USART3);
	#endif

	gsmInstance.enmGSMPwrState = enmGSM_PWRNOTSTARTED;
 80042b4:	4b75      	ldr	r3, [pc, #468]	; (800448c <main+0x224>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 2fb0 	strb.w	r2, [r3, #4016]	; 0xfb0
	gu32PayloadQueueEnqueue = ONE_MIN;
 80042bc:	4b74      	ldr	r3, [pc, #464]	; (8004490 <main+0x228>)
 80042be:	f64e 2260 	movw	r2, #60000	; 0xea60
 80042c2:	601a      	str	r2, [r3, #0]
	u8daignostic|=(1<<7); // Device Started
 80042c4:	4b73      	ldr	r3, [pc, #460]	; (8004494 <main+0x22c>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	4b71      	ldr	r3, [pc, #452]	; (8004494 <main+0x22c>)
 80042d0:	701a      	strb	r2, [r3, #0]

	g_stEepromBuffMemAdd.u32BuffFlashWriteAddress = 0;
 80042d2:	4b71      	ldr	r3, [pc, #452]	; (8004498 <main+0x230>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	605a      	str	r2, [r3, #4]
	g_stEepromBuffMemAdd.u32BuffFlashReadAddress = 0;
 80042d8:	4b6f      	ldr	r3, [pc, #444]	; (8004498 <main+0x230>)
 80042da:	2200      	movs	r2, #0
 80042dc:	601a      	str	r2, [r3, #0]
	EEPROM_RetriveBuffMemData();
 80042de:	f7fd fabd 	bl	800185c <EEPROM_RetriveBuffMemData>
	FlashStr.u32FlashReadAddress =  g_stEepromBuffMemAdd.u32BuffFlashReadAddress;
 80042e2:	4b6d      	ldr	r3, [pc, #436]	; (8004498 <main+0x230>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a6d      	ldr	r2, [pc, #436]	; (800449c <main+0x234>)
 80042e8:	6053      	str	r3, [r2, #4]
	FlashStr.u32FlashWriteAddress = g_stEepromBuffMemAdd.u32BuffFlashWriteAddress;
 80042ea:	4b6b      	ldr	r3, [pc, #428]	; (8004498 <main+0x230>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	4a6b      	ldr	r2, [pc, #428]	; (800449c <main+0x234>)
 80042f0:	6013      	str	r3, [r2, #0]
	SFlash_Chip_Select(DISABLE);
 80042f2:	2000      	movs	r0, #0
 80042f4:	f002 fbf6 	bl	8006ae4 <SFlash_Chip_Select>
	SFlash_Read_Device_ID();
 80042f8:	f002 fd6c 	bl	8006dd4 <SFlash_Read_Device_ID>
	FlashStr.bitFlagSFlashData = 0;
 80042fc:	4b67      	ldr	r3, [pc, #412]	; (800449c <main+0x234>)
 80042fe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004302:	3318      	adds	r3, #24
 8004304:	2200      	movs	r2, #0
 8004306:	701a      	strb	r2, [r3, #0]
	FlashStr.bitFlagMemoryFull = 0;
 8004308:	4b64      	ldr	r3, [pc, #400]	; (800449c <main+0x234>)
 800430a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800430e:	3317      	adds	r3, #23
 8004310:	2200      	movs	r2, #0
 8004312:	701a      	strb	r2, [r3, #0]
	FlashStr.bitFlagReadInProgress = 0;
 8004314:	4b61      	ldr	r3, [pc, #388]	; (800449c <main+0x234>)
 8004316:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800431a:	3319      	adds	r3, #25
 800431c:	2200      	movs	r2, #0
 800431e:	701a      	strb	r2, [r3, #0]
	Queue_InitLiveQ(&gsmLivePayload);
 8004320:	485f      	ldr	r0, [pc, #380]	; (80044a0 <main+0x238>)
 8004322:	f001 fddb 	bl	8005edc <Queue_InitLiveQ>
	Queue_InitBuffQ(&gsmBuffPayload);
 8004326:	485f      	ldr	r0, [pc, #380]	; (80044a4 <main+0x23c>)
 8004328:	f001 feac 	bl	8006084 <Queue_InitBuffQ>

	ReadImmobilizedStateFromEEPROM();
 800432c:	f003 fb5e 	bl	80079ec <ReadImmobilizedStateFromEEPROM>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_IWDG_Refresh(&hiwdg);
 8004330:	485d      	ldr	r0, [pc, #372]	; (80044a8 <main+0x240>)
 8004332:	f00c fc21 	bl	8010b78 <HAL_IWDG_Refresh>
	  	  HAL_GPIO_TogglePin(WD_FEED_uC_GPIO_Port, WD_FEED_uC_Pin);
 8004336:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800433a:	485c      	ldr	r0, [pc, #368]	; (80044ac <main+0x244>)
 800433c:	f00a feb0 	bl	800f0a0 <HAL_GPIO_TogglePin>

	  	  if(boolstartCan)// && (Internal_Battery_Flag == FALSE))
 8004340:	4b5b      	ldr	r3, [pc, #364]	; (80044b0 <main+0x248>)
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d007      	beq.n	8004358 <main+0xf0>
	  	  {
	  		  canFilterConfig();
 8004348:	f003 fdaa 	bl	8007ea0 <canFilterConfig>
	  		  boolstartCan = FALSE;
 800434c:	4b58      	ldr	r3, [pc, #352]	; (80044b0 <main+0x248>)
 800434e:	2200      	movs	r2, #0
 8004350:	701a      	strb	r2, [r3, #0]
	  		  Diagnostic(enmDiagnostic_CAN_ID);
 8004352:	2001      	movs	r0, #1
 8004354:	f000 ff44 	bl	80051e0 <Diagnostic>
	  		#endif

	  	  }//end of if(startCan)

	  	  /*1. ADC module Task*/
	  	 Adc_FSM();
 8004358:	f003 fc7c 	bl	8007c54 <Adc_FSM>
	  	 /* Serial Flash operations */
	  	 SerialFlashFSM();
 800435c:	f001 fff6 	bl	800634c <SerialFlashFSM>
	  			}
	  			else{}
	  		}//end of if(CharacterCounter>1)
	  #endif

	  	 parseCanMessageQueue();
 8004360:	f004 f896 	bl	8008490 <parseCanMessageQueue>
	  	executeCANQueries();
 8004364:	f004 faa0 	bl	80088a8 <executeCANQueries>

	  	 ModbusMaster_FSM();
 8004368:	f005 fb30 	bl	80099cc <ModbusMaster_FSM>

	  	   if((boolFOTACompleteFlag == TRUE) && (Queue_IsLiveQueueEmpty(&gsmLivePayload) == TRUE))
 800436c:	4b51      	ldr	r3, [pc, #324]	; (80044b4 <main+0x24c>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d007      	beq.n	8004384 <main+0x11c>
 8004374:	484a      	ldr	r0, [pc, #296]	; (80044a0 <main+0x238>)
 8004376:	f001 fe6a 	bl	800604e <Queue_IsLiveQueueEmpty>
 800437a:	4603      	mov	r3, r0
 800437c:	2b01      	cmp	r3, #1
 800437e:	d101      	bne.n	8004384 <main+0x11c>
	  	   {
	  	   		systemReset();
 8004380:	f002 ffec 	bl	800735c <systemReset>
	  	   }
	  	   if((gu32PayloadQueueEnqueue == 0) && (gu32FotaRquestFlag == FALSE)) //&& (GSMInitCompleteFlag == TRUE)
 8004384:	4b42      	ldr	r3, [pc, #264]	; (8004490 <main+0x228>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d117      	bne.n	80043bc <main+0x154>
 800438c:	4b4a      	ldr	r3, [pc, #296]	; (80044b8 <main+0x250>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d113      	bne.n	80043bc <main+0x154>
	  	   {
	  	   		Queue_LiveEnequeue(&gsmLivePayload,(char *)getMachineDataString());
 8004394:	f000 f902 	bl	800459c <getMachineDataString>
 8004398:	4603      	mov	r3, r0
 800439a:	4619      	mov	r1, r3
 800439c:	4840      	ldr	r0, [pc, #256]	; (80044a0 <main+0x238>)
 800439e:	f001 fdad 	bl	8005efc <Queue_LiveEnequeue>
	  	   		if(boolInginitionStatus == ON)
 80043a2:	4b46      	ldr	r3, [pc, #280]	; (80044bc <main+0x254>)
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d004      	beq.n	80043b4 <main+0x14c>
	  	   		{
	  	   			gu32PayloadQueueEnqueue = TEN_SEC; /* Upload Frequency */
 80043aa:	4b39      	ldr	r3, [pc, #228]	; (8004490 <main+0x228>)
 80043ac:	f242 7210 	movw	r2, #10000	; 0x2710
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	e003      	b.n	80043bc <main+0x154>
	  	   		}
	  	   		else
	  	   		{
	  	   			gu32PayloadQueueEnqueue = ONE_MIN; /* Upload Frequency */
 80043b4:	4b36      	ldr	r3, [pc, #216]	; (8004490 <main+0x228>)
 80043b6:	f64e 2260 	movw	r2, #60000	; 0xea60
 80043ba:	601a      	str	r2, [r3, #0]
	  	   		}

	  	   }//end of if((gu32PayloadQueueEnqueue == 0) && (gu32FotaRquestFlag == FALSE) ))

	  	   if(gsmInstance.u32GSMTimer > TWO_MIN)
 80043bc:	4b33      	ldr	r3, [pc, #204]	; (800448c <main+0x224>)
 80043be:	f8d3 3f90 	ldr.w	r3, [r3, #3984]	; 0xf90
 80043c2:	4a3f      	ldr	r2, [pc, #252]	; (80044c0 <main+0x258>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d904      	bls.n	80043d2 <main+0x16a>
	  		  gsmInstance.u32GSMTimer =TWO_SEC;
 80043c8:	4b30      	ldr	r3, [pc, #192]	; (800448c <main+0x224>)
 80043ca:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80043ce:	f8c3 2f90 	str.w	r2, [r3, #3984]	; 0xf90

	  	  if(gu32GSMHangTimer == 0)
 80043d2:	4b3c      	ldr	r3, [pc, #240]	; (80044c4 <main+0x25c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <main+0x176>
	  		  initGSMSIM868();
 80043da:	f7fd fe6f 	bl	80020bc <initGSMSIM868>

	  	  operateGSMSIM868();
 80043de:	f7fe f897 	bl	8002510 <operateGSMSIM868>

	  	  if(SUBTriggerFlag == TRUE)
 80043e2:	4b39      	ldr	r3, [pc, #228]	; (80044c8 <main+0x260>)
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d101      	bne.n	80043ee <main+0x186>
	  	  {
	  		SubRevicedString();
 80043ea:	f003 fb23 	bl	8007a34 <SubRevicedString>
	  	  }//end of  if(SUBTriggerFlag == TRUE)
	  	CheckImmobilization();
 80043ee:	f003 fab7 	bl	8007960 <CheckImmobilization>
	  	/* LED Indications */
	  	  if(gu32LEDDelay == 0)
 80043f2:	4b36      	ldr	r3, [pc, #216]	; (80044cc <main+0x264>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d19a      	bne.n	8004330 <main+0xc8>
	  	  {
	  		  HAL_GPIO_WritePin(Comm_LED_GPIO_Port, Comm_LED_Pin, GPIO_PIN_RESET);
 80043fa:	2200      	movs	r2, #0
 80043fc:	2108      	movs	r1, #8
 80043fe:	482b      	ldr	r0, [pc, #172]	; (80044ac <main+0x244>)
 8004400:	f00a fe1e 	bl	800f040 <HAL_GPIO_WritePin>

	  		  //for module reset
	  		  if((gu8ModuleInitNotifyCnt <= 3) && (gu8ModuleInitFlag == TRUE))
 8004404:	4b32      	ldr	r3, [pc, #200]	; (80044d0 <main+0x268>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	2b03      	cmp	r3, #3
 800440a:	d810      	bhi.n	800442e <main+0x1c6>
 800440c:	4b31      	ldr	r3, [pc, #196]	; (80044d4 <main+0x26c>)
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d10c      	bne.n	800442e <main+0x1c6>
	  		  {
	  			  HAL_GPIO_TogglePin(GPS_LED_GPIO_Port, GPS_LED_Pin);
 8004414:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004418:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800441c:	f00a fe40 	bl	800f0a0 <HAL_GPIO_TogglePin>
	  			  gu8ModuleInitNotifyCnt++;
 8004420:	4b2b      	ldr	r3, [pc, #172]	; (80044d0 <main+0x268>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	3301      	adds	r3, #1
 8004426:	b2da      	uxtb	r2, r3
 8004428:	4b29      	ldr	r3, [pc, #164]	; (80044d0 <main+0x268>)
 800442a:	701a      	strb	r2, [r3, #0]
 800442c:	e005      	b.n	800443a <main+0x1d2>
	  		  }
	  		  else
	  		  {
	  			 gu8ModuleInitNotifyCnt = 0;
 800442e:	4b28      	ldr	r3, [pc, #160]	; (80044d0 <main+0x268>)
 8004430:	2200      	movs	r2, #0
 8004432:	701a      	strb	r2, [r3, #0]
	  			 gu8ModuleInitFlag = FALSE;
 8004434:	4b27      	ldr	r3, [pc, #156]	; (80044d4 <main+0x26c>)
 8004436:	2200      	movs	r2, #0
 8004438:	701a      	strb	r2, [r3, #0]
	  		  }

	  		  if(HAL_GPIO_ReadPin(GPIOB, DI_EXTI4_Pin) == HIGH)            //check pin state
 800443a:	2110      	movs	r1, #16
 800443c:	481b      	ldr	r0, [pc, #108]	; (80044ac <main+0x244>)
 800443e:	f00a fdd9 	bl	800eff4 <HAL_GPIO_ReadPin>
 8004442:	4603      	mov	r3, r0
 8004444:	2b01      	cmp	r3, #1
 8004446:	d103      	bne.n	8004450 <main+0x1e8>
	  		  {
	  			  boolInginitionStatus = FALSE;
 8004448:	4b1c      	ldr	r3, [pc, #112]	; (80044bc <main+0x254>)
 800444a:	2200      	movs	r2, #0
 800444c:	701a      	strb	r2, [r3, #0]
 800444e:	e013      	b.n	8004478 <main+0x210>
	  		  }
	  		  else if(HAL_GPIO_ReadPin(GPIOB, DI_EXTI4_Pin) == LOW)
 8004450:	2110      	movs	r1, #16
 8004452:	4816      	ldr	r0, [pc, #88]	; (80044ac <main+0x244>)
 8004454:	f00a fdce 	bl	800eff4 <HAL_GPIO_ReadPin>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10c      	bne.n	8004478 <main+0x210>
	  		  {
	  			  boolInginitionStatus = TRUE;
 800445e:	4b17      	ldr	r3, [pc, #92]	; (80044bc <main+0x254>)
 8004460:	2201      	movs	r2, #1
 8004462:	701a      	strb	r2, [r3, #0]
	  			  if(gu32PayloadQueueEnqueue > TEN_SEC)
 8004464:	4b0a      	ldr	r3, [pc, #40]	; (8004490 <main+0x228>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f242 7210 	movw	r2, #10000	; 0x2710
 800446c:	4293      	cmp	r3, r2
 800446e:	d903      	bls.n	8004478 <main+0x210>
	  			  {
	  				  gu32PayloadQueueEnqueue = TEN_SEC;
 8004470:	4b07      	ldr	r3, [pc, #28]	; (8004490 <main+0x228>)
 8004472:	f242 7210 	movw	r2, #10000	; 0x2710
 8004476:	601a      	str	r2, [r3, #0]
	  			  }
	  		  }

	  		  gu32LEDDelay = ONE_SEC;
 8004478:	4b14      	ldr	r3, [pc, #80]	; (80044cc <main+0x264>)
 800447a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800447e:	601a      	str	r2, [r3, #0]
	  HAL_IWDG_Refresh(&hiwdg);
 8004480:	e756      	b.n	8004330 <main+0xc8>
 8004482:	bf00      	nop
 8004484:	200057d0 	.word	0x200057d0
 8004488:	40013800 	.word	0x40013800
 800448c:	200023e4 	.word	0x200023e4
 8004490:	20002158 	.word	0x20002158
 8004494:	20001a86 	.word	0x20001a86
 8004498:	200021b0 	.word	0x200021b0
 800449c:	2000374c 	.word	0x2000374c
 80044a0:	200023b4 	.word	0x200023b4
 80044a4:	20002384 	.word	0x20002384
 80044a8:	20003718 	.word	0x20003718
 80044ac:	48000400 	.word	0x48000400
 80044b0:	20000fde 	.word	0x20000fde
 80044b4:	20001878 	.word	0x20001878
 80044b8:	20001874 	.word	0x20001874
 80044bc:	200020d4 	.word	0x200020d4
 80044c0:	0001d4c0 	.word	0x0001d4c0
 80044c4:	20002170 	.word	0x20002170
 80044c8:	20001871 	.word	0x20001871
 80044cc:	20002164 	.word	0x20002164
 80044d0:	20001a84 	.word	0x20001a84
 80044d4:	20001a55 	.word	0x20001a55

080044d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b096      	sub	sp, #88	; 0x58
 80044dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80044de:	f107 0314 	add.w	r3, r7, #20
 80044e2:	2244      	movs	r2, #68	; 0x44
 80044e4:	2100      	movs	r1, #0
 80044e6:	4618      	mov	r0, r3
 80044e8:	f011 fa7e 	bl	80159e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80044ec:	463b      	mov	r3, r7
 80044ee:	2200      	movs	r2, #0
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	605a      	str	r2, [r3, #4]
 80044f4:	609a      	str	r2, [r3, #8]
 80044f6:	60da      	str	r2, [r3, #12]
 80044f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80044fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80044fe:	f00c fb59 	bl	8010bb4 <HAL_PWREx_ControlVoltageScaling>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8004508:	f000 f837 	bl	800457a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800450c:	2309      	movs	r3, #9
 800450e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004510:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004514:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004516:	2301      	movs	r3, #1
 8004518:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800451a:	2302      	movs	r3, #2
 800451c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800451e:	2303      	movs	r3, #3
 8004520:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 5;
 8004522:	2305      	movs	r3, #5
 8004524:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 8004526:	2320      	movs	r3, #32
 8004528:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800452a:	2307      	movs	r3, #7
 800452c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800452e:	2302      	movs	r3, #2
 8004530:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004532:	2302      	movs	r3, #2
 8004534:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004536:	f107 0314 	add.w	r3, r7, #20
 800453a:	4618      	mov	r0, r3
 800453c:	f00c fb9c 	bl	8010c78 <HAL_RCC_OscConfig>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8004546:	f000 f818 	bl	800457a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800454a:	230f      	movs	r3, #15
 800454c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800454e:	2303      	movs	r3, #3
 8004550:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004552:	2300      	movs	r3, #0
 8004554:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004556:	2300      	movs	r3, #0
 8004558:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800455a:	2300      	movs	r3, #0
 800455c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800455e:	463b      	mov	r3, r7
 8004560:	2104      	movs	r1, #4
 8004562:	4618      	mov	r0, r3
 8004564:	f00d f8d4 	bl	8011710 <HAL_RCC_ClockConfig>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800456e:	f000 f804 	bl	800457a <Error_Handler>
  }
}
 8004572:	bf00      	nop
 8004574:	3758      	adds	r7, #88	; 0x58
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800457a:	b480      	push	{r7}
 800457c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800457e:	b672      	cpsid	i
}
 8004580:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004582:	e7fe      	b.n	8004582 <Error_Handler+0x8>

08004584 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800458e:	bf00      	nop
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
	...

0800459c <getMachineDataString>:
******************************************************************************/
uint32_t gu32CanIdsLoopCounter = 1;
//uint32_t gu32CanPayloadLoopCounter = 0;
//uint32_t gu32StringLength = 0;
char * getMachineDataString(void)
{
 800459c:	b5b0      	push	{r4, r5, r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
	//updateSystemParameters();
	  char *systemPayload = (char *)malloc(sizeof(char) * GSM_PAYLOAD_MAX_SIZE);// GSM_PAYLOAD_MAX_SIZE = 1500
 80045a2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80045a6:	f011 fa01 	bl	80159ac <malloc>
 80045aa:	4603      	mov	r3, r0
 80045ac:	60fb      	str	r3, [r7, #12]

	  char temp[8] = "";
 80045ae:	2300      	movs	r3, #0
 80045b0:	607b      	str	r3, [r7, #4]
 80045b2:	2300      	movs	r3, #0
 80045b4:	60bb      	str	r3, [r7, #8]
//	uint16_t len = strlen(systemPayload);
//	uint16_t size = sizeof(systemPayload);

	if(systemPayload != NULL)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 81cc 	beq.w	8004956 <getMachineDataString+0x3ba>
			2.	Hardware ID
			3.	Model No.
			4.	UTC date time
			5.	Firmware Version
		*/
		memset(systemPayload,0x00,sizeof(char) * GSM_PAYLOAD_MAX_SIZE);
 80045be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045c2:	2100      	movs	r1, #0
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f011 fa0f 	bl	80159e8 <memset>
		/* Start of Frame */
		strcpy((char *)systemPayload,(char * )START_OF_FRAME);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	49bd      	ldr	r1, [pc, #756]	; (80048c4 <getMachineDataString+0x328>)
 80045ce:	461a      	mov	r2, r3
 80045d0:	460b      	mov	r3, r1
 80045d2:	881b      	ldrh	r3, [r3, #0]
 80045d4:	8013      	strh	r3, [r2, #0]
		strcat((char *)systemPayload,(char * )",");
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f7fc fa04 	bl	80009e4 <strlen>
 80045dc:	4603      	mov	r3, r0
 80045de:	461a      	mov	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4413      	add	r3, r2
 80045e4:	49b8      	ldr	r1, [pc, #736]	; (80048c8 <getMachineDataString+0x32c>)
 80045e6:	461a      	mov	r2, r3
 80045e8:	460b      	mov	r3, r1
 80045ea:	881b      	ldrh	r3, [r3, #0]
 80045ec:	8013      	strh	r3, [r2, #0]

		/* Device UUID */
		strcat((char *)systemPayload,(char * )dinfo);
 80045ee:	49b7      	ldr	r1, [pc, #732]	; (80048cc <getMachineDataString+0x330>)
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f012 f9c3 	bl	801697c <strcat>
		strcat((char *)systemPayload,(char * )",");
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f7fc f9f4 	bl	80009e4 <strlen>
 80045fc:	4603      	mov	r3, r0
 80045fe:	461a      	mov	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4413      	add	r3, r2
 8004604:	49b0      	ldr	r1, [pc, #704]	; (80048c8 <getMachineDataString+0x32c>)
 8004606:	461a      	mov	r2, r3
 8004608:	460b      	mov	r3, r1
 800460a:	881b      	ldrh	r3, [r3, #0]
 800460c:	8013      	strh	r3, [r2, #0]

		/* Model Number */
		strcat((char *)systemPayload,(char * )MODEL_NUMBER);
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f7fc f9e8 	bl	80009e4 <strlen>
 8004614:	4603      	mov	r3, r0
 8004616:	461a      	mov	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4413      	add	r3, r2
 800461c:	4aac      	ldr	r2, [pc, #688]	; (80048d0 <getMachineDataString+0x334>)
 800461e:	461c      	mov	r4, r3
 8004620:	4615      	mov	r5, r2
 8004622:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004624:	6020      	str	r0, [r4, #0]
 8004626:	6061      	str	r1, [r4, #4]
 8004628:	60a2      	str	r2, [r4, #8]
 800462a:	60e3      	str	r3, [r4, #12]
 800462c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800462e:	6120      	str	r0, [r4, #16]
 8004630:	6161      	str	r1, [r4, #20]
 8004632:	61a2      	str	r2, [r4, #24]
 8004634:	61e3      	str	r3, [r4, #28]
		manufacturerDate(systemPayload);
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f001 fb6e 	bl	8005d18 <manufacturerDate>
		strcat((char *)systemPayload,"_Payload");
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f7fc f9d1 	bl	80009e4 <strlen>
 8004642:	4603      	mov	r3, r0
 8004644:	461a      	mov	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	4413      	add	r3, r2
 800464a:	49a2      	ldr	r1, [pc, #648]	; (80048d4 <getMachineDataString+0x338>)
 800464c:	461a      	mov	r2, r3
 800464e:	460b      	mov	r3, r1
 8004650:	cb03      	ldmia	r3!, {r0, r1}
 8004652:	6010      	str	r0, [r2, #0]
 8004654:	6051      	str	r1, [r2, #4]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	7213      	strb	r3, [r2, #8]
		strcat((char *)systemPayload,(char * )",");
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f7fc f9c2 	bl	80009e4 <strlen>
 8004660:	4603      	mov	r3, r0
 8004662:	461a      	mov	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4413      	add	r3, r2
 8004668:	4997      	ldr	r1, [pc, #604]	; (80048c8 <getMachineDataString+0x32c>)
 800466a:	461a      	mov	r2, r3
 800466c:	460b      	mov	r3, r1
 800466e:	881b      	ldrh	r3, [r3, #0]
 8004670:	8013      	strh	r3, [r2, #0]

		/*System Time Stamp */
		PaylodTime(systemPayload);
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 fb00 	bl	8004c78 <PaylodTime>


		/* Firmware Version*/
		strcat((char *)systemPayload,(char * )BOOT_REGION);
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f7fc f9b3 	bl	80009e4 <strlen>
 800467e:	4603      	mov	r3, r0
 8004680:	461a      	mov	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	4413      	add	r3, r2
 8004686:	4a94      	ldr	r2, [pc, #592]	; (80048d8 <getMachineDataString+0x33c>)
 8004688:	8811      	ldrh	r1, [r2, #0]
 800468a:	7892      	ldrb	r2, [r2, #2]
 800468c:	8019      	strh	r1, [r3, #0]
 800468e:	709a      	strb	r2, [r3, #2]
		strcat((char *)systemPayload,(char * )FIRMWARE_VER);
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f7fc f9a7 	bl	80009e4 <strlen>
 8004696:	4603      	mov	r3, r0
 8004698:	461a      	mov	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	4413      	add	r3, r2
 800469e:	4a8f      	ldr	r2, [pc, #572]	; (80048dc <getMachineDataString+0x340>)
 80046a0:	6810      	ldr	r0, [r2, #0]
 80046a2:	6018      	str	r0, [r3, #0]
		strcat((char *)systemPayload,(char * )","); // as reply for GSP start with ','
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f7fc f99d 	bl	80009e4 <strlen>
 80046aa:	4603      	mov	r3, r0
 80046ac:	461a      	mov	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4413      	add	r3, r2
 80046b2:	4985      	ldr	r1, [pc, #532]	; (80048c8 <getMachineDataString+0x32c>)
 80046b4:	461a      	mov	r2, r3
 80046b6:	460b      	mov	r3, r1
 80046b8:	881b      	ldrh	r3, [r3, #0]
 80046ba:	8013      	strh	r3, [r2, #0]

		/* GPS Data */
		if(strlen(gsmInstance.agpsLocationData) > 0)
 80046bc:	4b88      	ldr	r3, [pc, #544]	; (80048e0 <getMachineDataString+0x344>)
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d04f      	beq.n	8004764 <getMachineDataString+0x1c8>
		{
			memset(gsmInstance.agpsTempData,0x00, strlen(gsmInstance.agpsTempData));
 80046c4:	4887      	ldr	r0, [pc, #540]	; (80048e4 <getMachineDataString+0x348>)
 80046c6:	f7fc f98d 	bl	80009e4 <strlen>
 80046ca:	4603      	mov	r3, r0
 80046cc:	461a      	mov	r2, r3
 80046ce:	2100      	movs	r1, #0
 80046d0:	4884      	ldr	r0, [pc, #528]	; (80048e4 <getMachineDataString+0x348>)
 80046d2:	f011 f989 	bl	80159e8 <memset>
			GPS_SperateString();
 80046d6:	f000 fb4d 	bl	8004d74 <GPS_SperateString>
//			strcat((char *)systemPayload,(char * )gsmInstance.agpsTempData);
			strcat((char *)systemPayload,(char * )GPSUTCTIME);
 80046da:	4983      	ldr	r1, [pc, #524]	; (80048e8 <getMachineDataString+0x34c>)
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f012 f94d 	bl	801697c <strcat>
			strcat((char *)systemPayload,",");
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f7fc f97e 	bl	80009e4 <strlen>
 80046e8:	4603      	mov	r3, r0
 80046ea:	461a      	mov	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4413      	add	r3, r2
 80046f0:	4975      	ldr	r1, [pc, #468]	; (80048c8 <getMachineDataString+0x32c>)
 80046f2:	461a      	mov	r2, r3
 80046f4:	460b      	mov	r3, r1
 80046f6:	881b      	ldrh	r3, [r3, #0]
 80046f8:	8013      	strh	r3, [r2, #0]
			strcat((char *)systemPayload,(char * )GPS_LAT);
 80046fa:	497c      	ldr	r1, [pc, #496]	; (80048ec <getMachineDataString+0x350>)
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f012 f93d 	bl	801697c <strcat>
			strcat((char *)systemPayload,",");
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f7fc f96e 	bl	80009e4 <strlen>
 8004708:	4603      	mov	r3, r0
 800470a:	461a      	mov	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4413      	add	r3, r2
 8004710:	496d      	ldr	r1, [pc, #436]	; (80048c8 <getMachineDataString+0x32c>)
 8004712:	461a      	mov	r2, r3
 8004714:	460b      	mov	r3, r1
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	8013      	strh	r3, [r2, #0]
			strcat((char *)systemPayload,(char * )GPS_LONG);
 800471a:	4975      	ldr	r1, [pc, #468]	; (80048f0 <getMachineDataString+0x354>)
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f012 f92d 	bl	801697c <strcat>
			strcat((char *)systemPayload,",");
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f7fc f95e 	bl	80009e4 <strlen>
 8004728:	4603      	mov	r3, r0
 800472a:	461a      	mov	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4413      	add	r3, r2
 8004730:	4965      	ldr	r1, [pc, #404]	; (80048c8 <getMachineDataString+0x32c>)
 8004732:	461a      	mov	r2, r3
 8004734:	460b      	mov	r3, r1
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	8013      	strh	r3, [r2, #0]
			strcat((char *)systemPayload,(char * )GPSUTCDATE);
 800473a:	496e      	ldr	r1, [pc, #440]	; (80048f4 <getMachineDataString+0x358>)
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f012 f91d 	bl	801697c <strcat>
			strcat((char *)systemPayload,",");
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f7fc f94e 	bl	80009e4 <strlen>
 8004748:	4603      	mov	r3, r0
 800474a:	461a      	mov	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4413      	add	r3, r2
 8004750:	495d      	ldr	r1, [pc, #372]	; (80048c8 <getMachineDataString+0x32c>)
 8004752:	461a      	mov	r2, r3
 8004754:	460b      	mov	r3, r1
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	8013      	strh	r3, [r2, #0]
			strcat((char *)systemPayload,(char * )GPS_SPEED_OVR_GND);
 800475a:	4967      	ldr	r1, [pc, #412]	; (80048f8 <getMachineDataString+0x35c>)
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f012 f90d 	bl	801697c <strcat>
 8004762:	e005      	b.n	8004770 <getMachineDataString+0x1d4>
		}
		else
			strcat((char *)systemPayload,gpu8NoString);
 8004764:	4b65      	ldr	r3, [pc, #404]	; (80048fc <getMachineDataString+0x360>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4619      	mov	r1, r3
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f012 f906 	bl	801697c <strcat>


		strcat((char *)systemPayload,",");
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f7fc f937 	bl	80009e4 <strlen>
 8004776:	4603      	mov	r3, r0
 8004778:	461a      	mov	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4413      	add	r3, r2
 800477e:	4952      	ldr	r1, [pc, #328]	; (80048c8 <getMachineDataString+0x32c>)
 8004780:	461a      	mov	r2, r3
 8004782:	460b      	mov	r3, r1
 8004784:	881b      	ldrh	r3, [r3, #0]
 8004786:	8013      	strh	r3, [r2, #0]
		itoa(u8daignostic,temp,PAYLOAD_DATA_STRING_RADIX);
 8004788:	4b5d      	ldr	r3, [pc, #372]	; (8004900 <getMachineDataString+0x364>)
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	4618      	mov	r0, r3
 800478e:	1d3b      	adds	r3, r7, #4
 8004790:	220a      	movs	r2, #10
 8004792:	4619      	mov	r1, r3
 8004794:	f011 f908 	bl	80159a8 <itoa>
		strcat((char *)systemPayload,temp);
 8004798:	1d3b      	adds	r3, r7, #4
 800479a:	4619      	mov	r1, r3
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f012 f8ed 	bl	801697c <strcat>
		if(u8daignostic & (1<<7))
 80047a2:	4b57      	ldr	r3, [pc, #348]	; (8004900 <getMachineDataString+0x364>)
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	b25b      	sxtb	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	da06      	bge.n	80047ba <getMachineDataString+0x21e>
		{
			u8daignostic &= ~(1<<7);
 80047ac:	4b54      	ldr	r3, [pc, #336]	; (8004900 <getMachineDataString+0x364>)
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	4b52      	ldr	r3, [pc, #328]	; (8004900 <getMachineDataString+0x364>)
 80047b8:	701a      	strb	r2, [r3, #0]
		}
		if(u8daignostic & (1<<6))
 80047ba:	4b51      	ldr	r3, [pc, #324]	; (8004900 <getMachineDataString+0x364>)
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d006      	beq.n	80047d4 <getMachineDataString+0x238>
		{
			u8daignostic &= ~(1<<6);
 80047c6:	4b4e      	ldr	r3, [pc, #312]	; (8004900 <getMachineDataString+0x364>)
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	4b4b      	ldr	r3, [pc, #300]	; (8004900 <getMachineDataString+0x364>)
 80047d2:	701a      	strb	r2, [r3, #0]
		}
		strcat((char *)systemPayload,",");
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f7fc f905 	bl	80009e4 <strlen>
 80047da:	4603      	mov	r3, r0
 80047dc:	461a      	mov	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4413      	add	r3, r2
 80047e2:	4939      	ldr	r1, [pc, #228]	; (80048c8 <getMachineDataString+0x32c>)
 80047e4:	461a      	mov	r2, r3
 80047e6:	460b      	mov	r3, r1
 80047e8:	881b      	ldrh	r3, [r3, #0]
 80047ea:	8013      	strh	r3, [r2, #0]

		updateInputVoltage(g_stAdcData.u32PwrSupplyVtg);
 80047ec:	4b45      	ldr	r3, [pc, #276]	; (8004904 <getMachineDataString+0x368>)
 80047ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80047f2:	eeb0 0a67 	vmov.f32	s0, s15
 80047f6:	f001 fad9 	bl	8005dac <updateInputVoltage>
		strcat((char *)systemPayload,(char * )voltage);
 80047fa:	4943      	ldr	r1, [pc, #268]	; (8004908 <getMachineDataString+0x36c>)
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f012 f8bd 	bl	801697c <strcat>
		strcat((char *)systemPayload,",");
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f7fc f8ee 	bl	80009e4 <strlen>
 8004808:	4603      	mov	r3, r0
 800480a:	461a      	mov	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4413      	add	r3, r2
 8004810:	492d      	ldr	r1, [pc, #180]	; (80048c8 <getMachineDataString+0x32c>)
 8004812:	461a      	mov	r2, r3
 8004814:	460b      	mov	r3, r1
 8004816:	881b      	ldrh	r3, [r3, #0]
 8004818:	8013      	strh	r3, [r2, #0]

		updateInputVoltage(g_stAdcData.u32IntBatVtg);
 800481a:	4b3a      	ldr	r3, [pc, #232]	; (8004904 <getMachineDataString+0x368>)
 800481c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004820:	eeb0 0a67 	vmov.f32	s0, s15
 8004824:	f001 fac2 	bl	8005dac <updateInputVoltage>
		strcat((char *)systemPayload,(char * )voltage);
 8004828:	4937      	ldr	r1, [pc, #220]	; (8004908 <getMachineDataString+0x36c>)
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f012 f8a6 	bl	801697c <strcat>
		strcat((char *)systemPayload,(char * )",");
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f7fc f8d7 	bl	80009e4 <strlen>
 8004836:	4603      	mov	r3, r0
 8004838:	461a      	mov	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	4413      	add	r3, r2
 800483e:	4922      	ldr	r1, [pc, #136]	; (80048c8 <getMachineDataString+0x32c>)
 8004840:	461a      	mov	r2, r3
 8004842:	460b      	mov	r3, r1
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	8013      	strh	r3, [r2, #0]
//		strcat((char *)systemPayload,temp);
//		strcat((char *)systemPayload,",");


		/* CAN Data */
		updateCanPayload(1, systemPayload );
 8004848:	68f9      	ldr	r1, [r7, #12]
 800484a:	2001      	movs	r0, #1
 800484c:	f000 f890 	bl	8004970 <updateCanPayload>
		updateCanPayload(2, systemPayload );
 8004850:	68f9      	ldr	r1, [r7, #12]
 8004852:	2002      	movs	r0, #2
 8004854:	f000 f88c 	bl	8004970 <updateCanPayload>
		updateCanPayload(3, systemPayload );
 8004858:	68f9      	ldr	r1, [r7, #12]
 800485a:	2003      	movs	r0, #3
 800485c:	f000 f888 	bl	8004970 <updateCanPayload>
		updateCanPayload(4, systemPayload );
 8004860:	68f9      	ldr	r1, [r7, #12]
 8004862:	2004      	movs	r0, #4
 8004864:	f000 f884 	bl	8004970 <updateCanPayload>
		updateCanPayload(5, systemPayload );
 8004868:	68f9      	ldr	r1, [r7, #12]
 800486a:	2005      	movs	r0, #5
 800486c:	f000 f880 	bl	8004970 <updateCanPayload>
		updateCanPayload(6, systemPayload );
 8004870:	68f9      	ldr	r1, [r7, #12]
 8004872:	2006      	movs	r0, #6
 8004874:	f000 f87c 	bl	8004970 <updateCanPayload>
		updateCanPayload(7, systemPayload );
 8004878:	68f9      	ldr	r1, [r7, #12]
 800487a:	2007      	movs	r0, #7
 800487c:	f000 f878 	bl	8004970 <updateCanPayload>
		updateCanPayload(8, systemPayload );
 8004880:	68f9      	ldr	r1, [r7, #12]
 8004882:	2008      	movs	r0, #8
 8004884:	f000 f874 	bl	8004970 <updateCanPayload>
		updateCanPayload(9, systemPayload );
 8004888:	68f9      	ldr	r1, [r7, #12]
 800488a:	2009      	movs	r0, #9
 800488c:	f000 f870 	bl	8004970 <updateCanPayload>
		updateCanPayload(10, systemPayload );
 8004890:	68f9      	ldr	r1, [r7, #12]
 8004892:	200a      	movs	r0, #10
 8004894:	f000 f86c 	bl	8004970 <updateCanPayload>
		updateCanPayload(11, systemPayload );
 8004898:	68f9      	ldr	r1, [r7, #12]
 800489a:	200b      	movs	r0, #11
 800489c:	f000 f868 	bl	8004970 <updateCanPayload>
		updateCanPayload(12, systemPayload );
 80048a0:	68f9      	ldr	r1, [r7, #12]
 80048a2:	200c      	movs	r0, #12
 80048a4:	f000 f864 	bl	8004970 <updateCanPayload>
		updateCanPayload(13, systemPayload );
 80048a8:	68f9      	ldr	r1, [r7, #12]
 80048aa:	200d      	movs	r0, #13
 80048ac:	f000 f860 	bl	8004970 <updateCanPayload>
//			MB_UpdateModbusPayload();
//			strcat((char *)systemPayload,(char * )gu8MBRTUPayloadString);
//		}

		/* RSSI */
		if(strlen(gsmInstance.agsmSignalStrength ) > 0)
 80048b0:	4b16      	ldr	r3, [pc, #88]	; (800490c <getMachineDataString+0x370>)
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d02b      	beq.n	8004910 <getMachineDataString+0x374>
		{
			strcat((char *)systemPayload,(char * )gsmInstance.agsmSignalStrength);
 80048b8:	4914      	ldr	r1, [pc, #80]	; (800490c <getMachineDataString+0x370>)
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f012 f85e 	bl	801697c <strcat>
 80048c0:	e02c      	b.n	800491c <getMachineDataString+0x380>
 80048c2:	bf00      	nop
 80048c4:	0801b670 	.word	0x0801b670
 80048c8:	0801b674 	.word	0x0801b674
 80048cc:	20000000 	.word	0x20000000
 80048d0:	0801b678 	.word	0x0801b678
 80048d4:	0801b698 	.word	0x0801b698
 80048d8:	0801b6a4 	.word	0x0801b6a4
 80048dc:	0801b6a8 	.word	0x0801b6a8
 80048e0:	200023e4 	.word	0x200023e4
 80048e4:	2000247a 	.word	0x2000247a
 80048e8:	20001a90 	.word	0x20001a90
 80048ec:	20001a98 	.word	0x20001a98
 80048f0:	20001aa4 	.word	0x20001aa4
 80048f4:	20001a88 	.word	0x20001a88
 80048f8:	20001ab0 	.word	0x20001ab0
 80048fc:	20000fe0 	.word	0x20000fe0
 8004900:	20001a86 	.word	0x20001a86
 8004904:	2000581c 	.word	0x2000581c
 8004908:	20000fe8 	.word	0x20000fe8
 800490c:	20002510 	.word	0x20002510
//			strcat((char *)systemPayload,(char * )",");
		}
		else
			strcat((char *)systemPayload,gpu8Norssi);
 8004910:	4b13      	ldr	r3, [pc, #76]	; (8004960 <getMachineDataString+0x3c4>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4619      	mov	r1, r3
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f012 f830 	bl	801697c <strcat>

		strcat((char *)systemPayload,(char * )",");
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f7fc f861 	bl	80009e4 <strlen>
 8004922:	4603      	mov	r3, r0
 8004924:	461a      	mov	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4413      	add	r3, r2
 800492a:	490e      	ldr	r1, [pc, #56]	; (8004964 <getMachineDataString+0x3c8>)
 800492c:	461a      	mov	r2, r3
 800492e:	460b      	mov	r3, r1
 8004930:	881b      	ldrh	r3, [r3, #0]
 8004932:	8013      	strh	r3, [r2, #0]

		/* End of Frame */
		strcat((char *)systemPayload,(char * )END_OF_FRAME);
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f7fc f855 	bl	80009e4 <strlen>
 800493a:	4603      	mov	r3, r0
 800493c:	461a      	mov	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4413      	add	r3, r2
 8004942:	4909      	ldr	r1, [pc, #36]	; (8004968 <getMachineDataString+0x3cc>)
 8004944:	461a      	mov	r2, r3
 8004946:	460b      	mov	r3, r1
 8004948:	881b      	ldrh	r3, [r3, #0]
 800494a:	8013      	strh	r3, [r2, #0]
		gu32CanIdsLoopCounter = 1;
 800494c:	4b07      	ldr	r3, [pc, #28]	; (800496c <getMachineDataString+0x3d0>)
 800494e:	2201      	movs	r2, #1
 8004950:	601a      	str	r2, [r3, #0]

//		Payload_GEO_Toggle_Flag = GEO;
		return systemPayload;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	e000      	b.n	8004958 <getMachineDataString+0x3bc>
	}
	else
		return NULL; // malloc Error . Memory Allocation Failure
 8004956:	2300      	movs	r3, #0
}//end of char * getMachineDataString(void)
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bdb0      	pop	{r4, r5, r7, pc}
 8004960:	20000fe4 	.word	0x20000fe4
 8004964:	0801b674 	.word	0x0801b674
 8004968:	0801b6ac 	.word	0x0801b6ac
 800496c:	20000ff0 	.word	0x20000ff0

08004970 <updateCanPayload>:
 Author           	Date                Remarks
******************************************************************************/


void updateCanPayload(uint32_t data ,char * systemPayload )
{
 8004970:	b5b0      	push	{r4, r5, r7, lr}
 8004972:	b088      	sub	sp, #32
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
	char temp[20] = "";
 800497a:	2300      	movs	r3, #0
 800497c:	60bb      	str	r3, [r7, #8]
 800497e:	f107 030c 	add.w	r3, r7, #12
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	605a      	str	r2, [r3, #4]
 8004988:	609a      	str	r2, [r3, #8]
 800498a:	60da      	str	r2, [r3, #12]
	uint8_t CANTempData = 0;
 800498c:	2300      	movs	r3, #0
 800498e:	77fb      	strb	r3, [r7, #31]

	if(gu32CanConfigurationArray[data]!=0)
 8004990:	4ab2      	ldr	r2, [pc, #712]	; (8004c5c <updateCanPayload+0x2ec>)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d029      	beq.n	80049f0 <updateCanPayload+0x80>
	{
		strcat((char *)systemPayload,"^,0x");
 800499c:	6838      	ldr	r0, [r7, #0]
 800499e:	f7fc f821 	bl	80009e4 <strlen>
 80049a2:	4603      	mov	r3, r0
 80049a4:	461a      	mov	r2, r3
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	4413      	add	r3, r2
 80049aa:	4aad      	ldr	r2, [pc, #692]	; (8004c60 <updateCanPayload+0x2f0>)
 80049ac:	6810      	ldr	r0, [r2, #0]
 80049ae:	6018      	str	r0, [r3, #0]
 80049b0:	7912      	ldrb	r2, [r2, #4]
 80049b2:	711a      	strb	r2, [r3, #4]
		itoa(gu32CanConfigurationArray[data],temp,CAN_PAYLOADSTRING_RADIX);
 80049b4:	4aa9      	ldr	r2, [pc, #676]	; (8004c5c <updateCanPayload+0x2ec>)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049bc:	4618      	mov	r0, r3
 80049be:	f107 0308 	add.w	r3, r7, #8
 80049c2:	2210      	movs	r2, #16
 80049c4:	4619      	mov	r1, r3
 80049c6:	f010 ffef 	bl	80159a8 <itoa>
		strcat((char *)systemPayload,temp);
 80049ca:	f107 0308 	add.w	r3, r7, #8
 80049ce:	4619      	mov	r1, r3
 80049d0:	6838      	ldr	r0, [r7, #0]
 80049d2:	f011 ffd3 	bl	801697c <strcat>
		strcat((char *)systemPayload,",");
 80049d6:	6838      	ldr	r0, [r7, #0]
 80049d8:	f7fc f804 	bl	80009e4 <strlen>
 80049dc:	4603      	mov	r3, r0
 80049de:	461a      	mov	r2, r3
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	4413      	add	r3, r2
 80049e4:	499f      	ldr	r1, [pc, #636]	; (8004c64 <updateCanPayload+0x2f4>)
 80049e6:	461a      	mov	r2, r3
 80049e8:	460b      	mov	r3, r1
 80049ea:	881b      	ldrh	r3, [r3, #0]
 80049ec:	8013      	strh	r3, [r2, #0]
 80049ee:	e00f      	b.n	8004a10 <updateCanPayload+0xa0>
	}
	else
	{
		strcat((char *)systemPayload,"^,0x00000000,");
 80049f0:	6838      	ldr	r0, [r7, #0]
 80049f2:	f7fb fff7 	bl	80009e4 <strlen>
 80049f6:	4603      	mov	r3, r0
 80049f8:	461a      	mov	r2, r3
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	4413      	add	r3, r2
 80049fe:	4a9a      	ldr	r2, [pc, #616]	; (8004c68 <updateCanPayload+0x2f8>)
 8004a00:	461c      	mov	r4, r3
 8004a02:	4613      	mov	r3, r2
 8004a04:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004a06:	6020      	str	r0, [r4, #0]
 8004a08:	6061      	str	r1, [r4, #4]
 8004a0a:	60a2      	str	r2, [r4, #8]
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	81a3      	strh	r3, [r4, #12]
	}


	if(gu64CanMessageArray[data] != 0 )
 8004a10:	4a96      	ldr	r2, [pc, #600]	; (8004c6c <updateCanPayload+0x2fc>)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	00db      	lsls	r3, r3, #3
 8004a16:	4413      	add	r3, r2
 8004a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	f000 80ff 	beq.w	8004c20 <updateCanPayload+0x2b0>
	{
//		sprintf(temp,"%ld",gu64CanMessageTimeStampArray[data]);
//		strcat((char *)systemPayload,temp);
//		strcat((char *)systemPayload,",");

		CANTempData = (((uint64_t)gu64CanMessageArray[data] >> 56) & 255);
 8004a22:	4a92      	ldr	r2, [pc, #584]	; (8004c6c <updateCanPayload+0x2fc>)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	4413      	add	r3, r2
 8004a2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a2e:	f04f 0200 	mov.w	r2, #0
 8004a32:	f04f 0300 	mov.w	r3, #0
 8004a36:	0e0a      	lsrs	r2, r1, #24
 8004a38:	2300      	movs	r3, #0
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	77fb      	strb	r3, [r7, #31]
		sprintf(temp,"%02X",CANTempData);
 8004a3e:	7ffa      	ldrb	r2, [r7, #31]
 8004a40:	f107 0308 	add.w	r3, r7, #8
 8004a44:	498a      	ldr	r1, [pc, #552]	; (8004c70 <updateCanPayload+0x300>)
 8004a46:	4618      	mov	r0, r3
 8004a48:	f011 ff78 	bl	801693c <siprintf>
		CANTempData = 0;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	77fb      	strb	r3, [r7, #31]
		strcat((char *)systemPayload,temp);
 8004a50:	f107 0308 	add.w	r3, r7, #8
 8004a54:	4619      	mov	r1, r3
 8004a56:	6838      	ldr	r0, [r7, #0]
 8004a58:	f011 ff90 	bl	801697c <strcat>

		CANTempData = (((uint64_t)gu64CanMessageArray[data] >> 48) & 255);
 8004a5c:	4a83      	ldr	r2, [pc, #524]	; (8004c6c <updateCanPayload+0x2fc>)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	00db      	lsls	r3, r3, #3
 8004a62:	4413      	add	r3, r2
 8004a64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	f04f 0300 	mov.w	r3, #0
 8004a70:	0c0a      	lsrs	r2, r1, #16
 8004a72:	2300      	movs	r3, #0
 8004a74:	4613      	mov	r3, r2
 8004a76:	77fb      	strb	r3, [r7, #31]
		sprintf(temp,"%02X",CANTempData);
 8004a78:	7ffa      	ldrb	r2, [r7, #31]
 8004a7a:	f107 0308 	add.w	r3, r7, #8
 8004a7e:	497c      	ldr	r1, [pc, #496]	; (8004c70 <updateCanPayload+0x300>)
 8004a80:	4618      	mov	r0, r3
 8004a82:	f011 ff5b 	bl	801693c <siprintf>
		CANTempData = 0;
 8004a86:	2300      	movs	r3, #0
 8004a88:	77fb      	strb	r3, [r7, #31]
		strcat((char *)systemPayload,temp);
 8004a8a:	f107 0308 	add.w	r3, r7, #8
 8004a8e:	4619      	mov	r1, r3
 8004a90:	6838      	ldr	r0, [r7, #0]
 8004a92:	f011 ff73 	bl	801697c <strcat>

		CANTempData = (((uint64_t)gu64CanMessageArray[data] >> 40) & 255);
 8004a96:	4a75      	ldr	r2, [pc, #468]	; (8004c6c <updateCanPayload+0x2fc>)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	4413      	add	r3, r2
 8004a9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004aa2:	f04f 0200 	mov.w	r2, #0
 8004aa6:	f04f 0300 	mov.w	r3, #0
 8004aaa:	0a0a      	lsrs	r2, r1, #8
 8004aac:	2300      	movs	r3, #0
 8004aae:	4613      	mov	r3, r2
 8004ab0:	77fb      	strb	r3, [r7, #31]
		sprintf(temp,"%02X",CANTempData);
 8004ab2:	7ffa      	ldrb	r2, [r7, #31]
 8004ab4:	f107 0308 	add.w	r3, r7, #8
 8004ab8:	496d      	ldr	r1, [pc, #436]	; (8004c70 <updateCanPayload+0x300>)
 8004aba:	4618      	mov	r0, r3
 8004abc:	f011 ff3e 	bl	801693c <siprintf>
		CANTempData = 0;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	77fb      	strb	r3, [r7, #31]
		strcat((char *)systemPayload,temp);
 8004ac4:	f107 0308 	add.w	r3, r7, #8
 8004ac8:	4619      	mov	r1, r3
 8004aca:	6838      	ldr	r0, [r7, #0]
 8004acc:	f011 ff56 	bl	801697c <strcat>

		CANTempData = (((uint64_t)gu64CanMessageArray[data] >> 32) & 255);
 8004ad0:	4a66      	ldr	r2, [pc, #408]	; (8004c6c <updateCanPayload+0x2fc>)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	00db      	lsls	r3, r3, #3
 8004ad6:	4413      	add	r3, r2
 8004ad8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004adc:	f04f 0200 	mov.w	r2, #0
 8004ae0:	f04f 0300 	mov.w	r3, #0
 8004ae4:	000a      	movs	r2, r1
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	4613      	mov	r3, r2
 8004aea:	77fb      	strb	r3, [r7, #31]
		sprintf(temp,"%02X",CANTempData);
 8004aec:	7ffa      	ldrb	r2, [r7, #31]
 8004aee:	f107 0308 	add.w	r3, r7, #8
 8004af2:	495f      	ldr	r1, [pc, #380]	; (8004c70 <updateCanPayload+0x300>)
 8004af4:	4618      	mov	r0, r3
 8004af6:	f011 ff21 	bl	801693c <siprintf>
		CANTempData = 0;
 8004afa:	2300      	movs	r3, #0
 8004afc:	77fb      	strb	r3, [r7, #31]
		strcat((char *)systemPayload,temp);
 8004afe:	f107 0308 	add.w	r3, r7, #8
 8004b02:	4619      	mov	r1, r3
 8004b04:	6838      	ldr	r0, [r7, #0]
 8004b06:	f011 ff39 	bl	801697c <strcat>

		CANTempData = (((uint64_t)gu64CanMessageArray[data] >> 24) & 255);
 8004b0a:	4a58      	ldr	r2, [pc, #352]	; (8004c6c <updateCanPayload+0x2fc>)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	00db      	lsls	r3, r3, #3
 8004b10:	4413      	add	r3, r2
 8004b12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	f04f 0300 	mov.w	r3, #0
 8004b1e:	0e02      	lsrs	r2, r0, #24
 8004b20:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004b24:	0e0b      	lsrs	r3, r1, #24
 8004b26:	4613      	mov	r3, r2
 8004b28:	77fb      	strb	r3, [r7, #31]
		sprintf(temp,"%02X",CANTempData);
 8004b2a:	7ffa      	ldrb	r2, [r7, #31]
 8004b2c:	f107 0308 	add.w	r3, r7, #8
 8004b30:	494f      	ldr	r1, [pc, #316]	; (8004c70 <updateCanPayload+0x300>)
 8004b32:	4618      	mov	r0, r3
 8004b34:	f011 ff02 	bl	801693c <siprintf>
		CANTempData = 0;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	77fb      	strb	r3, [r7, #31]
		strcat((char *)systemPayload,temp);
 8004b3c:	f107 0308 	add.w	r3, r7, #8
 8004b40:	4619      	mov	r1, r3
 8004b42:	6838      	ldr	r0, [r7, #0]
 8004b44:	f011 ff1a 	bl	801697c <strcat>

		CANTempData = (((uint64_t)gu64CanMessageArray[data] >> 16) & 255);
 8004b48:	4a48      	ldr	r2, [pc, #288]	; (8004c6c <updateCanPayload+0x2fc>)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	00db      	lsls	r3, r3, #3
 8004b4e:	4413      	add	r3, r2
 8004b50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b54:	f04f 0200 	mov.w	r2, #0
 8004b58:	f04f 0300 	mov.w	r3, #0
 8004b5c:	0c02      	lsrs	r2, r0, #16
 8004b5e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004b62:	0c0b      	lsrs	r3, r1, #16
 8004b64:	4613      	mov	r3, r2
 8004b66:	77fb      	strb	r3, [r7, #31]
		sprintf(temp,"%02X",CANTempData);
 8004b68:	7ffa      	ldrb	r2, [r7, #31]
 8004b6a:	f107 0308 	add.w	r3, r7, #8
 8004b6e:	4940      	ldr	r1, [pc, #256]	; (8004c70 <updateCanPayload+0x300>)
 8004b70:	4618      	mov	r0, r3
 8004b72:	f011 fee3 	bl	801693c <siprintf>
		CANTempData = 0;
 8004b76:	2300      	movs	r3, #0
 8004b78:	77fb      	strb	r3, [r7, #31]
		strcat((char *)systemPayload,temp);
 8004b7a:	f107 0308 	add.w	r3, r7, #8
 8004b7e:	4619      	mov	r1, r3
 8004b80:	6838      	ldr	r0, [r7, #0]
 8004b82:	f011 fefb 	bl	801697c <strcat>

		CANTempData = (((uint64_t)gu64CanMessageArray[data] >> 8) & 255);
 8004b86:	4a39      	ldr	r2, [pc, #228]	; (8004c6c <updateCanPayload+0x2fc>)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	4413      	add	r3, r2
 8004b8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b92:	f04f 0200 	mov.w	r2, #0
 8004b96:	f04f 0300 	mov.w	r3, #0
 8004b9a:	0a02      	lsrs	r2, r0, #8
 8004b9c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004ba0:	0a0b      	lsrs	r3, r1, #8
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	77fb      	strb	r3, [r7, #31]
		sprintf(temp,"%02X",CANTempData);
 8004ba6:	7ffa      	ldrb	r2, [r7, #31]
 8004ba8:	f107 0308 	add.w	r3, r7, #8
 8004bac:	4930      	ldr	r1, [pc, #192]	; (8004c70 <updateCanPayload+0x300>)
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f011 fec4 	bl	801693c <siprintf>
		CANTempData = 0;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	77fb      	strb	r3, [r7, #31]
		strcat((char *)systemPayload,temp);
 8004bb8:	f107 0308 	add.w	r3, r7, #8
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	6838      	ldr	r0, [r7, #0]
 8004bc0:	f011 fedc 	bl	801697c <strcat>

		CANTempData = (((uint64_t)gu64CanMessageArray[data]) & 255);
 8004bc4:	4a29      	ldr	r2, [pc, #164]	; (8004c6c <updateCanPayload+0x2fc>)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	00db      	lsls	r3, r3, #3
 8004bca:	4413      	add	r3, r2
 8004bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	77fb      	strb	r3, [r7, #31]
		sprintf(temp,"%02X",CANTempData);
 8004bd4:	7ffa      	ldrb	r2, [r7, #31]
 8004bd6:	f107 0308 	add.w	r3, r7, #8
 8004bda:	4925      	ldr	r1, [pc, #148]	; (8004c70 <updateCanPayload+0x300>)
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f011 fead 	bl	801693c <siprintf>
		CANTempData = 0;
 8004be2:	2300      	movs	r3, #0
 8004be4:	77fb      	strb	r3, [r7, #31]
		strcat((char *)systemPayload,temp);
 8004be6:	f107 0308 	add.w	r3, r7, #8
 8004bea:	4619      	mov	r1, r3
 8004bec:	6838      	ldr	r0, [r7, #0]
 8004bee:	f011 fec5 	bl	801697c <strcat>
		strcat((char *)systemPayload,",");
 8004bf2:	6838      	ldr	r0, [r7, #0]
 8004bf4:	f7fb fef6 	bl	80009e4 <strlen>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	4413      	add	r3, r2
 8004c00:	4918      	ldr	r1, [pc, #96]	; (8004c64 <updateCanPayload+0x2f4>)
 8004c02:	461a      	mov	r2, r3
 8004c04:	460b      	mov	r3, r1
 8004c06:	881b      	ldrh	r3, [r3, #0]
 8004c08:	8013      	strh	r3, [r2, #0]

		/*Clear Payload Array*/
		/* Removed after discussion with team that we should keep previous data in case of CAN communication not available */
		gu64CanMessageArray[data] = 0;
 8004c0a:	4a18      	ldr	r2, [pc, #96]	; (8004c6c <updateCanPayload+0x2fc>)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	18d1      	adds	r1, r2, r3
 8004c12:	f04f 0200 	mov.w	r2, #0
 8004c16:	f04f 0300 	mov.w	r3, #0
 8004c1a:	e9c1 2300 	strd	r2, r3, [r1]
		/* Added constant string in place of multiple strcat - 18/02/2021 Milind Vaze*/
//		strcat((char *)systemPayload,"00,00,00,00,00,00,00,00,");
		strcat((char *)systemPayload,"0000000000000000,");

	}
}//end of void updateCanPayload(uint32_t data ,char * systemPayload )
 8004c1e:	e018      	b.n	8004c52 <updateCanPayload+0x2e2>
	else if(gu64CanMessageArray[data] == 0 )
 8004c20:	4a12      	ldr	r2, [pc, #72]	; (8004c6c <updateCanPayload+0x2fc>)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	00db      	lsls	r3, r3, #3
 8004c26:	4413      	add	r3, r2
 8004c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	d110      	bne.n	8004c52 <updateCanPayload+0x2e2>
		strcat((char *)systemPayload,"0000000000000000,");
 8004c30:	6838      	ldr	r0, [r7, #0]
 8004c32:	f7fb fed7 	bl	80009e4 <strlen>
 8004c36:	4603      	mov	r3, r0
 8004c38:	461a      	mov	r2, r3
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	4a0d      	ldr	r2, [pc, #52]	; (8004c74 <updateCanPayload+0x304>)
 8004c40:	461d      	mov	r5, r3
 8004c42:	4614      	mov	r4, r2
 8004c44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c46:	6028      	str	r0, [r5, #0]
 8004c48:	6069      	str	r1, [r5, #4]
 8004c4a:	60aa      	str	r2, [r5, #8]
 8004c4c:	60eb      	str	r3, [r5, #12]
 8004c4e:	8823      	ldrh	r3, [r4, #0]
 8004c50:	822b      	strh	r3, [r5, #16]
}//end of void updateCanPayload(uint32_t data ,char * systemPayload )
 8004c52:	bf00      	nop
 8004c54:	3720      	adds	r7, #32
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bdb0      	pop	{r4, r5, r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	20001000 	.word	0x20001000
 8004c60:	0801b6b0 	.word	0x0801b6b0
 8004c64:	0801b674 	.word	0x0801b674
 8004c68:	0801b6b8 	.word	0x0801b6b8
 8004c6c:	20001b40 	.word	0x20001b40
 8004c70:	0801b6c8 	.word	0x0801b6c8
 8004c74:	0801b6d0 	.word	0x0801b6d0

08004c78 <PaylodTime>:

	}
}

void PaylodTime(char * systemPayload)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
	getrtcStamp();
 8004c80:	f005 fa0a 	bl	800a098 <getrtcStamp>

	/*System Time Stamp */
	strcat((char *)systemPayload,(char * )gau8Date);
 8004c84:	4931      	ldr	r1, [pc, #196]	; (8004d4c <PaylodTime+0xd4>)
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f011 fe78 	bl	801697c <strcat>
	strcat((char *)systemPayload,(char * )"/");
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f7fb fea9 	bl	80009e4 <strlen>
 8004c92:	4603      	mov	r3, r0
 8004c94:	461a      	mov	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4413      	add	r3, r2
 8004c9a:	492d      	ldr	r1, [pc, #180]	; (8004d50 <PaylodTime+0xd8>)
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	881b      	ldrh	r3, [r3, #0]
 8004ca2:	8013      	strh	r3, [r2, #0]
	strcat((char *)systemPayload,(char * )gau8Month);
 8004ca4:	492b      	ldr	r1, [pc, #172]	; (8004d54 <PaylodTime+0xdc>)
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f011 fe68 	bl	801697c <strcat>
	strcat((char *)systemPayload,(char * )"/");
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7fb fe99 	bl	80009e4 <strlen>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4413      	add	r3, r2
 8004cba:	4925      	ldr	r1, [pc, #148]	; (8004d50 <PaylodTime+0xd8>)
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	8013      	strh	r3, [r2, #0]
	strcat((char *)systemPayload,(char * )gau8Year);
 8004cc4:	4924      	ldr	r1, [pc, #144]	; (8004d58 <PaylodTime+0xe0>)
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f011 fe58 	bl	801697c <strcat>
	strcat((char *)systemPayload,(char * )" ");
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7fb fe89 	bl	80009e4 <strlen>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4413      	add	r3, r2
 8004cda:	4920      	ldr	r1, [pc, #128]	; (8004d5c <PaylodTime+0xe4>)
 8004cdc:	461a      	mov	r2, r3
 8004cde:	460b      	mov	r3, r1
 8004ce0:	881b      	ldrh	r3, [r3, #0]
 8004ce2:	8013      	strh	r3, [r2, #0]
	strcat((char *)systemPayload,(char * )gau8Hour);
 8004ce4:	491e      	ldr	r1, [pc, #120]	; (8004d60 <PaylodTime+0xe8>)
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f011 fe48 	bl	801697c <strcat>
	strcat((char *)systemPayload,(char * )":");
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f7fb fe79 	bl	80009e4 <strlen>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	491a      	ldr	r1, [pc, #104]	; (8004d64 <PaylodTime+0xec>)
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	460b      	mov	r3, r1
 8004d00:	881b      	ldrh	r3, [r3, #0]
 8004d02:	8013      	strh	r3, [r2, #0]
	strcat((char *)systemPayload,(char * )gau8Minutes);
 8004d04:	4918      	ldr	r1, [pc, #96]	; (8004d68 <PaylodTime+0xf0>)
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f011 fe38 	bl	801697c <strcat>
	strcat((char *)systemPayload,(char * )":");
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7fb fe69 	bl	80009e4 <strlen>
 8004d12:	4603      	mov	r3, r0
 8004d14:	461a      	mov	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4413      	add	r3, r2
 8004d1a:	4912      	ldr	r1, [pc, #72]	; (8004d64 <PaylodTime+0xec>)
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	460b      	mov	r3, r1
 8004d20:	881b      	ldrh	r3, [r3, #0]
 8004d22:	8013      	strh	r3, [r2, #0]
	strcat((char *)systemPayload,(char * )gau8Seconds);
 8004d24:	4911      	ldr	r1, [pc, #68]	; (8004d6c <PaylodTime+0xf4>)
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f011 fe28 	bl	801697c <strcat>
	strcat((char *)systemPayload,(char * )",");
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f7fb fe59 	bl	80009e4 <strlen>
 8004d32:	4603      	mov	r3, r0
 8004d34:	461a      	mov	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4413      	add	r3, r2
 8004d3a:	490d      	ldr	r1, [pc, #52]	; (8004d70 <PaylodTime+0xf8>)
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	460b      	mov	r3, r1
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	8013      	strh	r3, [r2, #0]
}//end of void PaylodTime(char * systemPayload)
 8004d44:	bf00      	nop
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	20001450 	.word	0x20001450
 8004d50:	0801b6e4 	.word	0x0801b6e4
 8004d54:	2000144c 	.word	0x2000144c
 8004d58:	20001444 	.word	0x20001444
 8004d5c:	0801b6e8 	.word	0x0801b6e8
 8004d60:	20001454 	.word	0x20001454
 8004d64:	0801b6ec 	.word	0x0801b6ec
 8004d68:	20001458 	.word	0x20001458
 8004d6c:	2000145c 	.word	0x2000145c
 8004d70:	0801b674 	.word	0x0801b674

08004d74 <GPS_SperateString>:

void GPS_SperateString()
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
	uint32_t LoopCounter = 0;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	617b      	str	r3, [r7, #20]
	uint32_t CopyCounter = 0;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	613b      	str	r3, [r7, #16]
	uint8_t genric_Cnt = 0;
 8004d82:	2300      	movs	r3, #0
 8004d84:	73fb      	strb	r3, [r7, #15]


	/* Skip ,*/
	for(LoopCounter = 0; gsmInstance.agpsLocationData[LoopCounter] != ','; LoopCounter++)
 8004d86:	2300      	movs	r3, #0
 8004d88:	617b      	str	r3, [r7, #20]
 8004d8a:	e002      	b.n	8004d92 <GPS_SperateString+0x1e>
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	617b      	str	r3, [r7, #20]
 8004d92:	4a90      	ldr	r2, [pc, #576]	; (8004fd4 <GPS_SperateString+0x260>)
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	4413      	add	r3, r2
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	2b2c      	cmp	r3, #44	; 0x2c
 8004d9c:	d1f6      	bne.n	8004d8c <GPS_SperateString+0x18>
	{
		// Nothing to do
	}
	gsmInstance.agpsTempData[CopyCounter++] = gsmInstance.agpsLocationData[LoopCounter];//,
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	613a      	str	r2, [r7, #16]
 8004da4:	498b      	ldr	r1, [pc, #556]	; (8004fd4 <GPS_SperateString+0x260>)
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	440a      	add	r2, r1
 8004daa:	7811      	ldrb	r1, [r2, #0]
 8004dac:	4a89      	ldr	r2, [pc, #548]	; (8004fd4 <GPS_SperateString+0x260>)
 8004dae:	4413      	add	r3, r2
 8004db0:	460a      	mov	r2, r1
 8004db2:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	LoopCounter++;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	3301      	adds	r3, #1
 8004dba:	617b      	str	r3, [r7, #20]
	if(gsmInstance.agpsLocationData[LoopCounter] != ',')
 8004dbc:	4a85      	ldr	r2, [pc, #532]	; (8004fd4 <GPS_SperateString+0x260>)
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	2b2c      	cmp	r3, #44	; 0x2c
 8004dc6:	d02a      	beq.n	8004e1e <GPS_SperateString+0xaa>
	{

		for(; gsmInstance.agpsLocationData[LoopCounter] != '.'; LoopCounter++)
 8004dc8:	e019      	b.n	8004dfe <GPS_SperateString+0x8a>
		{
		// Get date time
			gsmInstance.agpsTempData[CopyCounter] = gsmInstance.agpsLocationData[LoopCounter];
 8004dca:	4a82      	ldr	r2, [pc, #520]	; (8004fd4 <GPS_SperateString+0x260>)
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	4413      	add	r3, r2
 8004dd0:	7819      	ldrb	r1, [r3, #0]
 8004dd2:	4a80      	ldr	r2, [pc, #512]	; (8004fd4 <GPS_SperateString+0x260>)
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	3396      	adds	r3, #150	; 0x96
 8004dda:	460a      	mov	r2, r1
 8004ddc:	701a      	strb	r2, [r3, #0]
			GPSUTCTIME[genric_Cnt]=gsmInstance.agpsLocationData[LoopCounter];
 8004dde:	7bfb      	ldrb	r3, [r7, #15]
 8004de0:	497c      	ldr	r1, [pc, #496]	; (8004fd4 <GPS_SperateString+0x260>)
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	440a      	add	r2, r1
 8004de6:	7811      	ldrb	r1, [r2, #0]
 8004de8:	4a7b      	ldr	r2, [pc, #492]	; (8004fd8 <GPS_SperateString+0x264>)
 8004dea:	54d1      	strb	r1, [r2, r3]
			genric_Cnt++;
 8004dec:	7bfb      	ldrb	r3, [r7, #15]
 8004dee:	3301      	adds	r3, #1
 8004df0:	73fb      	strb	r3, [r7, #15]
			CopyCounter++;
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	3301      	adds	r3, #1
 8004df6:	613b      	str	r3, [r7, #16]
		for(; gsmInstance.agpsLocationData[LoopCounter] != '.'; LoopCounter++)
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	617b      	str	r3, [r7, #20]
 8004dfe:	4a75      	ldr	r2, [pc, #468]	; (8004fd4 <GPS_SperateString+0x260>)
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	4413      	add	r3, r2
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	2b2e      	cmp	r3, #46	; 0x2e
 8004e08:	d1df      	bne.n	8004dca <GPS_SperateString+0x56>
//		sprintf(u32GPSUTCTime[2],"%02X", GPSUTCTIME[2]);
//		sprintf(u32GPSUTCTime[3],"%02X", GPSUTCTIME[3]);
//		sprintf(u32GPSUTCTime[4],"%02X", GPSUTCTIME[4]);
//		sprintf(u32GPSUTCTime[5],"%02X", GPSUTCTIME[5]);
	/* Skip ms and 2nd ,*/
		for(; gsmInstance.agpsLocationData[LoopCounter] != ','; LoopCounter++)
 8004e0a:	e002      	b.n	8004e12 <GPS_SperateString+0x9e>
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	3301      	adds	r3, #1
 8004e10:	617b      	str	r3, [r7, #20]
 8004e12:	4a70      	ldr	r2, [pc, #448]	; (8004fd4 <GPS_SperateString+0x260>)
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	4413      	add	r3, r2
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	2b2c      	cmp	r3, #44	; 0x2c
 8004e1c:	d1f6      	bne.n	8004e0c <GPS_SperateString+0x98>
		{
			// Nothing to do
		}
	}
	gsmInstance.agpsTempData[CopyCounter++] = gsmInstance.agpsLocationData[LoopCounter];//','
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	1c5a      	adds	r2, r3, #1
 8004e22:	613a      	str	r2, [r7, #16]
 8004e24:	496b      	ldr	r1, [pc, #428]	; (8004fd4 <GPS_SperateString+0x260>)
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	440a      	add	r2, r1
 8004e2a:	7811      	ldrb	r1, [r2, #0]
 8004e2c:	4a69      	ldr	r2, [pc, #420]	; (8004fd4 <GPS_SperateString+0x260>)
 8004e2e:	4413      	add	r3, r2
 8004e30:	460a      	mov	r2, r1
 8004e32:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	LoopCounter++;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	617b      	str	r3, [r7, #20]
	if(gsmInstance.agpsLocationData[LoopCounter] == 'A')
 8004e3c:	4a65      	ldr	r2, [pc, #404]	; (8004fd4 <GPS_SperateString+0x260>)
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	4413      	add	r3, r2
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	2b41      	cmp	r3, #65	; 0x41
 8004e46:	d10a      	bne.n	8004e5e <GPS_SperateString+0xea>
	{
		HAL_GPIO_WritePin( GPS_LED_GPIO_Port,  GPS_LED_Pin, GPIO_PIN_SET);
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e52:	f00a f8f5 	bl	800f040 <HAL_GPIO_WritePin>
		TelematicHeartBeat[enumTeleHearBeat_GPS_STATUS]=0x01;
 8004e56:	4b61      	ldr	r3, [pc, #388]	; (8004fdc <GPS_SperateString+0x268>)
 8004e58:	2201      	movs	r2, #1
 8004e5a:	705a      	strb	r2, [r3, #1]
 8004e5c:	e00d      	b.n	8004e7a <GPS_SperateString+0x106>
	}
	else
	{
		HAL_GPIO_WritePin( GPS_LED_GPIO_Port,  GPS_LED_Pin, GPIO_PIN_RESET);
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e68:	f00a f8ea 	bl	800f040 <HAL_GPIO_WritePin>
		TelematicHeartBeat[enumTeleHearBeat_GPS_STATUS]=0x00;
 8004e6c:	4b5b      	ldr	r3, [pc, #364]	; (8004fdc <GPS_SperateString+0x268>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	705a      	strb	r2, [r3, #1]
	}

	for(; gsmInstance.agpsLocationData[LoopCounter] != ','; LoopCounter++)
 8004e72:	e002      	b.n	8004e7a <GPS_SperateString+0x106>
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	3301      	adds	r3, #1
 8004e78:	617b      	str	r3, [r7, #20]
 8004e7a:	4a56      	ldr	r2, [pc, #344]	; (8004fd4 <GPS_SperateString+0x260>)
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	4413      	add	r3, r2
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	2b2c      	cmp	r3, #44	; 0x2c
 8004e84:	d1f6      	bne.n	8004e74 <GPS_SperateString+0x100>
	{
		// Nothing to do
	}
	LoopCounter++;
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	617b      	str	r3, [r7, #20]
	genric_Cnt = 0;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	73fb      	strb	r3, [r7, #15]
	memset(GPS_LAT,0x00,sizeof(GPS_LAT));
 8004e90:	220a      	movs	r2, #10
 8004e92:	2100      	movs	r1, #0
 8004e94:	4852      	ldr	r0, [pc, #328]	; (8004fe0 <GPS_SperateString+0x26c>)
 8004e96:	f010 fda7 	bl	80159e8 <memset>
	for(; gsmInstance.agpsLocationData[LoopCounter] != ','; LoopCounter++)
 8004e9a:	e019      	b.n	8004ed0 <GPS_SperateString+0x15c>
	{
		//LAT
		gsmInstance.agpsTempData[CopyCounter] = gsmInstance.agpsLocationData[LoopCounter];
 8004e9c:	4a4d      	ldr	r2, [pc, #308]	; (8004fd4 <GPS_SperateString+0x260>)
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	7819      	ldrb	r1, [r3, #0]
 8004ea4:	4a4b      	ldr	r2, [pc, #300]	; (8004fd4 <GPS_SperateString+0x260>)
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	3396      	adds	r3, #150	; 0x96
 8004eac:	460a      	mov	r2, r1
 8004eae:	701a      	strb	r2, [r3, #0]
		GPS_LAT[genric_Cnt++] = gsmInstance.agpsLocationData[LoopCounter];
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
 8004eb2:	1c5a      	adds	r2, r3, #1
 8004eb4:	73fa      	strb	r2, [r7, #15]
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	4a46      	ldr	r2, [pc, #280]	; (8004fd4 <GPS_SperateString+0x260>)
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	781a      	ldrb	r2, [r3, #0]
 8004ec0:	4b47      	ldr	r3, [pc, #284]	; (8004fe0 <GPS_SperateString+0x26c>)
 8004ec2:	545a      	strb	r2, [r3, r1]
		CopyCounter++;
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	613b      	str	r3, [r7, #16]
	for(; gsmInstance.agpsLocationData[LoopCounter] != ','; LoopCounter++)
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	617b      	str	r3, [r7, #20]
 8004ed0:	4a40      	ldr	r2, [pc, #256]	; (8004fd4 <GPS_SperateString+0x260>)
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	2b2c      	cmp	r3, #44	; 0x2c
 8004eda:	d1df      	bne.n	8004e9c <GPS_SperateString+0x128>
	}
	if(strlen(GPS_LAT)!=0)
 8004edc:	4b40      	ldr	r3, [pc, #256]	; (8004fe0 <GPS_SperateString+0x26c>)
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d03a      	beq.n	8004f5a <GPS_SperateString+0x1e6>
	{
		float templat = 0;
 8004ee4:	f04f 0300 	mov.w	r3, #0
 8004ee8:	60bb      	str	r3, [r7, #8]
		templat = atof(&GPS_LAT[2]);
 8004eea:	483e      	ldr	r0, [pc, #248]	; (8004fe4 <GPS_SperateString+0x270>)
 8004eec:	f010 fd0e 	bl	801590c <atof>
 8004ef0:	ec53 2b10 	vmov	r2, r3, d0
 8004ef4:	4610      	mov	r0, r2
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	f7fc fa86 	bl	8001408 <__aeabi_d2f>
 8004efc:	4603      	mov	r3, r0
 8004efe:	60bb      	str	r3, [r7, #8]
		templat /= 60;
 8004f00:	ed97 7a02 	vldr	s14, [r7, #8]
 8004f04:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004fe8 <GPS_SperateString+0x274>
 8004f08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f0c:	edc7 7a02 	vstr	s15, [r7, #8]
		templat += (((GPS_LAT[0]-'0') * 10) + (GPS_LAT[1]-'0'));
 8004f10:	4b33      	ldr	r3, [pc, #204]	; (8004fe0 <GPS_SperateString+0x26c>)
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004f18:	4613      	mov	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	461a      	mov	r2, r3
 8004f22:	4b2f      	ldr	r3, [pc, #188]	; (8004fe0 <GPS_SperateString+0x26c>)
 8004f24:	785b      	ldrb	r3, [r3, #1]
 8004f26:	3b30      	subs	r3, #48	; 0x30
 8004f28:	4413      	add	r3, r2
 8004f2a:	ee07 3a90 	vmov	s15, r3
 8004f2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f32:	ed97 7a02 	vldr	s14, [r7, #8]
 8004f36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f3a:	edc7 7a02 	vstr	s15, [r7, #8]
		memset(GPS_LAT,0x00,sizeof(GPS_LAT));
 8004f3e:	220a      	movs	r2, #10
 8004f40:	2100      	movs	r1, #0
 8004f42:	4827      	ldr	r0, [pc, #156]	; (8004fe0 <GPS_SperateString+0x26c>)
 8004f44:	f010 fd50 	bl	80159e8 <memset>
		sprintf(GPS_LAT,"%.7f",templat);
 8004f48:	68b8      	ldr	r0, [r7, #8]
 8004f4a:	f7fb ff0d 	bl	8000d68 <__aeabi_f2d>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	460b      	mov	r3, r1
 8004f52:	4926      	ldr	r1, [pc, #152]	; (8004fec <GPS_SperateString+0x278>)
 8004f54:	4822      	ldr	r0, [pc, #136]	; (8004fe0 <GPS_SperateString+0x26c>)
 8004f56:	f011 fcf1 	bl	801693c <siprintf>
	}
	gsmInstance.agpsTempData[CopyCounter++] = gsmInstance.agpsLocationData[LoopCounter];//','
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	1c5a      	adds	r2, r3, #1
 8004f5e:	613a      	str	r2, [r7, #16]
 8004f60:	491c      	ldr	r1, [pc, #112]	; (8004fd4 <GPS_SperateString+0x260>)
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	440a      	add	r2, r1
 8004f66:	7811      	ldrb	r1, [r2, #0]
 8004f68:	4a1a      	ldr	r2, [pc, #104]	; (8004fd4 <GPS_SperateString+0x260>)
 8004f6a:	4413      	add	r3, r2
 8004f6c:	460a      	mov	r2, r1
 8004f6e:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	LoopCounter++;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	3301      	adds	r3, #1
 8004f76:	617b      	str	r3, [r7, #20]
	for(; gsmInstance.agpsLocationData[LoopCounter] != ','; LoopCounter++)
 8004f78:	e00f      	b.n	8004f9a <GPS_SperateString+0x226>
	{
		//N/S
		gsmInstance.agpsTempData[CopyCounter] = gsmInstance.agpsLocationData[LoopCounter];
 8004f7a:	4a16      	ldr	r2, [pc, #88]	; (8004fd4 <GPS_SperateString+0x260>)
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	4413      	add	r3, r2
 8004f80:	7819      	ldrb	r1, [r3, #0]
 8004f82:	4a14      	ldr	r2, [pc, #80]	; (8004fd4 <GPS_SperateString+0x260>)
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	4413      	add	r3, r2
 8004f88:	3396      	adds	r3, #150	; 0x96
 8004f8a:	460a      	mov	r2, r1
 8004f8c:	701a      	strb	r2, [r3, #0]
		CopyCounter++;
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	3301      	adds	r3, #1
 8004f92:	613b      	str	r3, [r7, #16]
	for(; gsmInstance.agpsLocationData[LoopCounter] != ','; LoopCounter++)
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	3301      	adds	r3, #1
 8004f98:	617b      	str	r3, [r7, #20]
 8004f9a:	4a0e      	ldr	r2, [pc, #56]	; (8004fd4 <GPS_SperateString+0x260>)
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	2b2c      	cmp	r3, #44	; 0x2c
 8004fa4:	d1e9      	bne.n	8004f7a <GPS_SperateString+0x206>
	}
	gsmInstance.agpsTempData[CopyCounter++] = gsmInstance.agpsLocationData[LoopCounter];//','
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	1c5a      	adds	r2, r3, #1
 8004faa:	613a      	str	r2, [r7, #16]
 8004fac:	4909      	ldr	r1, [pc, #36]	; (8004fd4 <GPS_SperateString+0x260>)
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	440a      	add	r2, r1
 8004fb2:	7811      	ldrb	r1, [r2, #0]
 8004fb4:	4a07      	ldr	r2, [pc, #28]	; (8004fd4 <GPS_SperateString+0x260>)
 8004fb6:	4413      	add	r3, r2
 8004fb8:	460a      	mov	r2, r1
 8004fba:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	LoopCounter++;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	617b      	str	r3, [r7, #20]
	genric_Cnt = 0;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	73fb      	strb	r3, [r7, #15]
	memset(GPS_LONG,0x00,sizeof(GPS_LONG));
 8004fc8:	220a      	movs	r2, #10
 8004fca:	2100      	movs	r1, #0
 8004fcc:	4808      	ldr	r0, [pc, #32]	; (8004ff0 <GPS_SperateString+0x27c>)
 8004fce:	f010 fd0b 	bl	80159e8 <memset>
	for(; gsmInstance.agpsLocationData[LoopCounter] != ','; LoopCounter++)
 8004fd2:	e029      	b.n	8005028 <GPS_SperateString+0x2b4>
 8004fd4:	200023e4 	.word	0x200023e4
 8004fd8:	20001a90 	.word	0x20001a90
 8004fdc:	20002018 	.word	0x20002018
 8004fe0:	20001a98 	.word	0x20001a98
 8004fe4:	20001a9a 	.word	0x20001a9a
 8004fe8:	42700000 	.word	0x42700000
 8004fec:	0801b6f0 	.word	0x0801b6f0
 8004ff0:	20001aa4 	.word	0x20001aa4
	{
		//LONG
		gsmInstance.agpsTempData[CopyCounter] = gsmInstance.agpsLocationData[LoopCounter];
 8004ff4:	4a73      	ldr	r2, [pc, #460]	; (80051c4 <GPS_SperateString+0x450>)
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	7819      	ldrb	r1, [r3, #0]
 8004ffc:	4a71      	ldr	r2, [pc, #452]	; (80051c4 <GPS_SperateString+0x450>)
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	4413      	add	r3, r2
 8005002:	3396      	adds	r3, #150	; 0x96
 8005004:	460a      	mov	r2, r1
 8005006:	701a      	strb	r2, [r3, #0]
		GPS_LONG[genric_Cnt++] = gsmInstance.agpsLocationData[LoopCounter];
 8005008:	7bfb      	ldrb	r3, [r7, #15]
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	73fa      	strb	r2, [r7, #15]
 800500e:	4619      	mov	r1, r3
 8005010:	4a6c      	ldr	r2, [pc, #432]	; (80051c4 <GPS_SperateString+0x450>)
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	4413      	add	r3, r2
 8005016:	781a      	ldrb	r2, [r3, #0]
 8005018:	4b6b      	ldr	r3, [pc, #428]	; (80051c8 <GPS_SperateString+0x454>)
 800501a:	545a      	strb	r2, [r3, r1]
		CopyCounter++;
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	3301      	adds	r3, #1
 8005020:	613b      	str	r3, [r7, #16]
	for(; gsmInstance.agpsLocationData[LoopCounter] != ','; LoopCounter++)
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	3301      	adds	r3, #1
 8005026:	617b      	str	r3, [r7, #20]
 8005028:	4a66      	ldr	r2, [pc, #408]	; (80051c4 <GPS_SperateString+0x450>)
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	4413      	add	r3, r2
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	2b2c      	cmp	r3, #44	; 0x2c
 8005032:	d1df      	bne.n	8004ff4 <GPS_SperateString+0x280>
	}
	if(strlen(GPS_LONG)!=0)
 8005034:	4b64      	ldr	r3, [pc, #400]	; (80051c8 <GPS_SperateString+0x454>)
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d040      	beq.n	80050be <GPS_SperateString+0x34a>
	{
		float templon = 0;
 800503c:	f04f 0300 	mov.w	r3, #0
 8005040:	607b      	str	r3, [r7, #4]
		templon = atof(&GPS_LONG[3]);
 8005042:	4862      	ldr	r0, [pc, #392]	; (80051cc <GPS_SperateString+0x458>)
 8005044:	f010 fc62 	bl	801590c <atof>
 8005048:	ec53 2b10 	vmov	r2, r3, d0
 800504c:	4610      	mov	r0, r2
 800504e:	4619      	mov	r1, r3
 8005050:	f7fc f9da 	bl	8001408 <__aeabi_d2f>
 8005054:	4603      	mov	r3, r0
 8005056:	607b      	str	r3, [r7, #4]
		templon /= 60;
 8005058:	ed97 7a01 	vldr	s14, [r7, #4]
 800505c:	eddf 6a5c 	vldr	s13, [pc, #368]	; 80051d0 <GPS_SperateString+0x45c>
 8005060:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005064:	edc7 7a01 	vstr	s15, [r7, #4]
		templon += (((GPS_LONG[0]- '0') * 100 )+ ((GPS_LONG[1]-'0') * 10) +(GPS_LONG[2]-'0'));
 8005068:	4b57      	ldr	r3, [pc, #348]	; (80051c8 <GPS_SperateString+0x454>)
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	3b30      	subs	r3, #48	; 0x30
 800506e:	2264      	movs	r2, #100	; 0x64
 8005070:	fb02 f103 	mul.w	r1, r2, r3
 8005074:	4b54      	ldr	r3, [pc, #336]	; (80051c8 <GPS_SperateString+0x454>)
 8005076:	785b      	ldrb	r3, [r3, #1]
 8005078:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800507c:	4613      	mov	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	18ca      	adds	r2, r1, r3
 8005086:	4b50      	ldr	r3, [pc, #320]	; (80051c8 <GPS_SperateString+0x454>)
 8005088:	789b      	ldrb	r3, [r3, #2]
 800508a:	3b30      	subs	r3, #48	; 0x30
 800508c:	4413      	add	r3, r2
 800508e:	ee07 3a90 	vmov	s15, r3
 8005092:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005096:	ed97 7a01 	vldr	s14, [r7, #4]
 800509a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800509e:	edc7 7a01 	vstr	s15, [r7, #4]
		memset(GPS_LONG,0x00,sizeof(GPS_LONG));
 80050a2:	220a      	movs	r2, #10
 80050a4:	2100      	movs	r1, #0
 80050a6:	4848      	ldr	r0, [pc, #288]	; (80051c8 <GPS_SperateString+0x454>)
 80050a8:	f010 fc9e 	bl	80159e8 <memset>
		sprintf(GPS_LONG,"%.7f",templon);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7fb fe5b 	bl	8000d68 <__aeabi_f2d>
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	4947      	ldr	r1, [pc, #284]	; (80051d4 <GPS_SperateString+0x460>)
 80050b8:	4843      	ldr	r0, [pc, #268]	; (80051c8 <GPS_SperateString+0x454>)
 80050ba:	f011 fc3f 	bl	801693c <siprintf>
	}

	gsmInstance.agpsTempData[CopyCounter++] = gsmInstance.agpsLocationData[LoopCounter];//','
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	1c5a      	adds	r2, r3, #1
 80050c2:	613a      	str	r2, [r7, #16]
 80050c4:	493f      	ldr	r1, [pc, #252]	; (80051c4 <GPS_SperateString+0x450>)
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	440a      	add	r2, r1
 80050ca:	7811      	ldrb	r1, [r2, #0]
 80050cc:	4a3d      	ldr	r2, [pc, #244]	; (80051c4 <GPS_SperateString+0x450>)
 80050ce:	4413      	add	r3, r2
 80050d0:	460a      	mov	r2, r1
 80050d2:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	LoopCounter++;
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	3301      	adds	r3, #1
 80050da:	617b      	str	r3, [r7, #20]
	for(; gsmInstance.agpsLocationData[LoopCounter] != ','; LoopCounter++)
 80050dc:	e00f      	b.n	80050fe <GPS_SperateString+0x38a>
	{
		//E/W
		gsmInstance.agpsTempData[CopyCounter] = gsmInstance.agpsLocationData[LoopCounter];
 80050de:	4a39      	ldr	r2, [pc, #228]	; (80051c4 <GPS_SperateString+0x450>)
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	4413      	add	r3, r2
 80050e4:	7819      	ldrb	r1, [r3, #0]
 80050e6:	4a37      	ldr	r2, [pc, #220]	; (80051c4 <GPS_SperateString+0x450>)
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	4413      	add	r3, r2
 80050ec:	3396      	adds	r3, #150	; 0x96
 80050ee:	460a      	mov	r2, r1
 80050f0:	701a      	strb	r2, [r3, #0]
		CopyCounter++;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	3301      	adds	r3, #1
 80050f6:	613b      	str	r3, [r7, #16]
	for(; gsmInstance.agpsLocationData[LoopCounter] != ','; LoopCounter++)
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	3301      	adds	r3, #1
 80050fc:	617b      	str	r3, [r7, #20]
 80050fe:	4a31      	ldr	r2, [pc, #196]	; (80051c4 <GPS_SperateString+0x450>)
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	4413      	add	r3, r2
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	2b2c      	cmp	r3, #44	; 0x2c
 8005108:	d1e9      	bne.n	80050de <GPS_SperateString+0x36a>
	}
	gsmInstance.agpsTempData[CopyCounter++] = gsmInstance.agpsLocationData[LoopCounter];//','
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	613a      	str	r2, [r7, #16]
 8005110:	492c      	ldr	r1, [pc, #176]	; (80051c4 <GPS_SperateString+0x450>)
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	440a      	add	r2, r1
 8005116:	7811      	ldrb	r1, [r2, #0]
 8005118:	4a2a      	ldr	r2, [pc, #168]	; (80051c4 <GPS_SperateString+0x450>)
 800511a:	4413      	add	r3, r2
 800511c:	460a      	mov	r2, r1
 800511e:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	LoopCounter++;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	3301      	adds	r3, #1
 8005126:	617b      	str	r3, [r7, #20]
	genric_Cnt = 0;
 8005128:	2300      	movs	r3, #0
 800512a:	73fb      	strb	r3, [r7, #15]
	for(; gsmInstance.agpsLocationData[LoopCounter] != ','; LoopCounter++)
 800512c:	e00c      	b.n	8005148 <GPS_SperateString+0x3d4>
	{
		GPS_SPEED_OVR_GND[genric_Cnt++]=gsmInstance.agpsLocationData[LoopCounter];
 800512e:	7bfb      	ldrb	r3, [r7, #15]
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	73fa      	strb	r2, [r7, #15]
 8005134:	4619      	mov	r1, r3
 8005136:	4a23      	ldr	r2, [pc, #140]	; (80051c4 <GPS_SperateString+0x450>)
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	4413      	add	r3, r2
 800513c:	781a      	ldrb	r2, [r3, #0]
 800513e:	4b26      	ldr	r3, [pc, #152]	; (80051d8 <GPS_SperateString+0x464>)
 8005140:	545a      	strb	r2, [r3, r1]
	for(; gsmInstance.agpsLocationData[LoopCounter] != ','; LoopCounter++)
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	3301      	adds	r3, #1
 8005146:	617b      	str	r3, [r7, #20]
 8005148:	4a1e      	ldr	r2, [pc, #120]	; (80051c4 <GPS_SperateString+0x450>)
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	4413      	add	r3, r2
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	2b2c      	cmp	r3, #44	; 0x2c
 8005152:	d1ec      	bne.n	800512e <GPS_SperateString+0x3ba>
		//Speed Over Ground
		// Nothing to do
	}
	LoopCounter++;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	3301      	adds	r3, #1
 8005158:	617b      	str	r3, [r7, #20]
	for(; gsmInstance.agpsLocationData[LoopCounter] != ','; LoopCounter++)
 800515a:	e002      	b.n	8005162 <GPS_SperateString+0x3ee>
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	3301      	adds	r3, #1
 8005160:	617b      	str	r3, [r7, #20]
 8005162:	4a18      	ldr	r2, [pc, #96]	; (80051c4 <GPS_SperateString+0x450>)
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	4413      	add	r3, r2
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	2b2c      	cmp	r3, #44	; 0x2c
 800516c:	d1f6      	bne.n	800515c <GPS_SperateString+0x3e8>
	{
		//Course Over Ground
		// Nothing to do
	}
	LoopCounter++;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	3301      	adds	r3, #1
 8005172:	617b      	str	r3, [r7, #20]
	genric_Cnt = 0;
 8005174:	2300      	movs	r3, #0
 8005176:	73fb      	strb	r3, [r7, #15]
	for(; gsmInstance.agpsLocationData[LoopCounter] != ','; LoopCounter++)
 8005178:	e019      	b.n	80051ae <GPS_SperateString+0x43a>
	{
		//Date
		gsmInstance.agpsTempData[CopyCounter] = gsmInstance.agpsLocationData[LoopCounter];
 800517a:	4a12      	ldr	r2, [pc, #72]	; (80051c4 <GPS_SperateString+0x450>)
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	4413      	add	r3, r2
 8005180:	7819      	ldrb	r1, [r3, #0]
 8005182:	4a10      	ldr	r2, [pc, #64]	; (80051c4 <GPS_SperateString+0x450>)
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	4413      	add	r3, r2
 8005188:	3396      	adds	r3, #150	; 0x96
 800518a:	460a      	mov	r2, r1
 800518c:	701a      	strb	r2, [r3, #0]
		GPSUTCDATE[genric_Cnt++] = gsmInstance.agpsLocationData[LoopCounter];
 800518e:	7bfb      	ldrb	r3, [r7, #15]
 8005190:	1c5a      	adds	r2, r3, #1
 8005192:	73fa      	strb	r2, [r7, #15]
 8005194:	4619      	mov	r1, r3
 8005196:	4a0b      	ldr	r2, [pc, #44]	; (80051c4 <GPS_SperateString+0x450>)
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	4413      	add	r3, r2
 800519c:	781a      	ldrb	r2, [r3, #0]
 800519e:	4b0f      	ldr	r3, [pc, #60]	; (80051dc <GPS_SperateString+0x468>)
 80051a0:	545a      	strb	r2, [r3, r1]
		CopyCounter++;
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	3301      	adds	r3, #1
 80051a6:	613b      	str	r3, [r7, #16]
	for(; gsmInstance.agpsLocationData[LoopCounter] != ','; LoopCounter++)
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	3301      	adds	r3, #1
 80051ac:	617b      	str	r3, [r7, #20]
 80051ae:	4a05      	ldr	r2, [pc, #20]	; (80051c4 <GPS_SperateString+0x450>)
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	4413      	add	r3, r2
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	2b2c      	cmp	r3, #44	; 0x2c
 80051b8:	d1df      	bne.n	800517a <GPS_SperateString+0x406>
	}
}
 80051ba:	bf00      	nop
 80051bc:	bf00      	nop
 80051be:	3718      	adds	r7, #24
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	200023e4 	.word	0x200023e4
 80051c8:	20001aa4 	.word	0x20001aa4
 80051cc:	20001aa7 	.word	0x20001aa7
 80051d0:	42700000 	.word	0x42700000
 80051d4:	0801b6f0 	.word	0x0801b6f0
 80051d8:	20001ab0 	.word	0x20001ab0
 80051dc:	20001a88 	.word	0x20001a88

080051e0 <Diagnostic>:



void Diagnostic(enmDiagnosticStatus DiagnosticStatus)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	4603      	mov	r3, r0
 80051e8:	71fb      	strb	r3, [r7, #7]
	Queue_LiveEnequeue(&gsmLivePayload,(char *)getDiagDataString(DiagnosticStatus));
 80051ea:	79fb      	ldrb	r3, [r7, #7]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 f80b 	bl	8005208 <getDiagDataString>
 80051f2:	4603      	mov	r3, r0
 80051f4:	4619      	mov	r1, r3
 80051f6:	4803      	ldr	r0, [pc, #12]	; (8005204 <Diagnostic+0x24>)
 80051f8:	f000 fe80 	bl	8005efc <Queue_LiveEnequeue>

}
 80051fc:	bf00      	nop
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	200023b4 	.word	0x200023b4

08005208 <getDiagDataString>:

char * getDiagDataString(enmDiagnosticStatus DiagnosticStatus)
{
 8005208:	b5b0      	push	{r4, r5, r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	4603      	mov	r3, r0
 8005210:	71fb      	strb	r3, [r7, #7]

	char * systemPayload = (char*)malloc(sizeof(char) * GSM_PAYLOAD_MAX_SIZE);
 8005212:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005216:	f010 fbc9 	bl	80159ac <malloc>
 800521a:	4603      	mov	r3, r0
 800521c:	60fb      	str	r3, [r7, #12]
	if(systemPayload != NULL)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 8091 	beq.w	8005348 <getDiagDataString+0x140>
			2.	Hardware ID
			3.	Model No.
			4.	UTC date time
			5.	Firmware Version
		*/
		memset(systemPayload,0x00,sizeof(char) * GSM_PAYLOAD_MAX_SIZE);
 8005226:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800522a:	2100      	movs	r1, #0
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f010 fbdb 	bl	80159e8 <memset>
		/* Start of Frame */
		strcpy((char *)systemPayload,(char * )START_OF_FRAME);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	4947      	ldr	r1, [pc, #284]	; (8005354 <getDiagDataString+0x14c>)
 8005236:	461a      	mov	r2, r3
 8005238:	460b      	mov	r3, r1
 800523a:	881b      	ldrh	r3, [r3, #0]
 800523c:	8013      	strh	r3, [r2, #0]
		strcat((char *)systemPayload,(char * )",");
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f7fb fbd0 	bl	80009e4 <strlen>
 8005244:	4603      	mov	r3, r0
 8005246:	461a      	mov	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4413      	add	r3, r2
 800524c:	4942      	ldr	r1, [pc, #264]	; (8005358 <getDiagDataString+0x150>)
 800524e:	461a      	mov	r2, r3
 8005250:	460b      	mov	r3, r1
 8005252:	881b      	ldrh	r3, [r3, #0]
 8005254:	8013      	strh	r3, [r2, #0]

		/* Device UUID */
		strcat((char *)systemPayload,(char * )dinfo);
 8005256:	4941      	ldr	r1, [pc, #260]	; (800535c <getDiagDataString+0x154>)
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f011 fb8f 	bl	801697c <strcat>
		strcat((char *)systemPayload,(char * )",");
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f7fb fbc0 	bl	80009e4 <strlen>
 8005264:	4603      	mov	r3, r0
 8005266:	461a      	mov	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4413      	add	r3, r2
 800526c:	493a      	ldr	r1, [pc, #232]	; (8005358 <getDiagDataString+0x150>)
 800526e:	461a      	mov	r2, r3
 8005270:	460b      	mov	r3, r1
 8005272:	881b      	ldrh	r3, [r3, #0]
 8005274:	8013      	strh	r3, [r2, #0]

		strcat((char *)systemPayload,(char * )MODEL_NUMBER);
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f7fb fbb4 	bl	80009e4 <strlen>
 800527c:	4603      	mov	r3, r0
 800527e:	461a      	mov	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4413      	add	r3, r2
 8005284:	4a36      	ldr	r2, [pc, #216]	; (8005360 <getDiagDataString+0x158>)
 8005286:	461c      	mov	r4, r3
 8005288:	4615      	mov	r5, r2
 800528a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800528c:	6020      	str	r0, [r4, #0]
 800528e:	6061      	str	r1, [r4, #4]
 8005290:	60a2      	str	r2, [r4, #8]
 8005292:	60e3      	str	r3, [r4, #12]
 8005294:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005296:	6120      	str	r0, [r4, #16]
 8005298:	6161      	str	r1, [r4, #20]
 800529a:	61a2      	str	r2, [r4, #24]
 800529c:	61e3      	str	r3, [r4, #28]
		manufacturerDate(systemPayload);
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f000 fd3a 	bl	8005d18 <manufacturerDate>
		strcat((char *)systemPayload,"_Diagnostic");
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f7fb fb9d 	bl	80009e4 <strlen>
 80052aa:	4603      	mov	r3, r0
 80052ac:	461a      	mov	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	4413      	add	r3, r2
 80052b2:	4a2c      	ldr	r2, [pc, #176]	; (8005364 <getDiagDataString+0x15c>)
 80052b4:	461c      	mov	r4, r3
 80052b6:	4613      	mov	r3, r2
 80052b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80052ba:	6020      	str	r0, [r4, #0]
 80052bc:	6061      	str	r1, [r4, #4]
 80052be:	60a2      	str	r2, [r4, #8]
		strcat((char *)systemPayload,(char * )",");
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f7fb fb8f 	bl	80009e4 <strlen>
 80052c6:	4603      	mov	r3, r0
 80052c8:	461a      	mov	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	4413      	add	r3, r2
 80052ce:	4922      	ldr	r1, [pc, #136]	; (8005358 <getDiagDataString+0x150>)
 80052d0:	461a      	mov	r2, r3
 80052d2:	460b      	mov	r3, r1
 80052d4:	881b      	ldrh	r3, [r3, #0]
 80052d6:	8013      	strh	r3, [r2, #0]

		PaylodTime(systemPayload);
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f7ff fccd 	bl	8004c78 <PaylodTime>

		/* Firmware Version*/
		/* Firmware Version*/
		strcat((char *)systemPayload,(char * )BOOT_REGION);
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f7fb fb80 	bl	80009e4 <strlen>
 80052e4:	4603      	mov	r3, r0
 80052e6:	461a      	mov	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4413      	add	r3, r2
 80052ec:	4a1e      	ldr	r2, [pc, #120]	; (8005368 <getDiagDataString+0x160>)
 80052ee:	8811      	ldrh	r1, [r2, #0]
 80052f0:	7892      	ldrb	r2, [r2, #2]
 80052f2:	8019      	strh	r1, [r3, #0]
 80052f4:	709a      	strb	r2, [r3, #2]
		strcat((char *)systemPayload,(char * )FIRMWARE_VER);
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f7fb fb74 	bl	80009e4 <strlen>
 80052fc:	4603      	mov	r3, r0
 80052fe:	461a      	mov	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4413      	add	r3, r2
 8005304:	4a19      	ldr	r2, [pc, #100]	; (800536c <getDiagDataString+0x164>)
 8005306:	6810      	ldr	r0, [r2, #0]
 8005308:	6018      	str	r0, [r3, #0]
		strcat((char *)systemPayload,(char * )",");
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f7fb fb6a 	bl	80009e4 <strlen>
 8005310:	4603      	mov	r3, r0
 8005312:	461a      	mov	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4413      	add	r3, r2
 8005318:	490f      	ldr	r1, [pc, #60]	; (8005358 <getDiagDataString+0x150>)
 800531a:	461a      	mov	r2, r3
 800531c:	460b      	mov	r3, r1
 800531e:	881b      	ldrh	r3, [r3, #0]
 8005320:	8013      	strh	r3, [r2, #0]

		DiagnosticString(systemPayload,DiagnosticStatus);
 8005322:	79fb      	ldrb	r3, [r7, #7]
 8005324:	4619      	mov	r1, r3
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f000 f824 	bl	8005374 <DiagnosticString>

		/* End of Frame */
		strcat((char *)systemPayload,(char * )END_OF_FRAME);
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f7fb fb59 	bl	80009e4 <strlen>
 8005332:	4603      	mov	r3, r0
 8005334:	461a      	mov	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	4413      	add	r3, r2
 800533a:	490d      	ldr	r1, [pc, #52]	; (8005370 <getDiagDataString+0x168>)
 800533c:	461a      	mov	r2, r3
 800533e:	460b      	mov	r3, r1
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	8013      	strh	r3, [r2, #0]

		return systemPayload;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	e000      	b.n	800534a <getDiagDataString+0x142>
	}
	else
		return NULL; // malloc Error . Memory Allocation Failure
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bdb0      	pop	{r4, r5, r7, pc}
 8005352:	bf00      	nop
 8005354:	0801b670 	.word	0x0801b670
 8005358:	0801b674 	.word	0x0801b674
 800535c:	20000000 	.word	0x20000000
 8005360:	0801b678 	.word	0x0801b678
 8005364:	0801b6f8 	.word	0x0801b6f8
 8005368:	0801b6a4 	.word	0x0801b6a4
 800536c:	0801b6a8 	.word	0x0801b6a8
 8005370:	0801b6ac 	.word	0x0801b6ac

08005374 <DiagnosticString>:

void DiagnosticString(char * systemPayload, enmDiagnosticStatus DiagnosticStatus)
{
 8005374:	b5b0      	push	{r4, r5, r7, lr}
 8005376:	b088      	sub	sp, #32
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	460b      	mov	r3, r1
 800537e:	70fb      	strb	r3, [r7, #3]
	char temp[20] = "";
 8005380:	2300      	movs	r3, #0
 8005382:	60fb      	str	r3, [r7, #12]
 8005384:	f107 0310 	add.w	r3, r7, #16
 8005388:	2200      	movs	r2, #0
 800538a:	601a      	str	r2, [r3, #0]
 800538c:	605a      	str	r2, [r3, #4]
 800538e:	609a      	str	r2, [r3, #8]
 8005390:	60da      	str	r2, [r3, #12]
	switch(DiagnosticStatus)
 8005392:	78fb      	ldrb	r3, [r7, #3]
 8005394:	2b63      	cmp	r3, #99	; 0x63
 8005396:	f200 8459 	bhi.w	8005c4c <DiagnosticString+0x8d8>
 800539a:	a201      	add	r2, pc, #4	; (adr r2, 80053a0 <DiagnosticString+0x2c>)
 800539c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a0:	08005531 	.word	0x08005531
 80053a4:	0800559b 	.word	0x0800559b
 80053a8:	08005c4d 	.word	0x08005c4d
 80053ac:	080055bf 	.word	0x080055bf
 80053b0:	08005623 	.word	0x08005623
 80053b4:	08005675 	.word	0x08005675
 80053b8:	08005755 	.word	0x08005755
 80053bc:	08005821 	.word	0x08005821
 80053c0:	080058a5 	.word	0x080058a5
 80053c4:	08005909 	.word	0x08005909
 80053c8:	080059d9 	.word	0x080059d9
 80053cc:	08005a3d 	.word	0x08005a3d
 80053d0:	08005aa1 	.word	0x08005aa1
 80053d4:	08005b05 	.word	0x08005b05
 80053d8:	08005be9 	.word	0x08005be9
 80053dc:	08005c4d 	.word	0x08005c4d
 80053e0:	08005c4d 	.word	0x08005c4d
 80053e4:	08005c4d 	.word	0x08005c4d
 80053e8:	08005c4d 	.word	0x08005c4d
 80053ec:	08005c4d 	.word	0x08005c4d
 80053f0:	08005c4d 	.word	0x08005c4d
 80053f4:	08005c4d 	.word	0x08005c4d
 80053f8:	08005c4d 	.word	0x08005c4d
 80053fc:	08005c4d 	.word	0x08005c4d
 8005400:	08005c4d 	.word	0x08005c4d
 8005404:	08005c4d 	.word	0x08005c4d
 8005408:	08005c4d 	.word	0x08005c4d
 800540c:	08005c4d 	.word	0x08005c4d
 8005410:	08005c4d 	.word	0x08005c4d
 8005414:	08005c4d 	.word	0x08005c4d
 8005418:	08005c4d 	.word	0x08005c4d
 800541c:	08005c4d 	.word	0x08005c4d
 8005420:	08005c4d 	.word	0x08005c4d
 8005424:	08005c4d 	.word	0x08005c4d
 8005428:	08005c4d 	.word	0x08005c4d
 800542c:	08005c4d 	.word	0x08005c4d
 8005430:	08005c4d 	.word	0x08005c4d
 8005434:	08005c4d 	.word	0x08005c4d
 8005438:	08005c4d 	.word	0x08005c4d
 800543c:	08005c4d 	.word	0x08005c4d
 8005440:	08005c4d 	.word	0x08005c4d
 8005444:	08005c4d 	.word	0x08005c4d
 8005448:	08005c4d 	.word	0x08005c4d
 800544c:	08005c4d 	.word	0x08005c4d
 8005450:	08005c4d 	.word	0x08005c4d
 8005454:	08005c4d 	.word	0x08005c4d
 8005458:	08005c4d 	.word	0x08005c4d
 800545c:	08005c4d 	.word	0x08005c4d
 8005460:	08005c4d 	.word	0x08005c4d
 8005464:	08005c4d 	.word	0x08005c4d
 8005468:	08005c4d 	.word	0x08005c4d
 800546c:	08005c4d 	.word	0x08005c4d
 8005470:	08005c4d 	.word	0x08005c4d
 8005474:	08005c4d 	.word	0x08005c4d
 8005478:	08005c4d 	.word	0x08005c4d
 800547c:	08005c4d 	.word	0x08005c4d
 8005480:	08005c4d 	.word	0x08005c4d
 8005484:	08005c4d 	.word	0x08005c4d
 8005488:	08005c4d 	.word	0x08005c4d
 800548c:	08005c4d 	.word	0x08005c4d
 8005490:	08005c4d 	.word	0x08005c4d
 8005494:	08005c4d 	.word	0x08005c4d
 8005498:	08005c4d 	.word	0x08005c4d
 800549c:	08005c4d 	.word	0x08005c4d
 80054a0:	08005c4d 	.word	0x08005c4d
 80054a4:	08005c4d 	.word	0x08005c4d
 80054a8:	08005c4d 	.word	0x08005c4d
 80054ac:	08005c4d 	.word	0x08005c4d
 80054b0:	08005c4d 	.word	0x08005c4d
 80054b4:	08005c4d 	.word	0x08005c4d
 80054b8:	08005c4d 	.word	0x08005c4d
 80054bc:	08005c4d 	.word	0x08005c4d
 80054c0:	08005c4d 	.word	0x08005c4d
 80054c4:	08005c4d 	.word	0x08005c4d
 80054c8:	08005c4d 	.word	0x08005c4d
 80054cc:	08005c4d 	.word	0x08005c4d
 80054d0:	08005c4d 	.word	0x08005c4d
 80054d4:	08005c4d 	.word	0x08005c4d
 80054d8:	08005c4d 	.word	0x08005c4d
 80054dc:	08005c4d 	.word	0x08005c4d
 80054e0:	08005c4d 	.word	0x08005c4d
 80054e4:	08005c4d 	.word	0x08005c4d
 80054e8:	08005c4d 	.word	0x08005c4d
 80054ec:	08005c4d 	.word	0x08005c4d
 80054f0:	08005c4d 	.word	0x08005c4d
 80054f4:	08005c4d 	.word	0x08005c4d
 80054f8:	08005c4d 	.word	0x08005c4d
 80054fc:	08005c4d 	.word	0x08005c4d
 8005500:	08005c4d 	.word	0x08005c4d
 8005504:	08005c4d 	.word	0x08005c4d
 8005508:	08005c4d 	.word	0x08005c4d
 800550c:	08005c4d 	.word	0x08005c4d
 8005510:	08005c4d 	.word	0x08005c4d
 8005514:	08005c4d 	.word	0x08005c4d
 8005518:	08005c4d 	.word	0x08005c4d
 800551c:	08005c4d 	.word	0x08005c4d
 8005520:	08005c4d 	.word	0x08005c4d
 8005524:	08005c4d 	.word	0x08005c4d
 8005528:	08005c4d 	.word	0x08005c4d
 800552c:	08005c1b 	.word	0x08005c1b
	{
		case enmDiagnostic_SUCCESS_OK:
			strcat((char *)systemPayload,"FS");
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7fb fa57 	bl	80009e4 <strlen>
 8005536:	4603      	mov	r3, r0
 8005538:	461a      	mov	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4413      	add	r3, r2
 800553e:	4aac      	ldr	r2, [pc, #688]	; (80057f0 <DiagnosticString+0x47c>)
 8005540:	8811      	ldrh	r1, [r2, #0]
 8005542:	7892      	ldrb	r2, [r2, #2]
 8005544:	8019      	strh	r1, [r3, #0]
 8005546:	709a      	strb	r2, [r3, #2]
			strcat((char *)systemPayload,(char * )",");
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f7fb fa4b 	bl	80009e4 <strlen>
 800554e:	4603      	mov	r3, r0
 8005550:	461a      	mov	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4413      	add	r3, r2
 8005556:	49a7      	ldr	r1, [pc, #668]	; (80057f4 <DiagnosticString+0x480>)
 8005558:	461a      	mov	r2, r3
 800555a:	460b      	mov	r3, r1
 800555c:	881b      	ldrh	r3, [r3, #0]
 800555e:	8013      	strh	r3, [r2, #0]
			itoa(DiagnosticStatus,temp,PAYLOAD_DATA_STRING_RADIX);
 8005560:	78fb      	ldrb	r3, [r7, #3]
 8005562:	f107 010c 	add.w	r1, r7, #12
 8005566:	220a      	movs	r2, #10
 8005568:	4618      	mov	r0, r3
 800556a:	f010 fa1d 	bl	80159a8 <itoa>
			strcat((char *)systemPayload,temp);
 800556e:	f107 030c 	add.w	r3, r7, #12
 8005572:	4619      	mov	r1, r3
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f011 fa01 	bl	801697c <strcat>
			strcat((char *)systemPayload,(char * )",");
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7fb fa32 	bl	80009e4 <strlen>
 8005580:	4603      	mov	r3, r0
 8005582:	461a      	mov	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4413      	add	r3, r2
 8005588:	499a      	ldr	r1, [pc, #616]	; (80057f4 <DiagnosticString+0x480>)
 800558a:	461a      	mov	r2, r3
 800558c:	460b      	mov	r3, r1
 800558e:	881b      	ldrh	r3, [r3, #0]
 8005590:	8013      	strh	r3, [r2, #0]
			FOTACompleteFlag = TRUE;
 8005592:	4b99      	ldr	r3, [pc, #612]	; (80057f8 <DiagnosticString+0x484>)
 8005594:	2201      	movs	r2, #1
 8005596:	701a      	strb	r2, [r3, #0]
			break;
 8005598:	e371      	b.n	8005c7e <DiagnosticString+0x90a>

		case enmDiagnostic_CAN_ID:
			strcat((char *)systemPayload,"CAN ID's : ");
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7fb fa22 	bl	80009e4 <strlen>
 80055a0:	4603      	mov	r3, r0
 80055a2:	461a      	mov	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4413      	add	r3, r2
 80055a8:	4a94      	ldr	r2, [pc, #592]	; (80057fc <DiagnosticString+0x488>)
 80055aa:	461c      	mov	r4, r3
 80055ac:	4613      	mov	r3, r2
 80055ae:	cb07      	ldmia	r3!, {r0, r1, r2}
 80055b0:	6020      	str	r0, [r4, #0]
 80055b2:	6061      	str	r1, [r4, #4]
 80055b4:	60a2      	str	r2, [r4, #8]
			CANIDPrase(systemPayload);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 fb72 	bl	8005ca0 <CANIDPrase>
			break;
 80055bc:	e35f      	b.n	8005c7e <DiagnosticString+0x90a>

		case enmDiagnostic_HW_ID_MISMATCH_ERROR: // Device HW ID Mismatch
			strcat((char *)systemPayload,"FF");
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7fb fa10 	bl	80009e4 <strlen>
 80055c4:	4603      	mov	r3, r0
 80055c6:	461a      	mov	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4413      	add	r3, r2
 80055cc:	4a8c      	ldr	r2, [pc, #560]	; (8005800 <DiagnosticString+0x48c>)
 80055ce:	8811      	ldrh	r1, [r2, #0]
 80055d0:	7892      	ldrb	r2, [r2, #2]
 80055d2:	8019      	strh	r1, [r3, #0]
 80055d4:	709a      	strb	r2, [r3, #2]
			strcat((char *)systemPayload,(char * )",");
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7fb fa04 	bl	80009e4 <strlen>
 80055dc:	4603      	mov	r3, r0
 80055de:	461a      	mov	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4413      	add	r3, r2
 80055e4:	4983      	ldr	r1, [pc, #524]	; (80057f4 <DiagnosticString+0x480>)
 80055e6:	461a      	mov	r2, r3
 80055e8:	460b      	mov	r3, r1
 80055ea:	881b      	ldrh	r3, [r3, #0]
 80055ec:	8013      	strh	r3, [r2, #0]
			itoa(DiagnosticStatus,temp,PAYLOAD_DATA_STRING_RADIX);
 80055ee:	78fb      	ldrb	r3, [r7, #3]
 80055f0:	f107 010c 	add.w	r1, r7, #12
 80055f4:	220a      	movs	r2, #10
 80055f6:	4618      	mov	r0, r3
 80055f8:	f010 f9d6 	bl	80159a8 <itoa>
			strcat((char *)systemPayload,temp);
 80055fc:	f107 030c 	add.w	r3, r7, #12
 8005600:	4619      	mov	r1, r3
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f011 f9ba 	bl	801697c <strcat>
			strcat((char *)systemPayload,(char * )",");
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f7fb f9eb 	bl	80009e4 <strlen>
 800560e:	4603      	mov	r3, r0
 8005610:	461a      	mov	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4413      	add	r3, r2
 8005616:	4977      	ldr	r1, [pc, #476]	; (80057f4 <DiagnosticString+0x480>)
 8005618:	461a      	mov	r2, r3
 800561a:	460b      	mov	r3, r1
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	8013      	strh	r3, [r2, #0]
			break;
 8005620:	e32d      	b.n	8005c7e <DiagnosticString+0x90a>

		case enmDiagnostic_FOTA_REQ_RX:
			strcat((char *)systemPayload,"FR");
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7fb f9de 	bl	80009e4 <strlen>
 8005628:	4603      	mov	r3, r0
 800562a:	461a      	mov	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4413      	add	r3, r2
 8005630:	4a74      	ldr	r2, [pc, #464]	; (8005804 <DiagnosticString+0x490>)
 8005632:	8811      	ldrh	r1, [r2, #0]
 8005634:	7892      	ldrb	r2, [r2, #2]
 8005636:	8019      	strh	r1, [r3, #0]
 8005638:	709a      	strb	r2, [r3, #2]
			strcat((char *)systemPayload,(char * )",");
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7fb f9d2 	bl	80009e4 <strlen>
 8005640:	4603      	mov	r3, r0
 8005642:	461a      	mov	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4413      	add	r3, r2
 8005648:	496a      	ldr	r1, [pc, #424]	; (80057f4 <DiagnosticString+0x480>)
 800564a:	461a      	mov	r2, r3
 800564c:	460b      	mov	r3, r1
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	8013      	strh	r3, [r2, #0]
			strcat((char *)systemPayload,(char *)gau8FotaURL);
 8005652:	496d      	ldr	r1, [pc, #436]	; (8005808 <DiagnosticString+0x494>)
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f011 f991 	bl	801697c <strcat>
			strcat((char *)systemPayload,(char * )",");
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7fb f9c2 	bl	80009e4 <strlen>
 8005660:	4603      	mov	r3, r0
 8005662:	461a      	mov	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4413      	add	r3, r2
 8005668:	4962      	ldr	r1, [pc, #392]	; (80057f4 <DiagnosticString+0x480>)
 800566a:	461a      	mov	r2, r3
 800566c:	460b      	mov	r3, r1
 800566e:	881b      	ldrh	r3, [r3, #0]
 8005670:	8013      	strh	r3, [r2, #0]
			break;
 8005672:	e304      	b.n	8005c7e <DiagnosticString+0x90a>


		case enmDiagnostic_POWER_SUPPLY_ERROR:
			strcat((char *)systemPayload,"FF");
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7fb f9b5 	bl	80009e4 <strlen>
 800567a:	4603      	mov	r3, r0
 800567c:	461a      	mov	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4413      	add	r3, r2
 8005682:	4a5f      	ldr	r2, [pc, #380]	; (8005800 <DiagnosticString+0x48c>)
 8005684:	8811      	ldrh	r1, [r2, #0]
 8005686:	7892      	ldrb	r2, [r2, #2]
 8005688:	8019      	strh	r1, [r3, #0]
 800568a:	709a      	strb	r2, [r3, #2]
			strcat((char *)systemPayload,(char * )",");
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f7fb f9a9 	bl	80009e4 <strlen>
 8005692:	4603      	mov	r3, r0
 8005694:	461a      	mov	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4413      	add	r3, r2
 800569a:	4956      	ldr	r1, [pc, #344]	; (80057f4 <DiagnosticString+0x480>)
 800569c:	461a      	mov	r2, r3
 800569e:	460b      	mov	r3, r1
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	8013      	strh	r3, [r2, #0]
			itoa(DiagnosticStatus,temp,PAYLOAD_DATA_STRING_RADIX);
 80056a4:	78fb      	ldrb	r3, [r7, #3]
 80056a6:	f107 010c 	add.w	r1, r7, #12
 80056aa:	220a      	movs	r2, #10
 80056ac:	4618      	mov	r0, r3
 80056ae:	f010 f97b 	bl	80159a8 <itoa>
			strcat((char *)systemPayload,temp);
 80056b2:	f107 030c 	add.w	r3, r7, #12
 80056b6:	4619      	mov	r1, r3
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f011 f95f 	bl	801697c <strcat>
			strcat((char *)systemPayload,(char * )",");
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7fb f990 	bl	80009e4 <strlen>
 80056c4:	4603      	mov	r3, r0
 80056c6:	461a      	mov	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4413      	add	r3, r2
 80056cc:	4949      	ldr	r1, [pc, #292]	; (80057f4 <DiagnosticString+0x480>)
 80056ce:	461a      	mov	r2, r3
 80056d0:	460b      	mov	r3, r1
 80056d2:	881b      	ldrh	r3, [r3, #0]
 80056d4:	8013      	strh	r3, [r2, #0]
			strcat((char *)systemPayload,"Input Supply : ");
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7fb f984 	bl	80009e4 <strlen>
 80056dc:	4603      	mov	r3, r0
 80056de:	461a      	mov	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4413      	add	r3, r2
 80056e4:	4a49      	ldr	r2, [pc, #292]	; (800580c <DiagnosticString+0x498>)
 80056e6:	461c      	mov	r4, r3
 80056e8:	4615      	mov	r5, r2
 80056ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056ec:	6020      	str	r0, [r4, #0]
 80056ee:	6061      	str	r1, [r4, #4]
 80056f0:	60a2      	str	r2, [r4, #8]
 80056f2:	60e3      	str	r3, [r4, #12]
//			updateInputVoltage(ADCValues.ADC_Input_Voltage);
//			strcat((char *)systemPayload,(char * )voltage);
			strcat((char *)systemPayload,(char * )",");
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f7fb f975 	bl	80009e4 <strlen>
 80056fa:	4603      	mov	r3, r0
 80056fc:	461a      	mov	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4413      	add	r3, r2
 8005702:	493c      	ldr	r1, [pc, #240]	; (80057f4 <DiagnosticString+0x480>)
 8005704:	461a      	mov	r2, r3
 8005706:	460b      	mov	r3, r1
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	8013      	strh	r3, [r2, #0]
			strcat((char *)systemPayload,"Internal Battery Supply : ");
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f7fb f969 	bl	80009e4 <strlen>
 8005712:	4603      	mov	r3, r0
 8005714:	461a      	mov	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4413      	add	r3, r2
 800571a:	4a3d      	ldr	r2, [pc, #244]	; (8005810 <DiagnosticString+0x49c>)
 800571c:	461d      	mov	r5, r3
 800571e:	4614      	mov	r4, r2
 8005720:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005722:	6028      	str	r0, [r5, #0]
 8005724:	6069      	str	r1, [r5, #4]
 8005726:	60aa      	str	r2, [r5, #8]
 8005728:	60eb      	str	r3, [r5, #12]
 800572a:	cc03      	ldmia	r4!, {r0, r1}
 800572c:	6128      	str	r0, [r5, #16]
 800572e:	6169      	str	r1, [r5, #20]
 8005730:	8823      	ldrh	r3, [r4, #0]
 8005732:	78a2      	ldrb	r2, [r4, #2]
 8005734:	832b      	strh	r3, [r5, #24]
 8005736:	4613      	mov	r3, r2
 8005738:	76ab      	strb	r3, [r5, #26]
//			updateInputVoltage(ADCValues.ADC_Batt_Voltage);
//			strcat((char *)systemPayload,(char * )voltage);
			strcat((char *)systemPayload,(char * )",");
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7fb f952 	bl	80009e4 <strlen>
 8005740:	4603      	mov	r3, r0
 8005742:	461a      	mov	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4413      	add	r3, r2
 8005748:	492a      	ldr	r1, [pc, #168]	; (80057f4 <DiagnosticString+0x480>)
 800574a:	461a      	mov	r2, r3
 800574c:	460b      	mov	r3, r1
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	8013      	strh	r3, [r2, #0]
			break;
 8005752:	e294      	b.n	8005c7e <DiagnosticString+0x90a>

		case enmDiagnostic_RX_FILE_SIZE_ERROR: //Received File Size is Greater than (FLASH_SIZE-4k)/2
			strcat((char *)systemPayload,"FF");
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f7fb f945 	bl	80009e4 <strlen>
 800575a:	4603      	mov	r3, r0
 800575c:	461a      	mov	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4413      	add	r3, r2
 8005762:	4a27      	ldr	r2, [pc, #156]	; (8005800 <DiagnosticString+0x48c>)
 8005764:	8811      	ldrh	r1, [r2, #0]
 8005766:	7892      	ldrb	r2, [r2, #2]
 8005768:	8019      	strh	r1, [r3, #0]
 800576a:	709a      	strb	r2, [r3, #2]
			strcat((char *)systemPayload,(char * )",");
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7fb f939 	bl	80009e4 <strlen>
 8005772:	4603      	mov	r3, r0
 8005774:	461a      	mov	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4413      	add	r3, r2
 800577a:	491e      	ldr	r1, [pc, #120]	; (80057f4 <DiagnosticString+0x480>)
 800577c:	461a      	mov	r2, r3
 800577e:	460b      	mov	r3, r1
 8005780:	881b      	ldrh	r3, [r3, #0]
 8005782:	8013      	strh	r3, [r2, #0]
			itoa(DiagnosticStatus,temp,PAYLOAD_DATA_STRING_RADIX);
 8005784:	78fb      	ldrb	r3, [r7, #3]
 8005786:	f107 010c 	add.w	r1, r7, #12
 800578a:	220a      	movs	r2, #10
 800578c:	4618      	mov	r0, r3
 800578e:	f010 f90b 	bl	80159a8 <itoa>
			strcat((char *)systemPayload,temp);
 8005792:	f107 030c 	add.w	r3, r7, #12
 8005796:	4619      	mov	r1, r3
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f011 f8ef 	bl	801697c <strcat>
			strcat((char *)systemPayload,(char * )",Received File Size : ");
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7fb f920 	bl	80009e4 <strlen>
 80057a4:	4603      	mov	r3, r0
 80057a6:	461a      	mov	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4413      	add	r3, r2
 80057ac:	4a19      	ldr	r2, [pc, #100]	; (8005814 <DiagnosticString+0x4a0>)
 80057ae:	461c      	mov	r4, r3
 80057b0:	4615      	mov	r5, r2
 80057b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80057b4:	6020      	str	r0, [r4, #0]
 80057b6:	6061      	str	r1, [r4, #4]
 80057b8:	60a2      	str	r2, [r4, #8]
 80057ba:	60e3      	str	r3, [r4, #12]
 80057bc:	6828      	ldr	r0, [r5, #0]
 80057be:	6120      	str	r0, [r4, #16]
 80057c0:	88ab      	ldrh	r3, [r5, #4]
 80057c2:	79aa      	ldrb	r2, [r5, #6]
 80057c4:	82a3      	strh	r3, [r4, #20]
 80057c6:	4613      	mov	r3, r2
 80057c8:	75a3      	strb	r3, [r4, #22]
			strcat((char *)systemPayload,gu32FotaFileSizeinBytes);
 80057ca:	4913      	ldr	r1, [pc, #76]	; (8005818 <DiagnosticString+0x4a4>)
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f011 f8d5 	bl	801697c <strcat>
			strcat((char *)systemPayload,(char * )" Bytes,");
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f7fb f906 	bl	80009e4 <strlen>
 80057d8:	4603      	mov	r3, r0
 80057da:	461a      	mov	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4413      	add	r3, r2
 80057e0:	490e      	ldr	r1, [pc, #56]	; (800581c <DiagnosticString+0x4a8>)
 80057e2:	461a      	mov	r2, r3
 80057e4:	460b      	mov	r3, r1
 80057e6:	cb03      	ldmia	r3!, {r0, r1}
 80057e8:	6010      	str	r0, [r2, #0]
 80057ea:	6051      	str	r1, [r2, #4]
			break;
 80057ec:	e247      	b.n	8005c7e <DiagnosticString+0x90a>
 80057ee:	bf00      	nop
 80057f0:	0801b704 	.word	0x0801b704
 80057f4:	0801b674 	.word	0x0801b674
 80057f8:	20001ab6 	.word	0x20001ab6
 80057fc:	0801b708 	.word	0x0801b708
 8005800:	0801b714 	.word	0x0801b714
 8005804:	0801b718 	.word	0x0801b718
 8005808:	20001988 	.word	0x20001988
 800580c:	0801b71c 	.word	0x0801b71c
 8005810:	0801b72c 	.word	0x0801b72c
 8005814:	0801b748 	.word	0x0801b748
 8005818:	20000f9c 	.word	0x20000f9c
 800581c:	0801b760 	.word	0x0801b760

		case enmDiagnostic_FILE_DONWLOAD_ERROR:
			strcat((char *)systemPayload,"FF");
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7fb f8df 	bl	80009e4 <strlen>
 8005826:	4603      	mov	r3, r0
 8005828:	461a      	mov	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4413      	add	r3, r2
 800582e:	4ac4      	ldr	r2, [pc, #784]	; (8005b40 <DiagnosticString+0x7cc>)
 8005830:	8811      	ldrh	r1, [r2, #0]
 8005832:	7892      	ldrb	r2, [r2, #2]
 8005834:	8019      	strh	r1, [r3, #0]
 8005836:	709a      	strb	r2, [r3, #2]
			strcat((char *)systemPayload,(char * )",");
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f7fb f8d3 	bl	80009e4 <strlen>
 800583e:	4603      	mov	r3, r0
 8005840:	461a      	mov	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4413      	add	r3, r2
 8005846:	49bf      	ldr	r1, [pc, #764]	; (8005b44 <DiagnosticString+0x7d0>)
 8005848:	461a      	mov	r2, r3
 800584a:	460b      	mov	r3, r1
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	8013      	strh	r3, [r2, #0]
			itoa(DiagnosticStatus,temp,PAYLOAD_DATA_STRING_RADIX);
 8005850:	78fb      	ldrb	r3, [r7, #3]
 8005852:	f107 010c 	add.w	r1, r7, #12
 8005856:	220a      	movs	r2, #10
 8005858:	4618      	mov	r0, r3
 800585a:	f010 f8a5 	bl	80159a8 <itoa>
			strcat((char *)systemPayload,temp);
 800585e:	f107 030c 	add.w	r3, r7, #12
 8005862:	4619      	mov	r1, r3
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f011 f889 	bl	801697c <strcat>
			strcat((char *)systemPayload,(char * )",");
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7fb f8ba 	bl	80009e4 <strlen>
 8005870:	4603      	mov	r3, r0
 8005872:	461a      	mov	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4413      	add	r3, r2
 8005878:	49b2      	ldr	r1, [pc, #712]	; (8005b44 <DiagnosticString+0x7d0>)
 800587a:	461a      	mov	r2, r3
 800587c:	460b      	mov	r3, r1
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	8013      	strh	r3, [r2, #0]
//			strcat((char *)systemPayload,(char * )gsmInstance.u32GSMHttpResponseCode);
			strcat((char *)systemPayload,(char * )gu32FotaFileSizeinBytes);
 8005882:	49b1      	ldr	r1, [pc, #708]	; (8005b48 <DiagnosticString+0x7d4>)
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f011 f879 	bl	801697c <strcat>
			strcat((char *)systemPayload,(char * )",");
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7fb f8aa 	bl	80009e4 <strlen>
 8005890:	4603      	mov	r3, r0
 8005892:	461a      	mov	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4413      	add	r3, r2
 8005898:	49aa      	ldr	r1, [pc, #680]	; (8005b44 <DiagnosticString+0x7d0>)
 800589a:	461a      	mov	r2, r3
 800589c:	460b      	mov	r3, r1
 800589e:	881b      	ldrh	r3, [r3, #0]
 80058a0:	8013      	strh	r3, [r2, #0]
			break;
 80058a2:	e1ec      	b.n	8005c7e <DiagnosticString+0x90a>

		case enmDiagnostic_FLASH_ERRASE_ERROR:
			strcat((char *)systemPayload,"FF");
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7fb f89d 	bl	80009e4 <strlen>
 80058aa:	4603      	mov	r3, r0
 80058ac:	461a      	mov	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4413      	add	r3, r2
 80058b2:	4aa3      	ldr	r2, [pc, #652]	; (8005b40 <DiagnosticString+0x7cc>)
 80058b4:	8811      	ldrh	r1, [r2, #0]
 80058b6:	7892      	ldrb	r2, [r2, #2]
 80058b8:	8019      	strh	r1, [r3, #0]
 80058ba:	709a      	strb	r2, [r3, #2]
			strcat((char *)systemPayload,(char * )",");
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f7fb f891 	bl	80009e4 <strlen>
 80058c2:	4603      	mov	r3, r0
 80058c4:	461a      	mov	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4413      	add	r3, r2
 80058ca:	499e      	ldr	r1, [pc, #632]	; (8005b44 <DiagnosticString+0x7d0>)
 80058cc:	461a      	mov	r2, r3
 80058ce:	460b      	mov	r3, r1
 80058d0:	881b      	ldrh	r3, [r3, #0]
 80058d2:	8013      	strh	r3, [r2, #0]
			itoa(DiagnosticStatus,temp,PAYLOAD_DATA_STRING_RADIX);
 80058d4:	78fb      	ldrb	r3, [r7, #3]
 80058d6:	f107 010c 	add.w	r1, r7, #12
 80058da:	220a      	movs	r2, #10
 80058dc:	4618      	mov	r0, r3
 80058de:	f010 f863 	bl	80159a8 <itoa>
			strcat((char *)systemPayload,temp);
 80058e2:	f107 030c 	add.w	r3, r7, #12
 80058e6:	4619      	mov	r1, r3
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f011 f847 	bl	801697c <strcat>
			strcat((char *)systemPayload,(char * )",");
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7fb f878 	bl	80009e4 <strlen>
 80058f4:	4603      	mov	r3, r0
 80058f6:	461a      	mov	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4413      	add	r3, r2
 80058fc:	4991      	ldr	r1, [pc, #580]	; (8005b44 <DiagnosticString+0x7d0>)
 80058fe:	461a      	mov	r2, r3
 8005900:	460b      	mov	r3, r1
 8005902:	881b      	ldrh	r3, [r3, #0]
 8005904:	8013      	strh	r3, [r2, #0]
			break;
 8005906:	e1ba      	b.n	8005c7e <DiagnosticString+0x90a>

		case enmDiagnostic_FLASH_Write_ERROR:
			strcat((char *)systemPayload,"FF");
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f7fb f86b 	bl	80009e4 <strlen>
 800590e:	4603      	mov	r3, r0
 8005910:	461a      	mov	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4413      	add	r3, r2
 8005916:	4a8a      	ldr	r2, [pc, #552]	; (8005b40 <DiagnosticString+0x7cc>)
 8005918:	8811      	ldrh	r1, [r2, #0]
 800591a:	7892      	ldrb	r2, [r2, #2]
 800591c:	8019      	strh	r1, [r3, #0]
 800591e:	709a      	strb	r2, [r3, #2]
			strcat((char *)systemPayload,(char * )",");
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f7fb f85f 	bl	80009e4 <strlen>
 8005926:	4603      	mov	r3, r0
 8005928:	461a      	mov	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4413      	add	r3, r2
 800592e:	4985      	ldr	r1, [pc, #532]	; (8005b44 <DiagnosticString+0x7d0>)
 8005930:	461a      	mov	r2, r3
 8005932:	460b      	mov	r3, r1
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	8013      	strh	r3, [r2, #0]
			itoa(DiagnosticStatus,temp,PAYLOAD_DATA_STRING_RADIX);
 8005938:	78fb      	ldrb	r3, [r7, #3]
 800593a:	f107 010c 	add.w	r1, r7, #12
 800593e:	220a      	movs	r2, #10
 8005940:	4618      	mov	r0, r3
 8005942:	f010 f831 	bl	80159a8 <itoa>
			strcat((char *)systemPayload,temp);
 8005946:	f107 030c 	add.w	r3, r7, #12
 800594a:	4619      	mov	r1, r3
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f011 f815 	bl	801697c <strcat>
			strcat((char *)systemPayload,(char * )",");
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7fb f846 	bl	80009e4 <strlen>
 8005958:	4603      	mov	r3, r0
 800595a:	461a      	mov	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4413      	add	r3, r2
 8005960:	4978      	ldr	r1, [pc, #480]	; (8005b44 <DiagnosticString+0x7d0>)
 8005962:	461a      	mov	r2, r3
 8005964:	460b      	mov	r3, r1
 8005966:	881b      	ldrh	r3, [r3, #0]
 8005968:	8013      	strh	r3, [r2, #0]
			itoa(u32FOTAFileBaseAddress,temp,PAYLOAD_DATA_STRING_RADIX);
 800596a:	4b78      	ldr	r3, [pc, #480]	; (8005b4c <DiagnosticString+0x7d8>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4618      	mov	r0, r3
 8005970:	f107 030c 	add.w	r3, r7, #12
 8005974:	220a      	movs	r2, #10
 8005976:	4619      	mov	r1, r3
 8005978:	f010 f816 	bl	80159a8 <itoa>
			strcat((char *)systemPayload,temp);
 800597c:	f107 030c 	add.w	r3, r7, #12
 8005980:	4619      	mov	r1, r3
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f010 fffa 	bl	801697c <strcat>
			strcat((char *)systemPayload,(char * )"//");
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7fb f82b 	bl	80009e4 <strlen>
 800598e:	4603      	mov	r3, r0
 8005990:	461a      	mov	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4413      	add	r3, r2
 8005996:	4a6e      	ldr	r2, [pc, #440]	; (8005b50 <DiagnosticString+0x7dc>)
 8005998:	8811      	ldrh	r1, [r2, #0]
 800599a:	7892      	ldrb	r2, [r2, #2]
 800599c:	8019      	strh	r1, [r3, #0]
 800599e:	709a      	strb	r2, [r3, #2]
			itoa(u32FotaFileChunkCounter,temp,PAYLOAD_DATA_STRING_RADIX);
 80059a0:	4b6c      	ldr	r3, [pc, #432]	; (8005b54 <DiagnosticString+0x7e0>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f107 030c 	add.w	r3, r7, #12
 80059aa:	220a      	movs	r2, #10
 80059ac:	4619      	mov	r1, r3
 80059ae:	f00f fffb 	bl	80159a8 <itoa>
			strcat((char *)systemPayload,temp);
 80059b2:	f107 030c 	add.w	r3, r7, #12
 80059b6:	4619      	mov	r1, r3
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f010 ffdf 	bl	801697c <strcat>
			strcat((char *)systemPayload,(char * )",");
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7fb f810 	bl	80009e4 <strlen>
 80059c4:	4603      	mov	r3, r0
 80059c6:	461a      	mov	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4413      	add	r3, r2
 80059cc:	495d      	ldr	r1, [pc, #372]	; (8005b44 <DiagnosticString+0x7d0>)
 80059ce:	461a      	mov	r2, r3
 80059d0:	460b      	mov	r3, r1
 80059d2:	881b      	ldrh	r3, [r3, #0]
 80059d4:	8013      	strh	r3, [r2, #0]
			break;
 80059d6:	e152      	b.n	8005c7e <DiagnosticString+0x90a>

		case enmDiagnostic_BOOT_REGION_SELECTION_ERROR:
			strcat((char *)systemPayload,"FF");
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f7fb f803 	bl	80009e4 <strlen>
 80059de:	4603      	mov	r3, r0
 80059e0:	461a      	mov	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4413      	add	r3, r2
 80059e6:	4a56      	ldr	r2, [pc, #344]	; (8005b40 <DiagnosticString+0x7cc>)
 80059e8:	8811      	ldrh	r1, [r2, #0]
 80059ea:	7892      	ldrb	r2, [r2, #2]
 80059ec:	8019      	strh	r1, [r3, #0]
 80059ee:	709a      	strb	r2, [r3, #2]
			strcat((char *)systemPayload,(char * )",");
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f7fa fff7 	bl	80009e4 <strlen>
 80059f6:	4603      	mov	r3, r0
 80059f8:	461a      	mov	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4413      	add	r3, r2
 80059fe:	4951      	ldr	r1, [pc, #324]	; (8005b44 <DiagnosticString+0x7d0>)
 8005a00:	461a      	mov	r2, r3
 8005a02:	460b      	mov	r3, r1
 8005a04:	881b      	ldrh	r3, [r3, #0]
 8005a06:	8013      	strh	r3, [r2, #0]
			itoa(DiagnosticStatus,temp,PAYLOAD_DATA_STRING_RADIX);
 8005a08:	78fb      	ldrb	r3, [r7, #3]
 8005a0a:	f107 010c 	add.w	r1, r7, #12
 8005a0e:	220a      	movs	r2, #10
 8005a10:	4618      	mov	r0, r3
 8005a12:	f00f ffc9 	bl	80159a8 <itoa>
			strcat((char *)systemPayload,temp);
 8005a16:	f107 030c 	add.w	r3, r7, #12
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f010 ffad 	bl	801697c <strcat>
			strcat((char *)systemPayload,(char * )",");
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7fa ffde 	bl	80009e4 <strlen>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4413      	add	r3, r2
 8005a30:	4944      	ldr	r1, [pc, #272]	; (8005b44 <DiagnosticString+0x7d0>)
 8005a32:	461a      	mov	r2, r3
 8005a34:	460b      	mov	r3, r1
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	8013      	strh	r3, [r2, #0]
			break;
 8005a3a:	e120      	b.n	8005c7e <DiagnosticString+0x90a>

		case enmDiagnostic_MEM_WR_CHK_SUM_ERROR: //MEM sector written, but downloaded DATA and Written data in MEM Mismatch
			strcat((char *)systemPayload,"FF");
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f7fa ffd1 	bl	80009e4 <strlen>
 8005a42:	4603      	mov	r3, r0
 8005a44:	461a      	mov	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4413      	add	r3, r2
 8005a4a:	4a3d      	ldr	r2, [pc, #244]	; (8005b40 <DiagnosticString+0x7cc>)
 8005a4c:	8811      	ldrh	r1, [r2, #0]
 8005a4e:	7892      	ldrb	r2, [r2, #2]
 8005a50:	8019      	strh	r1, [r3, #0]
 8005a52:	709a      	strb	r2, [r3, #2]
			strcat((char *)systemPayload,(char * )",");
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f7fa ffc5 	bl	80009e4 <strlen>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4413      	add	r3, r2
 8005a62:	4938      	ldr	r1, [pc, #224]	; (8005b44 <DiagnosticString+0x7d0>)
 8005a64:	461a      	mov	r2, r3
 8005a66:	460b      	mov	r3, r1
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	8013      	strh	r3, [r2, #0]
			itoa(DiagnosticStatus,temp,PAYLOAD_DATA_STRING_RADIX);
 8005a6c:	78fb      	ldrb	r3, [r7, #3]
 8005a6e:	f107 010c 	add.w	r1, r7, #12
 8005a72:	220a      	movs	r2, #10
 8005a74:	4618      	mov	r0, r3
 8005a76:	f00f ff97 	bl	80159a8 <itoa>
			strcat((char *)systemPayload,temp);
 8005a7a:	f107 030c 	add.w	r3, r7, #12
 8005a7e:	4619      	mov	r1, r3
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f010 ff7b 	bl	801697c <strcat>
			strcat((char *)systemPayload,(char * )",");
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7fa ffac 	bl	80009e4 <strlen>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	461a      	mov	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4413      	add	r3, r2
 8005a94:	492b      	ldr	r1, [pc, #172]	; (8005b44 <DiagnosticString+0x7d0>)
 8005a96:	461a      	mov	r2, r3
 8005a98:	460b      	mov	r3, r1
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	8013      	strh	r3, [r2, #0]
			break;
 8005a9e:	e0ee      	b.n	8005c7e <DiagnosticString+0x90a>

		case enmDiagnostic_BOOT_REGION_JUMP_ERROR:
			strcat((char *)systemPayload,"FF");
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f7fa ff9f 	bl	80009e4 <strlen>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4413      	add	r3, r2
 8005aae:	4a24      	ldr	r2, [pc, #144]	; (8005b40 <DiagnosticString+0x7cc>)
 8005ab0:	8811      	ldrh	r1, [r2, #0]
 8005ab2:	7892      	ldrb	r2, [r2, #2]
 8005ab4:	8019      	strh	r1, [r3, #0]
 8005ab6:	709a      	strb	r2, [r3, #2]
			strcat((char *)systemPayload,(char * )",");
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f7fa ff93 	bl	80009e4 <strlen>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	491f      	ldr	r1, [pc, #124]	; (8005b44 <DiagnosticString+0x7d0>)
 8005ac8:	461a      	mov	r2, r3
 8005aca:	460b      	mov	r3, r1
 8005acc:	881b      	ldrh	r3, [r3, #0]
 8005ace:	8013      	strh	r3, [r2, #0]
			itoa(DiagnosticStatus,temp,PAYLOAD_DATA_STRING_RADIX);
 8005ad0:	78fb      	ldrb	r3, [r7, #3]
 8005ad2:	f107 010c 	add.w	r1, r7, #12
 8005ad6:	220a      	movs	r2, #10
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f00f ff65 	bl	80159a8 <itoa>
			strcat((char *)systemPayload,temp);
 8005ade:	f107 030c 	add.w	r3, r7, #12
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f010 ff49 	bl	801697c <strcat>
			strcat((char *)systemPayload,(char * )",");
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7fa ff7a 	bl	80009e4 <strlen>
 8005af0:	4603      	mov	r3, r0
 8005af2:	461a      	mov	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4413      	add	r3, r2
 8005af8:	4912      	ldr	r1, [pc, #72]	; (8005b44 <DiagnosticString+0x7d0>)
 8005afa:	461a      	mov	r2, r3
 8005afc:	460b      	mov	r3, r1
 8005afe:	881b      	ldrh	r3, [r3, #0]
 8005b00:	8013      	strh	r3, [r2, #0]
			break;
 8005b02:	e0bc      	b.n	8005c7e <DiagnosticString+0x90a>

		case enmDiagnostic_IMOBI_REQ_RX:

			if(Current_Immobilization_State == 1)
 8005b04:	4b14      	ldr	r3, [pc, #80]	; (8005b58 <DiagnosticString+0x7e4>)
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d129      	bne.n	8005b60 <DiagnosticString+0x7ec>
			{
				strcat((char *)systemPayload,"IR,");
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7fa ff69 	bl	80009e4 <strlen>
 8005b12:	4603      	mov	r3, r0
 8005b14:	461a      	mov	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4413      	add	r3, r2
 8005b1a:	4a10      	ldr	r2, [pc, #64]	; (8005b5c <DiagnosticString+0x7e8>)
 8005b1c:	6810      	ldr	r0, [r2, #0]
 8005b1e:	6018      	str	r0, [r3, #0]
				itoa(Current_Immobilization_State,temp,PAYLOAD_DATA_STRING_RADIX);
 8005b20:	4b0d      	ldr	r3, [pc, #52]	; (8005b58 <DiagnosticString+0x7e4>)
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	4618      	mov	r0, r3
 8005b26:	f107 030c 	add.w	r3, r7, #12
 8005b2a:	220a      	movs	r2, #10
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	f00f ff3b 	bl	80159a8 <itoa>
				strcat((char *)systemPayload,temp);
 8005b32:	f107 030c 	add.w	r3, r7, #12
 8005b36:	4619      	mov	r1, r3
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f010 ff1f 	bl	801697c <strcat>
 8005b3e:	e046      	b.n	8005bce <DiagnosticString+0x85a>
 8005b40:	0801b714 	.word	0x0801b714
 8005b44:	0801b674 	.word	0x0801b674
 8005b48:	20000f9c 	.word	0x20000f9c
 8005b4c:	20001a30 	.word	0x20001a30
 8005b50:	0801b768 	.word	0x0801b768
 8005b54:	20001a34 	.word	0x20001a34
 8005b58:	20001adc 	.word	0x20001adc
 8005b5c:	0801b76c 	.word	0x0801b76c
			}
			else if(Current_Immobilization_State == 0)
 8005b60:	4b49      	ldr	r3, [pc, #292]	; (8005c88 <DiagnosticString+0x914>)
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d119      	bne.n	8005b9c <DiagnosticString+0x828>
			{
				strcat((char *)systemPayload,"IR,");
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f7fa ff3b 	bl	80009e4 <strlen>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	461a      	mov	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4413      	add	r3, r2
 8005b76:	4a45      	ldr	r2, [pc, #276]	; (8005c8c <DiagnosticString+0x918>)
 8005b78:	6810      	ldr	r0, [r2, #0]
 8005b7a:	6018      	str	r0, [r3, #0]
				itoa(Current_Immobilization_State,temp,PAYLOAD_DATA_STRING_RADIX);
 8005b7c:	4b42      	ldr	r3, [pc, #264]	; (8005c88 <DiagnosticString+0x914>)
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f107 030c 	add.w	r3, r7, #12
 8005b86:	220a      	movs	r2, #10
 8005b88:	4619      	mov	r1, r3
 8005b8a:	f00f ff0d 	bl	80159a8 <itoa>
				strcat((char *)systemPayload,temp);
 8005b8e:	f107 030c 	add.w	r3, r7, #12
 8005b92:	4619      	mov	r1, r3
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f010 fef1 	bl	801697c <strcat>
 8005b9a:	e018      	b.n	8005bce <DiagnosticString+0x85a>
			}
			else
			{
				strcat((char *)systemPayload,"IF,");
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f7fa ff21 	bl	80009e4 <strlen>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4413      	add	r3, r2
 8005baa:	4a39      	ldr	r2, [pc, #228]	; (8005c90 <DiagnosticString+0x91c>)
 8005bac:	6810      	ldr	r0, [r2, #0]
 8005bae:	6018      	str	r0, [r3, #0]
				itoa(Current_Immobilization_State,temp,PAYLOAD_DATA_STRING_RADIX);
 8005bb0:	4b35      	ldr	r3, [pc, #212]	; (8005c88 <DiagnosticString+0x914>)
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f107 030c 	add.w	r3, r7, #12
 8005bba:	220a      	movs	r2, #10
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	f00f fef3 	bl	80159a8 <itoa>
				strcat((char *)systemPayload,temp);
 8005bc2:	f107 030c 	add.w	r3, r7, #12
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f010 fed7 	bl	801697c <strcat>
			}

			strcat((char *)systemPayload,(char * )",");
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7fa ff08 	bl	80009e4 <strlen>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4413      	add	r3, r2
 8005bdc:	492d      	ldr	r1, [pc, #180]	; (8005c94 <DiagnosticString+0x920>)
 8005bde:	461a      	mov	r2, r3
 8005be0:	460b      	mov	r3, r1
 8005be2:	881b      	ldrh	r3, [r3, #0]
 8005be4:	8013      	strh	r3, [r2, #0]
			break;
 8005be6:	e04a      	b.n	8005c7e <DiagnosticString+0x90a>

		case enmDiagnostic_IMOBI_SUCCESS_OK:
			strcat((char *)systemPayload,"IS");
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f7fa fefb 	bl	80009e4 <strlen>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	4a28      	ldr	r2, [pc, #160]	; (8005c98 <DiagnosticString+0x924>)
 8005bf8:	8811      	ldrh	r1, [r2, #0]
 8005bfa:	7892      	ldrb	r2, [r2, #2]
 8005bfc:	8019      	strh	r1, [r3, #0]
 8005bfe:	709a      	strb	r2, [r3, #2]
			strcat((char *)systemPayload,(char * )",");
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f7fa feef 	bl	80009e4 <strlen>
 8005c06:	4603      	mov	r3, r0
 8005c08:	461a      	mov	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	4921      	ldr	r1, [pc, #132]	; (8005c94 <DiagnosticString+0x920>)
 8005c10:	461a      	mov	r2, r3
 8005c12:	460b      	mov	r3, r1
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	8013      	strh	r3, [r2, #0]
			break;
 8005c18:	e031      	b.n	8005c7e <DiagnosticString+0x90a>

		case enmDiagnostic_IDLE:
			strcat((char *)systemPayload,"IDLE");
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7fa fee2 	bl	80009e4 <strlen>
 8005c20:	4603      	mov	r3, r0
 8005c22:	461a      	mov	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4413      	add	r3, r2
 8005c28:	4a1c      	ldr	r2, [pc, #112]	; (8005c9c <DiagnosticString+0x928>)
 8005c2a:	6810      	ldr	r0, [r2, #0]
 8005c2c:	6018      	str	r0, [r3, #0]
 8005c2e:	7912      	ldrb	r2, [r2, #4]
 8005c30:	711a      	strb	r2, [r3, #4]
			strcat((char *)systemPayload,(char * )",");
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7fa fed6 	bl	80009e4 <strlen>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4413      	add	r3, r2
 8005c40:	4914      	ldr	r1, [pc, #80]	; (8005c94 <DiagnosticString+0x920>)
 8005c42:	461a      	mov	r2, r3
 8005c44:	460b      	mov	r3, r1
 8005c46:	881b      	ldrh	r3, [r3, #0]
 8005c48:	8013      	strh	r3, [r2, #0]
			break;
 8005c4a:	e018      	b.n	8005c7e <DiagnosticString+0x90a>

		default:
			strcat((char *)systemPayload,"IDLE");
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f7fa fec9 	bl	80009e4 <strlen>
 8005c52:	4603      	mov	r3, r0
 8005c54:	461a      	mov	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4413      	add	r3, r2
 8005c5a:	4a10      	ldr	r2, [pc, #64]	; (8005c9c <DiagnosticString+0x928>)
 8005c5c:	6810      	ldr	r0, [r2, #0]
 8005c5e:	6018      	str	r0, [r3, #0]
 8005c60:	7912      	ldrb	r2, [r2, #4]
 8005c62:	711a      	strb	r2, [r3, #4]
			strcat((char *)systemPayload,(char * )",");
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7fa febd 	bl	80009e4 <strlen>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4413      	add	r3, r2
 8005c72:	4908      	ldr	r1, [pc, #32]	; (8005c94 <DiagnosticString+0x920>)
 8005c74:	461a      	mov	r2, r3
 8005c76:	460b      	mov	r3, r1
 8005c78:	881b      	ldrh	r3, [r3, #0]
 8005c7a:	8013      	strh	r3, [r2, #0]
			break;
 8005c7c:	bf00      	nop
	}//end of switch(DiagnosticStatus)

}//end of void DiagnosticString(char * systemPayload,enmDiagnosticStatus DiagnosticStatus)
 8005c7e:	bf00      	nop
 8005c80:	3720      	adds	r7, #32
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bdb0      	pop	{r4, r5, r7, pc}
 8005c86:	bf00      	nop
 8005c88:	20001adc 	.word	0x20001adc
 8005c8c:	0801b76c 	.word	0x0801b76c
 8005c90:	0801b770 	.word	0x0801b770
 8005c94:	0801b674 	.word	0x0801b674
 8005c98:	0801b774 	.word	0x0801b774
 8005c9c:	0801b778 	.word	0x0801b778

08005ca0 <CANIDPrase>:

void CANIDPrase(char * systemPayload)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
	uint8_t CANIDloop = 1;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	75fb      	strb	r3, [r7, #23]

	char temp[10] = "";
 8005cac:	2300      	movs	r3, #0
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	f107 0310 	add.w	r3, r7, #16
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	601a      	str	r2, [r3, #0]
 8005cb8:	809a      	strh	r2, [r3, #4]
	for(CANIDloop=1; CANIDloop <= (MAX_CAN_IDS_SUPPORTED + 1); CANIDloop++)
 8005cba:	2301      	movs	r3, #1
 8005cbc:	75fb      	strb	r3, [r7, #23]
 8005cbe:	e01f      	b.n	8005d00 <CANIDPrase+0x60>
	{
		itoa(gu32CanConfigurationArray[CANIDloop],temp,CAN_PAYLOADSTRING_RADIX);
 8005cc0:	7dfb      	ldrb	r3, [r7, #23]
 8005cc2:	4a13      	ldr	r2, [pc, #76]	; (8005d10 <CANIDPrase+0x70>)
 8005cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f107 030c 	add.w	r3, r7, #12
 8005cce:	2210      	movs	r2, #16
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	f00f fe69 	bl	80159a8 <itoa>
		strcat((char *)systemPayload,temp);
 8005cd6:	f107 030c 	add.w	r3, r7, #12
 8005cda:	4619      	mov	r1, r3
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f010 fe4d 	bl	801697c <strcat>
		strcat((char *)systemPayload,",");
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f7fa fe7e 	bl	80009e4 <strlen>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	461a      	mov	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4413      	add	r3, r2
 8005cf0:	4908      	ldr	r1, [pc, #32]	; (8005d14 <CANIDPrase+0x74>)
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	8013      	strh	r3, [r2, #0]
	for(CANIDloop=1; CANIDloop <= (MAX_CAN_IDS_SUPPORTED + 1); CANIDloop++)
 8005cfa:	7dfb      	ldrb	r3, [r7, #23]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	75fb      	strb	r3, [r7, #23]
 8005d00:	7dfb      	ldrb	r3, [r7, #23]
 8005d02:	2b37      	cmp	r3, #55	; 0x37
 8005d04:	d9dc      	bls.n	8005cc0 <CANIDPrase+0x20>
	}
}
 8005d06:	bf00      	nop
 8005d08:	bf00      	nop
 8005d0a:	3718      	adds	r7, #24
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	20001000 	.word	0x20001000
 8005d14:	0801b674 	.word	0x0801b674

08005d18 <manufacturerDate>:

void manufacturerDate(char *systemPayload )
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
	char temp[10] = "";
 8005d20:	2300      	movs	r3, #0
 8005d22:	60fb      	str	r3, [r7, #12]
 8005d24:	f107 0310 	add.w	r3, r7, #16
 8005d28:	2200      	movs	r2, #0
 8005d2a:	601a      	str	r2, [r3, #0]
 8005d2c:	809a      	strh	r2, [r3, #4]
//	itoa(DATE,temp,CAN_PAYLOADSTRING_RADIX);
	sprintf(temp,"%2d",DATE);
 8005d2e:	f107 030c 	add.w	r3, r7, #12
 8005d32:	221c      	movs	r2, #28
 8005d34:	491b      	ldr	r1, [pc, #108]	; (8005da4 <manufacturerDate+0x8c>)
 8005d36:	4618      	mov	r0, r3
 8005d38:	f010 fe00 	bl	801693c <siprintf>
	strcat((char *)systemPayload,(char * )temp);
 8005d3c:	f107 030c 	add.w	r3, r7, #12
 8005d40:	4619      	mov	r1, r3
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f010 fe1a 	bl	801697c <strcat>

	memset(temp,0x00,sizeof(temp));
 8005d48:	f107 030c 	add.w	r3, r7, #12
 8005d4c:	220a      	movs	r2, #10
 8005d4e:	2100      	movs	r1, #0
 8005d50:	4618      	mov	r0, r3
 8005d52:	f00f fe49 	bl	80159e8 <memset>
	sprintf(temp,"%2d",MONTH);
 8005d56:	f107 030c 	add.w	r3, r7, #12
 8005d5a:	2206      	movs	r2, #6
 8005d5c:	4911      	ldr	r1, [pc, #68]	; (8005da4 <manufacturerDate+0x8c>)
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f010 fdec 	bl	801693c <siprintf>
	strcat((char *)systemPayload,(char * )temp);
 8005d64:	f107 030c 	add.w	r3, r7, #12
 8005d68:	4619      	mov	r1, r3
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f010 fe06 	bl	801697c <strcat>

	memset(temp,0x00,sizeof(temp));
 8005d70:	f107 030c 	add.w	r3, r7, #12
 8005d74:	220a      	movs	r2, #10
 8005d76:	2100      	movs	r1, #0
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f00f fe35 	bl	80159e8 <memset>
	sprintf(temp,"%d",YEAR);
 8005d7e:	f107 030c 	add.w	r3, r7, #12
 8005d82:	f240 72e7 	movw	r2, #2023	; 0x7e7
 8005d86:	4908      	ldr	r1, [pc, #32]	; (8005da8 <manufacturerDate+0x90>)
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f010 fdd7 	bl	801693c <siprintf>
	strcat((char *)systemPayload,(char * )temp);
 8005d8e:	f107 030c 	add.w	r3, r7, #12
 8005d92:	4619      	mov	r1, r3
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f010 fdf1 	bl	801697c <strcat>
}
 8005d9a:	bf00      	nop
 8005d9c:	3718      	adds	r7, #24
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	0801b780 	.word	0x0801b780
 8005da8:	0801b784 	.word	0x0801b784

08005dac <updateInputVoltage>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void updateInputVoltage(float Volt)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	ed87 0a01 	vstr	s0, [r7, #4]
//	sprintf(gcSystemSupplyVoltage,"%.2f",gfInputSupplyVoltage);
	uint8_t Integer = 0;
 8005db6:	2300      	movs	r3, #0
 8005db8:	75fb      	strb	r3, [r7, #23]
	float Frac =0;
 8005dba:	f04f 0300 	mov.w	r3, #0
 8005dbe:	613b      	str	r3, [r7, #16]
	uint16_t ftoi = 0;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	81fb      	strh	r3, [r7, #14]
	if(Volt > 0)
 8005dc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8005dc8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dd0:	dd6f      	ble.n	8005eb2 <updateInputVoltage+0x106>
	{
		Integer = Volt;
 8005dd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8005dd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dda:	edc7 7a00 	vstr	s15, [r7]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	75fb      	strb	r3, [r7, #23]
		Frac = (Volt - (int)Volt);
 8005de2:	edd7 7a01 	vldr	s15, [r7, #4]
 8005de6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005dea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dee:	ed97 7a01 	vldr	s14, [r7, #4]
 8005df2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005df6:	edc7 7a04 	vstr	s15, [r7, #16]
		ftoi = Frac*100;
 8005dfa:	edd7 7a04 	vldr	s15, [r7, #16]
 8005dfe:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8005ecc <updateInputVoltage+0x120>
 8005e02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e0a:	ee17 3a90 	vmov	r3, s15
 8005e0e:	81fb      	strh	r3, [r7, #14]

		if(Integer >= 10)
 8005e10:	7dfb      	ldrb	r3, [r7, #23]
 8005e12:	2b09      	cmp	r3, #9
 8005e14:	d919      	bls.n	8005e4a <updateInputVoltage+0x9e>
		{
			voltage[0] = (Integer/10)+48;
 8005e16:	7dfb      	ldrb	r3, [r7, #23]
 8005e18:	4a2d      	ldr	r2, [pc, #180]	; (8005ed0 <updateInputVoltage+0x124>)
 8005e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e1e:	08db      	lsrs	r3, r3, #3
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	3330      	adds	r3, #48	; 0x30
 8005e24:	b2da      	uxtb	r2, r3
 8005e26:	4b2b      	ldr	r3, [pc, #172]	; (8005ed4 <updateInputVoltage+0x128>)
 8005e28:	701a      	strb	r2, [r3, #0]
			voltage[1] = (Integer%10)+48;
 8005e2a:	7dfa      	ldrb	r2, [r7, #23]
 8005e2c:	4b28      	ldr	r3, [pc, #160]	; (8005ed0 <updateInputVoltage+0x124>)
 8005e2e:	fba3 1302 	umull	r1, r3, r3, r2
 8005e32:	08d9      	lsrs	r1, r3, #3
 8005e34:	460b      	mov	r3, r1
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	440b      	add	r3, r1
 8005e3a:	005b      	lsls	r3, r3, #1
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	3330      	adds	r3, #48	; 0x30
 8005e42:	b2da      	uxtb	r2, r3
 8005e44:	4b23      	ldr	r3, [pc, #140]	; (8005ed4 <updateInputVoltage+0x128>)
 8005e46:	705a      	strb	r2, [r3, #1]
 8005e48:	e007      	b.n	8005e5a <updateInputVoltage+0xae>
		}
		else
		{
			voltage[0] = '0';
 8005e4a:	4b22      	ldr	r3, [pc, #136]	; (8005ed4 <updateInputVoltage+0x128>)
 8005e4c:	2230      	movs	r2, #48	; 0x30
 8005e4e:	701a      	strb	r2, [r3, #0]
			voltage[1] = Integer+48;
 8005e50:	7dfb      	ldrb	r3, [r7, #23]
 8005e52:	3330      	adds	r3, #48	; 0x30
 8005e54:	b2da      	uxtb	r2, r3
 8005e56:	4b1f      	ldr	r3, [pc, #124]	; (8005ed4 <updateInputVoltage+0x128>)
 8005e58:	705a      	strb	r2, [r3, #1]
		}

		voltage[2] = '.' ;
 8005e5a:	4b1e      	ldr	r3, [pc, #120]	; (8005ed4 <updateInputVoltage+0x128>)
 8005e5c:	222e      	movs	r2, #46	; 0x2e
 8005e5e:	709a      	strb	r2, [r3, #2]

		if(ftoi >= 10)
 8005e60:	89fb      	ldrh	r3, [r7, #14]
 8005e62:	2b09      	cmp	r3, #9
 8005e64:	d91b      	bls.n	8005e9e <updateInputVoltage+0xf2>
		{
			voltage[3] = (ftoi/10)+48;
 8005e66:	89fb      	ldrh	r3, [r7, #14]
 8005e68:	4a19      	ldr	r2, [pc, #100]	; (8005ed0 <updateInputVoltage+0x124>)
 8005e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6e:	08db      	lsrs	r3, r3, #3
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	3330      	adds	r3, #48	; 0x30
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	4b16      	ldr	r3, [pc, #88]	; (8005ed4 <updateInputVoltage+0x128>)
 8005e7a:	70da      	strb	r2, [r3, #3]
			voltage[4] = (ftoi%10)+48;
 8005e7c:	89fa      	ldrh	r2, [r7, #14]
 8005e7e:	4b14      	ldr	r3, [pc, #80]	; (8005ed0 <updateInputVoltage+0x124>)
 8005e80:	fba3 1302 	umull	r1, r3, r3, r2
 8005e84:	08d9      	lsrs	r1, r3, #3
 8005e86:	460b      	mov	r3, r1
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	440b      	add	r3, r1
 8005e8c:	005b      	lsls	r3, r3, #1
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	3330      	adds	r3, #48	; 0x30
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	4b0e      	ldr	r3, [pc, #56]	; (8005ed4 <updateInputVoltage+0x128>)
 8005e9a:	711a      	strb	r2, [r3, #4]
		strcpy(voltage,"0.00");
	}

	//ftoa[0] = "1";

}
 8005e9c:	e010      	b.n	8005ec0 <updateInputVoltage+0x114>
			voltage[3] = '0';
 8005e9e:	4b0d      	ldr	r3, [pc, #52]	; (8005ed4 <updateInputVoltage+0x128>)
 8005ea0:	2230      	movs	r2, #48	; 0x30
 8005ea2:	70da      	strb	r2, [r3, #3]
			voltage[4] = ftoi+48;
 8005ea4:	89fb      	ldrh	r3, [r7, #14]
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	3330      	adds	r3, #48	; 0x30
 8005eaa:	b2da      	uxtb	r2, r3
 8005eac:	4b09      	ldr	r3, [pc, #36]	; (8005ed4 <updateInputVoltage+0x128>)
 8005eae:	711a      	strb	r2, [r3, #4]
}
 8005eb0:	e006      	b.n	8005ec0 <updateInputVoltage+0x114>
		strcpy(voltage,"0.00");
 8005eb2:	4b08      	ldr	r3, [pc, #32]	; (8005ed4 <updateInputVoltage+0x128>)
 8005eb4:	4a08      	ldr	r2, [pc, #32]	; (8005ed8 <updateInputVoltage+0x12c>)
 8005eb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005eba:	6018      	str	r0, [r3, #0]
 8005ebc:	3304      	adds	r3, #4
 8005ebe:	7019      	strb	r1, [r3, #0]
}
 8005ec0:	bf00      	nop
 8005ec2:	371c      	adds	r7, #28
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	42c80000 	.word	0x42c80000
 8005ed0:	cccccccd 	.word	0xcccccccd
 8005ed4:	20000fe8 	.word	0x20000fe8
 8005ed8:	0801b788 	.word	0x0801b788

08005edc <Queue_InitLiveQ>:
 Change History:
 Author            	Date                Remarks
 KloudQ Team        22/05/19			initial code
******************************************************************************/
void Queue_InitLiveQ(strctQUEUE *queue)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
    queue->head = 0;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	601a      	str	r2, [r3, #0]
    queue->tail = 0;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	605a      	str	r2, [r3, #4]
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <Queue_LiveEnequeue>:
 Change History:
 Author            	Date                Remarks
 KloudQ Team        22/05/19			initial code
******************************************************************************/
void Queue_LiveEnequeue(strctQUEUE * queue,char * data)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]

	/* if data is completely transfered, reset the queue */
	if(queue->head <= queue->tail)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	dc05      	bgt.n	8005f1e <Queue_LiveEnequeue+0x22>
	{
		queue->head = 0;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	601a      	str	r2, [r3, #0]
		queue->tail = 0;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	605a      	str	r2, [r3, #4]
	}

	/* If queue has data clear it */
	if(queue->data[queue->head] != NULL)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	3202      	adds	r2, #2
 8005f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00f      	beq.n	8005f4e <Queue_LiveEnequeue+0x52>
	{
		free(queue->data[queue->head]);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	3202      	adds	r2, #2
 8005f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f00f fd3e 	bl	80159bc <free>
		queue->data[queue->head] = NULL;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	3202      	adds	r2, #2
 8005f48:	2100      	movs	r1, #0
 8005f4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

	if(data != NULL) /*malloc successfully done*/
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00b      	beq.n	8005f6c <Queue_LiveEnequeue+0x70>
	{
		/* Write data to queue head */
		queue->data[queue->head]= data;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	3202      	adds	r2, #2
 8005f5c:	6839      	ldr	r1, [r7, #0]
 8005f5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		/* move to head to next location */
		queue->head++;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	1c5a      	adds	r2, r3, #1
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	601a      	str	r2, [r3, #0]
	}

	/* If queue is full */
	if(queue->head > (MAX_LIVE_QUEUE_SIZE - 1))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2b09      	cmp	r3, #9
 8005f72:	dd05      	ble.n	8005f80 <Queue_LiveEnequeue+0x84>
	{
		/*Raise Queue Overflow flag */
		GSMQueueFullFlag = 1;
 8005f74:	4b04      	ldr	r3, [pc, #16]	; (8005f88 <Queue_LiveEnequeue+0x8c>)
 8005f76:	2201      	movs	r2, #1
 8005f78:	601a      	str	r2, [r3, #0]
		queue->head = (MAX_LIVE_QUEUE_SIZE - 1);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2209      	movs	r2, #9
 8005f7e:	601a      	str	r2, [r3, #0]
	}
}
 8005f80:	bf00      	nop
 8005f82:	3708      	adds	r7, #8
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	20001ab8 	.word	0x20001ab8

08005f8c <Queue_LiveDequeue>:
 Change History:
 Author            	Date                Remarks
 KloudQ Team        22/05/19			initial code
******************************************************************************/
void Queue_LiveDequeue(strctQUEUE * queue)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]

    /* After data is uploaded free the pointer in queue->data */
        if(((queue->tail == 0) && (queue->head == 0)) || (queue->tail == queue->head))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d103      	bne.n	8005fa4 <Queue_LiveDequeue+0x18>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d005      	beq.n	8005fb0 <Queue_LiveDequeue+0x24>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d12c      	bne.n	800600a <Queue_LiveDequeue+0x7e>
        {

            if((queue->tail >= queue->head) && (queue->tail != 0)  && (queue->head != 0))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	db43      	blt.n	8006044 <Queue_LiveDequeue+0xb8>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d03f      	beq.n	8006044 <Queue_LiveDequeue+0xb8>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d03b      	beq.n	8006044 <Queue_LiveDequeue+0xb8>
            {
            	if(queue->data[queue->tail] != NULL)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	3202      	adds	r2, #2
 8005fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00f      	beq.n	8005ffc <Queue_LiveDequeue+0x70>
				{
					free(queue->data[queue->tail]);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	3202      	adds	r2, #2
 8005fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f00f fce7 	bl	80159bc <free>
					queue->data[queue->tail] = NULL;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	3202      	adds	r2, #2
 8005ff6:	2100      	movs	r1, #0
 8005ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				}

            	queue->head = 0;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	601a      	str	r2, [r3, #0]
    			queue->tail = 0;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	605a      	str	r2, [r3, #4]
            if((queue->tail >= queue->head) && (queue->tail != 0)  && (queue->head != 0))
 8006008:	e01c      	b.n	8006044 <Queue_LiveDequeue+0xb8>
            }
        }
        else
        {
            free(queue->data[queue->tail]);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	3202      	adds	r2, #2
 8006012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006016:	4618      	mov	r0, r3
 8006018:	f00f fcd0 	bl	80159bc <free>
            queue->data[queue->tail] = NULL;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	3202      	adds	r2, #2
 8006024:	2100      	movs	r1, #0
 8006026:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            queue->tail++;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	1c5a      	adds	r2, r3, #1
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	605a      	str	r2, [r3, #4]
            if(queue->tail > (MAX_LIVE_QUEUE_SIZE-1))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	2b09      	cmp	r3, #9
 800603a:	dd04      	ble.n	8006046 <Queue_LiveDequeue+0xba>
    		{
    			queue->tail=0;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	605a      	str	r2, [r3, #4]
    		}
        }
}
 8006042:	e000      	b.n	8006046 <Queue_LiveDequeue+0xba>
            if((queue->tail >= queue->head) && (queue->tail != 0)  && (queue->head != 0))
 8006044:	bf00      	nop
}
 8006046:	bf00      	nop
 8006048:	3708      	adds	r7, #8
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <Queue_IsLiveQueueEmpty>:
 Change History:
 Author            	Date                Remarks
 KloudQ Team        22/05/19			initial code
******************************************************************************/
uint32_t Queue_IsLiveQueueEmpty(strctQUEUE * queue)
{
 800604e:	b480      	push	{r7}
 8006050:	b083      	sub	sp, #12
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
	if((queue->head == queue->tail) && (queue->data[queue->tail] == NULL))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	429a      	cmp	r2, r3
 8006060:	d109      	bne.n	8006076 <Queue_IsLiveQueueEmpty+0x28>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	3202      	adds	r2, #2
 800606a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <Queue_IsLiveQueueEmpty+0x28>
		return 1;
 8006072:	2301      	movs	r3, #1
 8006074:	e000      	b.n	8006078 <Queue_IsLiveQueueEmpty+0x2a>
	else
		return 0;
 8006076:	2300      	movs	r3, #0
	//	return((queue->head) == (queue->tail));
}
 8006078:	4618      	mov	r0, r3
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <Queue_InitBuffQ>:
 Change History:
 Author            	Date                Remarks
 KloudQ Team        22/05/19			initial code
******************************************************************************/
void Queue_InitBuffQ(strctBuffQUEUE *queue)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
    queue->head = 0;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	601a      	str	r2, [r3, #0]
    queue->tail = 0;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	605a      	str	r2, [r3, #4]
}
 8006098:	bf00      	nop
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <Queue_BuffEnequeue>:
 Change History:
 Author            	Date                Remarks
 KloudQ Team        22/05/19			initial code
******************************************************************************/
void Queue_BuffEnequeue(strctBuffQUEUE * queue,char * data)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]


	/* if data is completely transfered, reset the queue */
	if(queue->head <= queue->tail)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	dc05      	bgt.n	80060c6 <Queue_BuffEnequeue+0x22>
	{
		queue->head = 0;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	601a      	str	r2, [r3, #0]
		queue->tail = 0;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	605a      	str	r2, [r3, #4]
	}

	/* If queue has data clear it */
	if(queue->data[queue->head] != NULL)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	3202      	adds	r2, #2
 80060ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00f      	beq.n	80060f6 <Queue_BuffEnequeue+0x52>
	{
		free(queue->data[queue->head]);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	3202      	adds	r2, #2
 80060de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f00f fc6a 	bl	80159bc <free>
		queue->data[queue->head] = NULL;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	3202      	adds	r2, #2
 80060f0:	2100      	movs	r1, #0
 80060f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

	if(data != NULL) /*malloc successfully done*/
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00b      	beq.n	8006114 <Queue_BuffEnequeue+0x70>
	{
		/* Write data to queue head */
		queue->data[queue->head]= data;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	3202      	adds	r2, #2
 8006104:	6839      	ldr	r1, [r7, #0]
 8006106:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		/* move to head to next location */
		queue->head++;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	1c5a      	adds	r2, r3, #1
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	601a      	str	r2, [r3, #0]
	}

	/* If queue is full */
	if(queue->head > (MAX_BUFF_QUEUE_SIZE - 1))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2b08      	cmp	r3, #8
 800611a:	dd02      	ble.n	8006122 <Queue_BuffEnequeue+0x7e>
	{
		queue->head = (MAX_BUFF_QUEUE_SIZE - 1);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2208      	movs	r2, #8
 8006120:	601a      	str	r2, [r3, #0]
	}
}
 8006122:	bf00      	nop
 8006124:	3708      	adds	r7, #8
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <Queue_BuffDequeue>:
 Change History:
 Author            	Date                Remarks
 KloudQ Team        22/05/19			initial code
******************************************************************************/
void Queue_BuffDequeue(strctBuffQUEUE * queue)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b082      	sub	sp, #8
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]

    /* After data is uploaded free the pointer in queue->data */
        if(((queue->tail == 0) && (queue->head == 0)) || (queue->tail == queue->head))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d103      	bne.n	8006142 <Queue_BuffDequeue+0x18>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d005      	beq.n	800614e <Queue_BuffDequeue+0x24>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	429a      	cmp	r2, r3
 800614c:	d12c      	bne.n	80061a8 <Queue_BuffDequeue+0x7e>
        {
        	if((queue->tail >= queue->head) && (queue->tail != 0)  && (queue->head != 0))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685a      	ldr	r2, [r3, #4]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	429a      	cmp	r2, r3
 8006158:	db43      	blt.n	80061e2 <Queue_BuffDequeue+0xb8>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d03f      	beq.n	80061e2 <Queue_BuffDequeue+0xb8>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d03b      	beq.n	80061e2 <Queue_BuffDequeue+0xb8>
            {
    			if(queue->data[queue->tail] != NULL)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	3202      	adds	r2, #2
 8006172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00f      	beq.n	800619a <Queue_BuffDequeue+0x70>
				{
					free(queue->data[queue->tail]);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	3202      	adds	r2, #2
 8006182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006186:	4618      	mov	r0, r3
 8006188:	f00f fc18 	bl	80159bc <free>
					queue->data[queue->tail] = NULL;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685a      	ldr	r2, [r3, #4]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	3202      	adds	r2, #2
 8006194:	2100      	movs	r1, #0
 8006196:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				}
    			queue->head = 0;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	601a      	str	r2, [r3, #0]
				queue->tail = 0;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	605a      	str	r2, [r3, #4]
        	if((queue->tail >= queue->head) && (queue->tail != 0)  && (queue->head != 0))
 80061a6:	e01c      	b.n	80061e2 <Queue_BuffDequeue+0xb8>
            }
        }
        else
        {
            free(queue->data[queue->tail]);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685a      	ldr	r2, [r3, #4]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	3202      	adds	r2, #2
 80061b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061b4:	4618      	mov	r0, r3
 80061b6:	f00f fc01 	bl	80159bc <free>
            queue->data[queue->tail] = NULL;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	3202      	adds	r2, #2
 80061c2:	2100      	movs	r1, #0
 80061c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            queue->tail++;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	1c5a      	adds	r2, r3, #1
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	605a      	str	r2, [r3, #4]
            if(queue->tail > (MAX_BUFF_QUEUE_SIZE-1))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	2b08      	cmp	r3, #8
 80061d8:	dd04      	ble.n	80061e4 <Queue_BuffDequeue+0xba>
    		{
    			queue->tail=0;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	605a      	str	r2, [r3, #4]
    		}
        }
}
 80061e0:	e000      	b.n	80061e4 <Queue_BuffDequeue+0xba>
        	if((queue->tail >= queue->head) && (queue->tail != 0)  && (queue->head != 0))
 80061e2:	bf00      	nop
}
 80061e4:	bf00      	nop
 80061e6:	3708      	adds	r7, #8
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <Queue_IsBuffQueueEmpty>:



uint32_t Queue_IsBuffQueueEmpty(strctBuffQUEUE * queue)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
	if((queue->head == queue->tail) && (queue->data[queue->tail] == NULL))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d109      	bne.n	8006214 <Queue_IsBuffQueueEmpty+0x28>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685a      	ldr	r2, [r3, #4]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	3202      	adds	r2, #2
 8006208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d101      	bne.n	8006214 <Queue_IsBuffQueueEmpty+0x28>
		return 1;
 8006210:	2301      	movs	r3, #1
 8006212:	e000      	b.n	8006216 <Queue_IsBuffQueueEmpty+0x2a>
	else
		return 0;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
	...

08006224 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8006228:	4b10      	ldr	r3, [pc, #64]	; (800626c <MX_RTC_Init+0x48>)
 800622a:	4a11      	ldr	r2, [pc, #68]	; (8006270 <MX_RTC_Init+0x4c>)
 800622c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800622e:	4b0f      	ldr	r3, [pc, #60]	; (800626c <MX_RTC_Init+0x48>)
 8006230:	2200      	movs	r2, #0
 8006232:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8006234:	4b0d      	ldr	r3, [pc, #52]	; (800626c <MX_RTC_Init+0x48>)
 8006236:	227f      	movs	r2, #127	; 0x7f
 8006238:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 249;
 800623a:	4b0c      	ldr	r3, [pc, #48]	; (800626c <MX_RTC_Init+0x48>)
 800623c:	22f9      	movs	r2, #249	; 0xf9
 800623e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006240:	4b0a      	ldr	r3, [pc, #40]	; (800626c <MX_RTC_Init+0x48>)
 8006242:	2200      	movs	r2, #0
 8006244:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8006246:	4b09      	ldr	r3, [pc, #36]	; (800626c <MX_RTC_Init+0x48>)
 8006248:	2200      	movs	r2, #0
 800624a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800624c:	4b07      	ldr	r3, [pc, #28]	; (800626c <MX_RTC_Init+0x48>)
 800624e:	2200      	movs	r2, #0
 8006250:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006252:	4b06      	ldr	r3, [pc, #24]	; (800626c <MX_RTC_Init+0x48>)
 8006254:	2200      	movs	r2, #0
 8006256:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006258:	4804      	ldr	r0, [pc, #16]	; (800626c <MX_RTC_Init+0x48>)
 800625a:	f00c fa1b 	bl	8012694 <HAL_RTC_Init>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d001      	beq.n	8006268 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8006264:	f7fe f989 	bl	800457a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8006268:	bf00      	nop
 800626a:	bd80      	pop	{r7, pc}
 800626c:	20003728 	.word	0x20003728
 8006270:	40002800 	.word	0x40002800

08006274 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b09a      	sub	sp, #104	; 0x68
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800627c:	f107 0308 	add.w	r3, r7, #8
 8006280:	2260      	movs	r2, #96	; 0x60
 8006282:	2100      	movs	r1, #0
 8006284:	4618      	mov	r0, r3
 8006286:	f00f fbaf 	bl	80159e8 <memset>
  if(rtcHandle->Instance==RTC)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a0f      	ldr	r2, [pc, #60]	; (80062cc <HAL_RTC_MspInit+0x58>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d117      	bne.n	80062c4 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006294:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006298:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800629a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800629e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80062a0:	f107 0308 	add.w	r3, r7, #8
 80062a4:	4618      	mov	r0, r3
 80062a6:	f00b fcbf 	bl	8011c28 <HAL_RCCEx_PeriphCLKConfig>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80062b0:	f7fe f963 	bl	800457a <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80062b4:	4b06      	ldr	r3, [pc, #24]	; (80062d0 <HAL_RTC_MspInit+0x5c>)
 80062b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ba:	4a05      	ldr	r2, [pc, #20]	; (80062d0 <HAL_RTC_MspInit+0x5c>)
 80062bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80062c4:	bf00      	nop
 80062c6:	3768      	adds	r7, #104	; 0x68
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	40002800 	.word	0x40002800
 80062d0:	40021000 	.word	0x40021000

080062d4 <LL_USART_ReceiveData8>:
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	b2db      	uxtb	r3, r3
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <GSM_CharReception_Callback>:
 Author           	Date                Remarks
 KloudQ Team       11-04-18
******************************************************************************/

void GSM_CharReception_Callback(void)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	af00      	add	r7, sp, #0
	u8gsmResponse =LL_USART_ReceiveData8(USART1);
 80062f4:	4810      	ldr	r0, [pc, #64]	; (8006338 <GSM_CharReception_Callback+0x48>)
 80062f6:	f7ff ffed 	bl	80062d4 <LL_USART_ReceiveData8>
 80062fa:	4603      	mov	r3, r0
 80062fc:	461a      	mov	r2, r3
 80062fe:	4b0f      	ldr	r3, [pc, #60]	; (800633c <GSM_CharReception_Callback+0x4c>)
 8006300:	701a      	strb	r2, [r3, #0]
	gsmInstance.as8GSM_Response_Buff[gsmInstance.u8GSM_Response_Character_Counter++] = u8gsmResponse;
 8006302:	4b0f      	ldr	r3, [pc, #60]	; (8006340 <GSM_CharReception_Callback+0x50>)
 8006304:	f8d3 3fa8 	ldr.w	r3, [r3, #4008]	; 0xfa8
 8006308:	1c5a      	adds	r2, r3, #1
 800630a:	490d      	ldr	r1, [pc, #52]	; (8006340 <GSM_CharReception_Callback+0x50>)
 800630c:	f8c1 2fa8 	str.w	r2, [r1, #4008]	; 0xfa8
 8006310:	4a0a      	ldr	r2, [pc, #40]	; (800633c <GSM_CharReception_Callback+0x4c>)
 8006312:	7811      	ldrb	r1, [r2, #0]
 8006314:	4a0a      	ldr	r2, [pc, #40]	; (8006340 <GSM_CharReception_Callback+0x50>)
 8006316:	4413      	add	r3, r2
 8006318:	460a      	mov	r2, r1
 800631a:	f883 24f7 	strb.w	r2, [r3, #1271]	; 0x4f7
	gu32GSMCharacterTimeout = FIVEHUNDRED_MS;
 800631e:	4b09      	ldr	r3, [pc, #36]	; (8006344 <GSM_CharReception_Callback+0x54>)
 8006320:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006324:	601a      	str	r2, [r3, #0]

	if(u8GSMCharRcv == 0)
 8006326:	4b08      	ldr	r3, [pc, #32]	; (8006348 <GSM_CharReception_Callback+0x58>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d102      	bne.n	8006334 <GSM_CharReception_Callback+0x44>
		u8GSMCharRcv = 1;
 800632e:	4b06      	ldr	r3, [pc, #24]	; (8006348 <GSM_CharReception_Callback+0x58>)
 8006330:	2201      	movs	r2, #1
 8006332:	601a      	str	r2, [r3, #0]
}
 8006334:	bf00      	nop
 8006336:	bd80      	pop	{r7, pc}
 8006338:	40013800 	.word	0x40013800
 800633c:	20001ac0 	.word	0x20001ac0
 8006340:	200023e4 	.word	0x200023e4
 8006344:	20002154 	.word	0x20002154
 8006348:	20001abc 	.word	0x20001abc

0800634c <SerialFlashFSM>:
 Change History:
 Author           	Date                Remarks
 KloudQ Team      03-05-2021			100229
******************************************************************************/
void SerialFlashFSM(void)
{
 800634c:	b5b0      	push	{r4, r5, r7, lr}
 800634e:	b090      	sub	sp, #64	; 0x40
 8006350:	af00      	add	r7, sp, #0
	static uint16_t u16writeDataSize = 0;
	uint16_t u16tempVar = 0;
 8006352:	2300      	movs	r3, #0
 8006354:	87fb      	strh	r3, [r7, #62]	; 0x3e
	uint8_t u8Flash_Busy_status = 0;
 8006356:	2300      	movs	r3, #0
 8006358:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t DataToWrite[5];
	char model_number[50];

	if(FlashStr.u32SerialFlashDelay != 0)
 800635c:	4bb6      	ldr	r3, [pc, #728]	; (8006638 <SerialFlashFSM+0x2ec>)
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	2b00      	cmp	r3, #0
 8006362:	f040 8357 	bne.w	8006a14 <SerialFlashFSM+0x6c8>
		return;

	switch(FlashStr.enmCurrentOperation)
 8006366:	4bb4      	ldr	r3, [pc, #720]	; (8006638 <SerialFlashFSM+0x2ec>)
 8006368:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800636c:	331a      	adds	r3, #26
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b03      	cmp	r3, #3
 8006374:	f200 8347 	bhi.w	8006a06 <SerialFlashFSM+0x6ba>
 8006378:	a201      	add	r2, pc, #4	; (adr r2, 8006380 <SerialFlashFSM+0x34>)
 800637a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637e:	bf00      	nop
 8006380:	08006391 	.word	0x08006391
 8006384:	080064d9 	.word	0x080064d9
 8006388:	08006851 	.word	0x08006851
 800638c:	080069af 	.word	0x080069af
	{
		case enmFLASH_MEMORY_IDEAL:
		{
			FlashStr.u32SerialFlashDelay = FIVEHUNDRED_MS;
 8006390:	4ba9      	ldr	r3, [pc, #676]	; (8006638 <SerialFlashFSM+0x2ec>)
 8006392:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006396:	611a      	str	r2, [r3, #16]

			if((Queue_IsBuffQueueEmpty(&gsmBuffPayload) == 1) && (g_stAdcData.u32PwrSupplyVtg > 9)&&(g_u8HttpConEstablishedFlag != 0))
 8006398:	48a8      	ldr	r0, [pc, #672]	; (800663c <SerialFlashFSM+0x2f0>)
 800639a:	f7ff ff27 	bl	80061ec <Queue_IsBuffQueueEmpty>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d160      	bne.n	8006466 <SerialFlashFSM+0x11a>
 80063a4:	4ba6      	ldr	r3, [pc, #664]	; (8006640 <SerialFlashFSM+0x2f4>)
 80063a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80063aa:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80063ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063b6:	dd56      	ble.n	8006466 <SerialFlashFSM+0x11a>
 80063b8:	4ba2      	ldr	r3, [pc, #648]	; (8006644 <SerialFlashFSM+0x2f8>)
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d052      	beq.n	8006466 <SerialFlashFSM+0x11a>
			{
				if((FlashStr.u32FlashReadAddress < FlashStr.u32FlashWriteAddress))// && (FlashStr.u32FlashWriteAddress != 0)
 80063c0:	4b9d      	ldr	r3, [pc, #628]	; (8006638 <SerialFlashFSM+0x2ec>)
 80063c2:	685a      	ldr	r2, [r3, #4]
 80063c4:	4b9c      	ldr	r3, [pc, #624]	; (8006638 <SerialFlashFSM+0x2ec>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d234      	bcs.n	8006436 <SerialFlashFSM+0xea>
				{
					if((FlashStr.u32FlashReadAddress + g_u32FlashPayloadMaxSize) < SFLASH_SIZE)
 80063cc:	4b9a      	ldr	r3, [pc, #616]	; (8006638 <SerialFlashFSM+0x2ec>)
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063d4:	441a      	add	r2, r3
 80063d6:	4b9c      	ldr	r3, [pc, #624]	; (8006648 <SerialFlashFSM+0x2fc>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d20c      	bcs.n	80063f8 <SerialFlashFSM+0xac>
					{
						FlashStr.enmCurrentOperation = enmFLASH_MEMORY_READ;
 80063de:	4b96      	ldr	r3, [pc, #600]	; (8006638 <SerialFlashFSM+0x2ec>)
 80063e0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80063e4:	331a      	adds	r3, #26
 80063e6:	2202      	movs	r2, #2
 80063e8:	701a      	strb	r2, [r3, #0]
						FlashStr.enmCurrentReadState = enmFlashReadStatusReg;
 80063ea:	4b93      	ldr	r3, [pc, #588]	; (8006638 <SerialFlashFSM+0x2ec>)
 80063ec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80063f0:	331c      	adds	r3, #28
 80063f2:	2200      	movs	r2, #0
 80063f4:	701a      	strb	r2, [r3, #0]
				if((FlashStr.u32FlashReadAddress < FlashStr.u32FlashWriteAddress))// && (FlashStr.u32FlashWriteAddress != 0)
 80063f6:	e06e      	b.n	80064d6 <SerialFlashFSM+0x18a>
					}
					else
					{
						SFlash_Read(FlashStr.u32FlashReadAddress, (char *)FlashStr.cSFlashTransmitData, (SFLASH_SIZE - FlashStr.u32FlashReadAddress));
 80063f8:	4b8f      	ldr	r3, [pc, #572]	; (8006638 <SerialFlashFSM+0x2ec>)
 80063fa:	6858      	ldr	r0, [r3, #4]
 80063fc:	4b92      	ldr	r3, [pc, #584]	; (8006648 <SerialFlashFSM+0x2fc>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	b29a      	uxth	r2, r3
 8006402:	4b8d      	ldr	r3, [pc, #564]	; (8006638 <SerialFlashFSM+0x2ec>)
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	b29b      	uxth	r3, r3
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	b29b      	uxth	r3, r3
 800640c:	461a      	mov	r2, r3
 800640e:	498f      	ldr	r1, [pc, #572]	; (800664c <SerialFlashFSM+0x300>)
 8006410:	f000 fb84 	bl	8006b1c <SFlash_Read>
						FlashStr.u32FlashReadAddress = SFLASH_SIZE;
 8006414:	4b8c      	ldr	r3, [pc, #560]	; (8006648 <SerialFlashFSM+0x2fc>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a87      	ldr	r2, [pc, #540]	; (8006638 <SerialFlashFSM+0x2ec>)
 800641a:	6053      	str	r3, [r2, #4]
						FlashStr.enmCurrentOperation = enmFLASH_MEMORY_READ;
 800641c:	4b86      	ldr	r3, [pc, #536]	; (8006638 <SerialFlashFSM+0x2ec>)
 800641e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006422:	331a      	adds	r3, #26
 8006424:	2202      	movs	r2, #2
 8006426:	701a      	strb	r2, [r3, #0]
						FlashStr.enmCurrentReadState = enmFlashReadArrangeData;
 8006428:	4b83      	ldr	r3, [pc, #524]	; (8006638 <SerialFlashFSM+0x2ec>)
 800642a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800642e:	331c      	adds	r3, #28
 8006430:	2202      	movs	r2, #2
 8006432:	701a      	strb	r2, [r3, #0]
				if((FlashStr.u32FlashReadAddress < FlashStr.u32FlashWriteAddress))// && (FlashStr.u32FlashWriteAddress != 0)
 8006434:	e04f      	b.n	80064d6 <SerialFlashFSM+0x18a>
					}
				}
				else if(GSMQueueFullFlag == 1)
 8006436:	4b86      	ldr	r3, [pc, #536]	; (8006650 <SerialFlashFSM+0x304>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d10f      	bne.n	800645e <SerialFlashFSM+0x112>
				{
					FlashStr.enmCurrentOperation = enmFLASH_MEMORY_WRITE;
 800643e:	4b7e      	ldr	r3, [pc, #504]	; (8006638 <SerialFlashFSM+0x2ec>)
 8006440:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006444:	331a      	adds	r3, #26
 8006446:	2201      	movs	r2, #1
 8006448:	701a      	strb	r2, [r3, #0]
					FlashStr.enmCurrentWriteState = enmFlashWrCopyData;
 800644a:	4b7b      	ldr	r3, [pc, #492]	; (8006638 <SerialFlashFSM+0x2ec>)
 800644c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006450:	331b      	adds	r3, #27
 8006452:	2200      	movs	r2, #0
 8006454:	701a      	strb	r2, [r3, #0]
					GSMQueueFullFlag = 0;
 8006456:	4b7e      	ldr	r3, [pc, #504]	; (8006650 <SerialFlashFSM+0x304>)
 8006458:	2200      	movs	r2, #0
 800645a:	601a      	str	r2, [r3, #0]
				if((FlashStr.u32FlashReadAddress < FlashStr.u32FlashWriteAddress))// && (FlashStr.u32FlashWriteAddress != 0)
 800645c:	e03b      	b.n	80064d6 <SerialFlashFSM+0x18a>

				}
				else
				{
					/* Reading is complete */
					if(FlashStr.u32FlashReadAddress != 0 || FlashStr.u32FlashWriteAddress != 0)
 800645e:	4b76      	ldr	r3, [pc, #472]	; (8006638 <SerialFlashFSM+0x2ec>)
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	2b00      	cmp	r3, #0
				if((FlashStr.u32FlashReadAddress < FlashStr.u32FlashWriteAddress))// && (FlashStr.u32FlashWriteAddress != 0)
 8006464:	e037      	b.n	80064d6 <SerialFlashFSM+0x18a>
//						FlashStr.enmCurrentOperation = enmFLASH_MEMORY_ERASE;
					}
				}
			}
			/* Memory Write states */
			else if(GSMQueueFullFlag == 1)
 8006466:	4b7a      	ldr	r3, [pc, #488]	; (8006650 <SerialFlashFSM+0x304>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d10f      	bne.n	800648e <SerialFlashFSM+0x142>
			{
				FlashStr.enmCurrentOperation = enmFLASH_MEMORY_WRITE;
 800646e:	4b72      	ldr	r3, [pc, #456]	; (8006638 <SerialFlashFSM+0x2ec>)
 8006470:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006474:	331a      	adds	r3, #26
 8006476:	2201      	movs	r2, #1
 8006478:	701a      	strb	r2, [r3, #0]
				FlashStr.enmCurrentWriteState = enmFlashWrCopyData;
 800647a:	4b6f      	ldr	r3, [pc, #444]	; (8006638 <SerialFlashFSM+0x2ec>)
 800647c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006480:	331b      	adds	r3, #27
 8006482:	2200      	movs	r2, #0
 8006484:	701a      	strb	r2, [r3, #0]
				GSMQueueFullFlag = 0;
 8006486:	4b72      	ldr	r3, [pc, #456]	; (8006650 <SerialFlashFSM+0x304>)
 8006488:	2200      	movs	r2, #0
 800648a:	601a      	str	r2, [r3, #0]
			else if(((FlashStr.u32FlashReadAddress != 0) && (FlashStr.u32FlashWriteAddress != 0)) && ((FlashStr.u32FlashReadAddress >= FlashStr.u32FlashWriteAddress) || (FlashStr.u32FlashReadAddress >= SFLASH_SIZE) || (FlashStr.u32FlashWriteAddress >= SFLASH_SIZE)))
			{
				FlashStr.enmCurrentOperation = enmFLASH_MEMORY_ERASE;
			}
		}
		break;
 800648c:	e2c4      	b.n	8006a18 <SerialFlashFSM+0x6cc>
			else if(((FlashStr.u32FlashReadAddress != 0) && (FlashStr.u32FlashWriteAddress != 0)) && ((FlashStr.u32FlashReadAddress >= FlashStr.u32FlashWriteAddress) || (FlashStr.u32FlashReadAddress >= SFLASH_SIZE) || (FlashStr.u32FlashWriteAddress >= SFLASH_SIZE)))
 800648e:	4b6a      	ldr	r3, [pc, #424]	; (8006638 <SerialFlashFSM+0x2ec>)
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	f000 82c0 	beq.w	8006a18 <SerialFlashFSM+0x6cc>
 8006498:	4b67      	ldr	r3, [pc, #412]	; (8006638 <SerialFlashFSM+0x2ec>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 82bb 	beq.w	8006a18 <SerialFlashFSM+0x6cc>
 80064a2:	4b65      	ldr	r3, [pc, #404]	; (8006638 <SerialFlashFSM+0x2ec>)
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	4b64      	ldr	r3, [pc, #400]	; (8006638 <SerialFlashFSM+0x2ec>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d20c      	bcs.n	80064c8 <SerialFlashFSM+0x17c>
 80064ae:	4b62      	ldr	r3, [pc, #392]	; (8006638 <SerialFlashFSM+0x2ec>)
 80064b0:	685a      	ldr	r2, [r3, #4]
 80064b2:	4b65      	ldr	r3, [pc, #404]	; (8006648 <SerialFlashFSM+0x2fc>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d206      	bcs.n	80064c8 <SerialFlashFSM+0x17c>
 80064ba:	4b5f      	ldr	r3, [pc, #380]	; (8006638 <SerialFlashFSM+0x2ec>)
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	4b62      	ldr	r3, [pc, #392]	; (8006648 <SerialFlashFSM+0x2fc>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	f0c0 82a8 	bcc.w	8006a18 <SerialFlashFSM+0x6cc>
				FlashStr.enmCurrentOperation = enmFLASH_MEMORY_ERASE;
 80064c8:	4b5b      	ldr	r3, [pc, #364]	; (8006638 <SerialFlashFSM+0x2ec>)
 80064ca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80064ce:	331a      	adds	r3, #26
 80064d0:	2203      	movs	r2, #3
 80064d2:	701a      	strb	r2, [r3, #0]
		break;
 80064d4:	e2a0      	b.n	8006a18 <SerialFlashFSM+0x6cc>
 80064d6:	e29f      	b.n	8006a18 <SerialFlashFSM+0x6cc>
		case enmFLASH_MEMORY_WRITE:
		{
			switch(FlashStr.enmCurrentWriteState)
 80064d8:	4b57      	ldr	r3, [pc, #348]	; (8006638 <SerialFlashFSM+0x2ec>)
 80064da:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80064de:	331b      	adds	r3, #27
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	2b04      	cmp	r3, #4
 80064e6:	f200 81aa 	bhi.w	800683e <SerialFlashFSM+0x4f2>
 80064ea:	a201      	add	r2, pc, #4	; (adr r2, 80064f0 <SerialFlashFSM+0x1a4>)
 80064ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f0:	08006505 	.word	0x08006505
 80064f4:	08006665 	.word	0x08006665
 80064f8:	0800669b 	.word	0x0800669b
 80064fc:	080066b3 	.word	0x080066b3
 8006500:	080066e7 	.word	0x080066e7
			{
				case enmFlashWrCopyData:
				{
					if((Queue_IsLiveQueueEmpty(&gsmLivePayload) == FALSE )&& (gsmLivePayload.data[gsmLivePayload.tail] != NULL))
 8006504:	4853      	ldr	r0, [pc, #332]	; (8006654 <SerialFlashFSM+0x308>)
 8006506:	f7ff fda2 	bl	800604e <Queue_IsLiveQueueEmpty>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	f040 808a 	bne.w	8006626 <SerialFlashFSM+0x2da>
 8006512:	4b50      	ldr	r3, [pc, #320]	; (8006654 <SerialFlashFSM+0x308>)
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	4a4f      	ldr	r2, [pc, #316]	; (8006654 <SerialFlashFSM+0x308>)
 8006518:	3302      	adds	r3, #2
 800651a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800651e:	2b00      	cmp	r3, #0
 8006520:	f000 8081 	beq.w	8006626 <SerialFlashFSM+0x2da>
					{
						if((FlashStr.u32FlashWriteAddress + GSM_PAYLOAD_MAX_SIZE) < SFLASH_SIZE)
 8006524:	4b44      	ldr	r3, [pc, #272]	; (8006638 <SerialFlashFSM+0x2ec>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f503 6200 	add.w	r2, r3, #2048	; 0x800
 800652c:	4b46      	ldr	r3, [pc, #280]	; (8006648 <SerialFlashFSM+0x2fc>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	429a      	cmp	r2, r3
 8006532:	d26b      	bcs.n	800660c <SerialFlashFSM+0x2c0>
						{
							memset((char *)FlashStr.cSFlashWriteData, 0x00, (sizeof(FlashStr.cSFlashWriteData) * sizeof(char)));
 8006534:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006538:	2100      	movs	r1, #0
 800653a:	4847      	ldr	r0, [pc, #284]	; (8006658 <SerialFlashFSM+0x30c>)
 800653c:	f00f fa54 	bl	80159e8 <memset>
							strcpy((char *)FlashStr.cSFlashWriteData, (char *)gsmLivePayload.data[gsmLivePayload.tail]);
 8006540:	4b44      	ldr	r3, [pc, #272]	; (8006654 <SerialFlashFSM+0x308>)
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	4a43      	ldr	r2, [pc, #268]	; (8006654 <SerialFlashFSM+0x308>)
 8006546:	3302      	adds	r3, #2
 8006548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800654c:	4619      	mov	r1, r3
 800654e:	4842      	ldr	r0, [pc, #264]	; (8006658 <SerialFlashFSM+0x30c>)
 8006550:	f010 fa30 	bl	80169b4 <strcpy>
#if(DEBUGENABLE == TRUE)
		strcat(DebugBuff,"Write to Flash : ");
		strcat(DebugBuff,(char * )FlashStr.cSFlashWriteData);
		strcat(DebugBuff,"\r\n");
#endif						
							Queue_LiveDequeue(&gsmLivePayload);
 8006554:	483f      	ldr	r0, [pc, #252]	; (8006654 <SerialFlashFSM+0x308>)
 8006556:	f7ff fd19 	bl	8005f8c <Queue_LiveDequeue>

							u16writeDataSize = strlen((const char *)FlashStr.cSFlashWriteData);
 800655a:	483f      	ldr	r0, [pc, #252]	; (8006658 <SerialFlashFSM+0x30c>)
 800655c:	f7fa fa42 	bl	80009e4 <strlen>
 8006560:	4603      	mov	r3, r0
 8006562:	b29a      	uxth	r2, r3
 8006564:	4b3d      	ldr	r3, [pc, #244]	; (800665c <SerialFlashFSM+0x310>)
 8006566:	801a      	strh	r2, [r3, #0]
							memset(model_number, 0, sizeof(model_number));
 8006568:	1d3b      	adds	r3, r7, #4
 800656a:	2232      	movs	r2, #50	; 0x32
 800656c:	2100      	movs	r1, #0
 800656e:	4618      	mov	r0, r3
 8006570:	f00f fa3a 	bl	80159e8 <memset>
							strcpy(model_number, MODEL_NUMBER);
 8006574:	1d3b      	adds	r3, r7, #4
 8006576:	4a3a      	ldr	r2, [pc, #232]	; (8006660 <SerialFlashFSM+0x314>)
 8006578:	461c      	mov	r4, r3
 800657a:	4615      	mov	r5, r2
 800657c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800657e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006580:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006584:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

							if(strstr((char *)FlashStr.cSFlashWriteData, model_number) != NULL)
 8006588:	1d3b      	adds	r3, r7, #4
 800658a:	4619      	mov	r1, r3
 800658c:	4832      	ldr	r0, [pc, #200]	; (8006658 <SerialFlashFSM+0x30c>)
 800658e:	f010 fa3e 	bl	8016a0e <strstr>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d032      	beq.n	80065fe <SerialFlashFSM+0x2b2>
							{

//								char *ptr=NULL;
//								ptr = strstr(FlashStr.cSFlashWriteData,",DATA,");
								if(FlashStr.cSFlashWriteData[u16writeDataSize - 3] != '9')
 8006598:	4b30      	ldr	r3, [pc, #192]	; (800665c <SerialFlashFSM+0x310>)
 800659a:	881b      	ldrh	r3, [r3, #0]
 800659c:	3b03      	subs	r3, #3
 800659e:	4a26      	ldr	r2, [pc, #152]	; (8006638 <SerialFlashFSM+0x2ec>)
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80065a6:	3316      	adds	r3, #22
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	2b39      	cmp	r3, #57	; 0x39
 80065ac:	d01a      	beq.n	80065e4 <SerialFlashFSM+0x298>
//									ptr[1]='S';
//									ptr[2]='T';
//									ptr[3]='D';
//									ptr[4]='T';
									// 9 is added to identify history pay load
									FlashStr.cSFlashWriteData[u16writeDataSize - 3] = '9';
 80065ae:	4b2b      	ldr	r3, [pc, #172]	; (800665c <SerialFlashFSM+0x310>)
 80065b0:	881b      	ldrh	r3, [r3, #0]
 80065b2:	3b03      	subs	r3, #3
 80065b4:	4a20      	ldr	r2, [pc, #128]	; (8006638 <SerialFlashFSM+0x2ec>)
 80065b6:	4413      	add	r3, r2
 80065b8:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80065bc:	3316      	adds	r3, #22
 80065be:	2239      	movs	r2, #57	; 0x39
 80065c0:	701a      	strb	r2, [r3, #0]
									u16writeDataSize = strlen((const char *)FlashStr.cSFlashWriteData);
 80065c2:	4825      	ldr	r0, [pc, #148]	; (8006658 <SerialFlashFSM+0x30c>)
 80065c4:	f7fa fa0e 	bl	80009e4 <strlen>
 80065c8:	4603      	mov	r3, r0
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	4b23      	ldr	r3, [pc, #140]	; (800665c <SerialFlashFSM+0x310>)
 80065ce:	801a      	strh	r2, [r3, #0]
									FlashStr.u16FlashWriteIndex = 0;
 80065d0:	4b19      	ldr	r3, [pc, #100]	; (8006638 <SerialFlashFSM+0x2ec>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	819a      	strh	r2, [r3, #12]
									FlashStr.enmCurrentWriteState = enmFlashWriteStatusReg;
 80065d6:	4b18      	ldr	r3, [pc, #96]	; (8006638 <SerialFlashFSM+0x2ec>)
 80065d8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80065dc:	331b      	adds	r3, #27
 80065de:	2201      	movs	r2, #1
 80065e0:	701a      	strb	r2, [r3, #0]
						if((FlashStr.u32FlashWriteAddress + GSM_PAYLOAD_MAX_SIZE) < SFLASH_SIZE)
 80065e2:	e027      	b.n	8006634 <SerialFlashFSM+0x2e8>
		strcat(DebugBuff,"buff sys as 9 \r\n");
#endif						
								}
								else
								{
									FlashStr.enmCurrentOperation = enmFLASH_MEMORY_WRITE;
 80065e4:	4b14      	ldr	r3, [pc, #80]	; (8006638 <SerialFlashFSM+0x2ec>)
 80065e6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80065ea:	331a      	adds	r3, #26
 80065ec:	2201      	movs	r2, #1
 80065ee:	701a      	strb	r2, [r3, #0]
									FlashStr.enmCurrentWriteState = enmFlashWrCopyData;
 80065f0:	4b11      	ldr	r3, [pc, #68]	; (8006638 <SerialFlashFSM+0x2ec>)
 80065f2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80065f6:	331b      	adds	r3, #27
 80065f8:	2200      	movs	r2, #0
 80065fa:	701a      	strb	r2, [r3, #0]
						if((FlashStr.u32FlashWriteAddress + GSM_PAYLOAD_MAX_SIZE) < SFLASH_SIZE)
 80065fc:	e01a      	b.n	8006634 <SerialFlashFSM+0x2e8>
								}
							}
							else
							{
								FlashStr.enmCurrentOperation = enmFLASH_MEMORY_IDEAL;
 80065fe:	4b0e      	ldr	r3, [pc, #56]	; (8006638 <SerialFlashFSM+0x2ec>)
 8006600:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006604:	331a      	adds	r3, #26
 8006606:	2200      	movs	r2, #0
 8006608:	701a      	strb	r2, [r3, #0]
						if((FlashStr.u32FlashWriteAddress + GSM_PAYLOAD_MAX_SIZE) < SFLASH_SIZE)
 800660a:	e013      	b.n	8006634 <SerialFlashFSM+0x2e8>
							}
						}
						else
						{
							/* Memory Full */
							FlashStr.bitFlagMemoryFull = 1;
 800660c:	4b0a      	ldr	r3, [pc, #40]	; (8006638 <SerialFlashFSM+0x2ec>)
 800660e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006612:	3317      	adds	r3, #23
 8006614:	2201      	movs	r2, #1
 8006616:	701a      	strb	r2, [r3, #0]
							FlashStr.enmCurrentOperation = enmFLASH_MEMORY_IDEAL;
 8006618:	4b07      	ldr	r3, [pc, #28]	; (8006638 <SerialFlashFSM+0x2ec>)
 800661a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800661e:	331a      	adds	r3, #26
 8006620:	2200      	movs	r2, #0
 8006622:	701a      	strb	r2, [r3, #0]
						if((FlashStr.u32FlashWriteAddress + GSM_PAYLOAD_MAX_SIZE) < SFLASH_SIZE)
 8006624:	e006      	b.n	8006634 <SerialFlashFSM+0x2e8>
						}
					}
					else
					{
						FlashStr.enmCurrentOperation = enmFLASH_MEMORY_IDEAL;
 8006626:	4b04      	ldr	r3, [pc, #16]	; (8006638 <SerialFlashFSM+0x2ec>)
 8006628:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800662c:	331a      	adds	r3, #26
 800662e:	2200      	movs	r2, #0
 8006630:	701a      	strb	r2, [r3, #0]
					}
				}break;
 8006632:	e10c      	b.n	800684e <SerialFlashFSM+0x502>
 8006634:	e10b      	b.n	800684e <SerialFlashFSM+0x502>
 8006636:	bf00      	nop
 8006638:	2000374c 	.word	0x2000374c
 800663c:	20002384 	.word	0x20002384
 8006640:	2000581c 	.word	0x2000581c
 8006644:	20001a1e 	.word	0x20001a1e
 8006648:	20001acc 	.word	0x20001acc
 800664c:	20003761 	.word	0x20003761
 8006650:	20001ab8 	.word	0x20001ab8
 8006654:	200023b4 	.word	0x200023b4
 8006658:	20004f62 	.word	0x20004f62
 800665c:	20001ad0 	.word	0x20001ad0
 8006660:	0801b790 	.word	0x0801b790
				case  enmFlashWriteStatusReg:
				{
					u8Flash_Busy_status = SFlash_Read_Status_Register();
 8006664:	f000 f9e4 	bl	8006a30 <SFlash_Read_Status_Register>
 8006668:	4603      	mov	r3, r0
 800666a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
					if(u8Flash_Busy_status == 1)
 800666e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8006672:	2b01      	cmp	r3, #1
 8006674:	d10a      	bne.n	800668c <SerialFlashFSM+0x340>
					{
						/* Flash is busy */
						FlashStr.u32SerialFlashDelay = FIVEHUNDRED_MS;
 8006676:	4ba9      	ldr	r3, [pc, #676]	; (800691c <SerialFlashFSM+0x5d0>)
 8006678:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800667c:	611a      	str	r2, [r3, #16]
						FlashStr.enmCurrentWriteState = enmFlashWriteStatusReg;
 800667e:	4ba7      	ldr	r3, [pc, #668]	; (800691c <SerialFlashFSM+0x5d0>)
 8006680:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006684:	331b      	adds	r3, #27
 8006686:	2201      	movs	r2, #1
 8006688:	701a      	strb	r2, [r3, #0]
					else
					{
						FlashStr.enmCurrentWriteState = enmFlashWriteEnable;
					}

				}break;
 800668a:	e0e0      	b.n	800684e <SerialFlashFSM+0x502>
						FlashStr.enmCurrentWriteState = enmFlashWriteEnable;
 800668c:	4ba3      	ldr	r3, [pc, #652]	; (800691c <SerialFlashFSM+0x5d0>)
 800668e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006692:	331b      	adds	r3, #27
 8006694:	2202      	movs	r2, #2
 8006696:	701a      	strb	r2, [r3, #0]
				}break;
 8006698:	e0d9      	b.n	800684e <SerialFlashFSM+0x502>
				case enmFlashWriteEnable:
				{
					SFlash_Write_Enable();
 800669a:	f000 f9e7 	bl	8006a6c <SFlash_Write_Enable>
					FlashStr.enmCurrentWriteState = enmFlashWriteEnableCheck;
 800669e:	4b9f      	ldr	r3, [pc, #636]	; (800691c <SerialFlashFSM+0x5d0>)
 80066a0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80066a4:	331b      	adds	r3, #27
 80066a6:	2203      	movs	r2, #3
 80066a8:	701a      	strb	r2, [r3, #0]
					FlashStr.u32SerialFlashDelay = TWENTY_MS;
 80066aa:	4b9c      	ldr	r3, [pc, #624]	; (800691c <SerialFlashFSM+0x5d0>)
 80066ac:	2214      	movs	r2, #20
 80066ae:	611a      	str	r2, [r3, #16]
				}
				break;
 80066b0:	e0cd      	b.n	800684e <SerialFlashFSM+0x502>
				case enmFlashWriteEnableCheck:
				{
					u8Flash_Busy_status = SFlash_Read_Status_Register();
 80066b2:	f000 f9bd 	bl	8006a30 <SFlash_Read_Status_Register>
 80066b6:	4603      	mov	r3, r0
 80066b8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
					if(u8Flash_Busy_status == 2)
 80066bc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	d106      	bne.n	80066d2 <SerialFlashFSM+0x386>
						FlashStr.enmCurrentWriteState = enmFlashWriteData;
 80066c4:	4b95      	ldr	r3, [pc, #596]	; (800691c <SerialFlashFSM+0x5d0>)
 80066c6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80066ca:	331b      	adds	r3, #27
 80066cc:	2204      	movs	r2, #4
 80066ce:	701a      	strb	r2, [r3, #0]
 80066d0:	e005      	b.n	80066de <SerialFlashFSM+0x392>
					else
						FlashStr.enmCurrentWriteState = enmFlashWriteEnable;
 80066d2:	4b92      	ldr	r3, [pc, #584]	; (800691c <SerialFlashFSM+0x5d0>)
 80066d4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80066d8:	331b      	adds	r3, #27
 80066da:	2202      	movs	r2, #2
 80066dc:	701a      	strb	r2, [r3, #0]
					FlashStr.u32SerialFlashDelay = TWENTY_MS;
 80066de:	4b8f      	ldr	r3, [pc, #572]	; (800691c <SerialFlashFSM+0x5d0>)
 80066e0:	2214      	movs	r2, #20
 80066e2:	611a      	str	r2, [r3, #16]
				}
				break;
 80066e4:	e0b3      	b.n	800684e <SerialFlashFSM+0x502>

				case enmFlashWriteData:
				{
					u16tempVar = FlashStr.u32FlashWriteAddress / 256;
 80066e6:	4b8d      	ldr	r3, [pc, #564]	; (800691c <SerialFlashFSM+0x5d0>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	0a1b      	lsrs	r3, r3, #8
 80066ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
					u16tempVar *= 256;
 80066ee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80066f0:	021b      	lsls	r3, r3, #8
 80066f2:	87fb      	strh	r3, [r7, #62]	; 0x3e
					u16tempVar = FlashStr.u32FlashWriteAddress - u16tempVar;
 80066f4:	4b89      	ldr	r3, [pc, #548]	; (800691c <SerialFlashFSM+0x5d0>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
					FlashStr.u16FlashPageEmptyByte = 256 - u16tempVar;
 8006700:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006702:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8006706:	b29a      	uxth	r2, r3
 8006708:	4b84      	ldr	r3, [pc, #528]	; (800691c <SerialFlashFSM+0x5d0>)
 800670a:	811a      	strh	r2, [r3, #8]
					if(u16writeDataSize > FlashStr.u16FlashPageEmptyByte)
 800670c:	4b83      	ldr	r3, [pc, #524]	; (800691c <SerialFlashFSM+0x5d0>)
 800670e:	891a      	ldrh	r2, [r3, #8]
 8006710:	4b83      	ldr	r3, [pc, #524]	; (8006920 <SerialFlashFSM+0x5d4>)
 8006712:	881b      	ldrh	r3, [r3, #0]
 8006714:	429a      	cmp	r2, r3
 8006716:	d204      	bcs.n	8006722 <SerialFlashFSM+0x3d6>
					{
						// Multiple write cycles
						FlashStr.u16FlashByteWriten = FlashStr.u16FlashPageEmptyByte;
 8006718:	4b80      	ldr	r3, [pc, #512]	; (800691c <SerialFlashFSM+0x5d0>)
 800671a:	891a      	ldrh	r2, [r3, #8]
 800671c:	4b7f      	ldr	r3, [pc, #508]	; (800691c <SerialFlashFSM+0x5d0>)
 800671e:	815a      	strh	r2, [r3, #10]
 8006720:	e003      	b.n	800672a <SerialFlashFSM+0x3de>
					}
					else
					{
						// Last write cycle
						FlashStr.u16FlashByteWriten = u16writeDataSize;
 8006722:	4b7f      	ldr	r3, [pc, #508]	; (8006920 <SerialFlashFSM+0x5d4>)
 8006724:	881a      	ldrh	r2, [r3, #0]
 8006726:	4b7d      	ldr	r3, [pc, #500]	; (800691c <SerialFlashFSM+0x5d0>)
 8006728:	815a      	strh	r2, [r3, #10]
						//FlashStr.enmCurrentOperation = enmFLASH_MEMORY_IDEAL;
					}

					memset(DataToWrite, 0, sizeof(DataToWrite));
 800672a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800672e:	2205      	movs	r2, #5
 8006730:	2100      	movs	r1, #0
 8006732:	4618      	mov	r0, r3
 8006734:	f00f f958 	bl	80159e8 <memset>
					DataToWrite[0] = SFLASH_WRITE_PAGE_CODE;
 8006738:	2302      	movs	r3, #2
 800673a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
					DataToWrite[1] = (uint8_t)(FlashStr.u32FlashWriteAddress >> 16);
 800673e:	4b77      	ldr	r3, [pc, #476]	; (800691c <SerialFlashFSM+0x5d0>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	0c1b      	lsrs	r3, r3, #16
 8006744:	b2db      	uxtb	r3, r3
 8006746:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
					DataToWrite[2] = (uint8_t)(FlashStr.u32FlashWriteAddress >> 8);
 800674a:	4b74      	ldr	r3, [pc, #464]	; (800691c <SerialFlashFSM+0x5d0>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	0a1b      	lsrs	r3, r3, #8
 8006750:	b2db      	uxtb	r3, r3
 8006752:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
					DataToWrite[3] = (uint8_t)(FlashStr.u32FlashWriteAddress >> 0);
 8006756:	4b71      	ldr	r3, [pc, #452]	; (800691c <SerialFlashFSM+0x5d0>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	b2db      	uxtb	r3, r3
 800675c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					SFlash_Chip_Select(ENABLE);
 8006760:	2001      	movs	r0, #1
 8006762:	f000 f9bf 	bl	8006ae4 <SFlash_Chip_Select>
					HAL_Delay(1);
 8006766:	2001      	movs	r0, #1
 8006768:	f003 fee8 	bl	800a53c <HAL_Delay>
				  	HAL_SPI_Transmit_IT(&hspi2, (uint8_t *) DataToWrite, 4);
 800676c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006770:	2204      	movs	r2, #4
 8006772:	4619      	mov	r1, r3
 8006774:	486b      	ldr	r0, [pc, #428]	; (8006924 <SerialFlashFSM+0x5d8>)
 8006776:	f00c fe53 	bl	8013420 <HAL_SPI_Transmit_IT>
				  	HAL_SPI_Transmit_IT(&hspi2, (uint8_t *) &FlashStr.cSFlashWriteData[FlashStr.u16FlashWriteIndex], FlashStr.u16FlashByteWriten);
 800677a:	4b68      	ldr	r3, [pc, #416]	; (800691c <SerialFlashFSM+0x5d0>)
 800677c:	899b      	ldrh	r3, [r3, #12]
 800677e:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8006782:	3310      	adds	r3, #16
 8006784:	4a65      	ldr	r2, [pc, #404]	; (800691c <SerialFlashFSM+0x5d0>)
 8006786:	4413      	add	r3, r2
 8006788:	3306      	adds	r3, #6
 800678a:	4a64      	ldr	r2, [pc, #400]	; (800691c <SerialFlashFSM+0x5d0>)
 800678c:	8952      	ldrh	r2, [r2, #10]
 800678e:	4619      	mov	r1, r3
 8006790:	4864      	ldr	r0, [pc, #400]	; (8006924 <SerialFlashFSM+0x5d8>)
 8006792:	f00c fe45 	bl	8013420 <HAL_SPI_Transmit_IT>
				  	HAL_Delay(100);
 8006796:	2064      	movs	r0, #100	; 0x64
 8006798:	f003 fed0 	bl	800a53c <HAL_Delay>
					SFlash_Chip_Select(DISABLE);
 800679c:	2000      	movs	r0, #0
 800679e:	f000 f9a1 	bl	8006ae4 <SFlash_Chip_Select>

					FlashStr.u32FlashWriteAddress += FlashStr.u16FlashByteWriten;
 80067a2:	4b5e      	ldr	r3, [pc, #376]	; (800691c <SerialFlashFSM+0x5d0>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a5d      	ldr	r2, [pc, #372]	; (800691c <SerialFlashFSM+0x5d0>)
 80067a8:	8952      	ldrh	r2, [r2, #10]
 80067aa:	4413      	add	r3, r2
 80067ac:	4a5b      	ldr	r2, [pc, #364]	; (800691c <SerialFlashFSM+0x5d0>)
 80067ae:	6013      	str	r3, [r2, #0]
					FlashStr.u16FlashWriteIndex += FlashStr.u16FlashByteWriten;
 80067b0:	4b5a      	ldr	r3, [pc, #360]	; (800691c <SerialFlashFSM+0x5d0>)
 80067b2:	899a      	ldrh	r2, [r3, #12]
 80067b4:	4b59      	ldr	r3, [pc, #356]	; (800691c <SerialFlashFSM+0x5d0>)
 80067b6:	895b      	ldrh	r3, [r3, #10]
 80067b8:	4413      	add	r3, r2
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	4b57      	ldr	r3, [pc, #348]	; (800691c <SerialFlashFSM+0x5d0>)
 80067be:	819a      	strh	r2, [r3, #12]
					FlashStr.u16FlashPageEmptyByte -= FlashStr.u16FlashByteWriten;
 80067c0:	4b56      	ldr	r3, [pc, #344]	; (800691c <SerialFlashFSM+0x5d0>)
 80067c2:	891a      	ldrh	r2, [r3, #8]
 80067c4:	4b55      	ldr	r3, [pc, #340]	; (800691c <SerialFlashFSM+0x5d0>)
 80067c6:	895b      	ldrh	r3, [r3, #10]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	4b53      	ldr	r3, [pc, #332]	; (800691c <SerialFlashFSM+0x5d0>)
 80067ce:	811a      	strh	r2, [r3, #8]
					u16writeDataSize -= FlashStr.u16FlashByteWriten;
 80067d0:	4b53      	ldr	r3, [pc, #332]	; (8006920 <SerialFlashFSM+0x5d4>)
 80067d2:	881a      	ldrh	r2, [r3, #0]
 80067d4:	4b51      	ldr	r3, [pc, #324]	; (800691c <SerialFlashFSM+0x5d0>)
 80067d6:	895b      	ldrh	r3, [r3, #10]
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	b29a      	uxth	r2, r3
 80067dc:	4b50      	ldr	r3, [pc, #320]	; (8006920 <SerialFlashFSM+0x5d4>)
 80067de:	801a      	strh	r2, [r3, #0]
					if(FlashStr.u16FlashPageEmptyByte >= u16writeDataSize)	// Write is over write next queue
 80067e0:	4b4e      	ldr	r3, [pc, #312]	; (800691c <SerialFlashFSM+0x5d0>)
 80067e2:	891a      	ldrh	r2, [r3, #8]
 80067e4:	4b4e      	ldr	r3, [pc, #312]	; (8006920 <SerialFlashFSM+0x5d4>)
 80067e6:	881b      	ldrh	r3, [r3, #0]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d321      	bcc.n	8006830 <SerialFlashFSM+0x4e4>
					{
						/**/
						HAL_Delay(5);
 80067ec:	2005      	movs	r0, #5
 80067ee:	f003 fea5 	bl	800a53c <HAL_Delay>
						SFlash_Write_Disable();
 80067f2:	f000 f959 	bl	8006aa8 <SFlash_Write_Disable>
						FlashStr.enmCurrentWriteState = enmFlashWrCopyData ;
 80067f6:	4b49      	ldr	r3, [pc, #292]	; (800691c <SerialFlashFSM+0x5d0>)
 80067f8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80067fc:	331b      	adds	r3, #27
 80067fe:	2200      	movs	r2, #0
 8006800:	701a      	strb	r2, [r3, #0]
						memset((char *)FlashStr.cSFlashWriteData, 0x00, (sizeof(FlashStr.cSFlashWriteData) * sizeof(char)));
 8006802:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006806:	2100      	movs	r1, #0
 8006808:	4847      	ldr	r0, [pc, #284]	; (8006928 <SerialFlashFSM+0x5dc>)
 800680a:	f00f f8ed 	bl	80159e8 <memset>

						if(Queue_IsLiveQueueEmpty(&gsmLivePayload) == TRUE)
 800680e:	4847      	ldr	r0, [pc, #284]	; (800692c <SerialFlashFSM+0x5e0>)
 8006810:	f7ff fc1d 	bl	800604e <Queue_IsLiveQueueEmpty>
 8006814:	4603      	mov	r3, r0
 8006816:	2b01      	cmp	r3, #1
 8006818:	d118      	bne.n	800684c <SerialFlashFSM+0x500>
						{
							//TODO check this is last cycle
							/*	Writing SFlash Write address into Inernal Flash*/
							g_stEepromBuffMemAdd.u32BuffFlashWriteAddress = FlashStr.u32FlashWriteAddress;
 800681a:	4b40      	ldr	r3, [pc, #256]	; (800691c <SerialFlashFSM+0x5d0>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a44      	ldr	r2, [pc, #272]	; (8006930 <SerialFlashFSM+0x5e4>)
 8006820:	6053      	str	r3, [r2, #4]
							g_stEepromBuffMemAdd.u32BuffFlashReadAddress =FlashStr.u32FlashReadAddress;
 8006822:	4b3e      	ldr	r3, [pc, #248]	; (800691c <SerialFlashFSM+0x5d0>)
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	4a42      	ldr	r2, [pc, #264]	; (8006930 <SerialFlashFSM+0x5e4>)
 8006828:	6013      	str	r3, [r2, #0]
							EEPROM_WriteBuffMemData();
 800682a:	f7fb f87b 	bl	8001924 <EEPROM_WriteBuffMemData>
					else
					{
						FlashStr.enmCurrentWriteState = enmFlashWriteEnable;
					}
				}
				break;
 800682e:	e00d      	b.n	800684c <SerialFlashFSM+0x500>
						FlashStr.enmCurrentWriteState = enmFlashWriteEnable;
 8006830:	4b3a      	ldr	r3, [pc, #232]	; (800691c <SerialFlashFSM+0x5d0>)
 8006832:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006836:	331b      	adds	r3, #27
 8006838:	2202      	movs	r2, #2
 800683a:	701a      	strb	r2, [r3, #0]
				break;
 800683c:	e006      	b.n	800684c <SerialFlashFSM+0x500>
				default:
					FlashStr.enmCurrentOperation = enmFLASH_MEMORY_IDEAL;
 800683e:	4b37      	ldr	r3, [pc, #220]	; (800691c <SerialFlashFSM+0x5d0>)
 8006840:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006844:	331a      	adds	r3, #26
 8006846:	2200      	movs	r2, #0
 8006848:	701a      	strb	r2, [r3, #0]
					break;
 800684a:	e000      	b.n	800684e <SerialFlashFSM+0x502>
				break;
 800684c:	bf00      	nop
			}
		}
		break;
 800684e:	e0e4      	b.n	8006a1a <SerialFlashFSM+0x6ce>

		case enmFLASH_MEMORY_READ:
		{
			switch(FlashStr.enmCurrentReadState)
 8006850:	4b32      	ldr	r3, [pc, #200]	; (800691c <SerialFlashFSM+0x5d0>)
 8006852:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006856:	331c      	adds	r3, #28
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	b2db      	uxtb	r3, r3
 800685c:	2b02      	cmp	r3, #2
 800685e:	d06b      	beq.n	8006938 <SerialFlashFSM+0x5ec>
 8006860:	2b02      	cmp	r3, #2
 8006862:	f300 809c 	bgt.w	800699e <SerialFlashFSM+0x652>
 8006866:	2b00      	cmp	r3, #0
 8006868:	d002      	beq.n	8006870 <SerialFlashFSM+0x524>
 800686a:	2b01      	cmp	r3, #1
 800686c:	d01b      	beq.n	80068a6 <SerialFlashFSM+0x55a>
 800686e:	e096      	b.n	800699e <SerialFlashFSM+0x652>
			{
				case enmFlashReadStatusReg:
				{
					u8Flash_Busy_status = SFlash_Read_Status_Register();
 8006870:	f000 f8de 	bl	8006a30 <SFlash_Read_Status_Register>
 8006874:	4603      	mov	r3, r0
 8006876:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
					if(u8Flash_Busy_status == 1)
 800687a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800687e:	2b01      	cmp	r3, #1
 8006880:	d10a      	bne.n	8006898 <SerialFlashFSM+0x54c>
					{
						/* Flash is busy */
						FlashStr.u32SerialFlashDelay = FIVEHUNDRED_MS;
 8006882:	4b26      	ldr	r3, [pc, #152]	; (800691c <SerialFlashFSM+0x5d0>)
 8006884:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006888:	611a      	str	r2, [r3, #16]
						FlashStr.enmCurrentReadState = enmFlashReadStatusReg;
 800688a:	4b24      	ldr	r3, [pc, #144]	; (800691c <SerialFlashFSM+0x5d0>)
 800688c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006890:	331c      	adds	r3, #28
 8006892:	2200      	movs	r2, #0
 8006894:	701a      	strb	r2, [r3, #0]
					else
					{
						FlashStr.enmCurrentReadState = enmFlashReadData;
					}
				}
				break;
 8006896:	e089      	b.n	80069ac <SerialFlashFSM+0x660>
						FlashStr.enmCurrentReadState = enmFlashReadData;
 8006898:	4b20      	ldr	r3, [pc, #128]	; (800691c <SerialFlashFSM+0x5d0>)
 800689a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800689e:	331c      	adds	r3, #28
 80068a0:	2201      	movs	r2, #1
 80068a2:	701a      	strb	r2, [r3, #0]
				break;
 80068a4:	e082      	b.n	80069ac <SerialFlashFSM+0x660>
						FlashStr.u32FlashReadAddress = 0;
					}
					else
#endif
					{
						FlashStr.bitFlagReadInProgress = 1;
 80068a6:	4b1d      	ldr	r3, [pc, #116]	; (800691c <SerialFlashFSM+0x5d0>)
 80068a8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80068ac:	3319      	adds	r3, #25
 80068ae:	2201      	movs	r2, #1
 80068b0:	701a      	strb	r2, [r3, #0]
						memset((char *)FlashStr.cSFlashTransmitData, 0, sizeof(FlashStr.cSFlashTransmitData));
 80068b2:	f640 0201 	movw	r2, #2049	; 0x801
 80068b6:	2100      	movs	r1, #0
 80068b8:	481e      	ldr	r0, [pc, #120]	; (8006934 <SerialFlashFSM+0x5e8>)
 80068ba:	f00f f895 	bl	80159e8 <memset>
						if(FlashStr.u32FlashWriteAddress < (FlashStr.u32FlashReadAddress + g_u32FlashPayloadMaxSize))
 80068be:	4b17      	ldr	r3, [pc, #92]	; (800691c <SerialFlashFSM+0x5d0>)
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	4b16      	ldr	r3, [pc, #88]	; (800691c <SerialFlashFSM+0x5d0>)
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80068ca:	440b      	add	r3, r1
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d20e      	bcs.n	80068ee <SerialFlashFSM+0x5a2>
							SFlash_Read(FlashStr.u32FlashReadAddress, (char *)FlashStr.cSFlashTransmitData, (FlashStr.u32FlashWriteAddress - FlashStr.u32FlashReadAddress));
 80068d0:	4b12      	ldr	r3, [pc, #72]	; (800691c <SerialFlashFSM+0x5d0>)
 80068d2:	6858      	ldr	r0, [r3, #4]
 80068d4:	4b11      	ldr	r3, [pc, #68]	; (800691c <SerialFlashFSM+0x5d0>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	b29a      	uxth	r2, r3
 80068da:	4b10      	ldr	r3, [pc, #64]	; (800691c <SerialFlashFSM+0x5d0>)
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	b29b      	uxth	r3, r3
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	461a      	mov	r2, r3
 80068e6:	4913      	ldr	r1, [pc, #76]	; (8006934 <SerialFlashFSM+0x5e8>)
 80068e8:	f000 f918 	bl	8006b1c <SFlash_Read>
 80068ec:	e008      	b.n	8006900 <SerialFlashFSM+0x5b4>
						else
							SFlash_Read(FlashStr.u32FlashReadAddress, (char *)FlashStr.cSFlashTransmitData, g_u32FlashPayloadMaxSize);
 80068ee:	4b0b      	ldr	r3, [pc, #44]	; (800691c <SerialFlashFSM+0x5d0>)
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068f6:	b292      	uxth	r2, r2
 80068f8:	490e      	ldr	r1, [pc, #56]	; (8006934 <SerialFlashFSM+0x5e8>)
 80068fa:	4618      	mov	r0, r3
 80068fc:	f000 f90e 	bl	8006b1c <SFlash_Read>
						FlashStr.u32FlashReadAddress += g_u32FlashPayloadMaxSize;
 8006900:	4b06      	ldr	r3, [pc, #24]	; (800691c <SerialFlashFSM+0x5d0>)
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006908:	4413      	add	r3, r2
 800690a:	4a04      	ldr	r2, [pc, #16]	; (800691c <SerialFlashFSM+0x5d0>)
 800690c:	6053      	str	r3, [r2, #4]
						FlashStr.enmCurrentReadState = enmFlashReadArrangeData;
 800690e:	4b03      	ldr	r3, [pc, #12]	; (800691c <SerialFlashFSM+0x5d0>)
 8006910:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006914:	331c      	adds	r3, #28
 8006916:	2202      	movs	r2, #2
 8006918:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 800691a:	e047      	b.n	80069ac <SerialFlashFSM+0x660>
 800691c:	2000374c 	.word	0x2000374c
 8006920:	20001ad0 	.word	0x20001ad0
 8006924:	2000576c 	.word	0x2000576c
 8006928:	20004f62 	.word	0x20004f62
 800692c:	200023b4 	.word	0x200023b4
 8006930:	200021b0 	.word	0x200021b0
 8006934:	20003761 	.word	0x20003761

				case enmFlashReadArrangeData:
				{
					SFlash_Arrange_Read_Data();
 8006938:	f000 f92c 	bl	8006b94 <SFlash_Arrange_Read_Data>
//						}
//						FlashStr.bitFlagSFlashData = 1;
//					}

					//TODO check this state
					if(FlashStr.u32FlashReadAddress >= FlashStr.u32FlashWriteAddress)
 800693c:	4b38      	ldr	r3, [pc, #224]	; (8006a20 <SerialFlashFSM+0x6d4>)
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	4b37      	ldr	r3, [pc, #220]	; (8006a20 <SerialFlashFSM+0x6d4>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	429a      	cmp	r2, r3
 8006946:	d31d      	bcc.n	8006984 <SerialFlashFSM+0x638>
					{
					  if(strlen((char *)FlashStr.cSFlashHalfReadData) != 0)
 8006948:	4b36      	ldr	r3, [pc, #216]	; (8006a24 <SerialFlashFSM+0x6d8>)
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d019      	beq.n	8006984 <SerialFlashFSM+0x638>
					  {
						  Queue_BuffEnequeue(&gsmBuffPayload,(char *)getSFlashDataString((char *)FlashStr.cSFlashHalfReadData, g_u32FlashPayloadMaxSize+1));
 8006950:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006954:	b29b      	uxth	r3, r3
 8006956:	3301      	adds	r3, #1
 8006958:	b29b      	uxth	r3, r3
 800695a:	4619      	mov	r1, r3
 800695c:	4831      	ldr	r0, [pc, #196]	; (8006a24 <SerialFlashFSM+0x6d8>)
 800695e:	f000 f9f5 	bl	8006d4c <getSFlashDataString>
 8006962:	4603      	mov	r3, r0
 8006964:	4619      	mov	r1, r3
 8006966:	4830      	ldr	r0, [pc, #192]	; (8006a28 <SerialFlashFSM+0x6dc>)
 8006968:	f7ff fb9c 	bl	80060a4 <Queue_BuffEnequeue>
						  FlashStr.bitFlagSFlashData = 1;
 800696c:	4b2c      	ldr	r3, [pc, #176]	; (8006a20 <SerialFlashFSM+0x6d4>)
 800696e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006972:	3318      	adds	r3, #24
 8006974:	2201      	movs	r2, #1
 8006976:	701a      	strb	r2, [r3, #0]
						  FlashStr.u8BufferQueueCounts++;
 8006978:	4b29      	ldr	r3, [pc, #164]	; (8006a20 <SerialFlashFSM+0x6d4>)
 800697a:	7d1b      	ldrb	r3, [r3, #20]
 800697c:	3301      	adds	r3, #1
 800697e:	b2da      	uxtb	r2, r3
 8006980:	4b27      	ldr	r3, [pc, #156]	; (8006a20 <SerialFlashFSM+0x6d4>)
 8006982:	751a      	strb	r2, [r3, #20]
					  }
					}


					FlashStr.enmCurrentOperation = enmFLASH_MEMORY_IDEAL;
 8006984:	4b26      	ldr	r3, [pc, #152]	; (8006a20 <SerialFlashFSM+0x6d4>)
 8006986:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800698a:	331a      	adds	r3, #26
 800698c:	2200      	movs	r2, #0
 800698e:	701a      	strb	r2, [r3, #0]
					FlashStr.enmCurrentReadState = enmFlashReadStatusReg;
 8006990:	4b23      	ldr	r3, [pc, #140]	; (8006a20 <SerialFlashFSM+0x6d4>)
 8006992:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006996:	331c      	adds	r3, #28
 8006998:	2200      	movs	r2, #0
 800699a:	701a      	strb	r2, [r3, #0]
				}
				break;
 800699c:	e006      	b.n	80069ac <SerialFlashFSM+0x660>

				default:
					FlashStr.enmCurrentOperation = enmFLASH_MEMORY_IDEAL;
 800699e:	4b20      	ldr	r3, [pc, #128]	; (8006a20 <SerialFlashFSM+0x6d4>)
 80069a0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80069a4:	331a      	adds	r3, #26
 80069a6:	2200      	movs	r2, #0
 80069a8:	701a      	strb	r2, [r3, #0]
					break;
 80069aa:	bf00      	nop
			}
		}
		break;
 80069ac:	e035      	b.n	8006a1a <SerialFlashFSM+0x6ce>

		case enmFLASH_MEMORY_ERASE:
		{
				FlashStr.bitFlagReadInProgress = 0;
 80069ae:	4b1c      	ldr	r3, [pc, #112]	; (8006a20 <SerialFlashFSM+0x6d4>)
 80069b0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80069b4:	3319      	adds	r3, #25
 80069b6:	2200      	movs	r2, #0
 80069b8:	701a      	strb	r2, [r3, #0]
				SFlash_Chip_Erase();
 80069ba:	f000 f9e7 	bl	8006d8c <SFlash_Chip_Erase>
				FlashStr.bitFlagMemoryFull = 0;
 80069be:	4b18      	ldr	r3, [pc, #96]	; (8006a20 <SerialFlashFSM+0x6d4>)
 80069c0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80069c4:	3317      	adds	r3, #23
 80069c6:	2200      	movs	r2, #0
 80069c8:	701a      	strb	r2, [r3, #0]
				FlashStr.u16FlashPageEmptyByte = 0;
 80069ca:	4b15      	ldr	r3, [pc, #84]	; (8006a20 <SerialFlashFSM+0x6d4>)
 80069cc:	2200      	movs	r2, #0
 80069ce:	811a      	strh	r2, [r3, #8]

				/*	Writing SFlash address into EEPROM*/
				FlashStr.u32FlashWriteAddress = 0;
 80069d0:	4b13      	ldr	r3, [pc, #76]	; (8006a20 <SerialFlashFSM+0x6d4>)
 80069d2:	2200      	movs	r2, #0
 80069d4:	601a      	str	r2, [r3, #0]
				FlashStr.u32FlashReadAddress = 0;
 80069d6:	4b12      	ldr	r3, [pc, #72]	; (8006a20 <SerialFlashFSM+0x6d4>)
 80069d8:	2200      	movs	r2, #0
 80069da:	605a      	str	r2, [r3, #4]

				g_stEepromBuffMemAdd.u32BuffFlashWriteAddress = FlashStr.u32FlashWriteAddress;
 80069dc:	4b10      	ldr	r3, [pc, #64]	; (8006a20 <SerialFlashFSM+0x6d4>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a12      	ldr	r2, [pc, #72]	; (8006a2c <SerialFlashFSM+0x6e0>)
 80069e2:	6053      	str	r3, [r2, #4]
				g_stEepromBuffMemAdd.u32BuffFlashReadAddress =FlashStr.u32FlashReadAddress;
 80069e4:	4b0e      	ldr	r3, [pc, #56]	; (8006a20 <SerialFlashFSM+0x6d4>)
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	4a10      	ldr	r2, [pc, #64]	; (8006a2c <SerialFlashFSM+0x6e0>)
 80069ea:	6013      	str	r3, [r2, #0]
				EEPROM_WriteBuffMemData();
 80069ec:	f7fa ff9a 	bl	8001924 <EEPROM_WriteBuffMemData>

			  FlashStr.u32SerialFlashDelay =FIVEHUNDRED_MS;//TWO_MIN;
 80069f0:	4b0b      	ldr	r3, [pc, #44]	; (8006a20 <SerialFlashFSM+0x6d4>)
 80069f2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80069f6:	611a      	str	r2, [r3, #16]
			  FlashStr.enmCurrentOperation = enmFLASH_MEMORY_IDEAL;
 80069f8:	4b09      	ldr	r3, [pc, #36]	; (8006a20 <SerialFlashFSM+0x6d4>)
 80069fa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80069fe:	331a      	adds	r3, #26
 8006a00:	2200      	movs	r2, #0
 8006a02:	701a      	strb	r2, [r3, #0]
		}
		break;
 8006a04:	e009      	b.n	8006a1a <SerialFlashFSM+0x6ce>

		default:
			FlashStr.enmCurrentOperation = enmFLASH_MEMORY_IDEAL;
 8006a06:	4b06      	ldr	r3, [pc, #24]	; (8006a20 <SerialFlashFSM+0x6d4>)
 8006a08:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006a0c:	331a      	adds	r3, #26
 8006a0e:	2200      	movs	r2, #0
 8006a10:	701a      	strb	r2, [r3, #0]
			break;
 8006a12:	e002      	b.n	8006a1a <SerialFlashFSM+0x6ce>
		return;
 8006a14:	bf00      	nop
 8006a16:	e000      	b.n	8006a1a <SerialFlashFSM+0x6ce>
		break;
 8006a18:	bf00      	nop
	}
}
 8006a1a:	3740      	adds	r7, #64	; 0x40
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bdb0      	pop	{r4, r5, r7, pc}
 8006a20:	2000374c 	.word	0x2000374c
 8006a24:	20003f62 	.word	0x20003f62
 8006a28:	20002384 	.word	0x20002384
 8006a2c:	200021b0 	.word	0x200021b0

08006a30 <SFlash_Read_Status_Register>:
 Change History:
 Author           	Date                Remarks
 KloudQ Team      03-05-2021			100229
******************************************************************************/
uint8_t SFlash_Read_Status_Register(void)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
	uint8_t tx_var[3], rx_var[3];
//	SFlash_Chip_Select(DISABLE);
//	HAL_Delay(1);
	tx_var[0] = SFLASH_STATUS_REG_READ_CODE;
 8006a36:	2305      	movs	r3, #5
 8006a38:	713b      	strb	r3, [r7, #4]
	SFlash_Chip_Select(ENABLE);
 8006a3a:	2001      	movs	r0, #1
 8006a3c:	f000 f852 	bl	8006ae4 <SFlash_Chip_Select>
	HAL_Delay(1);
 8006a40:	2001      	movs	r0, #1
 8006a42:	f003 fd7b 	bl	800a53c <HAL_Delay>
	HAL_SPI_TransmitReceive_IT(&hspi2, tx_var, rx_var, 2);
 8006a46:	463a      	mov	r2, r7
 8006a48:	1d39      	adds	r1, r7, #4
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	4806      	ldr	r0, [pc, #24]	; (8006a68 <SFlash_Read_Status_Register+0x38>)
 8006a4e:	f00c fe33 	bl	80136b8 <HAL_SPI_TransmitReceive_IT>
	/* wait till operation complete */
	HAL_Delay(5);
 8006a52:	2005      	movs	r0, #5
 8006a54:	f003 fd72 	bl	800a53c <HAL_Delay>
	SFlash_Chip_Select(DISABLE);
 8006a58:	2000      	movs	r0, #0
 8006a5a:	f000 f843 	bl	8006ae4 <SFlash_Chip_Select>

	return rx_var[1];
 8006a5e:	787b      	ldrb	r3, [r7, #1]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3708      	adds	r7, #8
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	2000576c 	.word	0x2000576c

08006a6c <SFlash_Write_Enable>:
 Change History:
 Author           Date                Remarks
 100229			23-03-2020
************************************************************************************/
void SFlash_Write_Enable(void)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
	uint8_t tx_var[2];
	tx_var[0] = SFLASH_WRITE_EN_CODE;	//0x06;
 8006a72:	2306      	movs	r3, #6
 8006a74:	713b      	strb	r3, [r7, #4]
	SFlash_Chip_Select(ENABLE);
 8006a76:	2001      	movs	r0, #1
 8006a78:	f000 f834 	bl	8006ae4 <SFlash_Chip_Select>
	HAL_Delay(1);
 8006a7c:	2001      	movs	r0, #1
 8006a7e:	f003 fd5d 	bl	800a53c <HAL_Delay>
	HAL_SPI_Transmit_IT(&hspi2, (uint8_t *)tx_var, 1);
 8006a82:	1d3b      	adds	r3, r7, #4
 8006a84:	2201      	movs	r2, #1
 8006a86:	4619      	mov	r1, r3
 8006a88:	4806      	ldr	r0, [pc, #24]	; (8006aa4 <SFlash_Write_Enable+0x38>)
 8006a8a:	f00c fcc9 	bl	8013420 <HAL_SPI_Transmit_IT>
	HAL_Delay(5);
 8006a8e:	2005      	movs	r0, #5
 8006a90:	f003 fd54 	bl	800a53c <HAL_Delay>
	SFlash_Chip_Select(DISABLE);
 8006a94:	2000      	movs	r0, #0
 8006a96:	f000 f825 	bl	8006ae4 <SFlash_Chip_Select>

}
 8006a9a:	bf00      	nop
 8006a9c:	3708      	adds	r7, #8
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	2000576c 	.word	0x2000576c

08006aa8 <SFlash_Write_Disable>:
 Change History:
 Author           Date                Remarks
 100229			23-03-2020
************************************************************************************/
void SFlash_Write_Disable(void)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
	uint8_t tx_var[2];
	tx_var[0] = SFLASH_WRITE_DIS_CODE;	//0x04;
 8006aae:	2304      	movs	r3, #4
 8006ab0:	713b      	strb	r3, [r7, #4]
	SFlash_Chip_Select(ENABLE);
 8006ab2:	2001      	movs	r0, #1
 8006ab4:	f000 f816 	bl	8006ae4 <SFlash_Chip_Select>
	HAL_Delay(1);
 8006ab8:	2001      	movs	r0, #1
 8006aba:	f003 fd3f 	bl	800a53c <HAL_Delay>
	HAL_SPI_Transmit_IT(&hspi2, (uint8_t *) tx_var,1);
 8006abe:	1d3b      	adds	r3, r7, #4
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	4806      	ldr	r0, [pc, #24]	; (8006ae0 <SFlash_Write_Disable+0x38>)
 8006ac6:	f00c fcab 	bl	8013420 <HAL_SPI_Transmit_IT>
	SFlash_Chip_Select(DISABLE);
 8006aca:	2000      	movs	r0, #0
 8006acc:	f000 f80a 	bl	8006ae4 <SFlash_Chip_Select>
	HAL_Delay(5);
 8006ad0:	2005      	movs	r0, #5
 8006ad2:	f003 fd33 	bl	800a53c <HAL_Delay>
}
 8006ad6:	bf00      	nop
 8006ad8:	3708      	adds	r7, #8
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	2000576c 	.word	0x2000576c

08006ae4 <SFlash_Chip_Select>:
 Change History:
 Author           Date                Remarks
 100229			03-05-2021
************************************************************************************/
void SFlash_Chip_Select(uint8_t state)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	4603      	mov	r3, r0
 8006aec:	71fb      	strb	r3, [r7, #7]
	if(state == ENABLE)
 8006aee:	79fb      	ldrb	r3, [r7, #7]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d105      	bne.n	8006b00 <SFlash_Chip_Select+0x1c>
	{
		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);		// CE LOW
 8006af4:	2200      	movs	r2, #0
 8006af6:	2101      	movs	r1, #1
 8006af8:	4807      	ldr	r0, [pc, #28]	; (8006b18 <SFlash_Chip_Select+0x34>)
 8006afa:	f008 faa1 	bl	800f040 <HAL_GPIO_WritePin>
	}
	else if(state == DISABLE)
	{
		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);		// CE High
	}
}
 8006afe:	e007      	b.n	8006b10 <SFlash_Chip_Select+0x2c>
	else if(state == DISABLE)
 8006b00:	79fb      	ldrb	r3, [r7, #7]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d104      	bne.n	8006b10 <SFlash_Chip_Select+0x2c>
		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);		// CE High
 8006b06:	2201      	movs	r2, #1
 8006b08:	2101      	movs	r1, #1
 8006b0a:	4803      	ldr	r0, [pc, #12]	; (8006b18 <SFlash_Chip_Select+0x34>)
 8006b0c:	f008 fa98 	bl	800f040 <HAL_GPIO_WritePin>
}
 8006b10:	bf00      	nop
 8006b12:	3708      	adds	r7, #8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	48000400 	.word	0x48000400

08006b1c <SFlash_Read>:
 Change History:
 Author           	Date                Remarks
 KloudQ Team      03-05-2021			100229
******************************************************************************/
void SFlash_Read(uint32_t address, char * ptr_read_data, uint16_t size)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b088      	sub	sp, #32
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	4613      	mov	r3, r2
 8006b28:	80fb      	strh	r3, [r7, #6]
	char tx_var[10];
	memset(tx_var, 0, sizeof(tx_var));
 8006b2a:	f107 0314 	add.w	r3, r7, #20
 8006b2e:	220a      	movs	r2, #10
 8006b30:	2100      	movs	r1, #0
 8006b32:	4618      	mov	r0, r3
 8006b34:	f00e ff58 	bl	80159e8 <memset>
	tx_var[0] = SFLASH_READ_HSPEED_CODE;
 8006b38:	230b      	movs	r3, #11
 8006b3a:	753b      	strb	r3, [r7, #20]
	tx_var[1] = (uint8_t)(address >> 16);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	0c1b      	lsrs	r3, r3, #16
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	757b      	strb	r3, [r7, #21]
	tx_var[2] = (uint8_t)(address >> 8);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	0a1b      	lsrs	r3, r3, #8
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	75bb      	strb	r3, [r7, #22]
	tx_var[3] = (uint8_t)(address >> 0);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	75fb      	strb	r3, [r7, #23]
	tx_var[4] = 0;
 8006b52:	2300      	movs	r3, #0
 8006b54:	763b      	strb	r3, [r7, #24]
	SFlash_Chip_Select(ENABLE);
 8006b56:	2001      	movs	r0, #1
 8006b58:	f7ff ffc4 	bl	8006ae4 <SFlash_Chip_Select>
	HAL_Delay(1);
 8006b5c:	2001      	movs	r0, #1
 8006b5e:	f003 fced 	bl	800a53c <HAL_Delay>
	HAL_SPI_Transmit_IT(&hspi2, (uint8_t *)tx_var, 5);
 8006b62:	f107 0314 	add.w	r3, r7, #20
 8006b66:	2205      	movs	r2, #5
 8006b68:	4619      	mov	r1, r3
 8006b6a:	4809      	ldr	r0, [pc, #36]	; (8006b90 <SFlash_Read+0x74>)
 8006b6c:	f00c fc58 	bl	8013420 <HAL_SPI_Transmit_IT>
	HAL_SPI_Receive_IT(&hspi2, (uint8_t *)ptr_read_data, size);
 8006b70:	88fb      	ldrh	r3, [r7, #6]
 8006b72:	461a      	mov	r2, r3
 8006b74:	68b9      	ldr	r1, [r7, #8]
 8006b76:	4806      	ldr	r0, [pc, #24]	; (8006b90 <SFlash_Read+0x74>)
 8006b78:	f00c fcee 	bl	8013558 <HAL_SPI_Receive_IT>
	HAL_Delay(150);
 8006b7c:	2096      	movs	r0, #150	; 0x96
 8006b7e:	f003 fcdd 	bl	800a53c <HAL_Delay>
	SFlash_Chip_Select(DISABLE);
 8006b82:	2000      	movs	r0, #0
 8006b84:	f7ff ffae 	bl	8006ae4 <SFlash_Chip_Select>
}
 8006b88:	bf00      	nop
 8006b8a:	3720      	adds	r7, #32
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	2000576c 	.word	0x2000576c

08006b94 <SFlash_Arrange_Read_Data>:
 Change History:
 Author           	Date                Remarks
 KloudQ Team      04-05-2021			100229
******************************************************************************/
void SFlash_Arrange_Read_Data(void)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	f6ad 0d18 	subw	sp, sp, #2072	; 0x818
 8006b9a:	af00      	add	r7, sp, #0
	char temparray[GSM_PAYLOAD_MAX_SIZE+1]={0};
 8006b9c:	1d3b      	adds	r3, r7, #4
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	601a      	str	r2, [r3, #0]
 8006ba2:	3304      	adds	r3, #4
 8006ba4:	f240 72fd 	movw	r2, #2045	; 0x7fd
 8006ba8:	2100      	movs	r1, #0
 8006baa:	4618      	mov	r0, r3
 8006bac:	f00e ff1c 	bl	80159e8 <memset>
//	char ctempUploadArray1[GSM_PAYLOAD_MAX_SIZE]={0};
	//const char endstart[] = "#*";
	const char endstart[] = "*";
 8006bb0:	463b      	mov	r3, r7
 8006bb2:	222a      	movs	r2, #42	; 0x2a
 8006bb4:	801a      	strh	r2, [r3, #0]
	char *ptrchar = FlashStr.cSFlashHalfReadData;
 8006bb6:	4b61      	ldr	r3, [pc, #388]	; (8006d3c <SFlash_Arrange_Read_Data+0x1a8>)
 8006bb8:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	char *ptrDataStartchar = FlashStr.cSFlashHalfReadData;
 8006bbc:	4b5f      	ldr	r3, [pc, #380]	; (8006d3c <SFlash_Arrange_Read_Data+0x1a8>)
 8006bbe:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
	char *ptrendchar;
	uint16_t size = 0,u16BuffQueueIndex=0;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	f8a7 3808 	strh.w	r3, [r7, #2056]	; 0x808
 8006bc8:	2300      	movs	r3, #0
 8006bca:	f8a7 380a 	strh.w	r3, [r7, #2058]	; 0x80a

	if(strlen(FlashStr.cSFlashHalfReadData) == 0)
 8006bce:	4b5b      	ldr	r3, [pc, #364]	; (8006d3c <SFlash_Arrange_Read_Data+0x1a8>)
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10b      	bne.n	8006bee <SFlash_Arrange_Read_Data+0x5a>
		memcpy(FlashStr.cSFlashHalfReadData, FlashStr.cSFlashTransmitData, sizeof(FlashStr.cSFlashTransmitData));
 8006bd6:	4b5a      	ldr	r3, [pc, #360]	; (8006d40 <SFlash_Arrange_Read_Data+0x1ac>)
 8006bd8:	4a59      	ldr	r2, [pc, #356]	; (8006d40 <SFlash_Arrange_Read_Data+0x1ac>)
 8006bda:	f603 0316 	addw	r3, r3, #2070	; 0x816
 8006bde:	f102 0115 	add.w	r1, r2, #21
 8006be2:	f640 0201 	movw	r2, #2049	; 0x801
 8006be6:	4618      	mov	r0, r3
 8006be8:	f00e fef0 	bl	80159cc <memcpy>
 8006bec:	e003      	b.n	8006bf6 <SFlash_Arrange_Read_Data+0x62>
	else
		strcat(FlashStr.cSFlashHalfReadData, FlashStr.cSFlashTransmitData);
 8006bee:	4955      	ldr	r1, [pc, #340]	; (8006d44 <SFlash_Arrange_Read_Data+0x1b0>)
 8006bf0:	4852      	ldr	r0, [pc, #328]	; (8006d3c <SFlash_Arrange_Read_Data+0x1a8>)
 8006bf2:	f00f fec3 	bl	801697c <strcat>


	FlashStr.u8BufferQueueCounts = 0;
 8006bf6:	4b52      	ldr	r3, [pc, #328]	; (8006d40 <SFlash_Arrange_Read_Data+0x1ac>)
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	751a      	strb	r2, [r3, #20]

	ptrendchar = ptrchar;
 8006bfc:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8006c00:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
	while( ptrchar != NULL)
 8006c04:	e04d      	b.n	8006ca2 <SFlash_Arrange_Read_Data+0x10e>
	{
		ptrchar = strstr(ptrchar, endstart);
 8006c06:	463b      	mov	r3, r7
 8006c08:	4619      	mov	r1, r3
 8006c0a:	f8d7 0814 	ldr.w	r0, [r7, #2068]	; 0x814
 8006c0e:	f00f fefe 	bl	8016a0e <strstr>
 8006c12:	f8c7 0814 	str.w	r0, [r7, #2068]	; 0x814
		if(ptrchar != NULL)
 8006c16:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d041      	beq.n	8006ca2 <SFlash_Arrange_Read_Data+0x10e>
		{
			/*******************************************************/
			//TODO Fill in Queue
			ptrendchar = ptrchar;
 8006c1e:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8006c22:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
			size = ptrchar - ptrDataStartchar;
 8006c26:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 8006c2a:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	f8a7 3808 	strh.w	r3, [r7, #2056]	; 0x808
			memset(temparray, 0, sizeof(temparray));
 8006c34:	1d3b      	adds	r3, r7, #4
 8006c36:	f640 0201 	movw	r2, #2049	; 0x801
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f00e fed3 	bl	80159e8 <memset>
			memcpy(temparray,ptrDataStartchar,size);
 8006c42:	f8b7 2808 	ldrh.w	r2, [r7, #2056]	; 0x808
 8006c46:	1d3b      	adds	r3, r7, #4
 8006c48:	f8d7 1810 	ldr.w	r1, [r7, #2064]	; 0x810
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f00e febd 	bl	80159cc <memcpy>
//			size++;
			if(strlen(temparray) > 0 && u16BuffQueueIndex < MAX_BUFF_QUEUE_SIZE)
 8006c52:	1d3b      	adds	r3, r7, #4
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d015      	beq.n	8006c86 <SFlash_Arrange_Read_Data+0xf2>
 8006c5a:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 8006c5e:	2b08      	cmp	r3, #8
 8006c60:	d811      	bhi.n	8006c86 <SFlash_Arrange_Read_Data+0xf2>
			{
				Queue_BuffEnequeue(&gsmBuffPayload,(char *)getSFlashDataString((char *)temparray, size));
 8006c62:	f8b7 2808 	ldrh.w	r2, [r7, #2056]	; 0x808
 8006c66:	1d3b      	adds	r3, r7, #4
 8006c68:	4611      	mov	r1, r2
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f000 f86e 	bl	8006d4c <getSFlashDataString>
 8006c70:	4603      	mov	r3, r0
 8006c72:	4619      	mov	r1, r3
 8006c74:	4834      	ldr	r0, [pc, #208]	; (8006d48 <SFlash_Arrange_Read_Data+0x1b4>)
 8006c76:	f7ff fa15 	bl	80060a4 <Queue_BuffEnequeue>
				FlashStr.u8BufferQueueCounts++;
 8006c7a:	4b31      	ldr	r3, [pc, #196]	; (8006d40 <SFlash_Arrange_Read_Data+0x1ac>)
 8006c7c:	7d1b      	ldrb	r3, [r3, #20]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	b2da      	uxtb	r2, r3
 8006c82:	4b2f      	ldr	r3, [pc, #188]	; (8006d40 <SFlash_Arrange_Read_Data+0x1ac>)
 8006c84:	751a      	strb	r2, [r3, #20]
			}

			u16BuffQueueIndex++;
 8006c86:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	f8a7 380a 	strh.w	r3, [r7, #2058]	; 0x80a

			ptrDataStartchar = ptrchar;
 8006c90:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8006c94:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
			++ptrchar;
 8006c98:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	while( ptrchar != NULL)
 8006ca2:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1ad      	bne.n	8006c06 <SFlash_Arrange_Read_Data+0x72>
			/*****************************************************/
		}
	}
	FlashStr.bitFlagSFlashData = 1;
 8006caa:	4b25      	ldr	r3, [pc, #148]	; (8006d40 <SFlash_Arrange_Read_Data+0x1ac>)
 8006cac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006cb0:	3318      	adds	r3, #24
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	701a      	strb	r2, [r3, #0]

//	++ptrendchar;
	size = ptrendchar - FlashStr.cSFlashHalfReadData;
 8006cb6:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8006cba:	4a20      	ldr	r2, [pc, #128]	; (8006d3c <SFlash_Arrange_Read_Data+0x1a8>)
 8006cbc:	1a9b      	subs	r3, r3, r2
 8006cbe:	f8a7 3808 	strh.w	r3, [r7, #2056]	; 0x808
	if(size > sizeof(FlashStr.cSFlashHalfReadData))
 8006cc2:	f8b7 3808 	ldrh.w	r3, [r7, #2056]	; 0x808
 8006cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cca:	d903      	bls.n	8006cd4 <SFlash_Arrange_Read_Data+0x140>
		size = sizeof (FlashStr.cSFlashHalfReadData) - 1;
 8006ccc:	f640 73ff 	movw	r3, #4095	; 0xfff
 8006cd0:	f8a7 3808 	strh.w	r3, [r7, #2056]	; 0x808
	memset(FlashStr.cSFlashTransmitData, 0x00, sizeof(FlashStr.cSFlashTransmitData));
 8006cd4:	f640 0201 	movw	r2, #2049	; 0x801
 8006cd8:	2100      	movs	r1, #0
 8006cda:	481a      	ldr	r0, [pc, #104]	; (8006d44 <SFlash_Arrange_Read_Data+0x1b0>)
 8006cdc:	f00e fe84 	bl	80159e8 <memset>
//	memcpy(FlashStr.cSFlashTransmitData, FlashStr.cSFlashHalfReadData, size);
	memset(temparray, 0, sizeof(temparray));
 8006ce0:	1d3b      	adds	r3, r7, #4
 8006ce2:	f640 0201 	movw	r2, #2049	; 0x801
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f00e fe7d 	bl	80159e8 <memset>
	if(strlen(ptrendchar) < sizeof(temparray) )
 8006cee:	f8d7 080c 	ldr.w	r0, [r7, #2060]	; 0x80c
 8006cf2:	f7f9 fe77 	bl	80009e4 <strlen>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cfc:	d818      	bhi.n	8006d30 <SFlash_Arrange_Read_Data+0x19c>
	{
		strcpy(temparray, ptrendchar);
 8006cfe:	1d3b      	adds	r3, r7, #4
 8006d00:	f8d7 180c 	ldr.w	r1, [r7, #2060]	; 0x80c
 8006d04:	4618      	mov	r0, r3
 8006d06:	f00f fe55 	bl	80169b4 <strcpy>
		memset(FlashStr.cSFlashHalfReadData, 0, sizeof(FlashStr.cSFlashHalfReadData));
 8006d0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006d0e:	2100      	movs	r1, #0
 8006d10:	480a      	ldr	r0, [pc, #40]	; (8006d3c <SFlash_Arrange_Read_Data+0x1a8>)
 8006d12:	f00e fe69 	bl	80159e8 <memset>
		if(strlen(temparray) < sizeof(FlashStr.cSFlashHalfReadData) )
 8006d16:	1d3b      	adds	r3, r7, #4
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7f9 fe63 	bl	80009e4 <strlen>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d24:	d204      	bcs.n	8006d30 <SFlash_Arrange_Read_Data+0x19c>
		{
			strcpy(FlashStr.cSFlashHalfReadData, temparray);
 8006d26:	1d3b      	adds	r3, r7, #4
 8006d28:	4619      	mov	r1, r3
 8006d2a:	4804      	ldr	r0, [pc, #16]	; (8006d3c <SFlash_Arrange_Read_Data+0x1a8>)
 8006d2c:	f00f fe42 	bl	80169b4 <strcpy>
		}
	}
	/* Single payload is copied in queue */

}
 8006d30:	bf00      	nop
 8006d32:	f607 0718 	addw	r7, r7, #2072	; 0x818
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	20003f62 	.word	0x20003f62
 8006d40:	2000374c 	.word	0x2000374c
 8006d44:	20003761 	.word	0x20003761
 8006d48:	20002384 	.word	0x20002384

08006d4c <getSFlashDataString>:
 Change History:
 Author           Date                Remarks
 100229			03-05-2021
************************************************************************************/
char * getSFlashDataString(char * chrptr, uint16_t memory_size)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	460b      	mov	r3, r1
 8006d56:	807b      	strh	r3, [r7, #2]
//	char * sflashPayload = malloc(sizeof(char) * SFLASH_PAYLOAD_MAX_SIZE);
	char * sflashPayload = malloc(sizeof(char) * memory_size);
 8006d58:	887b      	ldrh	r3, [r7, #2]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f00e fe26 	bl	80159ac <malloc>
 8006d60:	4603      	mov	r3, r0
 8006d62:	60fb      	str	r3, [r7, #12]
	if(sflashPayload != NULL)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00a      	beq.n	8006d80 <getSFlashDataString+0x34>
	{
		memset((char *)sflashPayload, 0x00, (sizeof(sflashPayload) * sizeof(char)));
 8006d6a:	2204      	movs	r2, #4
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f00e fe3a 	bl	80159e8 <memset>
		strcpy((char *)sflashPayload, (char *)chrptr);
 8006d74:	6879      	ldr	r1, [r7, #4]
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f00f fe1c 	bl	80169b4 <strcpy>
		return sflashPayload;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	e000      	b.n	8006d82 <getSFlashDataString+0x36>
	}
	return NULL;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
	...

08006d8c <SFlash_Chip_Erase>:
 Change History:
 Author           	Date                Remarks
 KloudQ Team      03-05-2021			100229
******************************************************************************/
void SFlash_Chip_Erase(void)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
	uint8_t var = SFLASH_CHIP_ERASE_CODE;
 8006d92:	2360      	movs	r3, #96	; 0x60
 8006d94:	71fb      	strb	r3, [r7, #7]
	SFlash_Write_Enable();
 8006d96:	f7ff fe69 	bl	8006a6c <SFlash_Write_Enable>
	SFlash_Chip_Select(ENABLE);
 8006d9a:	2001      	movs	r0, #1
 8006d9c:	f7ff fea2 	bl	8006ae4 <SFlash_Chip_Select>
	HAL_Delay(1);
 8006da0:	2001      	movs	r0, #1
 8006da2:	f003 fbcb 	bl	800a53c <HAL_Delay>
	HAL_SPI_Transmit_IT(&hspi2, &var, 1);
 8006da6:	1dfb      	adds	r3, r7, #7
 8006da8:	2201      	movs	r2, #1
 8006daa:	4619      	mov	r1, r3
 8006dac:	4808      	ldr	r0, [pc, #32]	; (8006dd0 <SFlash_Chip_Erase+0x44>)
 8006dae:	f00c fb37 	bl	8013420 <HAL_SPI_Transmit_IT>
	HAL_Delay(200);		// Time to erase full chip 100 ms
 8006db2:	20c8      	movs	r0, #200	; 0xc8
 8006db4:	f003 fbc2 	bl	800a53c <HAL_Delay>
	SFlash_Chip_Select(DISABLE);
 8006db8:	2000      	movs	r0, #0
 8006dba:	f7ff fe93 	bl	8006ae4 <SFlash_Chip_Select>
	HAL_Delay(200);		// Time to erase full chip 100 ms
 8006dbe:	20c8      	movs	r0, #200	; 0xc8
 8006dc0:	f003 fbbc 	bl	800a53c <HAL_Delay>
	SFlash_Write_Disable();
 8006dc4:	f7ff fe70 	bl	8006aa8 <SFlash_Write_Disable>
}
 8006dc8:	bf00      	nop
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	2000576c 	.word	0x2000576c

08006dd4 <SFlash_Read_Device_ID>:
 Change History:
 Author           	Date                Remarks
 KloudQ Team      03-05-2021			100229
******************************************************************************/
void SFlash_Read_Device_ID(void)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b088      	sub	sp, #32
 8006dd8:	af00      	add	r7, sp, #0
	uint8_t tx_var[10], rx_var[10];
	uint32_t address = 0;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	61fb      	str	r3, [r7, #28]
	//uint8_t read_status = 0;

	//read_status =
	SFlash_Read_Status_Register();
 8006dde:	f7ff fe27 	bl	8006a30 <SFlash_Read_Status_Register>

	memset(tx_var, 0, sizeof(tx_var));
 8006de2:	f107 0310 	add.w	r3, r7, #16
 8006de6:	220a      	movs	r2, #10
 8006de8:	2100      	movs	r1, #0
 8006dea:	4618      	mov	r0, r3
 8006dec:	f00e fdfc 	bl	80159e8 <memset>
	memset(rx_var, 0, sizeof(rx_var));
 8006df0:	1d3b      	adds	r3, r7, #4
 8006df2:	220a      	movs	r2, #10
 8006df4:	2100      	movs	r1, #0
 8006df6:	4618      	mov	r0, r3
 8006df8:	f00e fdf6 	bl	80159e8 <memset>
	tx_var[0] = SFLASH_READ_DEVICE_ID;	//0x9F;	//
 8006dfc:	2390      	movs	r3, #144	; 0x90
 8006dfe:	743b      	strb	r3, [r7, #16]

	tx_var[1] = (uint8_t)(address >> 16);
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	0c1b      	lsrs	r3, r3, #16
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	747b      	strb	r3, [r7, #17]
	tx_var[2] = (uint8_t)(address >> 8);
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	0a1b      	lsrs	r3, r3, #8
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	74bb      	strb	r3, [r7, #18]
	tx_var[3] = (uint8_t)(address >> 0);
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	74fb      	strb	r3, [r7, #19]
	SFlash_Chip_Select(ENABLE);
 8006e16:	2001      	movs	r0, #1
 8006e18:	f7ff fe64 	bl	8006ae4 <SFlash_Chip_Select>
	HAL_Delay(1);
 8006e1c:	2001      	movs	r0, #1
 8006e1e:	f003 fb8d 	bl	800a53c <HAL_Delay>
	HAL_SPI_Transmit_IT(&hspi2, (uint8_t *)tx_var, 4); //HAL_SPI_Transmit(&hspi2, (uint8_t *)tx_var, 4,20);//HAL_SPI_Transmit_IT(&hspi2, (uint8_t *)tx_var, 4);
 8006e22:	f107 0310 	add.w	r3, r7, #16
 8006e26:	2204      	movs	r2, #4
 8006e28:	4619      	mov	r1, r3
 8006e2a:	4813      	ldr	r0, [pc, #76]	; (8006e78 <SFlash_Read_Device_ID+0xa4>)
 8006e2c:	f00c faf8 	bl	8013420 <HAL_SPI_Transmit_IT>
	HAL_SPI_Receive_IT(&hspi2, (uint8_t *)rx_var, 2);//HAL_SPI_Receive(&hspi2, (uint8_t *)rx_var, 2,20);//HAL_SPI_Receive_IT(&hspi2, (uint8_t *)rx_var, 2);
 8006e30:	1d3b      	adds	r3, r7, #4
 8006e32:	2202      	movs	r2, #2
 8006e34:	4619      	mov	r1, r3
 8006e36:	4810      	ldr	r0, [pc, #64]	; (8006e78 <SFlash_Read_Device_ID+0xa4>)
 8006e38:	f00c fb8e 	bl	8013558 <HAL_SPI_Receive_IT>
	HAL_Delay(3);
 8006e3c:	2003      	movs	r0, #3
 8006e3e:	f003 fb7d 	bl	800a53c <HAL_Delay>
	SFlash_Chip_Select(DISABLE);
 8006e42:	2000      	movs	r0, #0
 8006e44:	f7ff fe4e 	bl	8006ae4 <SFlash_Chip_Select>
	switch(rx_var[1])
 8006e48:	797b      	ldrb	r3, [r7, #5]
 8006e4a:	2b16      	cmp	r3, #22
 8006e4c:	d002      	beq.n	8006e54 <SFlash_Read_Device_ID+0x80>
 8006e4e:	2b17      	cmp	r3, #23
 8006e50:	d004      	beq.n	8006e5c <SFlash_Read_Device_ID+0x88>
 8006e52:	e008      	b.n	8006e66 <SFlash_Read_Device_ID+0x92>
	{
		case 0x16:
			SFLASH_SIZE = SFLASH_SIZE_64Mbit; /* 64 Mbit memory */
 8006e54:	4b09      	ldr	r3, [pc, #36]	; (8006e7c <SFlash_Read_Device_ID+0xa8>)
 8006e56:	4a0a      	ldr	r2, [pc, #40]	; (8006e80 <SFlash_Read_Device_ID+0xac>)
 8006e58:	601a      	str	r2, [r3, #0]
			break;
 8006e5a:	e008      	b.n	8006e6e <SFlash_Read_Device_ID+0x9a>
		case 0x17:
			SFLASH_SIZE = SFLASH_SIZE_128Mbit; /* 128 Mbit memory */
 8006e5c:	4b07      	ldr	r3, [pc, #28]	; (8006e7c <SFlash_Read_Device_ID+0xa8>)
 8006e5e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8006e62:	601a      	str	r2, [r3, #0]
			break;
 8006e64:	e003      	b.n	8006e6e <SFlash_Read_Device_ID+0x9a>
		default:
			SFLASH_SIZE = 0; /* Chip problem or absent */
 8006e66:	4b05      	ldr	r3, [pc, #20]	; (8006e7c <SFlash_Read_Device_ID+0xa8>)
 8006e68:	2200      	movs	r2, #0
 8006e6a:	601a      	str	r2, [r3, #0]
			break;
 8006e6c:	bf00      	nop
	}
}
 8006e6e:	bf00      	nop
 8006e70:	3720      	adds	r7, #32
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	2000576c 	.word	0x2000576c
 8006e7c:	20001acc 	.word	0x20001acc
 8006e80:	007fffff 	.word	0x007fffff

08006e84 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
	g_u32SpiTxCmpltFlag = 1;
 8006e8c:	4b04      	ldr	r3, [pc, #16]	; (8006ea0 <HAL_SPI_TxCpltCallback+0x1c>)
 8006e8e:	2201      	movs	r2, #1
 8006e90:	601a      	str	r2, [r3, #0]
}
 8006e92:	bf00      	nop
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	20001ac8 	.word	0x20001ac8

08006ea4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
	g_u32SpiRxCmpltFlag = 1;
 8006eac:	4b04      	ldr	r3, [pc, #16]	; (8006ec0 <HAL_SPI_RxCpltCallback+0x1c>)
 8006eae:	2201      	movs	r2, #1
 8006eb0:	601a      	str	r2, [r3, #0]
}
 8006eb2:	bf00      	nop
 8006eb4:	370c      	adds	r7, #12
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	20001ac4 	.word	0x20001ac4

08006ec4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
 void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
	 g_u32SpiTxCmpltFlag = 1;
 8006ecc:	4b05      	ldr	r3, [pc, #20]	; (8006ee4 <HAL_SPI_TxRxCpltCallback+0x20>)
 8006ece:	2201      	movs	r2, #1
 8006ed0:	601a      	str	r2, [r3, #0]
	 g_u32SpiRxCmpltFlag = 1;
 8006ed2:	4b05      	ldr	r3, [pc, #20]	; (8006ee8 <HAL_SPI_TxRxCpltCallback+0x24>)
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	601a      	str	r2, [r3, #0]

}
 8006ed8:	bf00      	nop
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr
 8006ee4:	20001ac8 	.word	0x20001ac8
 8006ee8:	20001ac4 	.word	0x20001ac4

08006eec <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8006ef0:	4b1b      	ldr	r3, [pc, #108]	; (8006f60 <MX_SPI2_Init+0x74>)
 8006ef2:	4a1c      	ldr	r2, [pc, #112]	; (8006f64 <MX_SPI2_Init+0x78>)
 8006ef4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006ef6:	4b1a      	ldr	r3, [pc, #104]	; (8006f60 <MX_SPI2_Init+0x74>)
 8006ef8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006efc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006efe:	4b18      	ldr	r3, [pc, #96]	; (8006f60 <MX_SPI2_Init+0x74>)
 8006f00:	2200      	movs	r2, #0
 8006f02:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8006f04:	4b16      	ldr	r3, [pc, #88]	; (8006f60 <MX_SPI2_Init+0x74>)
 8006f06:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006f0a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f0c:	4b14      	ldr	r3, [pc, #80]	; (8006f60 <MX_SPI2_Init+0x74>)
 8006f0e:	2200      	movs	r2, #0
 8006f10:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006f12:	4b13      	ldr	r3, [pc, #76]	; (8006f60 <MX_SPI2_Init+0x74>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006f18:	4b11      	ldr	r3, [pc, #68]	; (8006f60 <MX_SPI2_Init+0x74>)
 8006f1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f1e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8006f20:	4b0f      	ldr	r3, [pc, #60]	; (8006f60 <MX_SPI2_Init+0x74>)
 8006f22:	2208      	movs	r2, #8
 8006f24:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006f26:	4b0e      	ldr	r3, [pc, #56]	; (8006f60 <MX_SPI2_Init+0x74>)
 8006f28:	2200      	movs	r2, #0
 8006f2a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006f2c:	4b0c      	ldr	r3, [pc, #48]	; (8006f60 <MX_SPI2_Init+0x74>)
 8006f2e:	2200      	movs	r2, #0
 8006f30:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f32:	4b0b      	ldr	r3, [pc, #44]	; (8006f60 <MX_SPI2_Init+0x74>)
 8006f34:	2200      	movs	r2, #0
 8006f36:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8006f38:	4b09      	ldr	r3, [pc, #36]	; (8006f60 <MX_SPI2_Init+0x74>)
 8006f3a:	2207      	movs	r2, #7
 8006f3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006f3e:	4b08      	ldr	r3, [pc, #32]	; (8006f60 <MX_SPI2_Init+0x74>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006f44:	4b06      	ldr	r3, [pc, #24]	; (8006f60 <MX_SPI2_Init+0x74>)
 8006f46:	2208      	movs	r2, #8
 8006f48:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006f4a:	4805      	ldr	r0, [pc, #20]	; (8006f60 <MX_SPI2_Init+0x74>)
 8006f4c:	f00c f87c 	bl	8013048 <HAL_SPI_Init>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d001      	beq.n	8006f5a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8006f56:	f7fd fb10 	bl	800457a <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006f5a:	bf00      	nop
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	2000576c 	.word	0x2000576c
 8006f64:	40003800 	.word	0x40003800

08006f68 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b08a      	sub	sp, #40	; 0x28
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f70:	f107 0314 	add.w	r3, r7, #20
 8006f74:	2200      	movs	r2, #0
 8006f76:	601a      	str	r2, [r3, #0]
 8006f78:	605a      	str	r2, [r3, #4]
 8006f7a:	609a      	str	r2, [r3, #8]
 8006f7c:	60da      	str	r2, [r3, #12]
 8006f7e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a1b      	ldr	r2, [pc, #108]	; (8006ff4 <HAL_SPI_MspInit+0x8c>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d130      	bne.n	8006fec <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006f8a:	4b1b      	ldr	r3, [pc, #108]	; (8006ff8 <HAL_SPI_MspInit+0x90>)
 8006f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f8e:	4a1a      	ldr	r2, [pc, #104]	; (8006ff8 <HAL_SPI_MspInit+0x90>)
 8006f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f94:	6593      	str	r3, [r2, #88]	; 0x58
 8006f96:	4b18      	ldr	r3, [pc, #96]	; (8006ff8 <HAL_SPI_MspInit+0x90>)
 8006f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f9e:	613b      	str	r3, [r7, #16]
 8006fa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fa2:	4b15      	ldr	r3, [pc, #84]	; (8006ff8 <HAL_SPI_MspInit+0x90>)
 8006fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fa6:	4a14      	ldr	r2, [pc, #80]	; (8006ff8 <HAL_SPI_MspInit+0x90>)
 8006fa8:	f043 0302 	orr.w	r3, r3, #2
 8006fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006fae:	4b12      	ldr	r3, [pc, #72]	; (8006ff8 <HAL_SPI_MspInit+0x90>)
 8006fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fb2:	f003 0302 	and.w	r3, r3, #2
 8006fb6:	60fb      	str	r3, [r7, #12]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006fba:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006fcc:	2305      	movs	r3, #5
 8006fce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fd0:	f107 0314 	add.w	r3, r7, #20
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	4809      	ldr	r0, [pc, #36]	; (8006ffc <HAL_SPI_MspInit+0x94>)
 8006fd8:	f007 fcbc 	bl	800e954 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 4, 0);
 8006fdc:	2200      	movs	r2, #0
 8006fde:	2104      	movs	r1, #4
 8006fe0:	2024      	movs	r0, #36	; 0x24
 8006fe2:	f006 fd63 	bl	800daac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8006fe6:	2024      	movs	r0, #36	; 0x24
 8006fe8:	f006 fd8c 	bl	800db04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8006fec:	bf00      	nop
 8006fee:	3728      	adds	r7, #40	; 0x28
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	40003800 	.word	0x40003800
 8006ff8:	40021000 	.word	0x40021000
 8006ffc:	48000400 	.word	0x48000400

08007000 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007006:	4b0f      	ldr	r3, [pc, #60]	; (8007044 <HAL_MspInit+0x44>)
 8007008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800700a:	4a0e      	ldr	r2, [pc, #56]	; (8007044 <HAL_MspInit+0x44>)
 800700c:	f043 0301 	orr.w	r3, r3, #1
 8007010:	6613      	str	r3, [r2, #96]	; 0x60
 8007012:	4b0c      	ldr	r3, [pc, #48]	; (8007044 <HAL_MspInit+0x44>)
 8007014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007016:	f003 0301 	and.w	r3, r3, #1
 800701a:	607b      	str	r3, [r7, #4]
 800701c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800701e:	4b09      	ldr	r3, [pc, #36]	; (8007044 <HAL_MspInit+0x44>)
 8007020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007022:	4a08      	ldr	r2, [pc, #32]	; (8007044 <HAL_MspInit+0x44>)
 8007024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007028:	6593      	str	r3, [r2, #88]	; 0x58
 800702a:	4b06      	ldr	r3, [pc, #24]	; (8007044 <HAL_MspInit+0x44>)
 800702c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800702e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007032:	603b      	str	r3, [r7, #0]
 8007034:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007036:	bf00      	nop
 8007038:	370c      	adds	r7, #12
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	40021000 	.word	0x40021000

08007048 <LL_USART_IsActiveFlag_RXNE>:
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	69db      	ldr	r3, [r3, #28]
 8007054:	f003 0320 	and.w	r3, r3, #32
 8007058:	2b20      	cmp	r3, #32
 800705a:	d101      	bne.n	8007060 <LL_USART_IsActiveFlag_RXNE+0x18>
 800705c:	2301      	movs	r3, #1
 800705e:	e000      	b.n	8007062 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	370c      	adds	r7, #12
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr

0800706e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800706e:	b480      	push	{r7}
 8007070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007072:	e7fe      	b.n	8007072 <NMI_Handler+0x4>

08007074 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007074:	b480      	push	{r7}
 8007076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007078:	e7fe      	b.n	8007078 <HardFault_Handler+0x4>

0800707a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800707a:	b480      	push	{r7}
 800707c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800707e:	e7fe      	b.n	800707e <MemManage_Handler+0x4>

08007080 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007080:	b480      	push	{r7}
 8007082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007084:	e7fe      	b.n	8007084 <BusFault_Handler+0x4>

08007086 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007086:	b480      	push	{r7}
 8007088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800708a:	e7fe      	b.n	800708a <UsageFault_Handler+0x4>

0800708c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800708c:	b480      	push	{r7}
 800708e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007090:	bf00      	nop
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr

0800709a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800709a:	b480      	push	{r7}
 800709c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800709e:	bf00      	nop
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80070a8:	b480      	push	{r7}
 80070aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80070ac:	bf00      	nop
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr

080070b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80070ba:	f003 fa1f 	bl	800a4fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80070be:	bf00      	nop
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DI_EXTI4_Pin);
 80070c6:	2010      	movs	r0, #16
 80070c8:	f008 f812 	bl	800f0f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80070cc:	bf00      	nop
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80070d4:	4802      	ldr	r0, [pc, #8]	; (80070e0 <DMA1_Channel1_IRQHandler+0x10>)
 80070d6:	f006 fff6 	bl	800e0c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80070da:	bf00      	nop
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	20002220 	.word	0x20002220

080070e4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80070e8:	4802      	ldr	r0, [pc, #8]	; (80070f4 <ADC1_IRQHandler+0x10>)
 80070ea:	f004 f8cd 	bl	800b288 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80070ee:	bf00      	nop
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	200021bc 	.word	0x200021bc

080070f8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80070fc:	4802      	ldr	r0, [pc, #8]	; (8007108 <CAN1_TX_IRQHandler+0x10>)
 80070fe:	f006 f99b 	bl	800d438 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8007102:	bf00      	nop
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	20002268 	.word	0x20002268

0800710c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007110:	4802      	ldr	r0, [pc, #8]	; (800711c <CAN1_RX0_IRQHandler+0x10>)
 8007112:	f006 f991 	bl	800d438 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8007116:	bf00      	nop
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	20002268 	.word	0x20002268

08007120 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007124:	4802      	ldr	r0, [pc, #8]	; (8007130 <CAN1_RX1_IRQHandler+0x10>)
 8007126:	f006 f987 	bl	800d438 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800712a:	bf00      	nop
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	20002268 	.word	0x20002268

08007134 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007138:	4802      	ldr	r0, [pc, #8]	; (8007144 <CAN1_SCE_IRQHandler+0x10>)
 800713a:	f006 f97d 	bl	800d438 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800713e:	bf00      	nop
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	20002268 	.word	0x20002268

08007148 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800714c:	4802      	ldr	r0, [pc, #8]	; (8007158 <I2C1_EV_IRQHandler+0x10>)
 800714e:	f008 fb4b 	bl	800f7e8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8007152:	bf00      	nop
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	200036c4 	.word	0x200036c4

0800715c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8007160:	4802      	ldr	r0, [pc, #8]	; (800716c <I2C1_ER_IRQHandler+0x10>)
 8007162:	f008 fb5b 	bl	800f81c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8007166:	bf00      	nop
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	200036c4 	.word	0x200036c4

08007170 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8007174:	4802      	ldr	r0, [pc, #8]	; (8007180 <SPI2_IRQHandler+0x10>)
 8007176:	f00c fb59 	bl	801382c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800717a:	bf00      	nop
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	2000576c 	.word	0x2000576c

08007184 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
		if(LL_USART_IsActiveFlag_RXNE(USART1)!=RESET)
 8007188:	4804      	ldr	r0, [pc, #16]	; (800719c <USART1_IRQHandler+0x18>)
 800718a:	f7ff ff5d 	bl	8007048 <LL_USART_IsActiveFlag_RXNE>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d001      	beq.n	8007198 <USART1_IRQHandler+0x14>
		{
			/* RXNE flag will be cleared by reading of RDR register (done in call) */
			/* Call function in charge of handling Character reception */
			GSM_CharReception_Callback();
 8007194:	f7ff f8ac 	bl	80062f0 <GSM_CharReception_Callback>
		}
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007198:	bf00      	nop
 800719a:	bd80      	pop	{r7, pc}
 800719c:	40013800 	.word	0x40013800

080071a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80071a0:	b480      	push	{r7}
 80071a2:	af00      	add	r7, sp, #0

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80071a4:	bf00      	nop
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80071ae:	b480      	push	{r7}
 80071b0:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80071b2:	bf00      	nop
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80071c0:	4802      	ldr	r0, [pc, #8]	; (80071cc <TIM7_IRQHandler+0x10>)
 80071c2:	f00d f9bf 	bl	8014544 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80071c6:	bf00      	nop
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	200057d0 	.word	0x200057d0

080071d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80071d0:	b480      	push	{r7}
 80071d2:	af00      	add	r7, sp, #0
  return 1;
 80071d4:	2301      	movs	r3, #1
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <_kill>:

int _kill(int pid, int sig)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80071ea:	f00e fb9b 	bl	8015924 <__errno>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2216      	movs	r2, #22
 80071f2:	601a      	str	r2, [r3, #0]
  return -1;
 80071f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3708      	adds	r7, #8
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <_exit>:

void _exit (int status)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007208:	f04f 31ff 	mov.w	r1, #4294967295
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f7ff ffe7 	bl	80071e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007212:	e7fe      	b.n	8007212 <_exit+0x12>

08007214 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b086      	sub	sp, #24
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007220:	2300      	movs	r3, #0
 8007222:	617b      	str	r3, [r7, #20]
 8007224:	e00a      	b.n	800723c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007226:	f3af 8000 	nop.w
 800722a:	4601      	mov	r1, r0
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	1c5a      	adds	r2, r3, #1
 8007230:	60ba      	str	r2, [r7, #8]
 8007232:	b2ca      	uxtb	r2, r1
 8007234:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	3301      	adds	r3, #1
 800723a:	617b      	str	r3, [r7, #20]
 800723c:	697a      	ldr	r2, [r7, #20]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	429a      	cmp	r2, r3
 8007242:	dbf0      	blt.n	8007226 <_read+0x12>
  }

  return len;
 8007244:	687b      	ldr	r3, [r7, #4]
}
 8007246:	4618      	mov	r0, r3
 8007248:	3718      	adds	r7, #24
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b086      	sub	sp, #24
 8007252:	af00      	add	r7, sp, #0
 8007254:	60f8      	str	r0, [r7, #12]
 8007256:	60b9      	str	r1, [r7, #8]
 8007258:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800725a:	2300      	movs	r3, #0
 800725c:	617b      	str	r3, [r7, #20]
 800725e:	e009      	b.n	8007274 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	1c5a      	adds	r2, r3, #1
 8007264:	60ba      	str	r2, [r7, #8]
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	4618      	mov	r0, r3
 800726a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	3301      	adds	r3, #1
 8007272:	617b      	str	r3, [r7, #20]
 8007274:	697a      	ldr	r2, [r7, #20]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	429a      	cmp	r2, r3
 800727a:	dbf1      	blt.n	8007260 <_write+0x12>
  }
  return len;
 800727c:	687b      	ldr	r3, [r7, #4]
}
 800727e:	4618      	mov	r0, r3
 8007280:	3718      	adds	r7, #24
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <_close>:

int _close(int file)
{
 8007286:	b480      	push	{r7}
 8007288:	b083      	sub	sp, #12
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800728e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007292:	4618      	mov	r0, r3
 8007294:	370c      	adds	r7, #12
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800729e:	b480      	push	{r7}
 80072a0:	b083      	sub	sp, #12
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
 80072a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80072ae:	605a      	str	r2, [r3, #4]
  return 0;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	370c      	adds	r7, #12
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr

080072be <_isatty>:

int _isatty(int file)
{
 80072be:	b480      	push	{r7}
 80072c0:	b083      	sub	sp, #12
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80072c6:	2301      	movs	r3, #1
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
	...

080072f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80072f8:	4a14      	ldr	r2, [pc, #80]	; (800734c <_sbrk+0x5c>)
 80072fa:	4b15      	ldr	r3, [pc, #84]	; (8007350 <_sbrk+0x60>)
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007304:	4b13      	ldr	r3, [pc, #76]	; (8007354 <_sbrk+0x64>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d102      	bne.n	8007312 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800730c:	4b11      	ldr	r3, [pc, #68]	; (8007354 <_sbrk+0x64>)
 800730e:	4a12      	ldr	r2, [pc, #72]	; (8007358 <_sbrk+0x68>)
 8007310:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007312:	4b10      	ldr	r3, [pc, #64]	; (8007354 <_sbrk+0x64>)
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4413      	add	r3, r2
 800731a:	693a      	ldr	r2, [r7, #16]
 800731c:	429a      	cmp	r2, r3
 800731e:	d207      	bcs.n	8007330 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007320:	f00e fb00 	bl	8015924 <__errno>
 8007324:	4603      	mov	r3, r0
 8007326:	220c      	movs	r2, #12
 8007328:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800732a:	f04f 33ff 	mov.w	r3, #4294967295
 800732e:	e009      	b.n	8007344 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007330:	4b08      	ldr	r3, [pc, #32]	; (8007354 <_sbrk+0x64>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007336:	4b07      	ldr	r3, [pc, #28]	; (8007354 <_sbrk+0x64>)
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4413      	add	r3, r2
 800733e:	4a05      	ldr	r2, [pc, #20]	; (8007354 <_sbrk+0x64>)
 8007340:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007342:	68fb      	ldr	r3, [r7, #12]
}
 8007344:	4618      	mov	r0, r3
 8007346:	3718      	adds	r7, #24
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	20010000 	.word	0x20010000
 8007350:	00000400 	.word	0x00000400
 8007354:	20001ad8 	.word	0x20001ad8
 8007358:	20007140 	.word	0x20007140

0800735c <systemReset>:
 Change History:
 Author            	Date                Remarks
 KloudQ Team        23/05/2020			initial definition
******************************************************************************/
void systemReset(void)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	af00      	add	r7, sp, #0
	while(1)
	{
		HAL_GPIO_TogglePin(GPS_LED_GPIO_Port, GPS_LED_Pin);
 8007360:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007364:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007368:	f007 fe9a 	bl	800f0a0 <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 800736c:	2032      	movs	r0, #50	; 0x32
 800736e:	f003 f8e5 	bl	800a53c <HAL_Delay>
		HAL_GPIO_TogglePin(GPS_LED_GPIO_Port, GPS_LED_Pin);
 8007372:	e7f5      	b.n	8007360 <systemReset+0x4>

08007374 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8007374:	b480      	push	{r7}
 8007376:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 8007378:	4b08      	ldr	r3, [pc, #32]	; (800739c <SystemInit+0x28>)
 800737a:	f04f 2208 	mov.w	r2, #134219776	; 0x8000800
 800737e:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8007380:	4b06      	ldr	r3, [pc, #24]	; (800739c <SystemInit+0x28>)
 8007382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007386:	4a05      	ldr	r2, [pc, #20]	; (800739c <SystemInit+0x28>)
 8007388:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800738c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8007390:	bf00      	nop
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop
 800739c:	e000ed00 	.word	0xe000ed00

080073a0 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80073a6:	1d3b      	adds	r3, r7, #4
 80073a8:	2200      	movs	r2, #0
 80073aa:	601a      	str	r2, [r3, #0]
 80073ac:	605a      	str	r2, [r3, #4]
 80073ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80073b0:	4b14      	ldr	r3, [pc, #80]	; (8007404 <MX_TIM7_Init+0x64>)
 80073b2:	4a15      	ldr	r2, [pc, #84]	; (8007408 <MX_TIM7_Init+0x68>)
 80073b4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1;
 80073b6:	4b13      	ldr	r3, [pc, #76]	; (8007404 <MX_TIM7_Init+0x64>)
 80073b8:	2201      	movs	r2, #1
 80073ba:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80073bc:	4b11      	ldr	r3, [pc, #68]	; (8007404 <MX_TIM7_Init+0x64>)
 80073be:	2200      	movs	r2, #0
 80073c0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 39999;
 80073c2:	4b10      	ldr	r3, [pc, #64]	; (8007404 <MX_TIM7_Init+0x64>)
 80073c4:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80073c8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80073ca:	4b0e      	ldr	r3, [pc, #56]	; (8007404 <MX_TIM7_Init+0x64>)
 80073cc:	2200      	movs	r2, #0
 80073ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80073d0:	480c      	ldr	r0, [pc, #48]	; (8007404 <MX_TIM7_Init+0x64>)
 80073d2:	f00c ff57 	bl	8014284 <HAL_TIM_Base_Init>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80073dc:	f7fd f8cd 	bl	800457a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80073e0:	2300      	movs	r3, #0
 80073e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80073e4:	2300      	movs	r3, #0
 80073e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80073e8:	1d3b      	adds	r3, r7, #4
 80073ea:	4619      	mov	r1, r3
 80073ec:	4805      	ldr	r0, [pc, #20]	; (8007404 <MX_TIM7_Init+0x64>)
 80073ee:	f00d fa4b 	bl	8014888 <HAL_TIMEx_MasterConfigSynchronization>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d001      	beq.n	80073fc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80073f8:	f7fd f8bf 	bl	800457a <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80073fc:	bf00      	nop
 80073fe:	3710      	adds	r7, #16
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	200057d0 	.word	0x200057d0
 8007408:	40001400 	.word	0x40001400

0800740c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a0d      	ldr	r2, [pc, #52]	; (8007450 <HAL_TIM_Base_MspInit+0x44>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d113      	bne.n	8007446 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800741e:	4b0d      	ldr	r3, [pc, #52]	; (8007454 <HAL_TIM_Base_MspInit+0x48>)
 8007420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007422:	4a0c      	ldr	r2, [pc, #48]	; (8007454 <HAL_TIM_Base_MspInit+0x48>)
 8007424:	f043 0320 	orr.w	r3, r3, #32
 8007428:	6593      	str	r3, [r2, #88]	; 0x58
 800742a:	4b0a      	ldr	r3, [pc, #40]	; (8007454 <HAL_TIM_Base_MspInit+0x48>)
 800742c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800742e:	f003 0320 	and.w	r3, r3, #32
 8007432:	60fb      	str	r3, [r7, #12]
 8007434:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8007436:	2200      	movs	r2, #0
 8007438:	2100      	movs	r1, #0
 800743a:	2037      	movs	r0, #55	; 0x37
 800743c:	f006 fb36 	bl	800daac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007440:	2037      	movs	r0, #55	; 0x37
 8007442:	f006 fb5f 	bl	800db04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8007446:	bf00      	nop
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	40001400 	.word	0x40001400
 8007454:	40021000 	.word	0x40021000

08007458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007458:	b480      	push	{r7}
 800745a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800745c:	4b04      	ldr	r3, [pc, #16]	; (8007470 <__NVIC_GetPriorityGrouping+0x18>)
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	0a1b      	lsrs	r3, r3, #8
 8007462:	f003 0307 	and.w	r3, r3, #7
}
 8007466:	4618      	mov	r0, r3
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr
 8007470:	e000ed00 	.word	0xe000ed00

08007474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	4603      	mov	r3, r0
 800747c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800747e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007482:	2b00      	cmp	r3, #0
 8007484:	db0b      	blt.n	800749e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007486:	79fb      	ldrb	r3, [r7, #7]
 8007488:	f003 021f 	and.w	r2, r3, #31
 800748c:	4907      	ldr	r1, [pc, #28]	; (80074ac <__NVIC_EnableIRQ+0x38>)
 800748e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007492:	095b      	lsrs	r3, r3, #5
 8007494:	2001      	movs	r0, #1
 8007496:	fa00 f202 	lsl.w	r2, r0, r2
 800749a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800749e:	bf00      	nop
 80074a0:	370c      	adds	r7, #12
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	e000e100 	.word	0xe000e100

080074b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	4603      	mov	r3, r0
 80074b8:	6039      	str	r1, [r7, #0]
 80074ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	db0a      	blt.n	80074da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	b2da      	uxtb	r2, r3
 80074c8:	490c      	ldr	r1, [pc, #48]	; (80074fc <__NVIC_SetPriority+0x4c>)
 80074ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074ce:	0112      	lsls	r2, r2, #4
 80074d0:	b2d2      	uxtb	r2, r2
 80074d2:	440b      	add	r3, r1
 80074d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80074d8:	e00a      	b.n	80074f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	b2da      	uxtb	r2, r3
 80074de:	4908      	ldr	r1, [pc, #32]	; (8007500 <__NVIC_SetPriority+0x50>)
 80074e0:	79fb      	ldrb	r3, [r7, #7]
 80074e2:	f003 030f 	and.w	r3, r3, #15
 80074e6:	3b04      	subs	r3, #4
 80074e8:	0112      	lsls	r2, r2, #4
 80074ea:	b2d2      	uxtb	r2, r2
 80074ec:	440b      	add	r3, r1
 80074ee:	761a      	strb	r2, [r3, #24]
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr
 80074fc:	e000e100 	.word	0xe000e100
 8007500:	e000ed00 	.word	0xe000ed00

08007504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007504:	b480      	push	{r7}
 8007506:	b089      	sub	sp, #36	; 0x24
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f003 0307 	and.w	r3, r3, #7
 8007516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	f1c3 0307 	rsb	r3, r3, #7
 800751e:	2b04      	cmp	r3, #4
 8007520:	bf28      	it	cs
 8007522:	2304      	movcs	r3, #4
 8007524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	3304      	adds	r3, #4
 800752a:	2b06      	cmp	r3, #6
 800752c:	d902      	bls.n	8007534 <NVIC_EncodePriority+0x30>
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	3b03      	subs	r3, #3
 8007532:	e000      	b.n	8007536 <NVIC_EncodePriority+0x32>
 8007534:	2300      	movs	r3, #0
 8007536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007538:	f04f 32ff 	mov.w	r2, #4294967295
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	fa02 f303 	lsl.w	r3, r2, r3
 8007542:	43da      	mvns	r2, r3
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	401a      	ands	r2, r3
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800754c:	f04f 31ff 	mov.w	r1, #4294967295
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	fa01 f303 	lsl.w	r3, r1, r3
 8007556:	43d9      	mvns	r1, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800755c:	4313      	orrs	r3, r2
         );
}
 800755e:	4618      	mov	r0, r3
 8007560:	3724      	adds	r7, #36	; 0x24
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr

0800756a <LL_USART_Enable>:
{
 800756a:	b480      	push	{r7}
 800756c:	b083      	sub	sp, #12
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f043 0201 	orr.w	r2, r3, #1
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	601a      	str	r2, [r3, #0]
}
 800757e:	bf00      	nop
 8007580:	370c      	adds	r7, #12
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr

0800758a <LL_USART_DisableOverrunDetect>:
{
 800758a:	b480      	push	{r7}
 800758c:	b083      	sub	sp, #12
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	609a      	str	r2, [r3, #8]
}
 800759e:	bf00      	nop
 80075a0:	370c      	adds	r7, #12
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <LL_USART_ConfigAsyncMode>:
{
 80075aa:	b480      	push	{r7}
 80075ac:	b083      	sub	sp, #12
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	609a      	str	r2, [r3, #8]
}
 80075ca:	bf00      	nop
 80075cc:	370c      	adds	r7, #12
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
	...

080075d8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80075e0:	4b08      	ldr	r3, [pc, #32]	; (8007604 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80075e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075e4:	4907      	ldr	r1, [pc, #28]	; (8007604 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80075ec:	4b05      	ldr	r3, [pc, #20]	; (8007604 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80075ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4013      	ands	r3, r2
 80075f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80075f6:	68fb      	ldr	r3, [r7, #12]
}
 80075f8:	bf00      	nop
 80075fa:	3714      	adds	r7, #20
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr
 8007604:	40021000 	.word	0x40021000

08007608 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8007610:	4b08      	ldr	r3, [pc, #32]	; (8007634 <LL_APB1_GRP1_EnableClock+0x2c>)
 8007612:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007614:	4907      	ldr	r1, [pc, #28]	; (8007634 <LL_APB1_GRP1_EnableClock+0x2c>)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4313      	orrs	r3, r2
 800761a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800761c:	4b05      	ldr	r3, [pc, #20]	; (8007634 <LL_APB1_GRP1_EnableClock+0x2c>)
 800761e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4013      	ands	r3, r2
 8007624:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007626:	68fb      	ldr	r3, [r7, #12]
}
 8007628:	bf00      	nop
 800762a:	3714      	adds	r7, #20
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr
 8007634:	40021000 	.word	0x40021000

08007638 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8007640:	4b08      	ldr	r3, [pc, #32]	; (8007664 <LL_APB2_GRP1_EnableClock+0x2c>)
 8007642:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007644:	4907      	ldr	r1, [pc, #28]	; (8007664 <LL_APB2_GRP1_EnableClock+0x2c>)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4313      	orrs	r3, r2
 800764a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800764c:	4b05      	ldr	r3, [pc, #20]	; (8007664 <LL_APB2_GRP1_EnableClock+0x2c>)
 800764e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4013      	ands	r3, r2
 8007654:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007656:	68fb      	ldr	r3, [r7, #12]
}
 8007658:	bf00      	nop
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr
 8007664:	40021000 	.word	0x40021000

08007668 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b0a6      	sub	sp, #152	; 0x98
 800766c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800766e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007672:	2200      	movs	r2, #0
 8007674:	601a      	str	r2, [r3, #0]
 8007676:	605a      	str	r2, [r3, #4]
 8007678:	609a      	str	r2, [r3, #8]
 800767a:	60da      	str	r2, [r3, #12]
 800767c:	611a      	str	r2, [r3, #16]
 800767e:	615a      	str	r2, [r3, #20]
 8007680:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007682:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007686:	2200      	movs	r2, #0
 8007688:	601a      	str	r2, [r3, #0]
 800768a:	605a      	str	r2, [r3, #4]
 800768c:	609a      	str	r2, [r3, #8]
 800768e:	60da      	str	r2, [r3, #12]
 8007690:	611a      	str	r2, [r3, #16]
 8007692:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007694:	1d3b      	adds	r3, r7, #4
 8007696:	2260      	movs	r2, #96	; 0x60
 8007698:	2100      	movs	r1, #0
 800769a:	4618      	mov	r0, r3
 800769c:	f00e f9a4 	bl	80159e8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80076a0:	2301      	movs	r3, #1
 80076a2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80076a4:	2300      	movs	r3, #0
 80076a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80076a8:	1d3b      	adds	r3, r7, #4
 80076aa:	4618      	mov	r0, r3
 80076ac:	f00a fabc 	bl	8011c28 <HAL_RCCEx_PeriphCLKConfig>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d001      	beq.n	80076ba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80076b6:	f7fc ff60 	bl	800457a <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80076ba:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80076be:	f7ff ffbb 	bl	8007638 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80076c2:	2001      	movs	r0, #1
 80076c4:	f7ff ff88 	bl	80075d8 <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 80076c8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80076cc:	667b      	str	r3, [r7, #100]	; 0x64
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80076ce:	2302      	movs	r3, #2
 80076d0:	66bb      	str	r3, [r7, #104]	; 0x68
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80076d2:	2303      	movs	r3, #3
 80076d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80076d6:	2300      	movs	r3, #0
 80076d8:	673b      	str	r3, [r7, #112]	; 0x70
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80076da:	2300      	movs	r3, #0
 80076dc:	677b      	str	r3, [r7, #116]	; 0x74
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80076de:	2307      	movs	r3, #7
 80076e0:	67bb      	str	r3, [r7, #120]	; 0x78
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076e2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80076e6:	4619      	mov	r1, r3
 80076e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80076ec:	f00d fb4a 	bl	8014d84 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 80076f0:	f7ff feb2 	bl	8007458 <__NVIC_GetPriorityGrouping>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2200      	movs	r2, #0
 80076f8:	2102      	movs	r1, #2
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7ff ff02 	bl	8007504 <NVIC_EncodePriority>
 8007700:	4603      	mov	r3, r0
 8007702:	4619      	mov	r1, r3
 8007704:	2025      	movs	r0, #37	; 0x25
 8007706:	f7ff fed3 	bl	80074b0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 800770a:	2025      	movs	r0, #37	; 0x25
 800770c:	f7ff feb2 	bl	8007474 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8007710:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8007714:	67fb      	str	r3, [r7, #124]	; 0x7c
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8007716:	2300      	movs	r3, #0
 8007718:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800771c:	2300      	movs	r3, #0
 800771e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8007722:	2300      	movs	r3, #0
 8007724:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8007728:	230c      	movs	r3, #12
 800772a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800772e:	2300      	movs	r3, #0
 8007730:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8007734:	2300      	movs	r3, #0
 8007736:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  LL_USART_Init(USART1, &USART_InitStruct);
 800773a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800773e:	4619      	mov	r1, r3
 8007740:	4807      	ldr	r0, [pc, #28]	; (8007760 <MX_USART1_UART_Init+0xf8>)
 8007742:	f00d ffe5 	bl	8015710 <LL_USART_Init>
  LL_USART_DisableOverrunDetect(USART1);
 8007746:	4806      	ldr	r0, [pc, #24]	; (8007760 <MX_USART1_UART_Init+0xf8>)
 8007748:	f7ff ff1f 	bl	800758a <LL_USART_DisableOverrunDetect>
  LL_USART_ConfigAsyncMode(USART1);
 800774c:	4804      	ldr	r0, [pc, #16]	; (8007760 <MX_USART1_UART_Init+0xf8>)
 800774e:	f7ff ff2c 	bl	80075aa <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8007752:	4803      	ldr	r0, [pc, #12]	; (8007760 <MX_USART1_UART_Init+0xf8>)
 8007754:	f7ff ff09 	bl	800756a <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007758:	bf00      	nop
 800775a:	3798      	adds	r7, #152	; 0x98
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	40013800 	.word	0x40013800

08007764 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b0a6      	sub	sp, #152	; 0x98
 8007768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800776a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800776e:	2200      	movs	r2, #0
 8007770:	601a      	str	r2, [r3, #0]
 8007772:	605a      	str	r2, [r3, #4]
 8007774:	609a      	str	r2, [r3, #8]
 8007776:	60da      	str	r2, [r3, #12]
 8007778:	611a      	str	r2, [r3, #16]
 800777a:	615a      	str	r2, [r3, #20]
 800777c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800777e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007782:	2200      	movs	r2, #0
 8007784:	601a      	str	r2, [r3, #0]
 8007786:	605a      	str	r2, [r3, #4]
 8007788:	609a      	str	r2, [r3, #8]
 800778a:	60da      	str	r2, [r3, #12]
 800778c:	611a      	str	r2, [r3, #16]
 800778e:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007790:	1d3b      	adds	r3, r7, #4
 8007792:	2260      	movs	r2, #96	; 0x60
 8007794:	2100      	movs	r1, #0
 8007796:	4618      	mov	r0, r3
 8007798:	f00e f926 	bl	80159e8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800779c:	2302      	movs	r3, #2
 800779e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80077a0:	2300      	movs	r3, #0
 80077a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80077a4:	1d3b      	adds	r3, r7, #4
 80077a6:	4618      	mov	r0, r3
 80077a8:	f00a fa3e 	bl	8011c28 <HAL_RCCEx_PeriphCLKConfig>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d001      	beq.n	80077b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80077b2:	f7fc fee2 	bl	800457a <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80077b6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80077ba:	f7ff ff25 	bl	8007608 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80077be:	2001      	movs	r0, #1
 80077c0:	f7ff ff0a 	bl	80075d8 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 80077c4:	230c      	movs	r3, #12
 80077c6:	667b      	str	r3, [r7, #100]	; 0x64
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80077c8:	2302      	movs	r3, #2
 80077ca:	66bb      	str	r3, [r7, #104]	; 0x68
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80077cc:	2303      	movs	r3, #3
 80077ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80077d0:	2300      	movs	r3, #0
 80077d2:	673b      	str	r3, [r7, #112]	; 0x70
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80077d4:	2300      	movs	r3, #0
 80077d6:	677b      	str	r3, [r7, #116]	; 0x74
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80077d8:	2307      	movs	r3, #7
 80077da:	67bb      	str	r3, [r7, #120]	; 0x78
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80077e0:	4619      	mov	r1, r3
 80077e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80077e6:	f00d facd 	bl	8014d84 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80077ea:	f7ff fe35 	bl	8007458 <__NVIC_GetPriorityGrouping>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2200      	movs	r2, #0
 80077f2:	2100      	movs	r1, #0
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7ff fe85 	bl	8007504 <NVIC_EncodePriority>
 80077fa:	4603      	mov	r3, r0
 80077fc:	4619      	mov	r1, r3
 80077fe:	2026      	movs	r0, #38	; 0x26
 8007800:	f7ff fe56 	bl	80074b0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8007804:	2026      	movs	r0, #38	; 0x26
 8007806:	f7ff fe35 	bl	8007474 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 800780a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800780e:	67fb      	str	r3, [r7, #124]	; 0x7c
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8007810:	2300      	movs	r3, #0
 8007812:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8007816:	2300      	movs	r3, #0
 8007818:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800781c:	2300      	movs	r3, #0
 800781e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8007822:	230c      	movs	r3, #12
 8007824:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8007828:	2300      	movs	r3, #0
 800782a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800782e:	2300      	movs	r3, #0
 8007830:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  LL_USART_Init(USART2, &USART_InitStruct);
 8007834:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007838:	4619      	mov	r1, r3
 800783a:	4808      	ldr	r0, [pc, #32]	; (800785c <MX_USART2_UART_Init+0xf8>)
 800783c:	f00d ff68 	bl	8015710 <LL_USART_Init>
  LL_USART_DisableOverrunDetect(USART2);
 8007840:	4806      	ldr	r0, [pc, #24]	; (800785c <MX_USART2_UART_Init+0xf8>)
 8007842:	f7ff fea2 	bl	800758a <LL_USART_DisableOverrunDetect>
  LL_USART_ConfigAsyncMode(USART2);
 8007846:	4805      	ldr	r0, [pc, #20]	; (800785c <MX_USART2_UART_Init+0xf8>)
 8007848:	f7ff feaf 	bl	80075aa <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800784c:	4803      	ldr	r0, [pc, #12]	; (800785c <MX_USART2_UART_Init+0xf8>)
 800784e:	f7ff fe8c 	bl	800756a <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007852:	bf00      	nop
 8007854:	3798      	adds	r7, #152	; 0x98
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	40004400 	.word	0x40004400

08007860 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b0a6      	sub	sp, #152	; 0x98
 8007864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8007866:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800786a:	2200      	movs	r2, #0
 800786c:	601a      	str	r2, [r3, #0]
 800786e:	605a      	str	r2, [r3, #4]
 8007870:	609a      	str	r2, [r3, #8]
 8007872:	60da      	str	r2, [r3, #12]
 8007874:	611a      	str	r2, [r3, #16]
 8007876:	615a      	str	r2, [r3, #20]
 8007878:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800787a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800787e:	2200      	movs	r2, #0
 8007880:	601a      	str	r2, [r3, #0]
 8007882:	605a      	str	r2, [r3, #4]
 8007884:	609a      	str	r2, [r3, #8]
 8007886:	60da      	str	r2, [r3, #12]
 8007888:	611a      	str	r2, [r3, #16]
 800788a:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800788c:	1d3b      	adds	r3, r7, #4
 800788e:	2260      	movs	r2, #96	; 0x60
 8007890:	2100      	movs	r1, #0
 8007892:	4618      	mov	r0, r3
 8007894:	f00e f8a8 	bl	80159e8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8007898:	2304      	movs	r3, #4
 800789a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800789c:	2300      	movs	r3, #0
 800789e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80078a0:	1d3b      	adds	r3, r7, #4
 80078a2:	4618      	mov	r0, r3
 80078a4:	f00a f9c0 	bl	8011c28 <HAL_RCCEx_PeriphCLKConfig>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d001      	beq.n	80078b2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80078ae:	f7fc fe64 	bl	800457a <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80078b2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80078b6:	f7ff fea7 	bl	8007608 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80078ba:	2002      	movs	r0, #2
 80078bc:	f7ff fe8c 	bl	80075d8 <LL_AHB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 80078c0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80078c4:	667b      	str	r3, [r7, #100]	; 0x64
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80078c6:	2302      	movs	r3, #2
 80078c8:	66bb      	str	r3, [r7, #104]	; 0x68
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80078ca:	2303      	movs	r3, #3
 80078cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80078ce:	2300      	movs	r3, #0
 80078d0:	673b      	str	r3, [r7, #112]	; 0x70
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80078d2:	2300      	movs	r3, #0
 80078d4:	677b      	str	r3, [r7, #116]	; 0x74
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80078d6:	2307      	movs	r3, #7
 80078d8:	67bb      	str	r3, [r7, #120]	; 0x78
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078da:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80078de:	4619      	mov	r1, r3
 80078e0:	481d      	ldr	r0, [pc, #116]	; (8007958 <MX_USART3_UART_Init+0xf8>)
 80078e2:	f00d fa4f 	bl	8014d84 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80078e6:	f7ff fdb7 	bl	8007458 <__NVIC_GetPriorityGrouping>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2200      	movs	r2, #0
 80078ee:	2100      	movs	r1, #0
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7ff fe07 	bl	8007504 <NVIC_EncodePriority>
 80078f6:	4603      	mov	r3, r0
 80078f8:	4619      	mov	r1, r3
 80078fa:	2027      	movs	r0, #39	; 0x27
 80078fc:	f7ff fdd8 	bl	80074b0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8007900:	2027      	movs	r0, #39	; 0x27
 8007902:	f7ff fdb7 	bl	8007474 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 8007906:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800790a:	67fb      	str	r3, [r7, #124]	; 0x7c
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800790c:	2300      	movs	r3, #0
 800790e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8007912:	2300      	movs	r3, #0
 8007914:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8007918:	2300      	movs	r3, #0
 800791a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800791e:	230c      	movs	r3, #12
 8007920:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8007924:	2300      	movs	r3, #0
 8007926:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800792a:	2300      	movs	r3, #0
 800792c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  LL_USART_Init(USART3, &USART_InitStruct);
 8007930:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007934:	4619      	mov	r1, r3
 8007936:	4809      	ldr	r0, [pc, #36]	; (800795c <MX_USART3_UART_Init+0xfc>)
 8007938:	f00d feea 	bl	8015710 <LL_USART_Init>
  LL_USART_DisableOverrunDetect(USART3);
 800793c:	4807      	ldr	r0, [pc, #28]	; (800795c <MX_USART3_UART_Init+0xfc>)
 800793e:	f7ff fe24 	bl	800758a <LL_USART_DisableOverrunDetect>
  LL_USART_ConfigAsyncMode(USART3);
 8007942:	4806      	ldr	r0, [pc, #24]	; (800795c <MX_USART3_UART_Init+0xfc>)
 8007944:	f7ff fe31 	bl	80075aa <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8007948:	4804      	ldr	r0, [pc, #16]	; (800795c <MX_USART3_UART_Init+0xfc>)
 800794a:	f7ff fe0e 	bl	800756a <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800794e:	bf00      	nop
 8007950:	3798      	adds	r7, #152	; 0x98
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	48000400 	.word	0x48000400
 800795c:	40004800 	.word	0x40004800

08007960 <CheckImmobilization>:




void CheckImmobilization()
{
 8007960:	b580      	push	{r7, lr}
 8007962:	af00      	add	r7, sp, #0

	if(Previous_Immobilization_State == TRUE)
 8007964:	4b0d      	ldr	r3, [pc, #52]	; (800799c <CheckImmobilization+0x3c>)
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	2b01      	cmp	r3, #1
 800796a:	d105      	bne.n	8007978 <CheckImmobilization+0x18>
	{
		HAL_GPIO_WritePin(DO_uC_GPIO_Port, DO_uC_Pin, GPIO_PIN_SET);
 800796c:	2201      	movs	r2, #1
 800796e:	2104      	movs	r1, #4
 8007970:	480b      	ldr	r0, [pc, #44]	; (80079a0 <CheckImmobilization+0x40>)
 8007972:	f007 fb65 	bl	800f040 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(DO_uC_GPIO_Port, DO_uC_Pin, GPIO_PIN_RESET);
	}
}
 8007976:	e00e      	b.n	8007996 <CheckImmobilization+0x36>
	else if(Previous_Immobilization_State == FALSE)
 8007978:	4b08      	ldr	r3, [pc, #32]	; (800799c <CheckImmobilization+0x3c>)
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d105      	bne.n	800798c <CheckImmobilization+0x2c>
		HAL_GPIO_WritePin(DO_uC_GPIO_Port, DO_uC_Pin, GPIO_PIN_RESET);
 8007980:	2200      	movs	r2, #0
 8007982:	2104      	movs	r1, #4
 8007984:	4806      	ldr	r0, [pc, #24]	; (80079a0 <CheckImmobilization+0x40>)
 8007986:	f007 fb5b 	bl	800f040 <HAL_GPIO_WritePin>
}
 800798a:	e004      	b.n	8007996 <CheckImmobilization+0x36>
		HAL_GPIO_WritePin(DO_uC_GPIO_Port, DO_uC_Pin, GPIO_PIN_RESET);
 800798c:	2200      	movs	r2, #0
 800798e:	2104      	movs	r1, #4
 8007990:	4803      	ldr	r0, [pc, #12]	; (80079a0 <CheckImmobilization+0x40>)
 8007992:	f007 fb55 	bl	800f040 <HAL_GPIO_WritePin>
}
 8007996:	bf00      	nop
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	20001add 	.word	0x20001add
 80079a0:	48000400 	.word	0x48000400

080079a4 <WriteImobilizedStateToEEPROM>:

void WriteImobilizedStateToEEPROM(uint8_t value)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b086      	sub	sp, #24
 80079a8:	af04      	add	r7, sp, #16
 80079aa:	4603      	mov	r3, r0
 80079ac:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, EEPROM_IMMOBI_MEM_ADD_DATA ,I2C_MEMADD_SIZE_16BIT,(uint8_t *)&value,sizeof(value),1000) != HAL_OK)
 80079ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80079b2:	9302      	str	r3, [sp, #8]
 80079b4:	2301      	movs	r3, #1
 80079b6:	9301      	str	r3, [sp, #4]
 80079b8:	1dfb      	adds	r3, r7, #7
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	2302      	movs	r3, #2
 80079be:	2230      	movs	r2, #48	; 0x30
 80079c0:	21a0      	movs	r1, #160	; 0xa0
 80079c2:	4809      	ldr	r0, [pc, #36]	; (80079e8 <WriteImobilizedStateToEEPROM+0x44>)
 80079c4:	f007 fcc6 	bl	800f354 <HAL_I2C_Mem_Write>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d004      	beq.n	80079d8 <WriteImobilizedStateToEEPROM+0x34>
		assertError(enmTORERRORS_MEM_I2C,enmERRORSTATE_ACTIVE);
 80079ce:	2101      	movs	r1, #1
 80079d0:	2008      	movs	r0, #8
 80079d2:	f7fa fa77 	bl	8001ec4 <assertError>
	else
		assertError(enmTORERRORS_MEM_I2C,enmERRORSTATE_NOERROR);
}
 80079d6:	e003      	b.n	80079e0 <WriteImobilizedStateToEEPROM+0x3c>
		assertError(enmTORERRORS_MEM_I2C,enmERRORSTATE_NOERROR);
 80079d8:	2100      	movs	r1, #0
 80079da:	2008      	movs	r0, #8
 80079dc:	f7fa fa72 	bl	8001ec4 <assertError>
}
 80079e0:	bf00      	nop
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	200036c4 	.word	0x200036c4

080079ec <ReadImmobilizedStateFromEEPROM>:

void ReadImmobilizedStateFromEEPROM()
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af04      	add	r7, sp, #16
	if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, EEPROM_IMMOBI_MEM_ADD_DATA ,I2C_MEMADD_SIZE_16BIT,	(uint8_t *)&Previous_Immobilization_State,sizeof(Previous_Immobilization_State),1000) != HAL_OK)
 80079f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80079f6:	9302      	str	r3, [sp, #8]
 80079f8:	2301      	movs	r3, #1
 80079fa:	9301      	str	r3, [sp, #4]
 80079fc:	4b0b      	ldr	r3, [pc, #44]	; (8007a2c <ReadImmobilizedStateFromEEPROM+0x40>)
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	2302      	movs	r3, #2
 8007a02:	2230      	movs	r2, #48	; 0x30
 8007a04:	21a0      	movs	r1, #160	; 0xa0
 8007a06:	480a      	ldr	r0, [pc, #40]	; (8007a30 <ReadImmobilizedStateFromEEPROM+0x44>)
 8007a08:	f007 fdc6 	bl	800f598 <HAL_I2C_Mem_Read>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d004      	beq.n	8007a1c <ReadImmobilizedStateFromEEPROM+0x30>
			assertError(enmTORERRORS_MEM_I2C,enmERRORSTATE_ACTIVE);
 8007a12:	2101      	movs	r1, #1
 8007a14:	2008      	movs	r0, #8
 8007a16:	f7fa fa55 	bl	8001ec4 <assertError>
		else
			assertError(enmTORERRORS_MEM_I2C,enmERRORSTATE_NOERROR);
}
 8007a1a:	e003      	b.n	8007a24 <ReadImmobilizedStateFromEEPROM+0x38>
			assertError(enmTORERRORS_MEM_I2C,enmERRORSTATE_NOERROR);
 8007a1c:	2100      	movs	r1, #0
 8007a1e:	2008      	movs	r0, #8
 8007a20:	f7fa fa50 	bl	8001ec4 <assertError>
}
 8007a24:	bf00      	nop
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	20001add 	.word	0x20001add
 8007a30:	200036c4 	.word	0x200036c4

08007a34 <SubRevicedString>:


#include "user_MqttSubSperator.h"

void SubRevicedString()
{//$,054061957514975180815242966,2,3,D1,1,@
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b0ac      	sub	sp, #176	; 0xb0
 8007a38:	af00      	add	r7, sp, #0
	uint16_t key = 0;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
	char gau8TempSUBRequest[150] = {'0'};
 8007a40:	2330      	movs	r3, #48	; 0x30
 8007a42:	607b      	str	r3, [r7, #4]
 8007a44:	f107 0308 	add.w	r3, r7, #8
 8007a48:	2292      	movs	r2, #146	; 0x92
 8007a4a:	2100      	movs	r1, #0
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f00d ffcb 	bl	80159e8 <memset>
	char *token = NULL;
 8007a52:	2300      	movs	r3, #0
 8007a54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	token = strtok(gau8SUBRequest,",");//$
 8007a58:	4974      	ldr	r1, [pc, #464]	; (8007c2c <SubRevicedString+0x1f8>)
 8007a5a:	4875      	ldr	r0, [pc, #468]	; (8007c30 <SubRevicedString+0x1fc>)
 8007a5c:	f00f fe22 	bl	80176a4 <strtok>
 8007a60:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	token = strtok(NULL,",");//HW
 8007a64:	4971      	ldr	r1, [pc, #452]	; (8007c2c <SubRevicedString+0x1f8>)
 8007a66:	2000      	movs	r0, #0
 8007a68:	f00f fe1c 	bl	80176a4 <strtok>
 8007a6c:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	token = strtok(NULL,",");//2way
 8007a70:	496e      	ldr	r1, [pc, #440]	; (8007c2c <SubRevicedString+0x1f8>)
 8007a72:	2000      	movs	r0, #0
 8007a74:	f00f fe16 	bl	80176a4 <strtok>
 8007a78:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	token = strtok(NULL,",");//Operation
 8007a7c:	496b      	ldr	r1, [pc, #428]	; (8007c2c <SubRevicedString+0x1f8>)
 8007a7e:	2000      	movs	r0, #0
 8007a80:	f00f fe10 	bl	80176a4 <strtok>
 8007a84:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	key = atoi(token);
 8007a88:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8007a8c:	f00d ff41 	bl	8015912 <atoi>
 8007a90:	4603      	mov	r3, r0
 8007a92:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
	switch (key)
 8007a96:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8007a9a:	2b03      	cmp	r3, #3
 8007a9c:	d057      	beq.n	8007b4e <SubRevicedString+0x11a>
 8007a9e:	2b08      	cmp	r3, #8
 8007aa0:	f040 80b5 	bne.w	8007c0e <SubRevicedString+0x1da>
	{
		case enmSUBSTRINGINDETIFY_FOTA:
		{
			token = strtok(NULL,",");//Data
 8007aa4:	4961      	ldr	r1, [pc, #388]	; (8007c2c <SubRevicedString+0x1f8>)
 8007aa6:	2000      	movs	r0, #0
 8007aa8:	f00f fdfc 	bl	80176a4 <strtok>
 8007aac:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
			memset(gau8TempSUBRequest,0x00,sizeof(gau8TempSUBRequest));
 8007ab0:	1d3b      	adds	r3, r7, #4
 8007ab2:	2296      	movs	r2, #150	; 0x96
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f00d ff96 	bl	80159e8 <memset>
			memcpy(gau8TempSUBRequest, token, strlen(strtok(token,",")));
 8007abc:	495b      	ldr	r1, [pc, #364]	; (8007c2c <SubRevicedString+0x1f8>)
 8007abe:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8007ac2:	f00f fdef 	bl	80176a4 <strtok>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f7f8 ff8b 	bl	80009e4 <strlen>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	1d3b      	adds	r3, r7, #4
 8007ad2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f00d ff78 	bl	80159cc <memcpy>

			const char *URL = strstr(gau8TempSUBRequest,"http");
 8007adc:	1d3b      	adds	r3, r7, #4
 8007ade:	4955      	ldr	r1, [pc, #340]	; (8007c34 <SubRevicedString+0x200>)
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f00e ff94 	bl	8016a0e <strstr>
 8007ae6:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
			const char *BIN = strstr(gau8TempSUBRequest,".bin");
 8007aea:	1d3b      	adds	r3, r7, #4
 8007aec:	4952      	ldr	r1, [pc, #328]	; (8007c38 <SubRevicedString+0x204>)
 8007aee:	4618      	mov	r0, r3
 8007af0:	f00e ff8d 	bl	8016a0e <strstr>
 8007af4:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
			const size_t mlen = BIN - URL;
 8007af8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007afc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007b00:	1ad3      	subs	r3, r2, r3
 8007b02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			Diagnostic(enmDiagnostic_FOTA_REQ_RX);
 8007b06:	2004      	movs	r0, #4
 8007b08:	f7fd fb6a 	bl	80051e0 <Diagnostic>
			gu32FotaRquestFlag = TRUE;
 8007b0c:	4b4b      	ldr	r3, [pc, #300]	; (8007c3c <SubRevicedString+0x208>)
 8007b0e:	2201      	movs	r2, #1
 8007b10:	601a      	str	r2, [r3, #0]
			if((URL != NULL) && (BIN != NULL))
 8007b12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d015      	beq.n	8007b46 <SubRevicedString+0x112>
 8007b1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d011      	beq.n	8007b46 <SubRevicedString+0x112>
			{
				memset(gau8FotaURL,0x00,sizeof(gau8FotaURL));
 8007b22:	2264      	movs	r2, #100	; 0x64
 8007b24:	2100      	movs	r1, #0
 8007b26:	4846      	ldr	r0, [pc, #280]	; (8007c40 <SubRevicedString+0x20c>)
 8007b28:	f00d ff5e 	bl	80159e8 <memset>
				memcpy(gau8FotaURL,URL,mlen+4);
 8007b2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b30:	3304      	adds	r3, #4
 8007b32:	461a      	mov	r2, r3
 8007b34:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b38:	4841      	ldr	r0, [pc, #260]	; (8007c40 <SubRevicedString+0x20c>)
 8007b3a:	f00d ff47 	bl	80159cc <memcpy>
				gu32FotaRquestFlag = TRUE;
 8007b3e:	4b3f      	ldr	r3, [pc, #252]	; (8007c3c <SubRevicedString+0x208>)
 8007b40:	2201      	movs	r2, #1
 8007b42:	601a      	str	r2, [r3, #0]
			else
			{
			  SUBTriggerFlag = FALSE;
			}
		}
			break;
 8007b44:	e068      	b.n	8007c18 <SubRevicedString+0x1e4>
			  SUBTriggerFlag = FALSE;
 8007b46:	4b3f      	ldr	r3, [pc, #252]	; (8007c44 <SubRevicedString+0x210>)
 8007b48:	2200      	movs	r2, #0
 8007b4a:	701a      	strb	r2, [r3, #0]
			break;
 8007b4c:	e064      	b.n	8007c18 <SubRevicedString+0x1e4>

		case enmSUBSTRINGINDETIFY_DO:
			token = strtok(NULL,",");
 8007b4e:	4937      	ldr	r1, [pc, #220]	; (8007c2c <SubRevicedString+0x1f8>)
 8007b50:	2000      	movs	r0, #0
 8007b52:	f00f fda7 	bl	80176a4 <strtok>
 8007b56:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
			token = strtok(NULL,",");
 8007b5a:	4934      	ldr	r1, [pc, #208]	; (8007c2c <SubRevicedString+0x1f8>)
 8007b5c:	2000      	movs	r0, #0
 8007b5e:	f00f fda1 	bl	80176a4 <strtok>
 8007b62:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
			key = atoi(token);
 8007b66:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8007b6a:	f00d fed2 	bl	8015912 <atoi>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
			if(key == 1)
 8007b74:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d11d      	bne.n	8007bb8 <SubRevicedString+0x184>
			{
				Current_Immobilization_State = TRUE;
 8007b7c:	4b32      	ldr	r3, [pc, #200]	; (8007c48 <SubRevicedString+0x214>)
 8007b7e:	2201      	movs	r2, #1
 8007b80:	701a      	strb	r2, [r3, #0]
				Diagnostic(enmDiagnostic_IMOBI_REQ_RX);
 8007b82:	200d      	movs	r0, #13
 8007b84:	f7fd fb2c 	bl	80051e0 <Diagnostic>
				if(Previous_Immobilization_State != Current_Immobilization_State)
 8007b88:	4b30      	ldr	r3, [pc, #192]	; (8007c4c <SubRevicedString+0x218>)
 8007b8a:	781a      	ldrb	r2, [r3, #0]
 8007b8c:	4b2e      	ldr	r3, [pc, #184]	; (8007c48 <SubRevicedString+0x214>)
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d040      	beq.n	8007c16 <SubRevicedString+0x1e2>
				{
					WriteImobilizedStateToEEPROM(Current_Immobilization_State);
 8007b94:	4b2c      	ldr	r3, [pc, #176]	; (8007c48 <SubRevicedString+0x214>)
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7ff ff03 	bl	80079a4 <WriteImobilizedStateToEEPROM>
					HAL_GPIO_WritePin(DO_uC_GPIO_Port, DO_uC_Pin, GPIO_PIN_SET);
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	2104      	movs	r1, #4
 8007ba2:	482b      	ldr	r0, [pc, #172]	; (8007c50 <SubRevicedString+0x21c>)
 8007ba4:	f007 fa4c 	bl	800f040 <HAL_GPIO_WritePin>
					Previous_Immobilization_State = Current_Immobilization_State;
 8007ba8:	4b27      	ldr	r3, [pc, #156]	; (8007c48 <SubRevicedString+0x214>)
 8007baa:	781a      	ldrb	r2, [r3, #0]
 8007bac:	4b27      	ldr	r3, [pc, #156]	; (8007c4c <SubRevicedString+0x218>)
 8007bae:	701a      	strb	r2, [r3, #0]
					Diagnostic(enmDiagnostic_IMOBI_SUCCESS_OK);
 8007bb0:	200e      	movs	r0, #14
 8007bb2:	f7fd fb15 	bl	80051e0 <Diagnostic>
			{
				Current_Immobilization_State = key;
				Diagnostic(enmDiagnostic_IMOBI_REQ_RX);
			}

			break;
 8007bb6:	e02e      	b.n	8007c16 <SubRevicedString+0x1e2>
			else if(key == 0)
 8007bb8:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d11d      	bne.n	8007bfc <SubRevicedString+0x1c8>
				Current_Immobilization_State = FALSE;
 8007bc0:	4b21      	ldr	r3, [pc, #132]	; (8007c48 <SubRevicedString+0x214>)
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	701a      	strb	r2, [r3, #0]
				Diagnostic(enmDiagnostic_IMOBI_REQ_RX);
 8007bc6:	200d      	movs	r0, #13
 8007bc8:	f7fd fb0a 	bl	80051e0 <Diagnostic>
				if(Previous_Immobilization_State != Current_Immobilization_State)
 8007bcc:	4b1f      	ldr	r3, [pc, #124]	; (8007c4c <SubRevicedString+0x218>)
 8007bce:	781a      	ldrb	r2, [r3, #0]
 8007bd0:	4b1d      	ldr	r3, [pc, #116]	; (8007c48 <SubRevicedString+0x214>)
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d01e      	beq.n	8007c16 <SubRevicedString+0x1e2>
					WriteImobilizedStateToEEPROM(Current_Immobilization_State);
 8007bd8:	4b1b      	ldr	r3, [pc, #108]	; (8007c48 <SubRevicedString+0x214>)
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7ff fee1 	bl	80079a4 <WriteImobilizedStateToEEPROM>
					HAL_GPIO_WritePin(DO_uC_GPIO_Port, DO_uC_Pin, GPIO_PIN_RESET);
 8007be2:	2200      	movs	r2, #0
 8007be4:	2104      	movs	r1, #4
 8007be6:	481a      	ldr	r0, [pc, #104]	; (8007c50 <SubRevicedString+0x21c>)
 8007be8:	f007 fa2a 	bl	800f040 <HAL_GPIO_WritePin>
					Previous_Immobilization_State = Current_Immobilization_State;
 8007bec:	4b16      	ldr	r3, [pc, #88]	; (8007c48 <SubRevicedString+0x214>)
 8007bee:	781a      	ldrb	r2, [r3, #0]
 8007bf0:	4b16      	ldr	r3, [pc, #88]	; (8007c4c <SubRevicedString+0x218>)
 8007bf2:	701a      	strb	r2, [r3, #0]
					Diagnostic(enmDiagnostic_IMOBI_SUCCESS_OK);
 8007bf4:	200e      	movs	r0, #14
 8007bf6:	f7fd faf3 	bl	80051e0 <Diagnostic>
			break;
 8007bfa:	e00c      	b.n	8007c16 <SubRevicedString+0x1e2>
				Current_Immobilization_State = key;
 8007bfc:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8007c00:	b2da      	uxtb	r2, r3
 8007c02:	4b11      	ldr	r3, [pc, #68]	; (8007c48 <SubRevicedString+0x214>)
 8007c04:	701a      	strb	r2, [r3, #0]
				Diagnostic(enmDiagnostic_IMOBI_REQ_RX);
 8007c06:	200d      	movs	r0, #13
 8007c08:	f7fd faea 	bl	80051e0 <Diagnostic>
			break;
 8007c0c:	e003      	b.n	8007c16 <SubRevicedString+0x1e2>
		default:
			SUBTriggerFlag = FALSE;
 8007c0e:	4b0d      	ldr	r3, [pc, #52]	; (8007c44 <SubRevicedString+0x210>)
 8007c10:	2200      	movs	r2, #0
 8007c12:	701a      	strb	r2, [r3, #0]
			break;
 8007c14:	e000      	b.n	8007c18 <SubRevicedString+0x1e4>
			break;
 8007c16:	bf00      	nop
	}


	memset(gau8SUBRequest,0x00,sizeof(gau8SUBRequest));
 8007c18:	2296      	movs	r2, #150	; 0x96
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	4804      	ldr	r0, [pc, #16]	; (8007c30 <SubRevicedString+0x1fc>)
 8007c1e:	f00d fee3 	bl	80159e8 <memset>
}
 8007c22:	bf00      	nop
 8007c24:	37b0      	adds	r7, #176	; 0xb0
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	0801b7b0 	.word	0x0801b7b0
 8007c30:	20000058 	.word	0x20000058
 8007c34:	0801b7b4 	.word	0x0801b7b4
 8007c38:	0801b7bc 	.word	0x0801b7bc
 8007c3c:	20001874 	.word	0x20001874
 8007c40:	20001988 	.word	0x20001988
 8007c44:	20001871 	.word	0x20001871
 8007c48:	20001adc 	.word	0x20001adc
 8007c4c:	20001add 	.word	0x20001add
 8007c50:	48000400 	.word	0x48000400

08007c54 <Adc_FSM>:
 Author            	Date                Remarks
 KloudQ Team        21/01/19			Updated function name as per guidelines, Added info header
******************************************************************************/

void Adc_FSM (void)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
	static	uint32_t s_u32AdcRawDataTotal[8],s_u32AdcRawData[8];
	static uint32_t s_u32AdcState=ADC_STAE_START_READING;
	static uint32_t s_u32AdcSamplingIndex = 0;
	uint8_t i=0;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	71fb      	strb	r3, [r7, #7]
	float f32TempVar = 0;
 8007c5e:	f04f 0300 	mov.w	r3, #0
 8007c62:	603b      	str	r3, [r7, #0]
	//uint32_t u32TempValue=0;
	switch(s_u32AdcState)
 8007c64:	4b79      	ldr	r3, [pc, #484]	; (8007e4c <Adc_FSM+0x1f8>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	2b03      	cmp	r3, #3
 8007c6c:	f200 80de 	bhi.w	8007e2c <Adc_FSM+0x1d8>
 8007c70:	a201      	add	r2, pc, #4	; (adr r2, 8007c78 <Adc_FSM+0x24>)
 8007c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c76:	bf00      	nop
 8007c78:	08007c89 	.word	0x08007c89
 8007c7c:	08007ca7 	.word	0x08007ca7
 8007c80:	08007d17 	.word	0x08007d17
 8007c84:	08007e15 	.word	0x08007e15
	{
		case ADC_STAE_START_READING:
		{
			s_u32AdcConvCpltFlag = 0;
 8007c88:	4b71      	ldr	r3, [pc, #452]	; (8007e50 <Adc_FSM+0x1fc>)
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	601a      	str	r2, [r3, #0]
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)s_u32AdcRawData, 4);
 8007c8e:	2204      	movs	r2, #4
 8007c90:	4970      	ldr	r1, [pc, #448]	; (8007e54 <Adc_FSM+0x200>)
 8007c92:	4871      	ldr	r0, [pc, #452]	; (8007e58 <Adc_FSM+0x204>)
 8007c94:	f003 f9f6 	bl	800b084 <HAL_ADC_Start_DMA>
			gu32ADCRestartTimer = 0;
 8007c98:	4b70      	ldr	r3, [pc, #448]	; (8007e5c <Adc_FSM+0x208>)
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	601a      	str	r2, [r3, #0]
			s_u32AdcState = ADC_STATE_WAIT;
 8007c9e:	4b6b      	ldr	r3, [pc, #428]	; (8007e4c <Adc_FSM+0x1f8>)
 8007ca0:	2202      	movs	r2, #2
 8007ca2:	601a      	str	r2, [r3, #0]
		}break;
 8007ca4:	e0ce      	b.n	8007e44 <Adc_FSM+0x1f0>
		case ADC_STATE_WAIT:
		{
			if(s_u32AdcConvCpltFlag != 0)
 8007ca6:	4b6a      	ldr	r3, [pc, #424]	; (8007e50 <Adc_FSM+0x1fc>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	f000 80c5 	beq.w	8007e3a <Adc_FSM+0x1e6>
			{
				s_u32AdcConvCpltFlag = 0;
 8007cb0:	4b67      	ldr	r3, [pc, #412]	; (8007e50 <Adc_FSM+0x1fc>)
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	601a      	str	r2, [r3, #0]
				for(i=0;i<4;i++)
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	71fb      	strb	r3, [r7, #7]
 8007cba:	e00f      	b.n	8007cdc <Adc_FSM+0x88>
				{
					s_u32AdcRawDataTotal[i] += s_u32AdcRawData[i];
 8007cbc:	79fb      	ldrb	r3, [r7, #7]
 8007cbe:	4a68      	ldr	r2, [pc, #416]	; (8007e60 <Adc_FSM+0x20c>)
 8007cc0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007cc4:	79fb      	ldrb	r3, [r7, #7]
 8007cc6:	4a63      	ldr	r2, [pc, #396]	; (8007e54 <Adc_FSM+0x200>)
 8007cc8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007ccc:	79fb      	ldrb	r3, [r7, #7]
 8007cce:	440a      	add	r2, r1
 8007cd0:	4963      	ldr	r1, [pc, #396]	; (8007e60 <Adc_FSM+0x20c>)
 8007cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(i=0;i<4;i++)
 8007cd6:	79fb      	ldrb	r3, [r7, #7]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	71fb      	strb	r3, [r7, #7]
 8007cdc:	79fb      	ldrb	r3, [r7, #7]
 8007cde:	2b03      	cmp	r3, #3
 8007ce0:	d9ec      	bls.n	8007cbc <Adc_FSM+0x68>
				}

				for(i=0;i<4;i++)
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	71fb      	strb	r3, [r7, #7]
 8007ce6:	e007      	b.n	8007cf8 <Adc_FSM+0xa4>
				{
					s_u32AdcRawData[i] = 0;
 8007ce8:	79fb      	ldrb	r3, [r7, #7]
 8007cea:	4a5a      	ldr	r2, [pc, #360]	; (8007e54 <Adc_FSM+0x200>)
 8007cec:	2100      	movs	r1, #0
 8007cee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for(i=0;i<4;i++)
 8007cf2:	79fb      	ldrb	r3, [r7, #7]
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	71fb      	strb	r3, [r7, #7]
 8007cf8:	79fb      	ldrb	r3, [r7, #7]
 8007cfa:	2b03      	cmp	r3, #3
 8007cfc:	d9f4      	bls.n	8007ce8 <Adc_FSM+0x94>
				}

				s_u32AdcSamplingIndex++;
 8007cfe:	4b59      	ldr	r3, [pc, #356]	; (8007e64 <Adc_FSM+0x210>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	3301      	adds	r3, #1
 8007d04:	4a57      	ldr	r2, [pc, #348]	; (8007e64 <Adc_FSM+0x210>)
 8007d06:	6013      	str	r3, [r2, #0]
				gu32ADCRestartTimer = TEN_MS;
 8007d08:	4b54      	ldr	r3, [pc, #336]	; (8007e5c <Adc_FSM+0x208>)
 8007d0a:	220a      	movs	r2, #10
 8007d0c:	601a      	str	r2, [r3, #0]
				s_u32AdcState = ADC_STATE_CALC;
 8007d0e:	4b4f      	ldr	r3, [pc, #316]	; (8007e4c <Adc_FSM+0x1f8>)
 8007d10:	2203      	movs	r2, #3
 8007d12:	601a      	str	r2, [r3, #0]
			}
		}break;
 8007d14:	e091      	b.n	8007e3a <Adc_FSM+0x1e6>
		case ADC_STATE_CALC:
		{
			if(s_u32AdcSamplingIndex >= ADC_AVG_SAMPLE_COUNT)
 8007d16:	4b53      	ldr	r3, [pc, #332]	; (8007e64 <Adc_FSM+0x210>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2bf9      	cmp	r3, #249	; 0xf9
 8007d1c:	d972      	bls.n	8007e04 <Adc_FSM+0x1b0>
			{
				s_u32AdcSamplingIndex = 0;
 8007d1e:	4b51      	ldr	r3, [pc, #324]	; (8007e64 <Adc_FSM+0x210>)
 8007d20:	2200      	movs	r2, #0
 8007d22:	601a      	str	r2, [r3, #0]
				//Avg All AIRawData
				for(i=0;i<5;i++)
 8007d24:	2300      	movs	r3, #0
 8007d26:	71fb      	strb	r3, [r7, #7]
 8007d28:	e00e      	b.n	8007d48 <Adc_FSM+0xf4>
				{
					s_u32AdcRawDataTotal[i] /= ADC_AVG_SAMPLE_COUNT;
 8007d2a:	79fb      	ldrb	r3, [r7, #7]
 8007d2c:	4a4c      	ldr	r2, [pc, #304]	; (8007e60 <Adc_FSM+0x20c>)
 8007d2e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007d32:	79fb      	ldrb	r3, [r7, #7]
 8007d34:	494c      	ldr	r1, [pc, #304]	; (8007e68 <Adc_FSM+0x214>)
 8007d36:	fba1 1202 	umull	r1, r2, r1, r2
 8007d3a:	0912      	lsrs	r2, r2, #4
 8007d3c:	4948      	ldr	r1, [pc, #288]	; (8007e60 <Adc_FSM+0x20c>)
 8007d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(i=0;i<5;i++)
 8007d42:	79fb      	ldrb	r3, [r7, #7]
 8007d44:	3301      	adds	r3, #1
 8007d46:	71fb      	strb	r3, [r7, #7]
 8007d48:	79fb      	ldrb	r3, [r7, #7]
 8007d4a:	2b04      	cmp	r3, #4
 8007d4c:	d9ed      	bls.n	8007d2a <Adc_FSM+0xd6>
				}

				/*1 ADC BATT*/
				f32TempVar = 0;
 8007d4e:	f04f 0300 	mov.w	r3, #0
 8007d52:	603b      	str	r3, [r7, #0]
				f32TempVar = ((float)s_u32AdcRawDataTotal[0]*(float)3.3)*(float)1.5;
 8007d54:	4b42      	ldr	r3, [pc, #264]	; (8007e60 <Adc_FSM+0x20c>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	ee07 3a90 	vmov	s15, r3
 8007d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d60:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8007e6c <Adc_FSM+0x218>
 8007d64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007d68:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8007d6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007d70:	edc7 7a00 	vstr	s15, [r7]
				f32TempVar /= (float)4095;
 8007d74:	ed97 7a00 	vldr	s14, [r7]
 8007d78:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007e70 <Adc_FSM+0x21c>
 8007d7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007d80:	edc7 7a00 	vstr	s15, [r7]
				g_stAdcData.u32IntBatVtg =  f32TempVar;//*(float)1000.0;//Volt to Mili Volt
 8007d84:	4a3b      	ldr	r2, [pc, #236]	; (8007e74 <Adc_FSM+0x220>)
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	60d3      	str	r3, [r2, #12]

				/*2&3 AI1 And AI2 Raw data*/
				g_stAdcData.u32AI1RawData = s_u32AdcRawDataTotal[2];
 8007d8a:	4b35      	ldr	r3, [pc, #212]	; (8007e60 <Adc_FSM+0x20c>)
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	4a39      	ldr	r2, [pc, #228]	; (8007e74 <Adc_FSM+0x220>)
 8007d90:	6013      	str	r3, [r2, #0]
				g_stAdcData.u32AI2RawData = s_u32AdcRawDataTotal[1];
 8007d92:	4b33      	ldr	r3, [pc, #204]	; (8007e60 <Adc_FSM+0x20c>)
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	4a37      	ldr	r2, [pc, #220]	; (8007e74 <Adc_FSM+0x220>)
 8007d98:	6053      	str	r3, [r2, #4]

				/*4 Vin */
				f32TempVar = 0;
 8007d9a:	f04f 0300 	mov.w	r3, #0
 8007d9e:	603b      	str	r3, [r7, #0]
				s_u32AdcRawDataTotal[3] += (uint32_t)80;
 8007da0:	4b2f      	ldr	r3, [pc, #188]	; (8007e60 <Adc_FSM+0x20c>)
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	3350      	adds	r3, #80	; 0x50
 8007da6:	4a2e      	ldr	r2, [pc, #184]	; (8007e60 <Adc_FSM+0x20c>)
 8007da8:	60d3      	str	r3, [r2, #12]
				/*
				 As per Discuss with milind vaze we need add 80 ADC Count for match the reading as diode Drop*/
				f32TempVar = (float)(s_u32AdcRawDataTotal[3])*(float)3.3*(float)37.58536585;
 8007daa:	4b2d      	ldr	r3, [pc, #180]	; (8007e60 <Adc_FSM+0x20c>)
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	ee07 3a90 	vmov	s15, r3
 8007db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007db6:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8007e6c <Adc_FSM+0x218>
 8007dba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007dbe:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8007e78 <Adc_FSM+0x224>
 8007dc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007dc6:	edc7 7a00 	vstr	s15, [r7]
				f32TempVar /= (float)4095;
 8007dca:	ed97 7a00 	vldr	s14, [r7]
 8007dce:	eddf 6a28 	vldr	s13, [pc, #160]	; 8007e70 <Adc_FSM+0x21c>
 8007dd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007dd6:	edc7 7a00 	vstr	s15, [r7]
//				f32TempVar += (float)1.5; //Diode Drop
				g_stAdcData.u32PwrSupplyVtg = f32TempVar;
 8007dda:	4a26      	ldr	r2, [pc, #152]	; (8007e74 <Adc_FSM+0x220>)
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	6093      	str	r3, [r2, #8]




				for(i=0;i<4;i++)
 8007de0:	2300      	movs	r3, #0
 8007de2:	71fb      	strb	r3, [r7, #7]
 8007de4:	e007      	b.n	8007df6 <Adc_FSM+0x1a2>
				{
					s_u32AdcRawDataTotal[i] = 0;
 8007de6:	79fb      	ldrb	r3, [r7, #7]
 8007de8:	4a1d      	ldr	r2, [pc, #116]	; (8007e60 <Adc_FSM+0x20c>)
 8007dea:	2100      	movs	r1, #0
 8007dec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for(i=0;i<4;i++)
 8007df0:	79fb      	ldrb	r3, [r7, #7]
 8007df2:	3301      	adds	r3, #1
 8007df4:	71fb      	strb	r3, [r7, #7]
 8007df6:	79fb      	ldrb	r3, [r7, #7]
 8007df8:	2b03      	cmp	r3, #3
 8007dfa:	d9f4      	bls.n	8007de6 <Adc_FSM+0x192>
				}
				s_u32AdcState = ADC_STAE_IDLE;
 8007dfc:	4b13      	ldr	r3, [pc, #76]	; (8007e4c <Adc_FSM+0x1f8>)
 8007dfe:	2204      	movs	r2, #4
 8007e00:	601a      	str	r2, [r3, #0]
				if(gu32ADCRestartTimer == 0)
				{
					s_u32AdcState = ADC_STAE_START_READING;
				}
			}
		}break;
 8007e02:	e01c      	b.n	8007e3e <Adc_FSM+0x1ea>
				if(gu32ADCRestartTimer == 0)
 8007e04:	4b15      	ldr	r3, [pc, #84]	; (8007e5c <Adc_FSM+0x208>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d118      	bne.n	8007e3e <Adc_FSM+0x1ea>
					s_u32AdcState = ADC_STAE_START_READING;
 8007e0c:	4b0f      	ldr	r3, [pc, #60]	; (8007e4c <Adc_FSM+0x1f8>)
 8007e0e:	2201      	movs	r2, #1
 8007e10:	601a      	str	r2, [r3, #0]
		}break;
 8007e12:	e014      	b.n	8007e3e <Adc_FSM+0x1ea>
		case ADC_STAE_IDLE:
		{
			if(gu32ADCRestartTimer == 0)
 8007e14:	4b11      	ldr	r3, [pc, #68]	; (8007e5c <Adc_FSM+0x208>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d112      	bne.n	8007e42 <Adc_FSM+0x1ee>
			{
				s_u32AdcState = ADC_STAE_START_READING;
 8007e1c:	4b0b      	ldr	r3, [pc, #44]	; (8007e4c <Adc_FSM+0x1f8>)
 8007e1e:	2201      	movs	r2, #1
 8007e20:	601a      	str	r2, [r3, #0]
				gu32ADCRestartTimer = TEN_SEC;
 8007e22:	4b0e      	ldr	r3, [pc, #56]	; (8007e5c <Adc_FSM+0x208>)
 8007e24:	f242 7210 	movw	r2, #10000	; 0x2710
 8007e28:	601a      	str	r2, [r3, #0]
			}
		}break;
 8007e2a:	e00a      	b.n	8007e42 <Adc_FSM+0x1ee>
		default:
		{
			HAL_ADC_Stop_DMA(&hadc1);
 8007e2c:	480a      	ldr	r0, [pc, #40]	; (8007e58 <Adc_FSM+0x204>)
 8007e2e:	f003 f9bb 	bl	800b1a8 <HAL_ADC_Stop_DMA>
			s_u32AdcState = ADC_STAE_START_READING;
 8007e32:	4b06      	ldr	r3, [pc, #24]	; (8007e4c <Adc_FSM+0x1f8>)
 8007e34:	2201      	movs	r2, #1
 8007e36:	601a      	str	r2, [r3, #0]
		}
	}
}
 8007e38:	e004      	b.n	8007e44 <Adc_FSM+0x1f0>
		}break;
 8007e3a:	bf00      	nop
 8007e3c:	e002      	b.n	8007e44 <Adc_FSM+0x1f0>
		}break;
 8007e3e:	bf00      	nop
 8007e40:	e000      	b.n	8007e44 <Adc_FSM+0x1f0>
		}break;
 8007e42:	bf00      	nop
}
 8007e44:	bf00      	nop
 8007e46:	3708      	adds	r7, #8
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	20000ffc 	.word	0x20000ffc
 8007e50:	20001ae0 	.word	0x20001ae0
 8007e54:	20001ae4 	.word	0x20001ae4
 8007e58:	200021bc 	.word	0x200021bc
 8007e5c:	20002160 	.word	0x20002160
 8007e60:	20001b04 	.word	0x20001b04
 8007e64:	20001b24 	.word	0x20001b24
 8007e68:	10624dd3 	.word	0x10624dd3
 8007e6c:	40533333 	.word	0x40533333
 8007e70:	457ff000 	.word	0x457ff000
 8007e74:	2000581c 	.word	0x2000581c
 8007e78:	4216576a 	.word	0x4216576a

08007e7c <HAL_ADC_ConvCpltCallback>:
 Change History:
 Author            	Date                Remarks
 KloudQ Team        21/01/19			Added info header
******************************************************************************/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc1);
 8007e84:	4804      	ldr	r0, [pc, #16]	; (8007e98 <HAL_ADC_ConvCpltCallback+0x1c>)
 8007e86:	f003 f98f 	bl	800b1a8 <HAL_ADC_Stop_DMA>
	s_u32AdcConvCpltFlag = (uint32_t)1;
 8007e8a:	4b04      	ldr	r3, [pc, #16]	; (8007e9c <HAL_ADC_ConvCpltCallback+0x20>)
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	601a      	str	r2, [r3, #0]
}
 8007e90:	bf00      	nop
 8007e92:	3708      	adds	r7, #8
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	200021bc 	.word	0x200021bc
 8007e9c:	20001ae0 	.word	0x20001ae0

08007ea0 <canFilterConfig>:
 KloudQ Team        22/03/2020			initial Definitions
 kloudq				27/03/2020			Bit Calculation Added
 kloudq				20/04/2021			Added support for STM32L433 MCU
******************************************************************************/
void canFilterConfig(void)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 8007ea4:	4b6f      	ldr	r3, [pc, #444]	; (8008064 <canFilterConfig+0x1c4>)
 8007ea6:	4a70      	ldr	r2, [pc, #448]	; (8008068 <canFilterConfig+0x1c8>)
 8007ea8:	601a      	str	r2, [r3, #0]
//	hcan1.Init.AutoRetransmission = DISABLE;//ENABLE;//
//	hcan1.Init.ReceiveFifoLocked = DISABLE;//ENABLE;//
//	hcan1.Init.TransmitFifoPriority =ENABLE;// DISABLE;//
//	hcan1.Init.Mode = CAN_MODE_NORMAL;

	hcan1.Init.TimeTriggeredMode = DISABLE;
 8007eaa:	4b6e      	ldr	r3, [pc, #440]	; (8008064 <canFilterConfig+0x1c4>)
 8007eac:	2200      	movs	r2, #0
 8007eae:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = ENABLE;
 8007eb0:	4b6c      	ldr	r3, [pc, #432]	; (8008064 <canFilterConfig+0x1c4>)
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = ENABLE;
 8007eb6:	4b6b      	ldr	r3, [pc, #428]	; (8008064 <canFilterConfig+0x1c4>)
 8007eb8:	2201      	movs	r2, #1
 8007eba:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = ENABLE;
 8007ebc:	4b69      	ldr	r3, [pc, #420]	; (8008064 <canFilterConfig+0x1c4>)
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8007ec2:	4b68      	ldr	r3, [pc, #416]	; (8008064 <canFilterConfig+0x1c4>)
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = ENABLE;
 8007ec8:	4b66      	ldr	r3, [pc, #408]	; (8008064 <canFilterConfig+0x1c4>)
 8007eca:	2201      	movs	r2, #1
 8007ecc:	775a      	strb	r2, [r3, #29]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8007ece:	4b65      	ldr	r3, [pc, #404]	; (8008064 <canFilterConfig+0x1c4>)
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	609a      	str	r2, [r3, #8]

//	hcan1.Init.Mode = CAN_MODE_SILENT;

	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007ed4:	4b63      	ldr	r3, [pc, #396]	; (8008064 <canFilterConfig+0x1c4>)
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8007eda:	4b62      	ldr	r3, [pc, #392]	; (8008064 <canFilterConfig+0x1c4>)
 8007edc:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8007ee0:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8007ee2:	4b60      	ldr	r3, [pc, #384]	; (8008064 <canFilterConfig+0x1c4>)
 8007ee4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007ee8:	615a      	str	r2, [r3, #20]

	switch(gu32CanConfigurationArray[0])
 8007eea:	4b60      	ldr	r3, [pc, #384]	; (800806c <canFilterConfig+0x1cc>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ef2:	d021      	beq.n	8007f38 <canFilterConfig+0x98>
 8007ef4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ef8:	d843      	bhi.n	8007f82 <canFilterConfig+0xe2>
 8007efa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007efe:	d01f      	beq.n	8007f40 <canFilterConfig+0xa0>
 8007f00:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007f04:	d83d      	bhi.n	8007f82 <canFilterConfig+0xe2>
 8007f06:	2bfa      	cmp	r3, #250	; 0xfa
 8007f08:	d01e      	beq.n	8007f48 <canFilterConfig+0xa8>
 8007f0a:	2bfa      	cmp	r3, #250	; 0xfa
 8007f0c:	d839      	bhi.n	8007f82 <canFilterConfig+0xe2>
 8007f0e:	2b7d      	cmp	r3, #125	; 0x7d
 8007f10:	d01e      	beq.n	8007f50 <canFilterConfig+0xb0>
 8007f12:	2b7d      	cmp	r3, #125	; 0x7d
 8007f14:	d835      	bhi.n	8007f82 <canFilterConfig+0xe2>
 8007f16:	2b64      	cmp	r3, #100	; 0x64
 8007f18:	d01e      	beq.n	8007f58 <canFilterConfig+0xb8>
 8007f1a:	2b64      	cmp	r3, #100	; 0x64
 8007f1c:	d831      	bhi.n	8007f82 <canFilterConfig+0xe2>
 8007f1e:	2b53      	cmp	r3, #83	; 0x53
 8007f20:	d01e      	beq.n	8007f60 <canFilterConfig+0xc0>
 8007f22:	2b53      	cmp	r3, #83	; 0x53
 8007f24:	d82d      	bhi.n	8007f82 <canFilterConfig+0xe2>
 8007f26:	2b32      	cmp	r3, #50	; 0x32
 8007f28:	d01e      	beq.n	8007f68 <canFilterConfig+0xc8>
 8007f2a:	2b32      	cmp	r3, #50	; 0x32
 8007f2c:	d829      	bhi.n	8007f82 <canFilterConfig+0xe2>
 8007f2e:	2b0a      	cmp	r3, #10
 8007f30:	d022      	beq.n	8007f78 <canFilterConfig+0xd8>
 8007f32:	2b14      	cmp	r3, #20
 8007f34:	d01c      	beq.n	8007f70 <canFilterConfig+0xd0>
 8007f36:	e024      	b.n	8007f82 <canFilterConfig+0xe2>
  	{
  		case 1000:
  			hcan1.Init.Prescaler = 5;
 8007f38:	4b4a      	ldr	r3, [pc, #296]	; (8008064 <canFilterConfig+0x1c4>)
 8007f3a:	2205      	movs	r2, #5
 8007f3c:	605a      	str	r2, [r3, #4]
  		break;
 8007f3e:	e024      	b.n	8007f8a <canFilterConfig+0xea>
  		case 500:
  			hcan1.Init.Prescaler = 10;
 8007f40:	4b48      	ldr	r3, [pc, #288]	; (8008064 <canFilterConfig+0x1c4>)
 8007f42:	220a      	movs	r2, #10
 8007f44:	605a      	str	r2, [r3, #4]
  		break;
 8007f46:	e020      	b.n	8007f8a <canFilterConfig+0xea>
  		case 250:
  			hcan1.Init.Prescaler = 20;
 8007f48:	4b46      	ldr	r3, [pc, #280]	; (8008064 <canFilterConfig+0x1c4>)
 8007f4a:	2214      	movs	r2, #20
 8007f4c:	605a      	str	r2, [r3, #4]
  		break;
 8007f4e:	e01c      	b.n	8007f8a <canFilterConfig+0xea>
  		case 125:
  			hcan1.Init.Prescaler = 40;
 8007f50:	4b44      	ldr	r3, [pc, #272]	; (8008064 <canFilterConfig+0x1c4>)
 8007f52:	2228      	movs	r2, #40	; 0x28
 8007f54:	605a      	str	r2, [r3, #4]
  		break;
 8007f56:	e018      	b.n	8007f8a <canFilterConfig+0xea>
  		case 100:
  			hcan1.Init.Prescaler = 50;
 8007f58:	4b42      	ldr	r3, [pc, #264]	; (8008064 <canFilterConfig+0x1c4>)
 8007f5a:	2232      	movs	r2, #50	; 0x32
 8007f5c:	605a      	str	r2, [r3, #4]
  		break;
 8007f5e:	e014      	b.n	8007f8a <canFilterConfig+0xea>
  		case 83:
  			hcan1.Init.Prescaler = 60;
 8007f60:	4b40      	ldr	r3, [pc, #256]	; (8008064 <canFilterConfig+0x1c4>)
 8007f62:	223c      	movs	r2, #60	; 0x3c
 8007f64:	605a      	str	r2, [r3, #4]
  		break;
 8007f66:	e010      	b.n	8007f8a <canFilterConfig+0xea>
  		case 50:
  			hcan1.Init.Prescaler = 100;
 8007f68:	4b3e      	ldr	r3, [pc, #248]	; (8008064 <canFilterConfig+0x1c4>)
 8007f6a:	2264      	movs	r2, #100	; 0x64
 8007f6c:	605a      	str	r2, [r3, #4]
  		break;
 8007f6e:	e00c      	b.n	8007f8a <canFilterConfig+0xea>
  		case 20:
  			hcan1.Init.Prescaler = 250;
 8007f70:	4b3c      	ldr	r3, [pc, #240]	; (8008064 <canFilterConfig+0x1c4>)
 8007f72:	22fa      	movs	r2, #250	; 0xfa
 8007f74:	605a      	str	r2, [r3, #4]
  		break;
 8007f76:	e008      	b.n	8007f8a <canFilterConfig+0xea>
  		case 10:
  			hcan1.Init.Prescaler = 500;
 8007f78:	4b3a      	ldr	r3, [pc, #232]	; (8008064 <canFilterConfig+0x1c4>)
 8007f7a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007f7e:	605a      	str	r2, [r3, #4]
  		break;
 8007f80:	e003      	b.n	8007f8a <canFilterConfig+0xea>
  		default:
  		/* Illegal BaudRate Configured . Use Default 500 Kbps */
  			hcan1.Init.Prescaler = 10;
 8007f82:	4b38      	ldr	r3, [pc, #224]	; (8008064 <canFilterConfig+0x1c4>)
 8007f84:	220a      	movs	r2, #10
 8007f86:	605a      	str	r2, [r3, #4]
  		break;
 8007f88:	bf00      	nop
  	}

  	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8007f8a:	4836      	ldr	r0, [pc, #216]	; (8008064 <canFilterConfig+0x1c4>)
 8007f8c:	f004 fbae 	bl	800c6ec <HAL_CAN_Init>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d004      	beq.n	8007fa0 <canFilterConfig+0x100>
  		assertError(enmTORERRORS_CAN1_INIT,enmERRORSTATE_ACTIVE);
 8007f96:	2101      	movs	r1, #1
 8007f98:	2001      	movs	r0, #1
 8007f9a:	f7f9 ff93 	bl	8001ec4 <assertError>
 8007f9e:	e003      	b.n	8007fa8 <canFilterConfig+0x108>
  	else
  		 assertError(enmTORERRORS_CAN1_INIT,enmERRORSTATE_NOERROR);
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	2001      	movs	r0, #1
 8007fa4:	f7f9 ff8e 	bl	8001ec4 <assertError>

  	/*##-2- Configure the CAN Filter ###########################################*/
  	  sFilterConfig.FilterBank = 0;
 8007fa8:	4b31      	ldr	r3, [pc, #196]	; (8008070 <canFilterConfig+0x1d0>)
 8007faa:	2200      	movs	r2, #0
 8007fac:	615a      	str	r2, [r3, #20]
  	  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8007fae:	4b30      	ldr	r3, [pc, #192]	; (8008070 <canFilterConfig+0x1d0>)
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	619a      	str	r2, [r3, #24]
  	  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8007fb4:	4b2e      	ldr	r3, [pc, #184]	; (8008070 <canFilterConfig+0x1d0>)
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	61da      	str	r2, [r3, #28]
  	  sFilterConfig.FilterIdHigh = 0x0000;
 8007fba:	4b2d      	ldr	r3, [pc, #180]	; (8008070 <canFilterConfig+0x1d0>)
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	601a      	str	r2, [r3, #0]
  	  sFilterConfig.FilterIdLow = 0x0000;
 8007fc0:	4b2b      	ldr	r3, [pc, #172]	; (8008070 <canFilterConfig+0x1d0>)
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	605a      	str	r2, [r3, #4]
  	  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8007fc6:	4b2a      	ldr	r3, [pc, #168]	; (8008070 <canFilterConfig+0x1d0>)
 8007fc8:	2200      	movs	r2, #0
 8007fca:	609a      	str	r2, [r3, #8]
  	  sFilterConfig.FilterMaskIdLow = 0x0000;
 8007fcc:	4b28      	ldr	r3, [pc, #160]	; (8008070 <canFilterConfig+0x1d0>)
 8007fce:	2200      	movs	r2, #0
 8007fd0:	60da      	str	r2, [r3, #12]
  	  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8007fd2:	4b27      	ldr	r3, [pc, #156]	; (8008070 <canFilterConfig+0x1d0>)
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	611a      	str	r2, [r3, #16]
  	  sFilterConfig.FilterActivation = ENABLE;
 8007fd8:	4b25      	ldr	r3, [pc, #148]	; (8008070 <canFilterConfig+0x1d0>)
 8007fda:	2201      	movs	r2, #1
 8007fdc:	621a      	str	r2, [r3, #32]
  	  sFilterConfig.SlaveStartFilterBank = 14;
 8007fde:	4b24      	ldr	r3, [pc, #144]	; (8008070 <canFilterConfig+0x1d0>)
 8007fe0:	220e      	movs	r2, #14
 8007fe2:	625a      	str	r2, [r3, #36]	; 0x24

  	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8007fe4:	4922      	ldr	r1, [pc, #136]	; (8008070 <canFilterConfig+0x1d0>)
 8007fe6:	481f      	ldr	r0, [pc, #124]	; (8008064 <canFilterConfig+0x1c4>)
 8007fe8:	f004 fdc8 	bl	800cb7c <HAL_CAN_ConfigFilter>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d004      	beq.n	8007ffc <canFilterConfig+0x15c>
  		assertError(enmTORERRORS_CAN1_CONFIGFILTER,enmERRORSTATE_ACTIVE);
 8007ff2:	2101      	movs	r1, #1
 8007ff4:	2002      	movs	r0, #2
 8007ff6:	f7f9 ff65 	bl	8001ec4 <assertError>
 8007ffa:	e003      	b.n	8008004 <canFilterConfig+0x164>
  	else
  		assertError(enmTORERRORS_CAN1_CONFIGFILTER,enmERRORSTATE_NOERROR);
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	2002      	movs	r0, #2
 8008000:	f7f9 ff60 	bl	8001ec4 <assertError>

  	/*##-3- Start the CAN peripheral ###########################################*/
  	  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8008004:	4817      	ldr	r0, [pc, #92]	; (8008064 <canFilterConfig+0x1c4>)
 8008006:	f004 fee9 	bl	800cddc <HAL_CAN_Start>
  	    /* Start Error */
//  	    Error_Handler();
  	  }

  	/*##-4- Activate CAN RX notification #######################################*/
  	  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800800a:	2102      	movs	r1, #2
 800800c:	4815      	ldr	r0, [pc, #84]	; (8008064 <canFilterConfig+0x1c4>)
 800800e:	f005 f9e1 	bl	800d3d4 <HAL_CAN_ActivateNotification>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d003      	beq.n	8008020 <canFilterConfig+0x180>
  	  {
  		/* Notification Error */
  		  assertError(enmTORERRORS_CAN1_CONFIGFILTER,enmERRORSTATE_ACTIVE);
 8008018:	2101      	movs	r1, #1
 800801a:	2002      	movs	r0, #2
 800801c:	f7f9 ff52 	bl	8001ec4 <assertError>
  	  }

  	  /*##-5- Configure Transmission process #####################################*/
  	TxHeader.StdId = 0x321;
 8008020:	4b14      	ldr	r3, [pc, #80]	; (8008074 <canFilterConfig+0x1d4>)
 8008022:	f240 3221 	movw	r2, #801	; 0x321
 8008026:	601a      	str	r2, [r3, #0]
  	TxHeader.ExtId = 0x01;
 8008028:	4b12      	ldr	r3, [pc, #72]	; (8008074 <canFilterConfig+0x1d4>)
 800802a:	2201      	movs	r2, #1
 800802c:	605a      	str	r2, [r3, #4]
  	TxHeader.RTR = CAN_RTR_DATA;
 800802e:	4b11      	ldr	r3, [pc, #68]	; (8008074 <canFilterConfig+0x1d4>)
 8008030:	2200      	movs	r2, #0
 8008032:	60da      	str	r2, [r3, #12]
  	TxHeader.IDE = CAN_ID_STD;
 8008034:	4b0f      	ldr	r3, [pc, #60]	; (8008074 <canFilterConfig+0x1d4>)
 8008036:	2200      	movs	r2, #0
 8008038:	609a      	str	r2, [r3, #8]
  	TxHeader.DLC = 2;
 800803a:	4b0e      	ldr	r3, [pc, #56]	; (8008074 <canFilterConfig+0x1d4>)
 800803c:	2202      	movs	r2, #2
 800803e:	611a      	str	r2, [r3, #16]
  	TxHeader.TransmitGlobalTime = DISABLE;
 8008040:	4b0c      	ldr	r3, [pc, #48]	; (8008074 <canFilterConfig+0x1d4>)
 8008042:	2200      	movs	r2, #0
 8008044:	751a      	strb	r2, [r3, #20]

  	memset(u32CanIdsReceived,0x00,sizeof(u32CanIdsReceived));
 8008046:	f44f 7248 	mov.w	r2, #800	; 0x320
 800804a:	2100      	movs	r1, #0
 800804c:	480a      	ldr	r0, [pc, #40]	; (8008078 <canFilterConfig+0x1d8>)
 800804e:	f00d fccb 	bl	80159e8 <memset>
  	memset(unCanReceivedMsgs,0x00,sizeof(unCanReceivedMsgs));
 8008052:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8008056:	2100      	movs	r1, #0
 8008058:	4808      	ldr	r0, [pc, #32]	; (800807c <canFilterConfig+0x1dc>)
 800805a:	f00d fcc5 	bl	80159e8 <memset>
}
 800805e:	bf00      	nop
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	20002268 	.word	0x20002268
 8008068:	40006400 	.word	0x40006400
 800806c:	20001000 	.word	0x20001000
 8008070:	20005830 	.word	0x20005830
 8008074:	20006518 	.word	0x20006518
 8008078:	200010dc 	.word	0x200010dc
 800807c:	20005860 	.word	0x20005860

08008080 <HAL_CAN_RxFifo0MsgPendingCallback>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
	/* LED Only for testing/ Indication . Can be removed in production if not required  */
//#if(SLEEP_MOOD == ON)
//	if(gu32MCUCurrentWorkingMode != enmMCUMode_SLEEP)
//#endif
		HAL_GPIO_TogglePin(Comm_LED_GPIO_Port,Comm_LED_Pin);
 8008088:	2108      	movs	r1, #8
 800808a:	4885      	ldr	r0, [pc, #532]	; (80082a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800808c:	f007 f808 	bl	800f0a0 <HAL_GPIO_TogglePin>

	/* Get RX message */
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8008090:	4b84      	ldr	r3, [pc, #528]	; (80082a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8008092:	4a85      	ldr	r2, [pc, #532]	; (80082a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 8008094:	2100      	movs	r1, #0
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f005 f87e 	bl	800d198 <HAL_CAN_GetRxMessage>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d001      	beq.n	80080a6 <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
	{
		/* Reception Error */
		Error_Handler();
 80080a2:	f7fc fa6a 	bl	800457a <Error_Handler>
//				}
//				else{}
//#endif
//#endif

	if(u32CanIdsReceived[u32CanRxMsgLoopCounter] == 0)
 80080a6:	4b81      	ldr	r3, [pc, #516]	; (80082ac <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a81      	ldr	r2, [pc, #516]	; (80082b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 80080ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f040 8182 	bne.w	80083ba <HAL_CAN_RxFifo0MsgPendingCallback+0x33a>
	{
		if(RxHeader.IDE == CAN_ID_EXT)
 80080b6:	4b7c      	ldr	r3, [pc, #496]	; (80082a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	2b04      	cmp	r3, #4
 80080bc:	d107      	bne.n	80080ce <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
		{
			u32CanIdsReceived[u32CanRxMsgLoopCounter] = RxHeader.ExtId;
 80080be:	4b7b      	ldr	r3, [pc, #492]	; (80082ac <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a79      	ldr	r2, [pc, #484]	; (80082a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 80080c4:	6852      	ldr	r2, [r2, #4]
 80080c6:	497a      	ldr	r1, [pc, #488]	; (80082b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 80080c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80080cc:	e00a      	b.n	80080e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>
		}
		else if(RxHeader.IDE == CAN_ID_STD)
 80080ce:	4b76      	ldr	r3, [pc, #472]	; (80082a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d106      	bne.n	80080e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>
		{
			u32CanIdsReceived[u32CanRxMsgLoopCounter] = RxHeader.StdId;
 80080d6:	4b75      	ldr	r3, [pc, #468]	; (80082ac <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a73      	ldr	r2, [pc, #460]	; (80082a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 80080dc:	6812      	ldr	r2, [r2, #0]
 80080de:	4974      	ldr	r1, [pc, #464]	; (80082b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 80080e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		}

		if(RxHeader.ExtId == 0x18954001)
 80080e4:	4b70      	ldr	r3, [pc, #448]	; (80082a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	4a72      	ldr	r2, [pc, #456]	; (80082b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d168      	bne.n	80081c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>
		{
//				Flag_95 = TRUE;
//			u3295IDrespTime = FIFTY_MS;
			counter_95 = ((8 * RxData[0])-8); // 8 byte data, RxData[0] will be from 1 to 8
 80080ee:	4b6d      	ldr	r3, [pc, #436]	; (80082a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	3b01      	subs	r3, #1
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	00db      	lsls	r3, r3, #3
 80080f8:	b2da      	uxtb	r2, r3
 80080fa:	4b6f      	ldr	r3, [pc, #444]	; (80082b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 80080fc:	701a      	strb	r2, [r3, #0]
			CAN_ID_95[counter_95++] = RxData[0];
 80080fe:	4b6e      	ldr	r3, [pc, #440]	; (80082b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	1c5a      	adds	r2, r3, #1
 8008104:	b2d1      	uxtb	r1, r2
 8008106:	4a6c      	ldr	r2, [pc, #432]	; (80082b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8008108:	7011      	strb	r1, [r2, #0]
 800810a:	461a      	mov	r2, r3
 800810c:	4b65      	ldr	r3, [pc, #404]	; (80082a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 800810e:	7819      	ldrb	r1, [r3, #0]
 8008110:	4b6a      	ldr	r3, [pc, #424]	; (80082bc <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 8008112:	5499      	strb	r1, [r3, r2]
			CAN_ID_95[counter_95++] = RxData[1];
 8008114:	4b68      	ldr	r3, [pc, #416]	; (80082b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	1c5a      	adds	r2, r3, #1
 800811a:	b2d1      	uxtb	r1, r2
 800811c:	4a66      	ldr	r2, [pc, #408]	; (80082b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 800811e:	7011      	strb	r1, [r2, #0]
 8008120:	461a      	mov	r2, r3
 8008122:	4b60      	ldr	r3, [pc, #384]	; (80082a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8008124:	7859      	ldrb	r1, [r3, #1]
 8008126:	4b65      	ldr	r3, [pc, #404]	; (80082bc <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 8008128:	5499      	strb	r1, [r3, r2]
			CAN_ID_95[counter_95++] = RxData[2];
 800812a:	4b63      	ldr	r3, [pc, #396]	; (80082b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	1c5a      	adds	r2, r3, #1
 8008130:	b2d1      	uxtb	r1, r2
 8008132:	4a61      	ldr	r2, [pc, #388]	; (80082b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8008134:	7011      	strb	r1, [r2, #0]
 8008136:	461a      	mov	r2, r3
 8008138:	4b5a      	ldr	r3, [pc, #360]	; (80082a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 800813a:	7899      	ldrb	r1, [r3, #2]
 800813c:	4b5f      	ldr	r3, [pc, #380]	; (80082bc <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 800813e:	5499      	strb	r1, [r3, r2]
			CAN_ID_95[counter_95++] = RxData[3];
 8008140:	4b5d      	ldr	r3, [pc, #372]	; (80082b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	1c5a      	adds	r2, r3, #1
 8008146:	b2d1      	uxtb	r1, r2
 8008148:	4a5b      	ldr	r2, [pc, #364]	; (80082b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 800814a:	7011      	strb	r1, [r2, #0]
 800814c:	461a      	mov	r2, r3
 800814e:	4b55      	ldr	r3, [pc, #340]	; (80082a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8008150:	78d9      	ldrb	r1, [r3, #3]
 8008152:	4b5a      	ldr	r3, [pc, #360]	; (80082bc <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 8008154:	5499      	strb	r1, [r3, r2]
			CAN_ID_95[counter_95++] = RxData[4];
 8008156:	4b58      	ldr	r3, [pc, #352]	; (80082b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	1c5a      	adds	r2, r3, #1
 800815c:	b2d1      	uxtb	r1, r2
 800815e:	4a56      	ldr	r2, [pc, #344]	; (80082b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8008160:	7011      	strb	r1, [r2, #0]
 8008162:	461a      	mov	r2, r3
 8008164:	4b4f      	ldr	r3, [pc, #316]	; (80082a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8008166:	7919      	ldrb	r1, [r3, #4]
 8008168:	4b54      	ldr	r3, [pc, #336]	; (80082bc <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 800816a:	5499      	strb	r1, [r3, r2]
			CAN_ID_95[counter_95++] = RxData[5];
 800816c:	4b52      	ldr	r3, [pc, #328]	; (80082b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	1c5a      	adds	r2, r3, #1
 8008172:	b2d1      	uxtb	r1, r2
 8008174:	4a50      	ldr	r2, [pc, #320]	; (80082b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8008176:	7011      	strb	r1, [r2, #0]
 8008178:	461a      	mov	r2, r3
 800817a:	4b4a      	ldr	r3, [pc, #296]	; (80082a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 800817c:	7959      	ldrb	r1, [r3, #5]
 800817e:	4b4f      	ldr	r3, [pc, #316]	; (80082bc <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 8008180:	5499      	strb	r1, [r3, r2]
			CAN_ID_95[counter_95++] = RxData[6];
 8008182:	4b4d      	ldr	r3, [pc, #308]	; (80082b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	1c5a      	adds	r2, r3, #1
 8008188:	b2d1      	uxtb	r1, r2
 800818a:	4a4b      	ldr	r2, [pc, #300]	; (80082b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 800818c:	7011      	strb	r1, [r2, #0]
 800818e:	461a      	mov	r2, r3
 8008190:	4b44      	ldr	r3, [pc, #272]	; (80082a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8008192:	7999      	ldrb	r1, [r3, #6]
 8008194:	4b49      	ldr	r3, [pc, #292]	; (80082bc <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 8008196:	5499      	strb	r1, [r3, r2]
			CAN_ID_95[counter_95] 	= RxData[7];
 8008198:	4b47      	ldr	r3, [pc, #284]	; (80082b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	461a      	mov	r2, r3
 800819e:	4b41      	ldr	r3, [pc, #260]	; (80082a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 80081a0:	79d9      	ldrb	r1, [r3, #7]
 80081a2:	4b46      	ldr	r3, [pc, #280]	; (80082bc <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 80081a4:	5499      	strb	r1, [r3, r2]
			if((counter_95>63) || (u3295IDrespTime == 0))
 80081a6:	4b44      	ldr	r3, [pc, #272]	; (80082b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	2b3f      	cmp	r3, #63	; 0x3f
 80081ac:	d804      	bhi.n	80081b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
 80081ae:	4b44      	ldr	r3, [pc, #272]	; (80082c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f040 8101 	bne.w	80083ba <HAL_CAN_RxFifo0MsgPendingCallback+0x33a>
			{
				counter_95 = 0;
 80081b8:	4b3f      	ldr	r3, [pc, #252]	; (80082b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 80081ba:	2200      	movs	r2, #0
 80081bc:	701a      	strb	r2, [r3, #0]
 80081be:	e0fc      	b.n	80083ba <HAL_CAN_RxFifo0MsgPendingCallback+0x33a>
			}
		}
		else if(RxHeader.ExtId == 0x18964001)
 80081c0:	4b39      	ldr	r3, [pc, #228]	; (80082a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	4a3f      	ldr	r2, [pc, #252]	; (80082c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	f040 8084 	bne.w	80082d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>
		{
//			u3296IDrespTime = FIFTY_MS;
			counter_96 = ((8 * RxData[0])-8); // 8 byte data, RxData[0] will be from 1 to 8
 80081cc:	4b35      	ldr	r3, [pc, #212]	; (80082a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	3b01      	subs	r3, #1
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	00db      	lsls	r3, r3, #3
 80081d6:	b2da      	uxtb	r2, r3
 80081d8:	4b3b      	ldr	r3, [pc, #236]	; (80082c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 80081da:	701a      	strb	r2, [r3, #0]
			CAN_ID_96[counter_96++] = RxData[0];
 80081dc:	4b3a      	ldr	r3, [pc, #232]	; (80082c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	1c5a      	adds	r2, r3, #1
 80081e2:	b2d1      	uxtb	r1, r2
 80081e4:	4a38      	ldr	r2, [pc, #224]	; (80082c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 80081e6:	7011      	strb	r1, [r2, #0]
 80081e8:	461a      	mov	r2, r3
 80081ea:	4b2e      	ldr	r3, [pc, #184]	; (80082a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 80081ec:	7819      	ldrb	r1, [r3, #0]
 80081ee:	4b37      	ldr	r3, [pc, #220]	; (80082cc <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 80081f0:	5499      	strb	r1, [r3, r2]
			CAN_ID_96[counter_96++] = RxData[1];
 80081f2:	4b35      	ldr	r3, [pc, #212]	; (80082c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	1c5a      	adds	r2, r3, #1
 80081f8:	b2d1      	uxtb	r1, r2
 80081fa:	4a33      	ldr	r2, [pc, #204]	; (80082c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 80081fc:	7011      	strb	r1, [r2, #0]
 80081fe:	461a      	mov	r2, r3
 8008200:	4b28      	ldr	r3, [pc, #160]	; (80082a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8008202:	7859      	ldrb	r1, [r3, #1]
 8008204:	4b31      	ldr	r3, [pc, #196]	; (80082cc <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 8008206:	5499      	strb	r1, [r3, r2]
			CAN_ID_96[counter_96++] = RxData[2];
 8008208:	4b2f      	ldr	r3, [pc, #188]	; (80082c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	1c5a      	adds	r2, r3, #1
 800820e:	b2d1      	uxtb	r1, r2
 8008210:	4a2d      	ldr	r2, [pc, #180]	; (80082c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8008212:	7011      	strb	r1, [r2, #0]
 8008214:	461a      	mov	r2, r3
 8008216:	4b23      	ldr	r3, [pc, #140]	; (80082a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8008218:	7899      	ldrb	r1, [r3, #2]
 800821a:	4b2c      	ldr	r3, [pc, #176]	; (80082cc <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 800821c:	5499      	strb	r1, [r3, r2]
			CAN_ID_96[counter_96++] = RxData[3];
 800821e:	4b2a      	ldr	r3, [pc, #168]	; (80082c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	1c5a      	adds	r2, r3, #1
 8008224:	b2d1      	uxtb	r1, r2
 8008226:	4a28      	ldr	r2, [pc, #160]	; (80082c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8008228:	7011      	strb	r1, [r2, #0]
 800822a:	461a      	mov	r2, r3
 800822c:	4b1d      	ldr	r3, [pc, #116]	; (80082a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 800822e:	78d9      	ldrb	r1, [r3, #3]
 8008230:	4b26      	ldr	r3, [pc, #152]	; (80082cc <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 8008232:	5499      	strb	r1, [r3, r2]
			CAN_ID_96[counter_96++] = RxData[4];
 8008234:	4b24      	ldr	r3, [pc, #144]	; (80082c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	1c5a      	adds	r2, r3, #1
 800823a:	b2d1      	uxtb	r1, r2
 800823c:	4a22      	ldr	r2, [pc, #136]	; (80082c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 800823e:	7011      	strb	r1, [r2, #0]
 8008240:	461a      	mov	r2, r3
 8008242:	4b18      	ldr	r3, [pc, #96]	; (80082a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8008244:	7919      	ldrb	r1, [r3, #4]
 8008246:	4b21      	ldr	r3, [pc, #132]	; (80082cc <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 8008248:	5499      	strb	r1, [r3, r2]
			CAN_ID_96[counter_96++] = RxData[5];
 800824a:	4b1f      	ldr	r3, [pc, #124]	; (80082c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	1c5a      	adds	r2, r3, #1
 8008250:	b2d1      	uxtb	r1, r2
 8008252:	4a1d      	ldr	r2, [pc, #116]	; (80082c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8008254:	7011      	strb	r1, [r2, #0]
 8008256:	461a      	mov	r2, r3
 8008258:	4b12      	ldr	r3, [pc, #72]	; (80082a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 800825a:	7959      	ldrb	r1, [r3, #5]
 800825c:	4b1b      	ldr	r3, [pc, #108]	; (80082cc <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 800825e:	5499      	strb	r1, [r3, r2]
			CAN_ID_96[counter_96++] = RxData[6];
 8008260:	4b19      	ldr	r3, [pc, #100]	; (80082c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	1c5a      	adds	r2, r3, #1
 8008266:	b2d1      	uxtb	r1, r2
 8008268:	4a17      	ldr	r2, [pc, #92]	; (80082c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 800826a:	7011      	strb	r1, [r2, #0]
 800826c:	461a      	mov	r2, r3
 800826e:	4b0d      	ldr	r3, [pc, #52]	; (80082a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8008270:	7999      	ldrb	r1, [r3, #6]
 8008272:	4b16      	ldr	r3, [pc, #88]	; (80082cc <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 8008274:	5499      	strb	r1, [r3, r2]
			CAN_ID_96[counter_96]	= RxData[7];
 8008276:	4b14      	ldr	r3, [pc, #80]	; (80082c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	461a      	mov	r2, r3
 800827c:	4b09      	ldr	r3, [pc, #36]	; (80082a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 800827e:	79d9      	ldrb	r1, [r3, #7]
 8008280:	4b12      	ldr	r3, [pc, #72]	; (80082cc <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 8008282:	5499      	strb	r1, [r3, r2]
			if((counter_96>63) || (u3296IDrespTime == 0))
 8008284:	4b10      	ldr	r3, [pc, #64]	; (80082c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	2b3f      	cmp	r3, #63	; 0x3f
 800828a:	d804      	bhi.n	8008296 <HAL_CAN_RxFifo0MsgPendingCallback+0x216>
 800828c:	4b10      	ldr	r3, [pc, #64]	; (80082d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	f040 8092 	bne.w	80083ba <HAL_CAN_RxFifo0MsgPendingCallback+0x33a>
			{
				counter_95 = 0;
 8008296:	4b08      	ldr	r3, [pc, #32]	; (80082b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8008298:	2200      	movs	r2, #0
 800829a:	701a      	strb	r2, [r3, #0]
 800829c:	e08d      	b.n	80083ba <HAL_CAN_RxFifo0MsgPendingCallback+0x33a>
 800829e:	bf00      	nop
 80082a0:	48000400 	.word	0x48000400
 80082a4:	20006510 	.word	0x20006510
 80082a8:	20006530 	.word	0x20006530
 80082ac:	20001b30 	.word	0x20001b30
 80082b0:	200010dc 	.word	0x200010dc
 80082b4:	18954001 	.word	0x18954001
 80082b8:	200020b8 	.word	0x200020b8
 80082bc:	20002020 	.word	0x20002020
 80082c0:	200020b0 	.word	0x200020b0
 80082c4:	18964001 	.word	0x18964001
 80082c8:	200020b9 	.word	0x200020b9
 80082cc:	20002068 	.word	0x20002068
 80082d0:	200020b4 	.word	0x200020b4
//			unCanReceivedMsgs[u32CanRxMsgLoopCounter].u8CanMsgByte5 = (RxData[5]);
//			unCanReceivedMsgs[u32CanRxMsgLoopCounter].u8CanMsgByte6 = (RxData[6]);
//			unCanReceivedMsgs[u32CanRxMsgLoopCounter].u8CanMsgByte7 = (RxData[7]);


			unCanReceivedMsgs[u32CanRxMsgLoopCounter].u8CanMsgByte0 = (RxData[7]);
 80082d4:	4b3e      	ldr	r3, [pc, #248]	; (80083d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x350>)
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	4b3e      	ldr	r3, [pc, #248]	; (80083d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x354>)
 80082da:	79d8      	ldrb	r0, [r3, #7]
 80082dc:	493e      	ldr	r1, [pc, #248]	; (80083d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x358>)
 80082de:	4613      	mov	r3, r2
 80082e0:	005b      	lsls	r3, r3, #1
 80082e2:	4413      	add	r3, r2
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	440b      	add	r3, r1
 80082e8:	3307      	adds	r3, #7
 80082ea:	4602      	mov	r2, r0
 80082ec:	701a      	strb	r2, [r3, #0]
			unCanReceivedMsgs[u32CanRxMsgLoopCounter].u8CanMsgByte1 = (RxData[6]);
 80082ee:	4b38      	ldr	r3, [pc, #224]	; (80083d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x350>)
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	4b38      	ldr	r3, [pc, #224]	; (80083d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x354>)
 80082f4:	7998      	ldrb	r0, [r3, #6]
 80082f6:	4938      	ldr	r1, [pc, #224]	; (80083d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x358>)
 80082f8:	4613      	mov	r3, r2
 80082fa:	005b      	lsls	r3, r3, #1
 80082fc:	4413      	add	r3, r2
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	440b      	add	r3, r1
 8008302:	3306      	adds	r3, #6
 8008304:	4602      	mov	r2, r0
 8008306:	701a      	strb	r2, [r3, #0]
			unCanReceivedMsgs[u32CanRxMsgLoopCounter].u8CanMsgByte2 = (RxData[5]);
 8008308:	4b31      	ldr	r3, [pc, #196]	; (80083d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x350>)
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	4b31      	ldr	r3, [pc, #196]	; (80083d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x354>)
 800830e:	7958      	ldrb	r0, [r3, #5]
 8008310:	4931      	ldr	r1, [pc, #196]	; (80083d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x358>)
 8008312:	4613      	mov	r3, r2
 8008314:	005b      	lsls	r3, r3, #1
 8008316:	4413      	add	r3, r2
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	440b      	add	r3, r1
 800831c:	3305      	adds	r3, #5
 800831e:	4602      	mov	r2, r0
 8008320:	701a      	strb	r2, [r3, #0]
			unCanReceivedMsgs[u32CanRxMsgLoopCounter].u8CanMsgByte3 = (RxData[4]);
 8008322:	4b2b      	ldr	r3, [pc, #172]	; (80083d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x350>)
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	4b2b      	ldr	r3, [pc, #172]	; (80083d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x354>)
 8008328:	7918      	ldrb	r0, [r3, #4]
 800832a:	492b      	ldr	r1, [pc, #172]	; (80083d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x358>)
 800832c:	4613      	mov	r3, r2
 800832e:	005b      	lsls	r3, r3, #1
 8008330:	4413      	add	r3, r2
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	440b      	add	r3, r1
 8008336:	3304      	adds	r3, #4
 8008338:	4602      	mov	r2, r0
 800833a:	701a      	strb	r2, [r3, #0]
			unCanReceivedMsgs[u32CanRxMsgLoopCounter].u8CanMsgByte4 = (RxData[3]);
 800833c:	4b24      	ldr	r3, [pc, #144]	; (80083d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x350>)
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	4b24      	ldr	r3, [pc, #144]	; (80083d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x354>)
 8008342:	78d8      	ldrb	r0, [r3, #3]
 8008344:	4924      	ldr	r1, [pc, #144]	; (80083d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x358>)
 8008346:	4613      	mov	r3, r2
 8008348:	005b      	lsls	r3, r3, #1
 800834a:	4413      	add	r3, r2
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	440b      	add	r3, r1
 8008350:	3303      	adds	r3, #3
 8008352:	4602      	mov	r2, r0
 8008354:	701a      	strb	r2, [r3, #0]
			unCanReceivedMsgs[u32CanRxMsgLoopCounter].u8CanMsgByte5 = (RxData[2]);
 8008356:	4b1e      	ldr	r3, [pc, #120]	; (80083d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x350>)
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	4b1e      	ldr	r3, [pc, #120]	; (80083d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x354>)
 800835c:	7898      	ldrb	r0, [r3, #2]
 800835e:	491e      	ldr	r1, [pc, #120]	; (80083d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x358>)
 8008360:	4613      	mov	r3, r2
 8008362:	005b      	lsls	r3, r3, #1
 8008364:	4413      	add	r3, r2
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	440b      	add	r3, r1
 800836a:	3302      	adds	r3, #2
 800836c:	4602      	mov	r2, r0
 800836e:	701a      	strb	r2, [r3, #0]
			unCanReceivedMsgs[u32CanRxMsgLoopCounter].u8CanMsgByte6 = (RxData[1]);
 8008370:	4b17      	ldr	r3, [pc, #92]	; (80083d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x350>)
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	4b17      	ldr	r3, [pc, #92]	; (80083d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x354>)
 8008376:	7858      	ldrb	r0, [r3, #1]
 8008378:	4917      	ldr	r1, [pc, #92]	; (80083d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x358>)
 800837a:	4613      	mov	r3, r2
 800837c:	005b      	lsls	r3, r3, #1
 800837e:	4413      	add	r3, r2
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	440b      	add	r3, r1
 8008384:	3301      	adds	r3, #1
 8008386:	4602      	mov	r2, r0
 8008388:	701a      	strb	r2, [r3, #0]
			unCanReceivedMsgs[u32CanRxMsgLoopCounter].u8CanMsgByte7 = (RxData[0]);
 800838a:	4b11      	ldr	r3, [pc, #68]	; (80083d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x350>)
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	4b11      	ldr	r3, [pc, #68]	; (80083d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x354>)
 8008390:	7818      	ldrb	r0, [r3, #0]
 8008392:	4911      	ldr	r1, [pc, #68]	; (80083d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x358>)
 8008394:	4613      	mov	r3, r2
 8008396:	005b      	lsls	r3, r3, #1
 8008398:	4413      	add	r3, r2
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	440b      	add	r3, r1
 800839e:	4602      	mov	r2, r0
 80083a0:	701a      	strb	r2, [r3, #0]
			u32CanRxMsgLoopCounter++;
 80083a2:	4b0b      	ldr	r3, [pc, #44]	; (80083d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x350>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	3301      	adds	r3, #1
 80083a8:	4a09      	ldr	r2, [pc, #36]	; (80083d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x350>)
 80083aa:	6013      	str	r3, [r2, #0]


			if(u32CanRxMsgLoopCounter >= CAN_BUFFER_LENGTH)
 80083ac:	4b08      	ldr	r3, [pc, #32]	; (80083d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x350>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2bc7      	cmp	r3, #199	; 0xc7
 80083b2:	d902      	bls.n	80083ba <HAL_CAN_RxFifo0MsgPendingCallback+0x33a>
					u32CanRxMsgLoopCounter = 0;
 80083b4:	4b06      	ldr	r3, [pc, #24]	; (80083d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x350>)
 80083b6:	2200      	movs	r2, #0
 80083b8:	601a      	str	r2, [r3, #0]
		}

	}

	if(u32CanRxMsgLoopCounter >= CAN_BUFFER_LENGTH)
 80083ba:	4b05      	ldr	r3, [pc, #20]	; (80083d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x350>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2bc7      	cmp	r3, #199	; 0xc7
 80083c0:	d902      	bls.n	80083c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x348>
		u32CanRxMsgLoopCounter = 0;
 80083c2:	4b03      	ldr	r3, [pc, #12]	; (80083d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x350>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	601a      	str	r2, [r3, #0]
}
 80083c8:	bf00      	nop
 80083ca:	3708      	adds	r7, #8
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	20001b30 	.word	0x20001b30
 80083d4:	20006510 	.word	0x20006510
 80083d8:	20005860 	.word	0x20005860

080083dc <HAL_CAN_ErrorCallback>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
	canTestVariable = hcan->ErrorCode;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e8:	4a05      	ldr	r2, [pc, #20]	; (8008400 <HAL_CAN_ErrorCallback+0x24>)
 80083ea:	6013      	str	r3, [r2, #0]
	HAL_CAN_DeInit(&hcan1);
 80083ec:	4805      	ldr	r0, [pc, #20]	; (8008404 <HAL_CAN_ErrorCallback+0x28>)
 80083ee:	f004 fb93 	bl	800cb18 <HAL_CAN_DeInit>
	canFilterConfig();
 80083f2:	f7ff fd55 	bl	8007ea0 <canFilterConfig>
//	HAL_GPIO_TogglePin(Comm_LED_GPIO_Port, Comm_LED_Pin);
}
 80083f6:	bf00      	nop
 80083f8:	3708      	adds	r7, #8
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	20001b34 	.word	0x20001b34
 8008404:	20002268 	.word	0x20002268

08008408 <isCommandIdConfigured>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint32_t isCommandIdConfigured(uint32_t canId)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
	static uint32_t LoopCounter = 0;
	static uint32_t u32PositioninConfigArray = 0;

	if(LoopCounter == 0)
 8008410:	4b1b      	ldr	r3, [pc, #108]	; (8008480 <isCommandIdConfigured+0x78>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d105      	bne.n	8008424 <isCommandIdConfigured+0x1c>
	{
		u32IdSearchFlag = 1;
 8008418:	4b1a      	ldr	r3, [pc, #104]	; (8008484 <isCommandIdConfigured+0x7c>)
 800841a:	2201      	movs	r2, #1
 800841c:	601a      	str	r2, [r3, #0]
		u32PositioninConfigArray = 0;
 800841e:	4b1a      	ldr	r3, [pc, #104]	; (8008488 <isCommandIdConfigured+0x80>)
 8008420:	2200      	movs	r2, #0
 8008422:	601a      	str	r2, [r3, #0]
	}

	if(u32IdSearchFlag == 1)
 8008424:	4b17      	ldr	r3, [pc, #92]	; (8008484 <isCommandIdConfigured+0x7c>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2b01      	cmp	r3, #1
 800842a:	d121      	bne.n	8008470 <isCommandIdConfigured+0x68>
	{
		if(gu32CanConfigurationArray[LoopCounter] == canId)
 800842c:	4b14      	ldr	r3, [pc, #80]	; (8008480 <isCommandIdConfigured+0x78>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a16      	ldr	r2, [pc, #88]	; (800848c <isCommandIdConfigured+0x84>)
 8008432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	429a      	cmp	r2, r3
 800843a:	d10a      	bne.n	8008452 <isCommandIdConfigured+0x4a>
		{
			/*
			 * If Received CanID is found in configuration Array
			 * then parse the frame else ignore .
			 */
			u32PositioninConfigArray = LoopCounter;
 800843c:	4b10      	ldr	r3, [pc, #64]	; (8008480 <isCommandIdConfigured+0x78>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a11      	ldr	r2, [pc, #68]	; (8008488 <isCommandIdConfigured+0x80>)
 8008442:	6013      	str	r3, [r2, #0]
			u32IdSearchFlag = 2;
 8008444:	4b0f      	ldr	r3, [pc, #60]	; (8008484 <isCommandIdConfigured+0x7c>)
 8008446:	2202      	movs	r2, #2
 8008448:	601a      	str	r2, [r3, #0]
			LoopCounter = 0;
 800844a:	4b0d      	ldr	r3, [pc, #52]	; (8008480 <isCommandIdConfigured+0x78>)
 800844c:	2200      	movs	r2, #0
 800844e:	601a      	str	r2, [r3, #0]
 8008450:	e00e      	b.n	8008470 <isCommandIdConfigured+0x68>
		}
		else
		{
			LoopCounter++;
 8008452:	4b0b      	ldr	r3, [pc, #44]	; (8008480 <isCommandIdConfigured+0x78>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	3301      	adds	r3, #1
 8008458:	4a09      	ldr	r2, [pc, #36]	; (8008480 <isCommandIdConfigured+0x78>)
 800845a:	6013      	str	r3, [r2, #0]
			if (LoopCounter == MAX_CAN_IDS_SUPPORTED)
 800845c:	4b08      	ldr	r3, [pc, #32]	; (8008480 <isCommandIdConfigured+0x78>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	2b36      	cmp	r3, #54	; 0x36
 8008462:	d105      	bne.n	8008470 <isCommandIdConfigured+0x68>
			{
				LoopCounter = 0;
 8008464:	4b06      	ldr	r3, [pc, #24]	; (8008480 <isCommandIdConfigured+0x78>)
 8008466:	2200      	movs	r2, #0
 8008468:	601a      	str	r2, [r3, #0]
				u32IdSearchFlag = 2;
 800846a:	4b06      	ldr	r3, [pc, #24]	; (8008484 <isCommandIdConfigured+0x7c>)
 800846c:	2202      	movs	r2, #2
 800846e:	601a      	str	r2, [r3, #0]
			}
		}
	}
	return u32PositioninConfigArray;
 8008470:	4b05      	ldr	r3, [pc, #20]	; (8008488 <isCommandIdConfigured+0x80>)
 8008472:	681b      	ldr	r3, [r3, #0]
}
 8008474:	4618      	mov	r0, r3
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr
 8008480:	200020c0 	.word	0x200020c0
 8008484:	20001b38 	.word	0x20001b38
 8008488:	200020c4 	.word	0x200020c4
 800848c:	20001000 	.word	0x20001000

08008490 <parseCanMessageQueue>:
*
*******************************************************************************/
uint32_t temp = 0;
uint32_t gu32CanIdParserCounter = 0;
void parseCanMessageQueue(void)
{
 8008490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008494:	b08c      	sub	sp, #48	; 0x30
 8008496:	af00      	add	r7, sp, #0
	static uint32_t u32CanMsgID = 0;
	static uint32_t u32ParserState = 0;
	static uint32_t u32IdStatus = 0;

	if(u32CanIdsReceived[gu32CanIdParserCounter] != 0)
 8008498:	4bab      	ldr	r3, [pc, #684]	; (8008748 <parseCanMessageQueue+0x2b8>)
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	4bab      	ldr	r3, [pc, #684]	; (800874c <parseCanMessageQueue+0x2bc>)
 800849e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	f000 81df 	beq.w	8008866 <parseCanMessageQueue+0x3d6>
	{
		if(u32ParserState == 0)
 80084a8:	4ba9      	ldr	r3, [pc, #676]	; (8008750 <parseCanMessageQueue+0x2c0>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d10a      	bne.n	80084c6 <parseCanMessageQueue+0x36>
		{
			/* Message Available. Parse The Message */

			u32CanMsgID = u32CanIdsReceived[gu32CanIdParserCounter];
 80084b0:	4ba5      	ldr	r3, [pc, #660]	; (8008748 <parseCanMessageQueue+0x2b8>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4aa5      	ldr	r2, [pc, #660]	; (800874c <parseCanMessageQueue+0x2bc>)
 80084b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084ba:	4aa6      	ldr	r2, [pc, #664]	; (8008754 <parseCanMessageQueue+0x2c4>)
 80084bc:	6013      	str	r3, [r2, #0]


			u32ParserState = 1;
 80084be:	4ba4      	ldr	r3, [pc, #656]	; (8008750 <parseCanMessageQueue+0x2c0>)
 80084c0:	2201      	movs	r2, #1
 80084c2:	601a      	str	r2, [r3, #0]
 80084c4:	e1d4      	b.n	8008870 <parseCanMessageQueue+0x3e0>
		}
		else if(u32ParserState == 1)
 80084c6:	4ba2      	ldr	r3, [pc, #648]	; (8008750 <parseCanMessageQueue+0x2c0>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	f040 81d0 	bne.w	8008870 <parseCanMessageQueue+0x3e0>
		{
			/* Existing CAN parsing based on configured IDs
			 * Modified by 100133 for dynamic CAN ID support on 23/2/23 */
			/* In Process */
			if(u32IdSearchFlag == 2)
 80084d0:	4ba1      	ldr	r3, [pc, #644]	; (8008758 <parseCanMessageQueue+0x2c8>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	f040 81bd 	bne.w	8008854 <parseCanMessageQueue+0x3c4>
			{
				/* Search Process Completed */
				if(u32IdStatus != 0)
 80084da:	4ba0      	ldr	r3, [pc, #640]	; (800875c <parseCanMessageQueue+0x2cc>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	f000 8142 	beq.w	8008768 <parseCanMessageQueue+0x2d8>
				{
					if(u32IdStatus == 53)
 80084e4:	4b9d      	ldr	r3, [pc, #628]	; (800875c <parseCanMessageQueue+0x2cc>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2b35      	cmp	r3, #53	; 0x35
					{
						if(u32IdStatus != 0){}
					}
					gu64CanMessageArray[u32IdStatus] =  ((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte7 << 56)|
 80084ea:	4b97      	ldr	r3, [pc, #604]	; (8008748 <parseCanMessageQueue+0x2b8>)
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	499c      	ldr	r1, [pc, #624]	; (8008760 <parseCanMessageQueue+0x2d0>)
 80084f0:	4613      	mov	r3, r2
 80084f2:	005b      	lsls	r3, r3, #1
 80084f4:	4413      	add	r3, r2
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	440b      	add	r3, r1
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	b2da      	uxtb	r2, r3
 80084fe:	f04f 0300 	mov.w	r3, #0
 8008502:	f04f 0400 	mov.w	r4, #0
 8008506:	f04f 0500 	mov.w	r5, #0
 800850a:	0615      	lsls	r5, r2, #24
 800850c:	2400      	movs	r4, #0
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte6 << 48)|
 800850e:	4b8e      	ldr	r3, [pc, #568]	; (8008748 <parseCanMessageQueue+0x2b8>)
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	4993      	ldr	r1, [pc, #588]	; (8008760 <parseCanMessageQueue+0x2d0>)
 8008514:	4613      	mov	r3, r2
 8008516:	005b      	lsls	r3, r3, #1
 8008518:	4413      	add	r3, r2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	440b      	add	r3, r1
 800851e:	3301      	adds	r3, #1
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	b2da      	uxtb	r2, r3
 8008524:	f04f 0300 	mov.w	r3, #0
 8008528:	f04f 0000 	mov.w	r0, #0
 800852c:	f04f 0100 	mov.w	r1, #0
 8008530:	0411      	lsls	r1, r2, #16
 8008532:	2000      	movs	r0, #0
					gu64CanMessageArray[u32IdStatus] =  ((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte7 << 56)|
 8008534:	ea44 0800 	orr.w	r8, r4, r0
 8008538:	ea45 0901 	orr.w	r9, r5, r1
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte5 << 40)|
 800853c:	4b82      	ldr	r3, [pc, #520]	; (8008748 <parseCanMessageQueue+0x2b8>)
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	4987      	ldr	r1, [pc, #540]	; (8008760 <parseCanMessageQueue+0x2d0>)
 8008542:	4613      	mov	r3, r2
 8008544:	005b      	lsls	r3, r3, #1
 8008546:	4413      	add	r3, r2
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	440b      	add	r3, r1
 800854c:	3302      	adds	r3, #2
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	b2da      	uxtb	r2, r3
 8008552:	f04f 0300 	mov.w	r3, #0
 8008556:	f04f 0000 	mov.w	r0, #0
 800855a:	f04f 0100 	mov.w	r1, #0
 800855e:	0211      	lsls	r1, r2, #8
 8008560:	2000      	movs	r0, #0
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte6 << 48)|
 8008562:	ea48 0a00 	orr.w	sl, r8, r0
 8008566:	ea49 0b01 	orr.w	fp, r9, r1
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte4 << 32)|
 800856a:	4b77      	ldr	r3, [pc, #476]	; (8008748 <parseCanMessageQueue+0x2b8>)
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	497c      	ldr	r1, [pc, #496]	; (8008760 <parseCanMessageQueue+0x2d0>)
 8008570:	4613      	mov	r3, r2
 8008572:	005b      	lsls	r3, r3, #1
 8008574:	4413      	add	r3, r2
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	440b      	add	r3, r1
 800857a:	3303      	adds	r3, #3
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	b2da      	uxtb	r2, r3
 8008580:	f04f 0300 	mov.w	r3, #0
 8008584:	f04f 0000 	mov.w	r0, #0
 8008588:	f04f 0100 	mov.w	r1, #0
 800858c:	0011      	movs	r1, r2
 800858e:	2000      	movs	r0, #0
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte5 << 40)|
 8008590:	ea4a 0300 	orr.w	r3, sl, r0
 8008594:	62bb      	str	r3, [r7, #40]	; 0x28
 8008596:	ea4b 0301 	orr.w	r3, fp, r1
 800859a:	62fb      	str	r3, [r7, #44]	; 0x2c
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte3 << 24)|
 800859c:	4b6a      	ldr	r3, [pc, #424]	; (8008748 <parseCanMessageQueue+0x2b8>)
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	496f      	ldr	r1, [pc, #444]	; (8008760 <parseCanMessageQueue+0x2d0>)
 80085a2:	4613      	mov	r3, r2
 80085a4:	005b      	lsls	r3, r3, #1
 80085a6:	4413      	add	r3, r2
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	440b      	add	r3, r1
 80085ac:	3304      	adds	r3, #4
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	b2da      	uxtb	r2, r3
 80085b2:	f04f 0300 	mov.w	r3, #0
 80085b6:	0a11      	lsrs	r1, r2, #8
 80085b8:	6279      	str	r1, [r7, #36]	; 0x24
 80085ba:	0613      	lsls	r3, r2, #24
 80085bc:	623b      	str	r3, [r7, #32]
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte4 << 32)|
 80085be:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80085c2:	4623      	mov	r3, r4
 80085c4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80085c8:	4602      	mov	r2, r0
 80085ca:	4313      	orrs	r3, r2
 80085cc:	61bb      	str	r3, [r7, #24]
 80085ce:	462b      	mov	r3, r5
 80085d0:	460a      	mov	r2, r1
 80085d2:	4313      	orrs	r3, r2
 80085d4:	61fb      	str	r3, [r7, #28]
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte2 << 16)|
 80085d6:	4b5c      	ldr	r3, [pc, #368]	; (8008748 <parseCanMessageQueue+0x2b8>)
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	4961      	ldr	r1, [pc, #388]	; (8008760 <parseCanMessageQueue+0x2d0>)
 80085dc:	4613      	mov	r3, r2
 80085de:	005b      	lsls	r3, r3, #1
 80085e0:	4413      	add	r3, r2
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	440b      	add	r3, r1
 80085e6:	3305      	adds	r3, #5
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	b2d8      	uxtb	r0, r3
 80085ec:	f04f 0100 	mov.w	r1, #0
 80085f0:	f04f 0200 	mov.w	r2, #0
 80085f4:	f04f 0300 	mov.w	r3, #0
 80085f8:	040b      	lsls	r3, r1, #16
 80085fa:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80085fe:	0402      	lsls	r2, r0, #16
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte3 << 24)|
 8008600:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8008604:	4621      	mov	r1, r4
 8008606:	4311      	orrs	r1, r2
 8008608:	6139      	str	r1, [r7, #16]
 800860a:	4629      	mov	r1, r5
 800860c:	4319      	orrs	r1, r3
 800860e:	6179      	str	r1, [r7, #20]
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte1 << 8) |
 8008610:	4b4d      	ldr	r3, [pc, #308]	; (8008748 <parseCanMessageQueue+0x2b8>)
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	4952      	ldr	r1, [pc, #328]	; (8008760 <parseCanMessageQueue+0x2d0>)
 8008616:	4613      	mov	r3, r2
 8008618:	005b      	lsls	r3, r3, #1
 800861a:	4413      	add	r3, r2
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	440b      	add	r3, r1
 8008620:	3306      	adds	r3, #6
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	b2d8      	uxtb	r0, r3
 8008626:	f04f 0100 	mov.w	r1, #0
 800862a:	f04f 0200 	mov.w	r2, #0
 800862e:	f04f 0300 	mov.w	r3, #0
 8008632:	020b      	lsls	r3, r1, #8
 8008634:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008638:	0202      	lsls	r2, r0, #8
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte2 << 16)|
 800863a:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800863e:	4621      	mov	r1, r4
 8008640:	4311      	orrs	r1, r2
 8008642:	60b9      	str	r1, [r7, #8]
 8008644:	4629      	mov	r1, r5
 8008646:	4319      	orrs	r1, r3
 8008648:	60f9      	str	r1, [r7, #12]
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte0);
 800864a:	4b3f      	ldr	r3, [pc, #252]	; (8008748 <parseCanMessageQueue+0x2b8>)
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	4944      	ldr	r1, [pc, #272]	; (8008760 <parseCanMessageQueue+0x2d0>)
 8008650:	4613      	mov	r3, r2
 8008652:	005b      	lsls	r3, r3, #1
 8008654:	4413      	add	r3, r2
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	440b      	add	r3, r1
 800865a:	3307      	adds	r3, #7
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	b2da      	uxtb	r2, r3
 8008660:	f04f 0300 	mov.w	r3, #0
					gu64CanMessageArray[u32IdStatus] =  ((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte7 << 56)|
 8008664:	493d      	ldr	r1, [pc, #244]	; (800875c <parseCanMessageQueue+0x2cc>)
 8008666:	6809      	ldr	r1, [r1, #0]
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte1 << 8) |
 8008668:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800866c:	4620      	mov	r0, r4
 800866e:	4310      	orrs	r0, r2
 8008670:	6038      	str	r0, [r7, #0]
 8008672:	4628      	mov	r0, r5
 8008674:	4318      	orrs	r0, r3
 8008676:	6078      	str	r0, [r7, #4]
					gu64CanMessageArray[u32IdStatus] =  ((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte7 << 56)|
 8008678:	4a3a      	ldr	r2, [pc, #232]	; (8008764 <parseCanMessageQueue+0x2d4>)
 800867a:	00cb      	lsls	r3, r1, #3
 800867c:	4413      	add	r3, r2
 800867e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008682:	e9c3 1200 	strd	r1, r2, [r3]



					// Reset Array Value for new Message
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte7 = 0;
 8008686:	4b30      	ldr	r3, [pc, #192]	; (8008748 <parseCanMessageQueue+0x2b8>)
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	4935      	ldr	r1, [pc, #212]	; (8008760 <parseCanMessageQueue+0x2d0>)
 800868c:	4613      	mov	r3, r2
 800868e:	005b      	lsls	r3, r3, #1
 8008690:	4413      	add	r3, r2
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	440b      	add	r3, r1
 8008696:	2200      	movs	r2, #0
 8008698:	701a      	strb	r2, [r3, #0]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte6 = 0;
 800869a:	4b2b      	ldr	r3, [pc, #172]	; (8008748 <parseCanMessageQueue+0x2b8>)
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	4930      	ldr	r1, [pc, #192]	; (8008760 <parseCanMessageQueue+0x2d0>)
 80086a0:	4613      	mov	r3, r2
 80086a2:	005b      	lsls	r3, r3, #1
 80086a4:	4413      	add	r3, r2
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	440b      	add	r3, r1
 80086aa:	3301      	adds	r3, #1
 80086ac:	2200      	movs	r2, #0
 80086ae:	701a      	strb	r2, [r3, #0]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte5 = 0;
 80086b0:	4b25      	ldr	r3, [pc, #148]	; (8008748 <parseCanMessageQueue+0x2b8>)
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	492a      	ldr	r1, [pc, #168]	; (8008760 <parseCanMessageQueue+0x2d0>)
 80086b6:	4613      	mov	r3, r2
 80086b8:	005b      	lsls	r3, r3, #1
 80086ba:	4413      	add	r3, r2
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	440b      	add	r3, r1
 80086c0:	3302      	adds	r3, #2
 80086c2:	2200      	movs	r2, #0
 80086c4:	701a      	strb	r2, [r3, #0]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte4 = 0;
 80086c6:	4b20      	ldr	r3, [pc, #128]	; (8008748 <parseCanMessageQueue+0x2b8>)
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	4925      	ldr	r1, [pc, #148]	; (8008760 <parseCanMessageQueue+0x2d0>)
 80086cc:	4613      	mov	r3, r2
 80086ce:	005b      	lsls	r3, r3, #1
 80086d0:	4413      	add	r3, r2
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	440b      	add	r3, r1
 80086d6:	3303      	adds	r3, #3
 80086d8:	2200      	movs	r2, #0
 80086da:	701a      	strb	r2, [r3, #0]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte3 = 0;
 80086dc:	4b1a      	ldr	r3, [pc, #104]	; (8008748 <parseCanMessageQueue+0x2b8>)
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	491f      	ldr	r1, [pc, #124]	; (8008760 <parseCanMessageQueue+0x2d0>)
 80086e2:	4613      	mov	r3, r2
 80086e4:	005b      	lsls	r3, r3, #1
 80086e6:	4413      	add	r3, r2
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	440b      	add	r3, r1
 80086ec:	3304      	adds	r3, #4
 80086ee:	2200      	movs	r2, #0
 80086f0:	701a      	strb	r2, [r3, #0]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte2 = 0;
 80086f2:	4b15      	ldr	r3, [pc, #84]	; (8008748 <parseCanMessageQueue+0x2b8>)
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	491a      	ldr	r1, [pc, #104]	; (8008760 <parseCanMessageQueue+0x2d0>)
 80086f8:	4613      	mov	r3, r2
 80086fa:	005b      	lsls	r3, r3, #1
 80086fc:	4413      	add	r3, r2
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	440b      	add	r3, r1
 8008702:	3305      	adds	r3, #5
 8008704:	2200      	movs	r2, #0
 8008706:	701a      	strb	r2, [r3, #0]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte1 = 0;
 8008708:	4b0f      	ldr	r3, [pc, #60]	; (8008748 <parseCanMessageQueue+0x2b8>)
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	4914      	ldr	r1, [pc, #80]	; (8008760 <parseCanMessageQueue+0x2d0>)
 800870e:	4613      	mov	r3, r2
 8008710:	005b      	lsls	r3, r3, #1
 8008712:	4413      	add	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	440b      	add	r3, r1
 8008718:	3306      	adds	r3, #6
 800871a:	2200      	movs	r2, #0
 800871c:	701a      	strb	r2, [r3, #0]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte0 = 0;
 800871e:	4b0a      	ldr	r3, [pc, #40]	; (8008748 <parseCanMessageQueue+0x2b8>)
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	490f      	ldr	r1, [pc, #60]	; (8008760 <parseCanMessageQueue+0x2d0>)
 8008724:	4613      	mov	r3, r2
 8008726:	005b      	lsls	r3, r3, #1
 8008728:	4413      	add	r3, r2
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	440b      	add	r3, r1
 800872e:	3307      	adds	r3, #7
 8008730:	2200      	movs	r2, #0
 8008732:	701a      	strb	r2, [r3, #0]
					u32CanIdsReceived[gu32CanIdParserCounter] = 0;
 8008734:	4b04      	ldr	r3, [pc, #16]	; (8008748 <parseCanMessageQueue+0x2b8>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a04      	ldr	r2, [pc, #16]	; (800874c <parseCanMessageQueue+0x2bc>)
 800873a:	2100      	movs	r1, #0
 800873c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					u32IdStatus = 0;
 8008740:	4b06      	ldr	r3, [pc, #24]	; (800875c <parseCanMessageQueue+0x2cc>)
 8008742:	2200      	movs	r2, #0
 8008744:	601a      	str	r2, [r3, #0]
 8008746:	e076      	b.n	8008836 <parseCanMessageQueue+0x3a6>
 8008748:	200020bc 	.word	0x200020bc
 800874c:	200010dc 	.word	0x200010dc
 8008750:	200020c8 	.word	0x200020c8
 8008754:	200020cc 	.word	0x200020cc
 8008758:	20001b38 	.word	0x20001b38
 800875c:	200020d0 	.word	0x200020d0
 8008760:	20005860 	.word	0x20005860
 8008764:	20001b40 	.word	0x20001b40
				}
				else if(u32IdStatus == 0)
 8008768:	4b47      	ldr	r3, [pc, #284]	; (8008888 <parseCanMessageQueue+0x3f8>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d162      	bne.n	8008836 <parseCanMessageQueue+0x3a6>
				{
					/* Command Id is not Configured . Discard the Message*/
	//					gu64CanMessageArray[gu32CanIdParserCounter] = 0; // change by VEDANT on 21/11/22
					//u64CanMessageReceived[gu32CanIdParserCounter] = 0;
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte7 = 0;
 8008770:	4b46      	ldr	r3, [pc, #280]	; (800888c <parseCanMessageQueue+0x3fc>)
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	4946      	ldr	r1, [pc, #280]	; (8008890 <parseCanMessageQueue+0x400>)
 8008776:	4613      	mov	r3, r2
 8008778:	005b      	lsls	r3, r3, #1
 800877a:	4413      	add	r3, r2
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	440b      	add	r3, r1
 8008780:	2200      	movs	r2, #0
 8008782:	701a      	strb	r2, [r3, #0]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte6 = 0;
 8008784:	4b41      	ldr	r3, [pc, #260]	; (800888c <parseCanMessageQueue+0x3fc>)
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	4941      	ldr	r1, [pc, #260]	; (8008890 <parseCanMessageQueue+0x400>)
 800878a:	4613      	mov	r3, r2
 800878c:	005b      	lsls	r3, r3, #1
 800878e:	4413      	add	r3, r2
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	440b      	add	r3, r1
 8008794:	3301      	adds	r3, #1
 8008796:	2200      	movs	r2, #0
 8008798:	701a      	strb	r2, [r3, #0]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte5 = 0;
 800879a:	4b3c      	ldr	r3, [pc, #240]	; (800888c <parseCanMessageQueue+0x3fc>)
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	493c      	ldr	r1, [pc, #240]	; (8008890 <parseCanMessageQueue+0x400>)
 80087a0:	4613      	mov	r3, r2
 80087a2:	005b      	lsls	r3, r3, #1
 80087a4:	4413      	add	r3, r2
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	440b      	add	r3, r1
 80087aa:	3302      	adds	r3, #2
 80087ac:	2200      	movs	r2, #0
 80087ae:	701a      	strb	r2, [r3, #0]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte4 = 0;
 80087b0:	4b36      	ldr	r3, [pc, #216]	; (800888c <parseCanMessageQueue+0x3fc>)
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	4936      	ldr	r1, [pc, #216]	; (8008890 <parseCanMessageQueue+0x400>)
 80087b6:	4613      	mov	r3, r2
 80087b8:	005b      	lsls	r3, r3, #1
 80087ba:	4413      	add	r3, r2
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	440b      	add	r3, r1
 80087c0:	3303      	adds	r3, #3
 80087c2:	2200      	movs	r2, #0
 80087c4:	701a      	strb	r2, [r3, #0]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte3 = 0;
 80087c6:	4b31      	ldr	r3, [pc, #196]	; (800888c <parseCanMessageQueue+0x3fc>)
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	4931      	ldr	r1, [pc, #196]	; (8008890 <parseCanMessageQueue+0x400>)
 80087cc:	4613      	mov	r3, r2
 80087ce:	005b      	lsls	r3, r3, #1
 80087d0:	4413      	add	r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	440b      	add	r3, r1
 80087d6:	3304      	adds	r3, #4
 80087d8:	2200      	movs	r2, #0
 80087da:	701a      	strb	r2, [r3, #0]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte2 = 0;
 80087dc:	4b2b      	ldr	r3, [pc, #172]	; (800888c <parseCanMessageQueue+0x3fc>)
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	492b      	ldr	r1, [pc, #172]	; (8008890 <parseCanMessageQueue+0x400>)
 80087e2:	4613      	mov	r3, r2
 80087e4:	005b      	lsls	r3, r3, #1
 80087e6:	4413      	add	r3, r2
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	440b      	add	r3, r1
 80087ec:	3305      	adds	r3, #5
 80087ee:	2200      	movs	r2, #0
 80087f0:	701a      	strb	r2, [r3, #0]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte1 = 0;
 80087f2:	4b26      	ldr	r3, [pc, #152]	; (800888c <parseCanMessageQueue+0x3fc>)
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	4926      	ldr	r1, [pc, #152]	; (8008890 <parseCanMessageQueue+0x400>)
 80087f8:	4613      	mov	r3, r2
 80087fa:	005b      	lsls	r3, r3, #1
 80087fc:	4413      	add	r3, r2
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	440b      	add	r3, r1
 8008802:	3306      	adds	r3, #6
 8008804:	2200      	movs	r2, #0
 8008806:	701a      	strb	r2, [r3, #0]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte0 = 0;
 8008808:	4b20      	ldr	r3, [pc, #128]	; (800888c <parseCanMessageQueue+0x3fc>)
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	4920      	ldr	r1, [pc, #128]	; (8008890 <parseCanMessageQueue+0x400>)
 800880e:	4613      	mov	r3, r2
 8008810:	005b      	lsls	r3, r3, #1
 8008812:	4413      	add	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	440b      	add	r3, r1
 8008818:	3307      	adds	r3, #7
 800881a:	2200      	movs	r2, #0
 800881c:	701a      	strb	r2, [r3, #0]
					u32CanIdsReceived[gu32CanIdParserCounter] = 0;
 800881e:	4b1b      	ldr	r3, [pc, #108]	; (800888c <parseCanMessageQueue+0x3fc>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a1c      	ldr	r2, [pc, #112]	; (8008894 <parseCanMessageQueue+0x404>)
 8008824:	2100      	movs	r1, #0
 8008826:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					unCan1939ReceivedId[gu32CanIdParserCounter].u32J1939CommandId = 0;
 800882a:	4b18      	ldr	r3, [pc, #96]	; (800888c <parseCanMessageQueue+0x3fc>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a1a      	ldr	r2, [pc, #104]	; (8008898 <parseCanMessageQueue+0x408>)
 8008830:	2100      	movs	r1, #0
 8008832:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				u32IdSearchFlag = 0;
 8008836:	4b19      	ldr	r3, [pc, #100]	; (800889c <parseCanMessageQueue+0x40c>)
 8008838:	2200      	movs	r2, #0
 800883a:	601a      	str	r2, [r3, #0]
				u32ParserState = 0;
 800883c:	4b18      	ldr	r3, [pc, #96]	; (80088a0 <parseCanMessageQueue+0x410>)
 800883e:	2200      	movs	r2, #0
 8008840:	601a      	str	r2, [r3, #0]
				u32CanMsgID = 0;
 8008842:	4b18      	ldr	r3, [pc, #96]	; (80088a4 <parseCanMessageQueue+0x414>)
 8008844:	2200      	movs	r2, #0
 8008846:	601a      	str	r2, [r3, #0]
				gu32CanIdParserCounter++;
 8008848:	4b10      	ldr	r3, [pc, #64]	; (800888c <parseCanMessageQueue+0x3fc>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	3301      	adds	r3, #1
 800884e:	4a0f      	ldr	r2, [pc, #60]	; (800888c <parseCanMessageQueue+0x3fc>)
 8008850:	6013      	str	r3, [r2, #0]
 8008852:	e00d      	b.n	8008870 <parseCanMessageQueue+0x3e0>
			}
			else
				u32IdStatus = isCommandIdConfigured(u32CanMsgID);
 8008854:	4b13      	ldr	r3, [pc, #76]	; (80088a4 <parseCanMessageQueue+0x414>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4618      	mov	r0, r3
 800885a:	f7ff fdd5 	bl	8008408 <isCommandIdConfigured>
 800885e:	4603      	mov	r3, r0
 8008860:	4a09      	ldr	r2, [pc, #36]	; (8008888 <parseCanMessageQueue+0x3f8>)
 8008862:	6013      	str	r3, [r2, #0]
 8008864:	e004      	b.n	8008870 <parseCanMessageQueue+0x3e0>
		}
	}
	else
	{
		gu32CanIdParserCounter++;
 8008866:	4b09      	ldr	r3, [pc, #36]	; (800888c <parseCanMessageQueue+0x3fc>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	3301      	adds	r3, #1
 800886c:	4a07      	ldr	r2, [pc, #28]	; (800888c <parseCanMessageQueue+0x3fc>)
 800886e:	6013      	str	r3, [r2, #0]
	}
	if(gu32CanIdParserCounter >= CAN_BUFFER_LENGTH)
 8008870:	4b06      	ldr	r3, [pc, #24]	; (800888c <parseCanMessageQueue+0x3fc>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2bc7      	cmp	r3, #199	; 0xc7
 8008876:	d902      	bls.n	800887e <parseCanMessageQueue+0x3ee>
		gu32CanIdParserCounter = 0;
 8008878:	4b04      	ldr	r3, [pc, #16]	; (800888c <parseCanMessageQueue+0x3fc>)
 800887a:	2200      	movs	r2, #0
 800887c:	601a      	str	r2, [r3, #0]
}
 800887e:	bf00      	nop
 8008880:	3730      	adds	r7, #48	; 0x30
 8008882:	46bd      	mov	sp, r7
 8008884:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008888:	200020d0 	.word	0x200020d0
 800888c:	200020bc 	.word	0x200020bc
 8008890:	20005860 	.word	0x20005860
 8008894:	200010dc 	.word	0x200010dc
 8008898:	20001cf0 	.word	0x20001cf0
 800889c:	20001b38 	.word	0x20001b38
 80088a0:	200020c8 	.word	0x200020c8
 80088a4:	200020cc 	.word	0x200020cc

080088a8 <executeCANQueries>:


void executeCANQueries(void)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	af00      	add	r7, sp, #0

	if((gu32CANQueryPollTimer != 0) || (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0))
 80088ac:	4b39      	ldr	r3, [pc, #228]	; (8008994 <executeCANQueries+0xec>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d16a      	bne.n	800898a <executeCANQueries+0xe2>
 80088b4:	4838      	ldr	r0, [pc, #224]	; (8008998 <executeCANQueries+0xf0>)
 80088b6:	f004 fc39 	bl	800d12c <HAL_CAN_GetTxMailboxesFreeLevel>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d064      	beq.n	800898a <executeCANQueries+0xe2>
		return;

	switch(canCurrentState)
 80088c0:	4b36      	ldr	r3, [pc, #216]	; (800899c <executeCANQueries+0xf4>)
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	2b05      	cmp	r3, #5
 80088c8:	d85b      	bhi.n	8008982 <executeCANQueries+0xda>
 80088ca:	a201      	add	r2, pc, #4	; (adr r2, 80088d0 <executeCANQueries+0x28>)
 80088cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d0:	080088e9 	.word	0x080088e9
 80088d4:	080088f1 	.word	0x080088f1
 80088d8:	0800890d 	.word	0x0800890d
 80088dc:	08008925 	.word	0x08008925
 80088e0:	08008953 	.word	0x08008953
 80088e4:	0800896f 	.word	0x0800896f
	{
		case enmCANQUERY_IDLE:
			/* Do not Query  */
			canCurrentState = enmCANQUERY_UPDATEQUERY;
 80088e8:	4b2c      	ldr	r3, [pc, #176]	; (800899c <executeCANQueries+0xf4>)
 80088ea:	2201      	movs	r2, #1
 80088ec:	701a      	strb	r2, [r3, #0]
			break;
 80088ee:	e04f      	b.n	8008990 <executeCANQueries+0xe8>

		case enmCANQUERY_UPDATEQUERY:
			/* Update counter for Next query */

			updateCANQuery();
 80088f0:	f000 f85c 	bl	80089ac <updateCANQuery>
			if(CANTxFlag == TRUE)
 80088f4:	4b2a      	ldr	r3, [pc, #168]	; (80089a0 <executeCANQueries+0xf8>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d103      	bne.n	8008904 <executeCANQueries+0x5c>
				canCurrentState = enmCANQUERY_SENDQUERY;
 80088fc:	4b27      	ldr	r3, [pc, #156]	; (800899c <executeCANQueries+0xf4>)
 80088fe:	2202      	movs	r2, #2
 8008900:	701a      	strb	r2, [r3, #0]
			else
				canCurrentState = enmCANQUERY_IDLE;
			break;
 8008902:	e045      	b.n	8008990 <executeCANQueries+0xe8>
				canCurrentState = enmCANQUERY_IDLE;
 8008904:	4b25      	ldr	r3, [pc, #148]	; (800899c <executeCANQueries+0xf4>)
 8008906:	2200      	movs	r2, #0
 8008908:	701a      	strb	r2, [r3, #0]
			break;
 800890a:	e041      	b.n	8008990 <executeCANQueries+0xe8>

		case enmCANQUERY_SENDQUERY:
			/* Transmit Query */
			sendMessageCAN();
 800890c:	f000 fb2a 	bl	8008f64 <sendMessageCAN>
//			gu32CANCommandResponseTimeout = ONE_SEC;
			gu32CANCommandResponseTimeout = FIVE_MS;
 8008910:	4b24      	ldr	r3, [pc, #144]	; (80089a4 <executeCANQueries+0xfc>)
 8008912:	2205      	movs	r2, #5
 8008914:	601a      	str	r2, [r3, #0]
			gu32CANQueryPollTimer = FIFTY_MS;;
 8008916:	4b1f      	ldr	r3, [pc, #124]	; (8008994 <executeCANQueries+0xec>)
 8008918:	2232      	movs	r2, #50	; 0x32
 800891a:	601a      	str	r2, [r3, #0]
			canCurrentState = enmCANQUERY_AWAITRESPONSE;
 800891c:	4b1f      	ldr	r3, [pc, #124]	; (800899c <executeCANQueries+0xf4>)
 800891e:	2203      	movs	r2, #3
 8008920:	701a      	strb	r2, [r3, #0]

			break;
 8008922:	e035      	b.n	8008990 <executeCANQueries+0xe8>

		case enmCANQUERY_AWAITRESPONSE:
			if((gu32CANQueryCommandResponseReceivedFlag == TRUE) && (gu32CANCommandResponseTimeout != 0))
 8008924:	4b20      	ldr	r3, [pc, #128]	; (80089a8 <executeCANQueries+0x100>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2b01      	cmp	r3, #1
 800892a:	d10a      	bne.n	8008942 <executeCANQueries+0x9a>
 800892c:	4b1d      	ldr	r3, [pc, #116]	; (80089a4 <executeCANQueries+0xfc>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d006      	beq.n	8008942 <executeCANQueries+0x9a>
			{
				canCurrentState = enmCANQUERY_PASRERESPONSE;
 8008934:	4b19      	ldr	r3, [pc, #100]	; (800899c <executeCANQueries+0xf4>)
 8008936:	2204      	movs	r2, #4
 8008938:	701a      	strb	r2, [r3, #0]
				gu32CANCommandResponseTimeout = 0;
 800893a:	4b1a      	ldr	r3, [pc, #104]	; (80089a4 <executeCANQueries+0xfc>)
 800893c:	2200      	movs	r2, #0
 800893e:	601a      	str	r2, [r3, #0]
			{
				canCurrentState = enmCANQUERY_RESPONSETIMEOUT;
			}
			else{}

			break;
 8008940:	e025      	b.n	800898e <executeCANQueries+0xe6>
			else if(gu32CANCommandResponseTimeout == 0)
 8008942:	4b18      	ldr	r3, [pc, #96]	; (80089a4 <executeCANQueries+0xfc>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d121      	bne.n	800898e <executeCANQueries+0xe6>
				canCurrentState = enmCANQUERY_RESPONSETIMEOUT;
 800894a:	4b14      	ldr	r3, [pc, #80]	; (800899c <executeCANQueries+0xf4>)
 800894c:	2205      	movs	r2, #5
 800894e:	701a      	strb	r2, [r3, #0]
			break;
 8008950:	e01d      	b.n	800898e <executeCANQueries+0xe6>
		case enmCANQUERY_PASRERESPONSE:
			/* Store / Parse  received response */
			canCurrentState = enmCANQUERY_IDLE;
 8008952:	4b12      	ldr	r3, [pc, #72]	; (800899c <executeCANQueries+0xf4>)
 8008954:	2200      	movs	r2, #0
 8008956:	701a      	strb	r2, [r3, #0]
			if(gu32CANQueryCommandResponseReceivedFlag == TRUE)
 8008958:	4b13      	ldr	r3, [pc, #76]	; (80089a8 <executeCANQueries+0x100>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d102      	bne.n	8008966 <executeCANQueries+0xbe>
				gu32CANQueryCommandResponseReceivedFlag = FALSE;
 8008960:	4b11      	ldr	r3, [pc, #68]	; (80089a8 <executeCANQueries+0x100>)
 8008962:	2200      	movs	r2, #0
 8008964:	601a      	str	r2, [r3, #0]
			gu32CANQueryPollTimer = FIFTY_MS;;
 8008966:	4b0b      	ldr	r3, [pc, #44]	; (8008994 <executeCANQueries+0xec>)
 8008968:	2232      	movs	r2, #50	; 0x32
 800896a:	601a      	str	r2, [r3, #0]
//			gu32CANQueryPollTimer = FIVE_MS;
			break;
 800896c:	e010      	b.n	8008990 <executeCANQueries+0xe8>

		case enmCANQUERY_RESPONSETIMEOUT:
			/*Response not received */
			canCurrentState = enmCANQUERY_IDLE;
 800896e:	4b0b      	ldr	r3, [pc, #44]	; (800899c <executeCANQueries+0xf4>)
 8008970:	2200      	movs	r2, #0
 8008972:	701a      	strb	r2, [r3, #0]
			gu32CANQueryCommandResponseReceivedFlag = FALSE;
 8008974:	4b0c      	ldr	r3, [pc, #48]	; (80089a8 <executeCANQueries+0x100>)
 8008976:	2200      	movs	r2, #0
 8008978:	601a      	str	r2, [r3, #0]
//			gu32CANQueryPollTimer = ONE_SEC;
			gu32CANQueryPollTimer = FIFTY_MS;
 800897a:	4b06      	ldr	r3, [pc, #24]	; (8008994 <executeCANQueries+0xec>)
 800897c:	2232      	movs	r2, #50	; 0x32
 800897e:	601a      	str	r2, [r3, #0]
//			u32ChangeInCycleFlag = FALSE;
			break;
 8008980:	e006      	b.n	8008990 <executeCANQueries+0xe8>

		default:
			/* Undefined State */
			canCurrentState = enmCANQUERY_IDLE;
 8008982:	4b06      	ldr	r3, [pc, #24]	; (800899c <executeCANQueries+0xf4>)
 8008984:	2200      	movs	r2, #0
 8008986:	701a      	strb	r2, [r3, #0]
			break;
 8008988:	e002      	b.n	8008990 <executeCANQueries+0xe8>
		return;
 800898a:	bf00      	nop
 800898c:	e000      	b.n	8008990 <executeCANQueries+0xe8>
			break;
 800898e:	bf00      	nop
	}
}
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	20002178 	.word	0x20002178
 8008998:	20002268 	.word	0x20002268
 800899c:	20001b29 	.word	0x20001b29
 80089a0:	20002010 	.word	0x20002010
 80089a4:	2000217c 	.word	0x2000217c
 80089a8:	20001b2c 	.word	0x20001b2c

080089ac <updateCANQuery>:



void updateCANQuery(void)
{
 80089ac:	b590      	push	{r4, r7, lr}
 80089ae:	b087      	sub	sp, #28
 80089b0:	af00      	add	r7, sp, #0

	uint8_t temp[20] ="";
 80089b2:	2300      	movs	r3, #0
 80089b4:	607b      	str	r3, [r7, #4]
 80089b6:	f107 0308 	add.w	r3, r7, #8
 80089ba:	2200      	movs	r2, #0
 80089bc:	601a      	str	r2, [r3, #0]
 80089be:	605a      	str	r2, [r3, #4]
 80089c0:	609a      	str	r2, [r3, #8]
 80089c2:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = gu32TxCANId[gu32TxCANCounter];
 80089c4:	4b8e      	ldr	r3, [pc, #568]	; (8008c00 <updateCANQuery+0x254>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a8e      	ldr	r2, [pc, #568]	; (8008c04 <updateCANQuery+0x258>)
 80089ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089ce:	4a8e      	ldr	r2, [pc, #568]	; (8008c08 <updateCANQuery+0x25c>)
 80089d0:	6013      	str	r3, [r2, #0]
	TxHeader.ExtId = gu32TxCANId[gu32TxCANCounter];
 80089d2:	4b8b      	ldr	r3, [pc, #556]	; (8008c00 <updateCANQuery+0x254>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a8b      	ldr	r2, [pc, #556]	; (8008c04 <updateCANQuery+0x258>)
 80089d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089dc:	4a8a      	ldr	r2, [pc, #552]	; (8008c08 <updateCANQuery+0x25c>)
 80089de:	6053      	str	r3, [r2, #4]
	TxHeader.RTR = CAN_RTR_DATA;
 80089e0:	4b89      	ldr	r3, [pc, #548]	; (8008c08 <updateCANQuery+0x25c>)
 80089e2:	2200      	movs	r2, #0
 80089e4:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_EXT;//CAN_ID_STD;//
 80089e6:	4b88      	ldr	r3, [pc, #544]	; (8008c08 <updateCANQuery+0x25c>)
 80089e8:	2204      	movs	r2, #4
 80089ea:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 80089ec:	4b86      	ldr	r3, [pc, #536]	; (8008c08 <updateCANQuery+0x25c>)
 80089ee:	2208      	movs	r2, #8
 80089f0:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = ENABLE;
 80089f2:	4b85      	ldr	r3, [pc, #532]	; (8008c08 <updateCANQuery+0x25c>)
 80089f4:	2201      	movs	r2, #1
 80089f6:	751a      	strb	r2, [r3, #20]
	TxData[0] = 0;
 80089f8:	4b84      	ldr	r3, [pc, #528]	; (8008c0c <updateCANQuery+0x260>)
 80089fa:	2200      	movs	r2, #0
 80089fc:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0;
 80089fe:	4b83      	ldr	r3, [pc, #524]	; (8008c0c <updateCANQuery+0x260>)
 8008a00:	2200      	movs	r2, #0
 8008a02:	705a      	strb	r2, [r3, #1]
	TxData[2] = 0;
 8008a04:	4b81      	ldr	r3, [pc, #516]	; (8008c0c <updateCANQuery+0x260>)
 8008a06:	2200      	movs	r2, #0
 8008a08:	709a      	strb	r2, [r3, #2]
	TxData[3] = 0;
 8008a0a:	4b80      	ldr	r3, [pc, #512]	; (8008c0c <updateCANQuery+0x260>)
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	70da      	strb	r2, [r3, #3]
	TxData[4] = 0;
 8008a10:	4b7e      	ldr	r3, [pc, #504]	; (8008c0c <updateCANQuery+0x260>)
 8008a12:	2200      	movs	r2, #0
 8008a14:	711a      	strb	r2, [r3, #4]
	TxData[5] = 0;
 8008a16:	4b7d      	ldr	r3, [pc, #500]	; (8008c0c <updateCANQuery+0x260>)
 8008a18:	2200      	movs	r2, #0
 8008a1a:	715a      	strb	r2, [r3, #5]
	TxData[6] = 0;
 8008a1c:	4b7b      	ldr	r3, [pc, #492]	; (8008c0c <updateCANQuery+0x260>)
 8008a1e:	2200      	movs	r2, #0
 8008a20:	719a      	strb	r2, [r3, #6]
	TxData[7] = 0;
 8008a22:	4b7a      	ldr	r3, [pc, #488]	; (8008c0c <updateCANQuery+0x260>)
 8008a24:	2200      	movs	r2, #0
 8008a26:	71da      	strb	r2, [r3, #7]

	if((gu32TxCANId[gu32TxCANCounter] == TELEMATIC_HEARTBEAT) && (gu32HeartBeatDelay== 0))
 8008a28:	4b75      	ldr	r3, [pc, #468]	; (8008c00 <updateCANQuery+0x254>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a75      	ldr	r2, [pc, #468]	; (8008c04 <updateCANQuery+0x258>)
 8008a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a32:	4a77      	ldr	r2, [pc, #476]	; (8008c10 <updateCANQuery+0x264>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d157      	bne.n	8008ae8 <updateCANQuery+0x13c>
 8008a38:	4b76      	ldr	r3, [pc, #472]	; (8008c14 <updateCANQuery+0x268>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d153      	bne.n	8008ae8 <updateCANQuery+0x13c>
	{
		CAN_HeartBeat_Signal_Data();
 8008a40:	f000 faaa 	bl	8008f98 <CAN_HeartBeat_Signal_Data>
		TelematicHeartBeat[enumTeleHearBeat_MSG_PERIODICITY] = TELE_MSG_PERIOD;
 8008a44:	4b74      	ldr	r3, [pc, #464]	; (8008c18 <updateCANQuery+0x26c>)
 8008a46:	2205      	movs	r2, #5
 8008a48:	701a      	strb	r2, [r3, #0]
		TelematicHeartBeat[enumTeleHearBeat_DEVICE_CODE]= TELE_DEVICE_ID;
 8008a4a:	4b73      	ldr	r3, [pc, #460]	; (8008c18 <updateCANQuery+0x26c>)
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	71da      	strb	r2, [r3, #7]

		TxData[0] = TelematicHeartBeat[enumTeleHearBeat_MSG_PERIODICITY];
 8008a50:	4b71      	ldr	r3, [pc, #452]	; (8008c18 <updateCANQuery+0x26c>)
 8008a52:	781a      	ldrb	r2, [r3, #0]
 8008a54:	4b6d      	ldr	r3, [pc, #436]	; (8008c0c <updateCANQuery+0x260>)
 8008a56:	701a      	strb	r2, [r3, #0]
		TxData[1] = TelematicHeartBeat[enumTeleHearBeat_GPS_STATUS];
 8008a58:	4b6f      	ldr	r3, [pc, #444]	; (8008c18 <updateCANQuery+0x26c>)
 8008a5a:	785a      	ldrb	r2, [r3, #1]
 8008a5c:	4b6b      	ldr	r3, [pc, #428]	; (8008c0c <updateCANQuery+0x260>)
 8008a5e:	705a      	strb	r2, [r3, #1]
		TxData[2] = TelematicHeartBeat[enumTeleHearBeat_NW_STATUS];
 8008a60:	4b6d      	ldr	r3, [pc, #436]	; (8008c18 <updateCANQuery+0x26c>)
 8008a62:	789a      	ldrb	r2, [r3, #2]
 8008a64:	4b69      	ldr	r3, [pc, #420]	; (8008c0c <updateCANQuery+0x260>)
 8008a66:	709a      	strb	r2, [r3, #2]
		TxData[3] = TelematicHeartBeat[enumTeleHearBeat_SIGNAL_QUALITY];
 8008a68:	4b6b      	ldr	r3, [pc, #428]	; (8008c18 <updateCANQuery+0x26c>)
 8008a6a:	78da      	ldrb	r2, [r3, #3]
 8008a6c:	4b67      	ldr	r3, [pc, #412]	; (8008c0c <updateCANQuery+0x260>)
 8008a6e:	70da      	strb	r2, [r3, #3]
		TxData[4] = TelematicHeartBeat[enumTeleHearBeat_SIM_CARD_ACTIVE_STATUS];
 8008a70:	4b69      	ldr	r3, [pc, #420]	; (8008c18 <updateCANQuery+0x26c>)
 8008a72:	791a      	ldrb	r2, [r3, #4]
 8008a74:	4b65      	ldr	r3, [pc, #404]	; (8008c0c <updateCANQuery+0x260>)
 8008a76:	711a      	strb	r2, [r3, #4]
		TxData[5] = TelematicHeartBeat[enumTeleHearBeat_INTERNAL_BATT_SOC_PER];
 8008a78:	4b67      	ldr	r3, [pc, #412]	; (8008c18 <updateCANQuery+0x26c>)
 8008a7a:	795a      	ldrb	r2, [r3, #5]
 8008a7c:	4b63      	ldr	r3, [pc, #396]	; (8008c0c <updateCANQuery+0x260>)
 8008a7e:	715a      	strb	r2, [r3, #5]
		if(g_stAdcData.u32PwrSupplyVtg > 1)
 8008a80:	4b66      	ldr	r3, [pc, #408]	; (8008c1c <updateCANQuery+0x270>)
 8008a82:	edd3 7a02 	vldr	s15, [r3, #8]
 8008a86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a92:	dd03      	ble.n	8008a9c <updateCANQuery+0xf0>
		{
			TelematicHeartBeat[enumTeleHearBeat_INTERNAL_BATT_STATUS] = 0;
 8008a94:	4b60      	ldr	r3, [pc, #384]	; (8008c18 <updateCANQuery+0x26c>)
 8008a96:	2200      	movs	r2, #0
 8008a98:	719a      	strb	r2, [r3, #6]
 8008a9a:	e002      	b.n	8008aa2 <updateCANQuery+0xf6>

		}
		else
		{
			TelematicHeartBeat[enumTeleHearBeat_INTERNAL_BATT_STATUS] = 1;
 8008a9c:	4b5e      	ldr	r3, [pc, #376]	; (8008c18 <updateCANQuery+0x26c>)
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	719a      	strb	r2, [r3, #6]
		}
		TxData[6] = TelematicHeartBeat[enumTeleHearBeat_INTERNAL_BATT_STATUS];
 8008aa2:	4b5d      	ldr	r3, [pc, #372]	; (8008c18 <updateCANQuery+0x26c>)
 8008aa4:	799a      	ldrb	r2, [r3, #6]
 8008aa6:	4b59      	ldr	r3, [pc, #356]	; (8008c0c <updateCANQuery+0x260>)
 8008aa8:	719a      	strb	r2, [r3, #6]
		TxData[7] = TelematicHeartBeat[enumTeleHearBeat_DEVICE_CODE];
 8008aaa:	4b5b      	ldr	r3, [pc, #364]	; (8008c18 <updateCANQuery+0x26c>)
 8008aac:	79da      	ldrb	r2, [r3, #7]
 8008aae:	4b57      	ldr	r3, [pc, #348]	; (8008c0c <updateCANQuery+0x260>)
 8008ab0:	71da      	strb	r2, [r3, #7]
		gu32HeartBeatDelay = (TELE_MSG_PERIOD * ONE_SEC);
 8008ab2:	4b58      	ldr	r3, [pc, #352]	; (8008c14 <updateCANQuery+0x268>)
 8008ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ab8:	601a      	str	r2, [r3, #0]
		if(++TIME_PERIOD_CNT == 2)
 8008aba:	4b59      	ldr	r3, [pc, #356]	; (8008c20 <updateCANQuery+0x274>)
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	3301      	adds	r3, #1
 8008ac0:	b2da      	uxtb	r2, r3
 8008ac2:	4b57      	ldr	r3, [pc, #348]	; (8008c20 <updateCANQuery+0x274>)
 8008ac4:	701a      	strb	r2, [r3, #0]
 8008ac6:	4b56      	ldr	r3, [pc, #344]	; (8008c20 <updateCANQuery+0x274>)
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d105      	bne.n	8008ada <updateCANQuery+0x12e>
		{
			gu32TxCANCounter++;
 8008ace:	4b4c      	ldr	r3, [pc, #304]	; (8008c00 <updateCANQuery+0x254>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	4a4a      	ldr	r2, [pc, #296]	; (8008c00 <updateCANQuery+0x254>)
 8008ad6:	6013      	str	r3, [r2, #0]
 8008ad8:	e002      	b.n	8008ae0 <updateCANQuery+0x134>
		}
		else
		{
			gu32TxCANCounter = 0;
 8008ada:	4b49      	ldr	r3, [pc, #292]	; (8008c00 <updateCANQuery+0x254>)
 8008adc:	2200      	movs	r2, #0
 8008ade:	601a      	str	r2, [r3, #0]
		}
		CANTxFlag = TRUE;
 8008ae0:	4b50      	ldr	r3, [pc, #320]	; (8008c24 <updateCANQuery+0x278>)
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	601a      	str	r2, [r3, #0]
 8008ae6:	e234      	b.n	8008f52 <updateCANQuery+0x5a6>
	}
	else if((gu32TxCANId[gu32TxCANCounter] == TELEMATIC_FIRMWARE_VER) && (TIME_PERIOD_CNT == 2))
 8008ae8:	4b45      	ldr	r3, [pc, #276]	; (8008c00 <updateCANQuery+0x254>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a45      	ldr	r2, [pc, #276]	; (8008c04 <updateCANQuery+0x258>)
 8008aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008af2:	4a4d      	ldr	r2, [pc, #308]	; (8008c28 <updateCANQuery+0x27c>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	f040 809f 	bne.w	8008c38 <updateCANQuery+0x28c>
 8008afa:	4b49      	ldr	r3, [pc, #292]	; (8008c20 <updateCANQuery+0x274>)
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	f040 809a 	bne.w	8008c38 <updateCANQuery+0x28c>
	{
//		strcpy(temp,BOOT_REGION);
//		strcat(temp,FIRMWARE_VER);
		TxData[0] = (YEAR & 0xFF00) >> 8;
 8008b04:	4b41      	ldr	r3, [pc, #260]	; (8008c0c <updateCANQuery+0x260>)
 8008b06:	2207      	movs	r2, #7
 8008b08:	701a      	strb	r2, [r3, #0]
		TxData[1] = YEAR & 0x00FF;
 8008b0a:	4b40      	ldr	r3, [pc, #256]	; (8008c0c <updateCANQuery+0x260>)
 8008b0c:	22e7      	movs	r2, #231	; 0xe7
 8008b0e:	705a      	strb	r2, [r3, #1]
		TxData[2] = MONTH;
 8008b10:	4b3e      	ldr	r3, [pc, #248]	; (8008c0c <updateCANQuery+0x260>)
 8008b12:	2206      	movs	r2, #6
 8008b14:	709a      	strb	r2, [r3, #2]
		TxData[3] = DATE;
 8008b16:	4b3d      	ldr	r3, [pc, #244]	; (8008c0c <updateCANQuery+0x260>)
 8008b18:	221c      	movs	r2, #28
 8008b1a:	70da      	strb	r2, [r3, #3]
		strcpy((char*)temp,(char*)BOOT_REGION);
 8008b1c:	1d3b      	adds	r3, r7, #4
 8008b1e:	4a43      	ldr	r2, [pc, #268]	; (8008c2c <updateCANQuery+0x280>)
 8008b20:	6812      	ldr	r2, [r2, #0]
 8008b22:	4611      	mov	r1, r2
 8008b24:	8019      	strh	r1, [r3, #0]
 8008b26:	3302      	adds	r3, #2
 8008b28:	0c12      	lsrs	r2, r2, #16
 8008b2a:	701a      	strb	r2, [r3, #0]
		if(strcmp((char*)temp,(char*)"Xv") == 0)
 8008b2c:	1d3b      	adds	r3, r7, #4
 8008b2e:	493f      	ldr	r1, [pc, #252]	; (8008c2c <updateCANQuery+0x280>)
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7f7 ff4d 	bl	80009d0 <strcmp>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d11e      	bne.n	8008b7a <updateCANQuery+0x1ce>
		{
			TxData[4] = 0<<7; // X region
 8008b3c:	4b33      	ldr	r3, [pc, #204]	; (8008c0c <updateCANQuery+0x260>)
 8008b3e:	2200      	movs	r2, #0
 8008b40:	711a      	strb	r2, [r3, #4]
			strcpy((char*)temp,(char*)FIRMWARE_VER);
 8008b42:	1d3b      	adds	r3, r7, #4
 8008b44:	4a3a      	ldr	r2, [pc, #232]	; (8008c30 <updateCANQuery+0x284>)
 8008b46:	601a      	str	r2, [r3, #0]
			TxData[4] = TxData[4] | (temp[0]<<4);
 8008b48:	4b30      	ldr	r3, [pc, #192]	; (8008c0c <updateCANQuery+0x260>)
 8008b4a:	791b      	ldrb	r3, [r3, #4]
 8008b4c:	b25a      	sxtb	r2, r3
 8008b4e:	793b      	ldrb	r3, [r7, #4]
 8008b50:	011b      	lsls	r3, r3, #4
 8008b52:	b25b      	sxtb	r3, r3
 8008b54:	4313      	orrs	r3, r2
 8008b56:	b25b      	sxtb	r3, r3
 8008b58:	b2da      	uxtb	r2, r3
 8008b5a:	4b2c      	ldr	r3, [pc, #176]	; (8008c0c <updateCANQuery+0x260>)
 8008b5c:	711a      	strb	r2, [r3, #4]
			TxData[4] = TxData[4] | ((temp[2]&0x0F)) ;
 8008b5e:	4b2b      	ldr	r3, [pc, #172]	; (8008c0c <updateCANQuery+0x260>)
 8008b60:	791b      	ldrb	r3, [r3, #4]
 8008b62:	b25a      	sxtb	r2, r3
 8008b64:	79bb      	ldrb	r3, [r7, #6]
 8008b66:	b25b      	sxtb	r3, r3
 8008b68:	f003 030f 	and.w	r3, r3, #15
 8008b6c:	b25b      	sxtb	r3, r3
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	b25b      	sxtb	r3, r3
 8008b72:	b2da      	uxtb	r2, r3
 8008b74:	4b25      	ldr	r3, [pc, #148]	; (8008c0c <updateCANQuery+0x260>)
 8008b76:	711a      	strb	r2, [r3, #4]
 8008b78:	e029      	b.n	8008bce <updateCANQuery+0x222>
		}
		else if(strcmp((char*)temp,(char*)"Yv") == 0)
 8008b7a:	1d3b      	adds	r3, r7, #4
 8008b7c:	492d      	ldr	r1, [pc, #180]	; (8008c34 <updateCANQuery+0x288>)
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7f7 ff26 	bl	80009d0 <strcmp>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d11e      	bne.n	8008bc8 <updateCANQuery+0x21c>
		{
			TxData[4] = 1<<7;// Y region
 8008b8a:	4b20      	ldr	r3, [pc, #128]	; (8008c0c <updateCANQuery+0x260>)
 8008b8c:	2280      	movs	r2, #128	; 0x80
 8008b8e:	711a      	strb	r2, [r3, #4]
			strcpy((char*)temp,(char*)FIRMWARE_VER);
 8008b90:	1d3b      	adds	r3, r7, #4
 8008b92:	4a27      	ldr	r2, [pc, #156]	; (8008c30 <updateCANQuery+0x284>)
 8008b94:	601a      	str	r2, [r3, #0]
			TxData[4] = TxData[4] | (temp[0]<<4);// 0 to 7
 8008b96:	4b1d      	ldr	r3, [pc, #116]	; (8008c0c <updateCANQuery+0x260>)
 8008b98:	791b      	ldrb	r3, [r3, #4]
 8008b9a:	b25a      	sxtb	r2, r3
 8008b9c:	793b      	ldrb	r3, [r7, #4]
 8008b9e:	011b      	lsls	r3, r3, #4
 8008ba0:	b25b      	sxtb	r3, r3
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	b25b      	sxtb	r3, r3
 8008ba6:	b2da      	uxtb	r2, r3
 8008ba8:	4b18      	ldr	r3, [pc, #96]	; (8008c0c <updateCANQuery+0x260>)
 8008baa:	711a      	strb	r2, [r3, #4]
			TxData[4] = TxData[4] | ((temp[2]&0x0F)) ; // 0 to 7
 8008bac:	4b17      	ldr	r3, [pc, #92]	; (8008c0c <updateCANQuery+0x260>)
 8008bae:	791b      	ldrb	r3, [r3, #4]
 8008bb0:	b25a      	sxtb	r2, r3
 8008bb2:	79bb      	ldrb	r3, [r7, #6]
 8008bb4:	b25b      	sxtb	r3, r3
 8008bb6:	f003 030f 	and.w	r3, r3, #15
 8008bba:	b25b      	sxtb	r3, r3
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	b25b      	sxtb	r3, r3
 8008bc0:	b2da      	uxtb	r2, r3
 8008bc2:	4b12      	ldr	r3, [pc, #72]	; (8008c0c <updateCANQuery+0x260>)
 8008bc4:	711a      	strb	r2, [r3, #4]
 8008bc6:	e002      	b.n	8008bce <updateCANQuery+0x222>
		}
		else
		{
			TxData[4] = 0;
 8008bc8:	4b10      	ldr	r3, [pc, #64]	; (8008c0c <updateCANQuery+0x260>)
 8008bca:	2200      	movs	r2, #0
 8008bcc:	711a      	strb	r2, [r3, #4]
		}
		TxData[5] = 0;
 8008bce:	4b0f      	ldr	r3, [pc, #60]	; (8008c0c <updateCANQuery+0x260>)
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0;
 8008bd4:	4b0d      	ldr	r3, [pc, #52]	; (8008c0c <updateCANQuery+0x260>)
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0;
 8008bda:	4b0c      	ldr	r3, [pc, #48]	; (8008c0c <updateCANQuery+0x260>)
 8008bdc:	2200      	movs	r2, #0
 8008bde:	71da      	strb	r2, [r3, #7]
		TIME_PERIOD_CNT++;
 8008be0:	4b0f      	ldr	r3, [pc, #60]	; (8008c20 <updateCANQuery+0x274>)
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	3301      	adds	r3, #1
 8008be6:	b2da      	uxtb	r2, r3
 8008be8:	4b0d      	ldr	r3, [pc, #52]	; (8008c20 <updateCANQuery+0x274>)
 8008bea:	701a      	strb	r2, [r3, #0]
		gu32TxCANCounter++;
 8008bec:	4b04      	ldr	r3, [pc, #16]	; (8008c00 <updateCANQuery+0x254>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	4a03      	ldr	r2, [pc, #12]	; (8008c00 <updateCANQuery+0x254>)
 8008bf4:	6013      	str	r3, [r2, #0]
		CANTxFlag = TRUE;
 8008bf6:	4b0b      	ldr	r3, [pc, #44]	; (8008c24 <updateCANQuery+0x278>)
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	601a      	str	r2, [r3, #0]
 8008bfc:	e1a9      	b.n	8008f52 <updateCANQuery+0x5a6>
 8008bfe:	bf00      	nop
 8008c00:	20002014 	.word	0x20002014
 8008c04:	200013fc 	.word	0x200013fc
 8008c08:	20006518 	.word	0x20006518
 8008c0c:	200061e4 	.word	0x200061e4
 8008c10:	10c8fffb 	.word	0x10c8fffb
 8008c14:	20002180 	.word	0x20002180
 8008c18:	20002018 	.word	0x20002018
 8008c1c:	2000581c 	.word	0x2000581c
 8008c20:	20001b28 	.word	0x20001b28
 8008c24:	20002010 	.word	0x20002010
 8008c28:	10c9fffb 	.word	0x10c9fffb
 8008c2c:	0801b7c4 	.word	0x0801b7c4
 8008c30:	00302e31 	.word	0x00302e31
 8008c34:	0801b7c8 	.word	0x0801b7c8

	}
	else if((gu32TxCANId[gu32TxCANCounter] == TELEMATIC_TIME) && (TIME_PERIOD_CNT == 3))
 8008c38:	4bb0      	ldr	r3, [pc, #704]	; (8008efc <updateCANQuery+0x550>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4ab0      	ldr	r2, [pc, #704]	; (8008f00 <updateCANQuery+0x554>)
 8008c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c42:	4ab0      	ldr	r2, [pc, #704]	; (8008f04 <updateCANQuery+0x558>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	f040 80a9 	bne.w	8008d9c <updateCANQuery+0x3f0>
 8008c4a:	4baf      	ldr	r3, [pc, #700]	; (8008f08 <updateCANQuery+0x55c>)
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	2b03      	cmp	r3, #3
 8008c50:	f040 80a4 	bne.w	8008d9c <updateCANQuery+0x3f0>
	{

		if(GSMInitCompleteFlag == TRUE)
 8008c54:	4bad      	ldr	r3, [pc, #692]	; (8008f0c <updateCANQuery+0x560>)
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d078      	beq.n	8008d4e <updateCANQuery+0x3a2>
		{
			getrtcStamp();
 8008c5c:	f001 fa1c 	bl	800a098 <getrtcStamp>
			RTC_UTC_time.tm_year  = ((gu8YY *100) + atoi(gau8Year))-1900;  // Year - 1900
 8008c60:	4bab      	ldr	r3, [pc, #684]	; (8008f10 <updateCANQuery+0x564>)
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	461a      	mov	r2, r3
 8008c66:	2364      	movs	r3, #100	; 0x64
 8008c68:	fb03 f402 	mul.w	r4, r3, r2
 8008c6c:	48a9      	ldr	r0, [pc, #676]	; (8008f14 <updateCANQuery+0x568>)
 8008c6e:	f00c fe50 	bl	8015912 <atoi>
 8008c72:	4603      	mov	r3, r0
 8008c74:	4423      	add	r3, r4
 8008c76:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 8008c7a:	4aa7      	ldr	r2, [pc, #668]	; (8008f18 <updateCANQuery+0x56c>)
 8008c7c:	6153      	str	r3, [r2, #20]
			RTC_UTC_time.tm_mon   = atoi(gau8Month) - 1;           // Month, where 0 = jan
 8008c7e:	48a7      	ldr	r0, [pc, #668]	; (8008f1c <updateCANQuery+0x570>)
 8008c80:	f00c fe47 	bl	8015912 <atoi>
 8008c84:	4603      	mov	r3, r0
 8008c86:	3b01      	subs	r3, #1
 8008c88:	4aa3      	ldr	r2, [pc, #652]	; (8008f18 <updateCANQuery+0x56c>)
 8008c8a:	6113      	str	r3, [r2, #16]
			RTC_UTC_time.tm_mday  = atoi(gau8Date);          // Day of the month
 8008c8c:	48a4      	ldr	r0, [pc, #656]	; (8008f20 <updateCANQuery+0x574>)
 8008c8e:	f00c fe40 	bl	8015912 <atoi>
 8008c92:	4603      	mov	r3, r0
 8008c94:	4aa0      	ldr	r2, [pc, #640]	; (8008f18 <updateCANQuery+0x56c>)
 8008c96:	60d3      	str	r3, [r2, #12]
			RTC_UTC_time.tm_hour  = atoi(gau8Hour);
 8008c98:	48a2      	ldr	r0, [pc, #648]	; (8008f24 <updateCANQuery+0x578>)
 8008c9a:	f00c fe3a 	bl	8015912 <atoi>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	4a9d      	ldr	r2, [pc, #628]	; (8008f18 <updateCANQuery+0x56c>)
 8008ca2:	6093      	str	r3, [r2, #8]
			RTC_UTC_time.tm_min   = atoi(gau8Minutes);
 8008ca4:	48a0      	ldr	r0, [pc, #640]	; (8008f28 <updateCANQuery+0x57c>)
 8008ca6:	f00c fe34 	bl	8015912 <atoi>
 8008caa:	4603      	mov	r3, r0
 8008cac:	4a9a      	ldr	r2, [pc, #616]	; (8008f18 <updateCANQuery+0x56c>)
 8008cae:	6053      	str	r3, [r2, #4]
			RTC_UTC_time.tm_sec   = atoi(gau8Seconds);
 8008cb0:	489e      	ldr	r0, [pc, #632]	; (8008f2c <updateCANQuery+0x580>)
 8008cb2:	f00c fe2e 	bl	8015912 <atoi>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	4a97      	ldr	r2, [pc, #604]	; (8008f18 <updateCANQuery+0x56c>)
 8008cba:	6013      	str	r3, [r2, #0]
			RTC_UTC_time.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 8008cbc:	4b96      	ldr	r3, [pc, #600]	; (8008f18 <updateCANQuery+0x56c>)
 8008cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8008cc2:	621a      	str	r2, [r3, #32]
			Epoch_time = mktime(&RTC_UTC_time);
 8008cc4:	4894      	ldr	r0, [pc, #592]	; (8008f18 <updateCANQuery+0x56c>)
 8008cc6:	f00c ff6f 	bl	8015ba8 <mktime>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	460b      	mov	r3, r1
 8008cce:	4998      	ldr	r1, [pc, #608]	; (8008f30 <updateCANQuery+0x584>)
 8008cd0:	e9c1 2300 	strd	r2, r3, [r1]
//				Epoch_time = 1677649660;
			TxData[0] = 0x01;
 8008cd4:	4b97      	ldr	r3, [pc, #604]	; (8008f34 <updateCANQuery+0x588>)
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0;
 8008cda:	4b96      	ldr	r3, [pc, #600]	; (8008f34 <updateCANQuery+0x588>)
 8008cdc:	2200      	movs	r2, #0
 8008cde:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0;
 8008ce0:	4b94      	ldr	r3, [pc, #592]	; (8008f34 <updateCANQuery+0x588>)
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0;
 8008ce6:	4b93      	ldr	r3, [pc, #588]	; (8008f34 <updateCANQuery+0x588>)
 8008ce8:	2200      	movs	r2, #0
 8008cea:	70da      	strb	r2, [r3, #3]
			TxData[4] = (Epoch_time)&0xFF;;
 8008cec:	4b90      	ldr	r3, [pc, #576]	; (8008f30 <updateCANQuery+0x584>)
 8008cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf2:	b2d2      	uxtb	r2, r2
 8008cf4:	4b8f      	ldr	r3, [pc, #572]	; (8008f34 <updateCANQuery+0x588>)
 8008cf6:	711a      	strb	r2, [r3, #4]
			TxData[5] = (Epoch_time>>8)&0xFF;
 8008cf8:	4b8d      	ldr	r3, [pc, #564]	; (8008f30 <updateCANQuery+0x584>)
 8008cfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008cfe:	f04f 0200 	mov.w	r2, #0
 8008d02:	f04f 0300 	mov.w	r3, #0
 8008d06:	0a02      	lsrs	r2, r0, #8
 8008d08:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008d0c:	120b      	asrs	r3, r1, #8
 8008d0e:	b2d2      	uxtb	r2, r2
 8008d10:	4b88      	ldr	r3, [pc, #544]	; (8008f34 <updateCANQuery+0x588>)
 8008d12:	715a      	strb	r2, [r3, #5]
			TxData[6] = (Epoch_time>>16)&0xFF;
 8008d14:	4b86      	ldr	r3, [pc, #536]	; (8008f30 <updateCANQuery+0x584>)
 8008d16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008d1a:	f04f 0200 	mov.w	r2, #0
 8008d1e:	f04f 0300 	mov.w	r3, #0
 8008d22:	0c02      	lsrs	r2, r0, #16
 8008d24:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008d28:	140b      	asrs	r3, r1, #16
 8008d2a:	b2d2      	uxtb	r2, r2
 8008d2c:	4b81      	ldr	r3, [pc, #516]	; (8008f34 <updateCANQuery+0x588>)
 8008d2e:	719a      	strb	r2, [r3, #6]
			TxData[7] = (Epoch_time>>24)&0xFF;
 8008d30:	4b7f      	ldr	r3, [pc, #508]	; (8008f30 <updateCANQuery+0x584>)
 8008d32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008d36:	f04f 0200 	mov.w	r2, #0
 8008d3a:	f04f 0300 	mov.w	r3, #0
 8008d3e:	0e02      	lsrs	r2, r0, #24
 8008d40:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008d44:	160b      	asrs	r3, r1, #24
 8008d46:	b2d2      	uxtb	r2, r2
 8008d48:	4b7a      	ldr	r3, [pc, #488]	; (8008f34 <updateCANQuery+0x588>)
 8008d4a:	71da      	strb	r2, [r3, #7]
 8008d4c:	e017      	b.n	8008d7e <updateCANQuery+0x3d2>

		}
		else
		{
			TxData[0] = 0;
 8008d4e:	4b79      	ldr	r3, [pc, #484]	; (8008f34 <updateCANQuery+0x588>)
 8008d50:	2200      	movs	r2, #0
 8008d52:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0;
 8008d54:	4b77      	ldr	r3, [pc, #476]	; (8008f34 <updateCANQuery+0x588>)
 8008d56:	2200      	movs	r2, #0
 8008d58:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0;
 8008d5a:	4b76      	ldr	r3, [pc, #472]	; (8008f34 <updateCANQuery+0x588>)
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0;
 8008d60:	4b74      	ldr	r3, [pc, #464]	; (8008f34 <updateCANQuery+0x588>)
 8008d62:	2200      	movs	r2, #0
 8008d64:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0;
 8008d66:	4b73      	ldr	r3, [pc, #460]	; (8008f34 <updateCANQuery+0x588>)
 8008d68:	2200      	movs	r2, #0
 8008d6a:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0;
 8008d6c:	4b71      	ldr	r3, [pc, #452]	; (8008f34 <updateCANQuery+0x588>)
 8008d6e:	2200      	movs	r2, #0
 8008d70:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0;
 8008d72:	4b70      	ldr	r3, [pc, #448]	; (8008f34 <updateCANQuery+0x588>)
 8008d74:	2200      	movs	r2, #0
 8008d76:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0;
 8008d78:	4b6e      	ldr	r3, [pc, #440]	; (8008f34 <updateCANQuery+0x588>)
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	71da      	strb	r2, [r3, #7]
		}


		TIME_PERIOD_CNT++;
 8008d7e:	4b62      	ldr	r3, [pc, #392]	; (8008f08 <updateCANQuery+0x55c>)
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	3301      	adds	r3, #1
 8008d84:	b2da      	uxtb	r2, r3
 8008d86:	4b60      	ldr	r3, [pc, #384]	; (8008f08 <updateCANQuery+0x55c>)
 8008d88:	701a      	strb	r2, [r3, #0]
		gu32TxCANCounter++;
 8008d8a:	4b5c      	ldr	r3, [pc, #368]	; (8008efc <updateCANQuery+0x550>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	4a5a      	ldr	r2, [pc, #360]	; (8008efc <updateCANQuery+0x550>)
 8008d92:	6013      	str	r3, [r2, #0]
		CANTxFlag = TRUE;
 8008d94:	4b68      	ldr	r3, [pc, #416]	; (8008f38 <updateCANQuery+0x58c>)
 8008d96:	2201      	movs	r2, #1
 8008d98:	601a      	str	r2, [r3, #0]
 8008d9a:	e0da      	b.n	8008f52 <updateCANQuery+0x5a6>
	}
	else if((gu32TxCANId[gu32TxCANCounter] == TELEMATIC_HWID_IMEI) && (TIME_PERIOD_CNT == 4))
 8008d9c:	4b57      	ldr	r3, [pc, #348]	; (8008efc <updateCANQuery+0x550>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a57      	ldr	r2, [pc, #348]	; (8008f00 <updateCANQuery+0x554>)
 8008da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008da6:	4a65      	ldr	r2, [pc, #404]	; (8008f3c <updateCANQuery+0x590>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d169      	bne.n	8008e80 <updateCANQuery+0x4d4>
 8008dac:	4b56      	ldr	r3, [pc, #344]	; (8008f08 <updateCANQuery+0x55c>)
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	2b04      	cmp	r3, #4
 8008db2:	d165      	bne.n	8008e80 <updateCANQuery+0x4d4>
	{
//		860987055194077
//		cu32IMEI = 860987055194077;

		TxData[0] = (cu32IMEI)&0xFF;
 8008db4:	4b62      	ldr	r3, [pc, #392]	; (8008f40 <updateCANQuery+0x594>)
 8008db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dba:	b2d2      	uxtb	r2, r2
 8008dbc:	4b5d      	ldr	r3, [pc, #372]	; (8008f34 <updateCANQuery+0x588>)
 8008dbe:	701a      	strb	r2, [r3, #0]
		TxData[1] = (cu32IMEI>>8)&0xFF;
 8008dc0:	4b5f      	ldr	r3, [pc, #380]	; (8008f40 <updateCANQuery+0x594>)
 8008dc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008dc6:	f04f 0200 	mov.w	r2, #0
 8008dca:	f04f 0300 	mov.w	r3, #0
 8008dce:	0a02      	lsrs	r2, r0, #8
 8008dd0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008dd4:	0a0b      	lsrs	r3, r1, #8
 8008dd6:	b2d2      	uxtb	r2, r2
 8008dd8:	4b56      	ldr	r3, [pc, #344]	; (8008f34 <updateCANQuery+0x588>)
 8008dda:	705a      	strb	r2, [r3, #1]
		TxData[2] = (cu32IMEI>>16)&0xFF;
 8008ddc:	4b58      	ldr	r3, [pc, #352]	; (8008f40 <updateCANQuery+0x594>)
 8008dde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008de2:	f04f 0200 	mov.w	r2, #0
 8008de6:	f04f 0300 	mov.w	r3, #0
 8008dea:	0c02      	lsrs	r2, r0, #16
 8008dec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008df0:	0c0b      	lsrs	r3, r1, #16
 8008df2:	b2d2      	uxtb	r2, r2
 8008df4:	4b4f      	ldr	r3, [pc, #316]	; (8008f34 <updateCANQuery+0x588>)
 8008df6:	709a      	strb	r2, [r3, #2]
		TxData[3] = (cu32IMEI>>24)&0xFF;
 8008df8:	4b51      	ldr	r3, [pc, #324]	; (8008f40 <updateCANQuery+0x594>)
 8008dfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008dfe:	f04f 0200 	mov.w	r2, #0
 8008e02:	f04f 0300 	mov.w	r3, #0
 8008e06:	0e02      	lsrs	r2, r0, #24
 8008e08:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008e0c:	0e0b      	lsrs	r3, r1, #24
 8008e0e:	b2d2      	uxtb	r2, r2
 8008e10:	4b48      	ldr	r3, [pc, #288]	; (8008f34 <updateCANQuery+0x588>)
 8008e12:	70da      	strb	r2, [r3, #3]
		TxData[4] = (cu32IMEI>>32)&0xFF;
 8008e14:	4b4a      	ldr	r3, [pc, #296]	; (8008f40 <updateCANQuery+0x594>)
 8008e16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008e1a:	f04f 0200 	mov.w	r2, #0
 8008e1e:	f04f 0300 	mov.w	r3, #0
 8008e22:	000a      	movs	r2, r1
 8008e24:	2300      	movs	r3, #0
 8008e26:	b2d2      	uxtb	r2, r2
 8008e28:	4b42      	ldr	r3, [pc, #264]	; (8008f34 <updateCANQuery+0x588>)
 8008e2a:	711a      	strb	r2, [r3, #4]
		TxData[5] = (cu32IMEI>>40)&0xFF;
 8008e2c:	4b44      	ldr	r3, [pc, #272]	; (8008f40 <updateCANQuery+0x594>)
 8008e2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008e32:	f04f 0200 	mov.w	r2, #0
 8008e36:	f04f 0300 	mov.w	r3, #0
 8008e3a:	0a0a      	lsrs	r2, r1, #8
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	b2d2      	uxtb	r2, r2
 8008e40:	4b3c      	ldr	r3, [pc, #240]	; (8008f34 <updateCANQuery+0x588>)
 8008e42:	715a      	strb	r2, [r3, #5]
		TxData[6] = (cu32IMEI>>48)&0xFF;
 8008e44:	4b3e      	ldr	r3, [pc, #248]	; (8008f40 <updateCANQuery+0x594>)
 8008e46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008e4a:	f04f 0200 	mov.w	r2, #0
 8008e4e:	f04f 0300 	mov.w	r3, #0
 8008e52:	0c0a      	lsrs	r2, r1, #16
 8008e54:	2300      	movs	r3, #0
 8008e56:	b2d2      	uxtb	r2, r2
 8008e58:	4b36      	ldr	r3, [pc, #216]	; (8008f34 <updateCANQuery+0x588>)
 8008e5a:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8008e5c:	4b35      	ldr	r3, [pc, #212]	; (8008f34 <updateCANQuery+0x588>)
 8008e5e:	2200      	movs	r2, #0
 8008e60:	71da      	strb	r2, [r3, #7]
//		TIME_PERIOD_CNT = 0;
//		gu32TxCANCounter = 0;
		TIME_PERIOD_CNT++;
 8008e62:	4b29      	ldr	r3, [pc, #164]	; (8008f08 <updateCANQuery+0x55c>)
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	3301      	adds	r3, #1
 8008e68:	b2da      	uxtb	r2, r3
 8008e6a:	4b27      	ldr	r3, [pc, #156]	; (8008f08 <updateCANQuery+0x55c>)
 8008e6c:	701a      	strb	r2, [r3, #0]
		gu32TxCANCounter++;
 8008e6e:	4b23      	ldr	r3, [pc, #140]	; (8008efc <updateCANQuery+0x550>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	3301      	adds	r3, #1
 8008e74:	4a21      	ldr	r2, [pc, #132]	; (8008efc <updateCANQuery+0x550>)
 8008e76:	6013      	str	r3, [r2, #0]
		CANTxFlag = TRUE;
 8008e78:	4b2f      	ldr	r3, [pc, #188]	; (8008f38 <updateCANQuery+0x58c>)
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	601a      	str	r2, [r3, #0]
 8008e7e:	e068      	b.n	8008f52 <updateCANQuery+0x5a6>
	}
	else if(TIME_PERIOD_CNT == 5)
 8008e80:	4b21      	ldr	r3, [pc, #132]	; (8008f08 <updateCANQuery+0x55c>)
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	2b05      	cmp	r3, #5
 8008e86:	d15d      	bne.n	8008f44 <updateCANQuery+0x598>
	{

		TxData[0] = 0xFF;
 8008e88:	4b2a      	ldr	r3, [pc, #168]	; (8008f34 <updateCANQuery+0x588>)
 8008e8a:	22ff      	movs	r2, #255	; 0xff
 8008e8c:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0xFF;
 8008e8e:	4b29      	ldr	r3, [pc, #164]	; (8008f34 <updateCANQuery+0x588>)
 8008e90:	22ff      	movs	r2, #255	; 0xff
 8008e92:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0xFF;
 8008e94:	4b27      	ldr	r3, [pc, #156]	; (8008f34 <updateCANQuery+0x588>)
 8008e96:	22ff      	movs	r2, #255	; 0xff
 8008e98:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0xFF;
 8008e9a:	4b26      	ldr	r3, [pc, #152]	; (8008f34 <updateCANQuery+0x588>)
 8008e9c:	22ff      	movs	r2, #255	; 0xff
 8008e9e:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0xFF;
 8008ea0:	4b24      	ldr	r3, [pc, #144]	; (8008f34 <updateCANQuery+0x588>)
 8008ea2:	22ff      	movs	r2, #255	; 0xff
 8008ea4:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0xFF;
 8008ea6:	4b23      	ldr	r3, [pc, #140]	; (8008f34 <updateCANQuery+0x588>)
 8008ea8:	22ff      	movs	r2, #255	; 0xff
 8008eaa:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0xFF;
 8008eac:	4b21      	ldr	r3, [pc, #132]	; (8008f34 <updateCANQuery+0x588>)
 8008eae:	22ff      	movs	r2, #255	; 0xff
 8008eb0:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0xFF;
 8008eb2:	4b20      	ldr	r3, [pc, #128]	; (8008f34 <updateCANQuery+0x588>)
 8008eb4:	22ff      	movs	r2, #255	; 0xff
 8008eb6:	71da      	strb	r2, [r3, #7]

		CANTxFlag = TRUE;
 8008eb8:	4b1f      	ldr	r3, [pc, #124]	; (8008f38 <updateCANQuery+0x58c>)
 8008eba:	2201      	movs	r2, #1
 8008ebc:	601a      	str	r2, [r3, #0]

		if(gu32TxCANCounter == 8)
 8008ebe:	4b0f      	ldr	r3, [pc, #60]	; (8008efc <updateCANQuery+0x550>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2b08      	cmp	r3, #8
 8008ec4:	d105      	bne.n	8008ed2 <updateCANQuery+0x526>
		{
			gu32TxCANCounter+=3;
 8008ec6:	4b0d      	ldr	r3, [pc, #52]	; (8008efc <updateCANQuery+0x550>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	3303      	adds	r3, #3
 8008ecc:	4a0b      	ldr	r2, [pc, #44]	; (8008efc <updateCANQuery+0x550>)
 8008ece:	6013      	str	r3, [r2, #0]
	}

//	gu32TxCANCounter++;
//	if(gu32TxCANCounter >= 1)
//		gu32TxCANCounter = 0;
}
 8008ed0:	e03f      	b.n	8008f52 <updateCANQuery+0x5a6>
		else if(gu32TxCANCounter == 13)
 8008ed2:	4b0a      	ldr	r3, [pc, #40]	; (8008efc <updateCANQuery+0x550>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2b0d      	cmp	r3, #13
 8008ed8:	d109      	bne.n	8008eee <updateCANQuery+0x542>
			TIME_PERIOD_CNT = 0;
 8008eda:	4b0b      	ldr	r3, [pc, #44]	; (8008f08 <updateCANQuery+0x55c>)
 8008edc:	2200      	movs	r2, #0
 8008ede:	701a      	strb	r2, [r3, #0]
			gu32TxCANCounter = 0;
 8008ee0:	4b06      	ldr	r3, [pc, #24]	; (8008efc <updateCANQuery+0x550>)
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	601a      	str	r2, [r3, #0]
			CANTxFlag = FALSE;
 8008ee6:	4b14      	ldr	r3, [pc, #80]	; (8008f38 <updateCANQuery+0x58c>)
 8008ee8:	2200      	movs	r2, #0
 8008eea:	601a      	str	r2, [r3, #0]
}
 8008eec:	e031      	b.n	8008f52 <updateCANQuery+0x5a6>
			gu32TxCANCounter++;
 8008eee:	4b03      	ldr	r3, [pc, #12]	; (8008efc <updateCANQuery+0x550>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	4a01      	ldr	r2, [pc, #4]	; (8008efc <updateCANQuery+0x550>)
 8008ef6:	6013      	str	r3, [r2, #0]
}
 8008ef8:	e02b      	b.n	8008f52 <updateCANQuery+0x5a6>
 8008efa:	bf00      	nop
 8008efc:	20002014 	.word	0x20002014
 8008f00:	200013fc 	.word	0x200013fc
 8008f04:	10cafffb 	.word	0x10cafffb
 8008f08:	20001b28 	.word	0x20001b28
 8008f0c:	20001a85 	.word	0x20001a85
 8008f10:	20001a60 	.word	0x20001a60
 8008f14:	20001444 	.word	0x20001444
 8008f18:	200061c0 	.word	0x200061c0
 8008f1c:	2000144c 	.word	0x2000144c
 8008f20:	20001450 	.word	0x20001450
 8008f24:	20001454 	.word	0x20001454
 8008f28:	20001458 	.word	0x20001458
 8008f2c:	2000145c 	.word	0x2000145c
 8008f30:	20005858 	.word	0x20005858
 8008f34:	200061e4 	.word	0x200061e4
 8008f38:	20002010 	.word	0x20002010
 8008f3c:	10cbfffb 	.word	0x10cbfffb
 8008f40:	20001880 	.word	0x20001880
		canCurrentState = enmCANQUERY_IDLE;
 8008f44:	4b05      	ldr	r3, [pc, #20]	; (8008f5c <updateCANQuery+0x5b0>)
 8008f46:	2200      	movs	r2, #0
 8008f48:	701a      	strb	r2, [r3, #0]
		CANTxFlag = FALSE;
 8008f4a:	4b05      	ldr	r3, [pc, #20]	; (8008f60 <updateCANQuery+0x5b4>)
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	601a      	str	r2, [r3, #0]
}
 8008f50:	e7ff      	b.n	8008f52 <updateCANQuery+0x5a6>
 8008f52:	bf00      	nop
 8008f54:	371c      	adds	r7, #28
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd90      	pop	{r4, r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	20001b29 	.word	0x20001b29
 8008f60:	20002010 	.word	0x20002010

08008f64 <sendMessageCAN>:

void sendMessageCAN (void)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	af00      	add	r7, sp, #0
	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8008f68:	4b06      	ldr	r3, [pc, #24]	; (8008f84 <sendMessageCAN+0x20>)
 8008f6a:	4a07      	ldr	r2, [pc, #28]	; (8008f88 <sendMessageCAN+0x24>)
 8008f6c:	4907      	ldr	r1, [pc, #28]	; (8008f8c <sendMessageCAN+0x28>)
 8008f6e:	4808      	ldr	r0, [pc, #32]	; (8008f90 <sendMessageCAN+0x2c>)
 8008f70:	f003 ffc2 	bl	800cef8 <HAL_CAN_AddTxMessage>
 8008f74:	4603      	mov	r3, r0
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d001      	beq.n	8008f7e <sendMessageCAN+0x1a>
	{
	  /* Transmission request Error */
	  Error_Handler();
 8008f7a:	f7fb fafe 	bl	800457a <Error_Handler>
//	TxData[4] = 0;
//	TxData[5] = 0;
//	TxData[6] = 0;
//	TxData[7] = 0;
//	CANTxFlag = FALSE;
}
 8008f7e:	bf00      	nop
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	200061ec 	.word	0x200061ec
 8008f88:	200061e4 	.word	0x200061e4
 8008f8c:	20006518 	.word	0x20006518
 8008f90:	20002268 	.word	0x20002268
 8008f94:	00000000 	.word	0x00000000

08008f98 <CAN_HeartBeat_Signal_Data>:
 *
 *
 *
 */
void CAN_HeartBeat_Signal_Data()
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	af00      	add	r7, sp, #0
	if(signal_qaulity > 31)
 8008f9c:	4b39      	ldr	r3, [pc, #228]	; (8009084 <CAN_HeartBeat_Signal_Data+0xec>)
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	2b1f      	cmp	r3, #31
 8008fa2:	d903      	bls.n	8008fac <CAN_HeartBeat_Signal_Data+0x14>
	{
		TelematicHeartBeat[enumTeleHearBeat_SIGNAL_QUALITY] = 0x00;//Invalid
 8008fa4:	4b38      	ldr	r3, [pc, #224]	; (8009088 <CAN_HeartBeat_Signal_Data+0xf0>)
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	70da      	strb	r2, [r3, #3]
 8008faa:	e032      	b.n	8009012 <CAN_HeartBeat_Signal_Data+0x7a>
	}
	else if((signal_qaulity >=26) && (signal_qaulity <=31))
 8008fac:	4b35      	ldr	r3, [pc, #212]	; (8009084 <CAN_HeartBeat_Signal_Data+0xec>)
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	2b19      	cmp	r3, #25
 8008fb2:	d907      	bls.n	8008fc4 <CAN_HeartBeat_Signal_Data+0x2c>
 8008fb4:	4b33      	ldr	r3, [pc, #204]	; (8009084 <CAN_HeartBeat_Signal_Data+0xec>)
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	2b1f      	cmp	r3, #31
 8008fba:	d803      	bhi.n	8008fc4 <CAN_HeartBeat_Signal_Data+0x2c>
	{
		TelematicHeartBeat[enumTeleHearBeat_SIGNAL_QUALITY] = 0x04;
 8008fbc:	4b32      	ldr	r3, [pc, #200]	; (8009088 <CAN_HeartBeat_Signal_Data+0xf0>)
 8008fbe:	2204      	movs	r2, #4
 8008fc0:	70da      	strb	r2, [r3, #3]
 8008fc2:	e026      	b.n	8009012 <CAN_HeartBeat_Signal_Data+0x7a>
	}
	else if((signal_qaulity >= 19) && (signal_qaulity <=25))
 8008fc4:	4b2f      	ldr	r3, [pc, #188]	; (8009084 <CAN_HeartBeat_Signal_Data+0xec>)
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	2b12      	cmp	r3, #18
 8008fca:	d907      	bls.n	8008fdc <CAN_HeartBeat_Signal_Data+0x44>
 8008fcc:	4b2d      	ldr	r3, [pc, #180]	; (8009084 <CAN_HeartBeat_Signal_Data+0xec>)
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	2b19      	cmp	r3, #25
 8008fd2:	d803      	bhi.n	8008fdc <CAN_HeartBeat_Signal_Data+0x44>
	{
		TelematicHeartBeat[enumTeleHearBeat_SIGNAL_QUALITY] = 0x03;
 8008fd4:	4b2c      	ldr	r3, [pc, #176]	; (8009088 <CAN_HeartBeat_Signal_Data+0xf0>)
 8008fd6:	2203      	movs	r2, #3
 8008fd8:	70da      	strb	r2, [r3, #3]
 8008fda:	e01a      	b.n	8009012 <CAN_HeartBeat_Signal_Data+0x7a>
	}
	else if((signal_qaulity >=12) && (signal_qaulity <=18))
 8008fdc:	4b29      	ldr	r3, [pc, #164]	; (8009084 <CAN_HeartBeat_Signal_Data+0xec>)
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	2b0b      	cmp	r3, #11
 8008fe2:	d907      	bls.n	8008ff4 <CAN_HeartBeat_Signal_Data+0x5c>
 8008fe4:	4b27      	ldr	r3, [pc, #156]	; (8009084 <CAN_HeartBeat_Signal_Data+0xec>)
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	2b12      	cmp	r3, #18
 8008fea:	d803      	bhi.n	8008ff4 <CAN_HeartBeat_Signal_Data+0x5c>
	{
		TelematicHeartBeat[enumTeleHearBeat_SIGNAL_QUALITY] = 0x02;
 8008fec:	4b26      	ldr	r3, [pc, #152]	; (8009088 <CAN_HeartBeat_Signal_Data+0xf0>)
 8008fee:	2202      	movs	r2, #2
 8008ff0:	70da      	strb	r2, [r3, #3]
 8008ff2:	e00e      	b.n	8009012 <CAN_HeartBeat_Signal_Data+0x7a>
	}

	else if(signal_qaulity >=5 && signal_qaulity <= 11)
 8008ff4:	4b23      	ldr	r3, [pc, #140]	; (8009084 <CAN_HeartBeat_Signal_Data+0xec>)
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	2b04      	cmp	r3, #4
 8008ffa:	d907      	bls.n	800900c <CAN_HeartBeat_Signal_Data+0x74>
 8008ffc:	4b21      	ldr	r3, [pc, #132]	; (8009084 <CAN_HeartBeat_Signal_Data+0xec>)
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	2b0b      	cmp	r3, #11
 8009002:	d803      	bhi.n	800900c <CAN_HeartBeat_Signal_Data+0x74>
	{
		TelematicHeartBeat[enumTeleHearBeat_SIGNAL_QUALITY] = 0x01;
 8009004:	4b20      	ldr	r3, [pc, #128]	; (8009088 <CAN_HeartBeat_Signal_Data+0xf0>)
 8009006:	2201      	movs	r2, #1
 8009008:	70da      	strb	r2, [r3, #3]
 800900a:	e002      	b.n	8009012 <CAN_HeartBeat_Signal_Data+0x7a>
	}
	else
	{
		TelematicHeartBeat[enumTeleHearBeat_SIGNAL_QUALITY] = 0x00;
 800900c:	4b1e      	ldr	r3, [pc, #120]	; (8009088 <CAN_HeartBeat_Signal_Data+0xf0>)
 800900e:	2200      	movs	r2, #0
 8009010:	70da      	strb	r2, [r3, #3]
	}

	if((strcmp(gau8GSM_NWINFO,"\"GSM\"")==0) || (strcmp(gau8GSM_NWINFO,"\"GPRS\"")==0) || (strcmp(gau8GSM_NWINFO,"\"EDGE\"")==0))
 8009012:	491e      	ldr	r1, [pc, #120]	; (800908c <CAN_HeartBeat_Signal_Data+0xf4>)
 8009014:	481e      	ldr	r0, [pc, #120]	; (8009090 <CAN_HeartBeat_Signal_Data+0xf8>)
 8009016:	f7f7 fcdb 	bl	80009d0 <strcmp>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d00d      	beq.n	800903c <CAN_HeartBeat_Signal_Data+0xa4>
 8009020:	491c      	ldr	r1, [pc, #112]	; (8009094 <CAN_HeartBeat_Signal_Data+0xfc>)
 8009022:	481b      	ldr	r0, [pc, #108]	; (8009090 <CAN_HeartBeat_Signal_Data+0xf8>)
 8009024:	f7f7 fcd4 	bl	80009d0 <strcmp>
 8009028:	4603      	mov	r3, r0
 800902a:	2b00      	cmp	r3, #0
 800902c:	d006      	beq.n	800903c <CAN_HeartBeat_Signal_Data+0xa4>
 800902e:	491a      	ldr	r1, [pc, #104]	; (8009098 <CAN_HeartBeat_Signal_Data+0x100>)
 8009030:	4817      	ldr	r0, [pc, #92]	; (8009090 <CAN_HeartBeat_Signal_Data+0xf8>)
 8009032:	f7f7 fccd 	bl	80009d0 <strcmp>
 8009036:	4603      	mov	r3, r0
 8009038:	2b00      	cmp	r3, #0
 800903a:	d10a      	bne.n	8009052 <CAN_HeartBeat_Signal_Data+0xba>
	{
		TelematicHeartBeat[enumTeleHearBeat_NW_STATUS] = NW_2G;
 800903c:	4b12      	ldr	r3, [pc, #72]	; (8009088 <CAN_HeartBeat_Signal_Data+0xf0>)
 800903e:	2202      	movs	r2, #2
 8009040:	709a      	strb	r2, [r3, #2]
		u8daignostic|=(1<<1); // 2G
 8009042:	4b16      	ldr	r3, [pc, #88]	; (800909c <CAN_HeartBeat_Signal_Data+0x104>)
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	f043 0302 	orr.w	r3, r3, #2
 800904a:	b2da      	uxtb	r2, r3
 800904c:	4b13      	ldr	r3, [pc, #76]	; (800909c <CAN_HeartBeat_Signal_Data+0x104>)
 800904e:	701a      	strb	r2, [r3, #0]
 8009050:	e034      	b.n	80090bc <CAN_HeartBeat_Signal_Data+0x124>
	}
	else if((strcmp(gau8GSM_NWINFO,"\"TDD LTE\"") == 0) || (strcmp(gau8GSM_NWINFO,"\"FDD LTE\"")==0))
 8009052:	4913      	ldr	r1, [pc, #76]	; (80090a0 <CAN_HeartBeat_Signal_Data+0x108>)
 8009054:	480e      	ldr	r0, [pc, #56]	; (8009090 <CAN_HeartBeat_Signal_Data+0xf8>)
 8009056:	f7f7 fcbb 	bl	80009d0 <strcmp>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d006      	beq.n	800906e <CAN_HeartBeat_Signal_Data+0xd6>
 8009060:	4910      	ldr	r1, [pc, #64]	; (80090a4 <CAN_HeartBeat_Signal_Data+0x10c>)
 8009062:	480b      	ldr	r0, [pc, #44]	; (8009090 <CAN_HeartBeat_Signal_Data+0xf8>)
 8009064:	f7f7 fcb4 	bl	80009d0 <strcmp>
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	d11c      	bne.n	80090a8 <CAN_HeartBeat_Signal_Data+0x110>
	{
		TelematicHeartBeat[enumTeleHearBeat_NW_STATUS] = NW_4G;
 800906e:	4b06      	ldr	r3, [pc, #24]	; (8009088 <CAN_HeartBeat_Signal_Data+0xf0>)
 8009070:	2204      	movs	r2, #4
 8009072:	709a      	strb	r2, [r3, #2]
		u8daignostic|=(1<<2); // 4G
 8009074:	4b09      	ldr	r3, [pc, #36]	; (800909c <CAN_HeartBeat_Signal_Data+0x104>)
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	f043 0304 	orr.w	r3, r3, #4
 800907c:	b2da      	uxtb	r2, r3
 800907e:	4b07      	ldr	r3, [pc, #28]	; (800909c <CAN_HeartBeat_Signal_Data+0x104>)
 8009080:	701a      	strb	r2, [r3, #0]
 8009082:	e01b      	b.n	80090bc <CAN_HeartBeat_Signal_Data+0x124>
 8009084:	20001a5a 	.word	0x20001a5a
 8009088:	20002018 	.word	0x20002018
 800908c:	0801b7cc 	.word	0x0801b7cc
 8009090:	20000fb4 	.word	0x20000fb4
 8009094:	0801b7d4 	.word	0x0801b7d4
 8009098:	0801b7dc 	.word	0x0801b7dc
 800909c:	20001a86 	.word	0x20001a86
 80090a0:	0801b7e4 	.word	0x0801b7e4
 80090a4:	0801b7f0 	.word	0x0801b7f0
	}
	else
	{
		TelematicHeartBeat[enumTeleHearBeat_NW_STATUS] = NO_SERVICE;
 80090a8:	4baf      	ldr	r3, [pc, #700]	; (8009368 <CAN_HeartBeat_Signal_Data+0x3d0>)
 80090aa:	2200      	movs	r2, #0
 80090ac:	709a      	strb	r2, [r3, #2]
		u8daignostic&=~((1<<0)|(1<<1)|(1<<2)); //
 80090ae:	4baf      	ldr	r3, [pc, #700]	; (800936c <CAN_HeartBeat_Signal_Data+0x3d4>)
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	f023 0307 	bic.w	r3, r3, #7
 80090b6:	b2da      	uxtb	r2, r3
 80090b8:	4bac      	ldr	r3, [pc, #688]	; (800936c <CAN_HeartBeat_Signal_Data+0x3d4>)
 80090ba:	701a      	strb	r2, [r3, #0]
	}

	if((g_stAdcData.u32IntBatVtg >= 4.12))
 80090bc:	4bac      	ldr	r3, [pc, #688]	; (8009370 <CAN_HeartBeat_Signal_Data+0x3d8>)
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7f7 fe51 	bl	8000d68 <__aeabi_f2d>
 80090c6:	a392      	add	r3, pc, #584	; (adr r3, 8009310 <CAN_HeartBeat_Signal_Data+0x378>)
 80090c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090cc:	f7f8 f92a 	bl	8001324 <__aeabi_dcmpge>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d002      	beq.n	80090dc <CAN_HeartBeat_Signal_Data+0x144>
	{
		TelematicHeartBeat[enumTeleHearBeat_INTERNAL_BATT_SOC_PER] = 0x64; //100%
 80090d6:	4ba4      	ldr	r3, [pc, #656]	; (8009368 <CAN_HeartBeat_Signal_Data+0x3d0>)
 80090d8:	2264      	movs	r2, #100	; 0x64
 80090da:	715a      	strb	r2, [r3, #5]
	}
	if((g_stAdcData.u32IntBatVtg <= 4.11) && (g_stAdcData.u32IntBatVtg > 4.04))
 80090dc:	4ba4      	ldr	r3, [pc, #656]	; (8009370 <CAN_HeartBeat_Signal_Data+0x3d8>)
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7f7 fe41 	bl	8000d68 <__aeabi_f2d>
 80090e6:	a38c      	add	r3, pc, #560	; (adr r3, 8009318 <CAN_HeartBeat_Signal_Data+0x380>)
 80090e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ec:	f7f8 f910 	bl	8001310 <__aeabi_dcmple>
 80090f0:	4603      	mov	r3, r0
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00f      	beq.n	8009116 <CAN_HeartBeat_Signal_Data+0x17e>
 80090f6:	4b9e      	ldr	r3, [pc, #632]	; (8009370 <CAN_HeartBeat_Signal_Data+0x3d8>)
 80090f8:	68db      	ldr	r3, [r3, #12]
 80090fa:	4618      	mov	r0, r3
 80090fc:	f7f7 fe34 	bl	8000d68 <__aeabi_f2d>
 8009100:	a387      	add	r3, pc, #540	; (adr r3, 8009320 <CAN_HeartBeat_Signal_Data+0x388>)
 8009102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009106:	f7f8 f917 	bl	8001338 <__aeabi_dcmpgt>
 800910a:	4603      	mov	r3, r0
 800910c:	2b00      	cmp	r3, #0
 800910e:	d002      	beq.n	8009116 <CAN_HeartBeat_Signal_Data+0x17e>
	{
		TelematicHeartBeat[enumTeleHearBeat_INTERNAL_BATT_SOC_PER] = 0x5A; //90%
 8009110:	4b95      	ldr	r3, [pc, #596]	; (8009368 <CAN_HeartBeat_Signal_Data+0x3d0>)
 8009112:	225a      	movs	r2, #90	; 0x5a
 8009114:	715a      	strb	r2, [r3, #5]
	}
	if((g_stAdcData.u32IntBatVtg <= 4.04) && (g_stAdcData.u32IntBatVtg > 3.96))
 8009116:	4b96      	ldr	r3, [pc, #600]	; (8009370 <CAN_HeartBeat_Signal_Data+0x3d8>)
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	4618      	mov	r0, r3
 800911c:	f7f7 fe24 	bl	8000d68 <__aeabi_f2d>
 8009120:	a37f      	add	r3, pc, #508	; (adr r3, 8009320 <CAN_HeartBeat_Signal_Data+0x388>)
 8009122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009126:	f7f8 f8f3 	bl	8001310 <__aeabi_dcmple>
 800912a:	4603      	mov	r3, r0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d00f      	beq.n	8009150 <CAN_HeartBeat_Signal_Data+0x1b8>
 8009130:	4b8f      	ldr	r3, [pc, #572]	; (8009370 <CAN_HeartBeat_Signal_Data+0x3d8>)
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	4618      	mov	r0, r3
 8009136:	f7f7 fe17 	bl	8000d68 <__aeabi_f2d>
 800913a:	a37b      	add	r3, pc, #492	; (adr r3, 8009328 <CAN_HeartBeat_Signal_Data+0x390>)
 800913c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009140:	f7f8 f8fa 	bl	8001338 <__aeabi_dcmpgt>
 8009144:	4603      	mov	r3, r0
 8009146:	2b00      	cmp	r3, #0
 8009148:	d002      	beq.n	8009150 <CAN_HeartBeat_Signal_Data+0x1b8>
	{
		TelematicHeartBeat[enumTeleHearBeat_INTERNAL_BATT_SOC_PER] = 0x50; //80%
 800914a:	4b87      	ldr	r3, [pc, #540]	; (8009368 <CAN_HeartBeat_Signal_Data+0x3d0>)
 800914c:	2250      	movs	r2, #80	; 0x50
 800914e:	715a      	strb	r2, [r3, #5]
	}
	if((g_stAdcData.u32IntBatVtg <= 3.96) && (g_stAdcData.u32IntBatVtg > 3.88))
 8009150:	4b87      	ldr	r3, [pc, #540]	; (8009370 <CAN_HeartBeat_Signal_Data+0x3d8>)
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	4618      	mov	r0, r3
 8009156:	f7f7 fe07 	bl	8000d68 <__aeabi_f2d>
 800915a:	a373      	add	r3, pc, #460	; (adr r3, 8009328 <CAN_HeartBeat_Signal_Data+0x390>)
 800915c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009160:	f7f8 f8d6 	bl	8001310 <__aeabi_dcmple>
 8009164:	4603      	mov	r3, r0
 8009166:	2b00      	cmp	r3, #0
 8009168:	d00f      	beq.n	800918a <CAN_HeartBeat_Signal_Data+0x1f2>
 800916a:	4b81      	ldr	r3, [pc, #516]	; (8009370 <CAN_HeartBeat_Signal_Data+0x3d8>)
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	4618      	mov	r0, r3
 8009170:	f7f7 fdfa 	bl	8000d68 <__aeabi_f2d>
 8009174:	a36e      	add	r3, pc, #440	; (adr r3, 8009330 <CAN_HeartBeat_Signal_Data+0x398>)
 8009176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917a:	f7f8 f8dd 	bl	8001338 <__aeabi_dcmpgt>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d002      	beq.n	800918a <CAN_HeartBeat_Signal_Data+0x1f2>
	{
		TelematicHeartBeat[enumTeleHearBeat_INTERNAL_BATT_SOC_PER] = 0x46; //70%
 8009184:	4b78      	ldr	r3, [pc, #480]	; (8009368 <CAN_HeartBeat_Signal_Data+0x3d0>)
 8009186:	2246      	movs	r2, #70	; 0x46
 8009188:	715a      	strb	r2, [r3, #5]
	}
	if((g_stAdcData.u32IntBatVtg <= 3.88) && (g_stAdcData.u32IntBatVtg > 3.08))
 800918a:	4b79      	ldr	r3, [pc, #484]	; (8009370 <CAN_HeartBeat_Signal_Data+0x3d8>)
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	4618      	mov	r0, r3
 8009190:	f7f7 fdea 	bl	8000d68 <__aeabi_f2d>
 8009194:	a366      	add	r3, pc, #408	; (adr r3, 8009330 <CAN_HeartBeat_Signal_Data+0x398>)
 8009196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919a:	f7f8 f8b9 	bl	8001310 <__aeabi_dcmple>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d00f      	beq.n	80091c4 <CAN_HeartBeat_Signal_Data+0x22c>
 80091a4:	4b72      	ldr	r3, [pc, #456]	; (8009370 <CAN_HeartBeat_Signal_Data+0x3d8>)
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	4618      	mov	r0, r3
 80091aa:	f7f7 fddd 	bl	8000d68 <__aeabi_f2d>
 80091ae:	a362      	add	r3, pc, #392	; (adr r3, 8009338 <CAN_HeartBeat_Signal_Data+0x3a0>)
 80091b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b4:	f7f8 f8c0 	bl	8001338 <__aeabi_dcmpgt>
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d002      	beq.n	80091c4 <CAN_HeartBeat_Signal_Data+0x22c>
	{
		TelematicHeartBeat[enumTeleHearBeat_INTERNAL_BATT_SOC_PER] = 0x3C; //60%
 80091be:	4b6a      	ldr	r3, [pc, #424]	; (8009368 <CAN_HeartBeat_Signal_Data+0x3d0>)
 80091c0:	223c      	movs	r2, #60	; 0x3c
 80091c2:	715a      	strb	r2, [r3, #5]
	}
	if((g_stAdcData.u32IntBatVtg <= 3.08) && (g_stAdcData.u32IntBatVtg > 3.72))
 80091c4:	4b6a      	ldr	r3, [pc, #424]	; (8009370 <CAN_HeartBeat_Signal_Data+0x3d8>)
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7f7 fdcd 	bl	8000d68 <__aeabi_f2d>
 80091ce:	a35a      	add	r3, pc, #360	; (adr r3, 8009338 <CAN_HeartBeat_Signal_Data+0x3a0>)
 80091d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d4:	f7f8 f89c 	bl	8001310 <__aeabi_dcmple>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d00f      	beq.n	80091fe <CAN_HeartBeat_Signal_Data+0x266>
 80091de:	4b64      	ldr	r3, [pc, #400]	; (8009370 <CAN_HeartBeat_Signal_Data+0x3d8>)
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7f7 fdc0 	bl	8000d68 <__aeabi_f2d>
 80091e8:	a355      	add	r3, pc, #340	; (adr r3, 8009340 <CAN_HeartBeat_Signal_Data+0x3a8>)
 80091ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ee:	f7f8 f8a3 	bl	8001338 <__aeabi_dcmpgt>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d002      	beq.n	80091fe <CAN_HeartBeat_Signal_Data+0x266>
	{
		TelematicHeartBeat[enumTeleHearBeat_INTERNAL_BATT_SOC_PER] = 0x32; //50%
 80091f8:	4b5b      	ldr	r3, [pc, #364]	; (8009368 <CAN_HeartBeat_Signal_Data+0x3d0>)
 80091fa:	2232      	movs	r2, #50	; 0x32
 80091fc:	715a      	strb	r2, [r3, #5]
	}
	if((g_stAdcData.u32IntBatVtg <= 3.72) && (g_stAdcData.u32IntBatVtg > 3.64))
 80091fe:	4b5c      	ldr	r3, [pc, #368]	; (8009370 <CAN_HeartBeat_Signal_Data+0x3d8>)
 8009200:	68db      	ldr	r3, [r3, #12]
 8009202:	4618      	mov	r0, r3
 8009204:	f7f7 fdb0 	bl	8000d68 <__aeabi_f2d>
 8009208:	a34d      	add	r3, pc, #308	; (adr r3, 8009340 <CAN_HeartBeat_Signal_Data+0x3a8>)
 800920a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920e:	f7f8 f87f 	bl	8001310 <__aeabi_dcmple>
 8009212:	4603      	mov	r3, r0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00f      	beq.n	8009238 <CAN_HeartBeat_Signal_Data+0x2a0>
 8009218:	4b55      	ldr	r3, [pc, #340]	; (8009370 <CAN_HeartBeat_Signal_Data+0x3d8>)
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	4618      	mov	r0, r3
 800921e:	f7f7 fda3 	bl	8000d68 <__aeabi_f2d>
 8009222:	a349      	add	r3, pc, #292	; (adr r3, 8009348 <CAN_HeartBeat_Signal_Data+0x3b0>)
 8009224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009228:	f7f8 f886 	bl	8001338 <__aeabi_dcmpgt>
 800922c:	4603      	mov	r3, r0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d002      	beq.n	8009238 <CAN_HeartBeat_Signal_Data+0x2a0>
	{
		TelematicHeartBeat[enumTeleHearBeat_INTERNAL_BATT_SOC_PER] = 0x28; //40%
 8009232:	4b4d      	ldr	r3, [pc, #308]	; (8009368 <CAN_HeartBeat_Signal_Data+0x3d0>)
 8009234:	2228      	movs	r2, #40	; 0x28
 8009236:	715a      	strb	r2, [r3, #5]
	}
	if((g_stAdcData.u32IntBatVtg <= 3.64) && (g_stAdcData.u32IntBatVtg > 3.56))
 8009238:	4b4d      	ldr	r3, [pc, #308]	; (8009370 <CAN_HeartBeat_Signal_Data+0x3d8>)
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	4618      	mov	r0, r3
 800923e:	f7f7 fd93 	bl	8000d68 <__aeabi_f2d>
 8009242:	a341      	add	r3, pc, #260	; (adr r3, 8009348 <CAN_HeartBeat_Signal_Data+0x3b0>)
 8009244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009248:	f7f8 f862 	bl	8001310 <__aeabi_dcmple>
 800924c:	4603      	mov	r3, r0
 800924e:	2b00      	cmp	r3, #0
 8009250:	d00f      	beq.n	8009272 <CAN_HeartBeat_Signal_Data+0x2da>
 8009252:	4b47      	ldr	r3, [pc, #284]	; (8009370 <CAN_HeartBeat_Signal_Data+0x3d8>)
 8009254:	68db      	ldr	r3, [r3, #12]
 8009256:	4618      	mov	r0, r3
 8009258:	f7f7 fd86 	bl	8000d68 <__aeabi_f2d>
 800925c:	a33c      	add	r3, pc, #240	; (adr r3, 8009350 <CAN_HeartBeat_Signal_Data+0x3b8>)
 800925e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009262:	f7f8 f869 	bl	8001338 <__aeabi_dcmpgt>
 8009266:	4603      	mov	r3, r0
 8009268:	2b00      	cmp	r3, #0
 800926a:	d002      	beq.n	8009272 <CAN_HeartBeat_Signal_Data+0x2da>
	{
		TelematicHeartBeat[enumTeleHearBeat_INTERNAL_BATT_SOC_PER] = 0x1E; //30%
 800926c:	4b3e      	ldr	r3, [pc, #248]	; (8009368 <CAN_HeartBeat_Signal_Data+0x3d0>)
 800926e:	221e      	movs	r2, #30
 8009270:	715a      	strb	r2, [r3, #5]
	}
	if((g_stAdcData.u32IntBatVtg <= 3.56) && (g_stAdcData.u32IntBatVtg > 3.48))
 8009272:	4b3f      	ldr	r3, [pc, #252]	; (8009370 <CAN_HeartBeat_Signal_Data+0x3d8>)
 8009274:	68db      	ldr	r3, [r3, #12]
 8009276:	4618      	mov	r0, r3
 8009278:	f7f7 fd76 	bl	8000d68 <__aeabi_f2d>
 800927c:	a334      	add	r3, pc, #208	; (adr r3, 8009350 <CAN_HeartBeat_Signal_Data+0x3b8>)
 800927e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009282:	f7f8 f845 	bl	8001310 <__aeabi_dcmple>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d00f      	beq.n	80092ac <CAN_HeartBeat_Signal_Data+0x314>
 800928c:	4b38      	ldr	r3, [pc, #224]	; (8009370 <CAN_HeartBeat_Signal_Data+0x3d8>)
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	4618      	mov	r0, r3
 8009292:	f7f7 fd69 	bl	8000d68 <__aeabi_f2d>
 8009296:	a330      	add	r3, pc, #192	; (adr r3, 8009358 <CAN_HeartBeat_Signal_Data+0x3c0>)
 8009298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929c:	f7f8 f84c 	bl	8001338 <__aeabi_dcmpgt>
 80092a0:	4603      	mov	r3, r0
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d002      	beq.n	80092ac <CAN_HeartBeat_Signal_Data+0x314>
	{
		TelematicHeartBeat[enumTeleHearBeat_INTERNAL_BATT_SOC_PER] = 0x14; //20%
 80092a6:	4b30      	ldr	r3, [pc, #192]	; (8009368 <CAN_HeartBeat_Signal_Data+0x3d0>)
 80092a8:	2214      	movs	r2, #20
 80092aa:	715a      	strb	r2, [r3, #5]
	}
	if((g_stAdcData.u32IntBatVtg <= 3.48) && (g_stAdcData.u32IntBatVtg > 3.4))
 80092ac:	4b30      	ldr	r3, [pc, #192]	; (8009370 <CAN_HeartBeat_Signal_Data+0x3d8>)
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	4618      	mov	r0, r3
 80092b2:	f7f7 fd59 	bl	8000d68 <__aeabi_f2d>
 80092b6:	a328      	add	r3, pc, #160	; (adr r3, 8009358 <CAN_HeartBeat_Signal_Data+0x3c0>)
 80092b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092bc:	f7f8 f828 	bl	8001310 <__aeabi_dcmple>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00f      	beq.n	80092e6 <CAN_HeartBeat_Signal_Data+0x34e>
 80092c6:	4b2a      	ldr	r3, [pc, #168]	; (8009370 <CAN_HeartBeat_Signal_Data+0x3d8>)
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7f7 fd4c 	bl	8000d68 <__aeabi_f2d>
 80092d0:	a323      	add	r3, pc, #140	; (adr r3, 8009360 <CAN_HeartBeat_Signal_Data+0x3c8>)
 80092d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d6:	f7f8 f82f 	bl	8001338 <__aeabi_dcmpgt>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d002      	beq.n	80092e6 <CAN_HeartBeat_Signal_Data+0x34e>
	{
		TelematicHeartBeat[enumTeleHearBeat_INTERNAL_BATT_SOC_PER] = 0x0A; //10%
 80092e0:	4b21      	ldr	r3, [pc, #132]	; (8009368 <CAN_HeartBeat_Signal_Data+0x3d0>)
 80092e2:	220a      	movs	r2, #10
 80092e4:	715a      	strb	r2, [r3, #5]
	}
	if(g_stAdcData.u32IntBatVtg <=3.4)
 80092e6:	4b22      	ldr	r3, [pc, #136]	; (8009370 <CAN_HeartBeat_Signal_Data+0x3d8>)
 80092e8:	68db      	ldr	r3, [r3, #12]
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7f7 fd3c 	bl	8000d68 <__aeabi_f2d>
 80092f0:	a31b      	add	r3, pc, #108	; (adr r3, 8009360 <CAN_HeartBeat_Signal_Data+0x3c8>)
 80092f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f6:	f7f8 f80b 	bl	8001310 <__aeabi_dcmple>
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d100      	bne.n	8009302 <CAN_HeartBeat_Signal_Data+0x36a>
	{
		TelematicHeartBeat[enumTeleHearBeat_INTERNAL_BATT_SOC_PER] = 0; //0%
	}


}
 8009300:	e002      	b.n	8009308 <CAN_HeartBeat_Signal_Data+0x370>
		TelematicHeartBeat[enumTeleHearBeat_INTERNAL_BATT_SOC_PER] = 0; //0%
 8009302:	4b19      	ldr	r3, [pc, #100]	; (8009368 <CAN_HeartBeat_Signal_Data+0x3d0>)
 8009304:	2200      	movs	r2, #0
 8009306:	715a      	strb	r2, [r3, #5]
}
 8009308:	bf00      	nop
 800930a:	bd80      	pop	{r7, pc}
 800930c:	f3af 8000 	nop.w
 8009310:	47ae147b 	.word	0x47ae147b
 8009314:	40107ae1 	.word	0x40107ae1
 8009318:	d70a3d71 	.word	0xd70a3d71
 800931c:	401070a3 	.word	0x401070a3
 8009320:	c28f5c29 	.word	0xc28f5c29
 8009324:	401028f5 	.word	0x401028f5
 8009328:	7ae147ae 	.word	0x7ae147ae
 800932c:	400fae14 	.word	0x400fae14
 8009330:	70a3d70a 	.word	0x70a3d70a
 8009334:	400f0a3d 	.word	0x400f0a3d
 8009338:	0a3d70a4 	.word	0x0a3d70a4
 800933c:	4008a3d7 	.word	0x4008a3d7
 8009340:	5c28f5c3 	.word	0x5c28f5c3
 8009344:	400dc28f 	.word	0x400dc28f
 8009348:	51eb851f 	.word	0x51eb851f
 800934c:	400d1eb8 	.word	0x400d1eb8
 8009350:	47ae147b 	.word	0x47ae147b
 8009354:	400c7ae1 	.word	0x400c7ae1
 8009358:	3d70a3d7 	.word	0x3d70a3d7
 800935c:	400bd70a 	.word	0x400bd70a
 8009360:	33333333 	.word	0x33333333
 8009364:	400b3333 	.word	0x400b3333
 8009368:	20002018 	.word	0x20002018
 800936c:	20001a86 	.word	0x20001a86
 8009370:	2000581c 	.word	0x2000581c

08009374 <HAL_GPIO_EXTI_Callback>:


_Bool boolInginitionStatus = FALSE;

 void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)             //interrupt handler
 {
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	4603      	mov	r3, r0
 800937c:	80fb      	strh	r3, [r7, #6]
 		if(GPIO_Pin == DI_EXTI4_Pin)                         //check interrupt for DI EXTI4 pin
 800937e:	88fb      	ldrh	r3, [r7, #6]
 8009380:	2b10      	cmp	r3, #16
 8009382:	d11e      	bne.n	80093c2 <HAL_GPIO_EXTI_Callback+0x4e>
 		{
 			if(HAL_GPIO_ReadPin(GPIOB, DI_EXTI4_Pin) == HIGH)            //check pin state
 8009384:	2110      	movs	r1, #16
 8009386:	4811      	ldr	r0, [pc, #68]	; (80093cc <HAL_GPIO_EXTI_Callback+0x58>)
 8009388:	f005 fe34 	bl	800eff4 <HAL_GPIO_ReadPin>
 800938c:	4603      	mov	r3, r0
 800938e:	2b01      	cmp	r3, #1
 8009390:	d103      	bne.n	800939a <HAL_GPIO_EXTI_Callback+0x26>
 			{
 				boolInginitionStatus = FALSE;
 8009392:	4b0f      	ldr	r3, [pc, #60]	; (80093d0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8009394:	2200      	movs	r2, #0
 8009396:	701a      	strb	r2, [r3, #0]
 				{
 					gu32PayloadQueueEnqueue = TEN_SEC;
 				}
 			}
 		}
 }
 8009398:	e013      	b.n	80093c2 <HAL_GPIO_EXTI_Callback+0x4e>
 			else if(HAL_GPIO_ReadPin(GPIOB, DI_EXTI4_Pin) == LOW)
 800939a:	2110      	movs	r1, #16
 800939c:	480b      	ldr	r0, [pc, #44]	; (80093cc <HAL_GPIO_EXTI_Callback+0x58>)
 800939e:	f005 fe29 	bl	800eff4 <HAL_GPIO_ReadPin>
 80093a2:	4603      	mov	r3, r0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d10c      	bne.n	80093c2 <HAL_GPIO_EXTI_Callback+0x4e>
 				boolInginitionStatus = TRUE;
 80093a8:	4b09      	ldr	r3, [pc, #36]	; (80093d0 <HAL_GPIO_EXTI_Callback+0x5c>)
 80093aa:	2201      	movs	r2, #1
 80093ac:	701a      	strb	r2, [r3, #0]
 				if(gu32PayloadQueueEnqueue > TEN_SEC)
 80093ae:	4b09      	ldr	r3, [pc, #36]	; (80093d4 <HAL_GPIO_EXTI_Callback+0x60>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d903      	bls.n	80093c2 <HAL_GPIO_EXTI_Callback+0x4e>
 					gu32PayloadQueueEnqueue = TEN_SEC;
 80093ba:	4b06      	ldr	r3, [pc, #24]	; (80093d4 <HAL_GPIO_EXTI_Callback+0x60>)
 80093bc:	f242 7210 	movw	r2, #10000	; 0x2710
 80093c0:	601a      	str	r2, [r3, #0]
 }
 80093c2:	bf00      	nop
 80093c4:	3708      	adds	r7, #8
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	48000400 	.word	0x48000400
 80093d0:	200020d4 	.word	0x200020d4
 80093d4:	20002158 	.word	0x20002158

080093d8 <FLASH_If_Init>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	af00      	add	r7, sp, #0
  HAL_FLASH_Unlock();
 80093dc:	f004 ffda 	bl	800e394 <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80093e0:	4b05      	ldr	r3, [pc, #20]	; (80093f8 <FLASH_If_Init+0x20>)
 80093e2:	699b      	ldr	r3, [r3, #24]
 80093e4:	4a04      	ldr	r2, [pc, #16]	; (80093f8 <FLASH_If_Init+0x20>)
 80093e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80093ea:	6193      	str	r3, [r2, #24]
 80093ec:	4b02      	ldr	r3, [pc, #8]	; (80093f8 <FLASH_If_Init+0x20>)
 80093ee:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 80093f2:	611a      	str	r2, [r3, #16]
}
 80093f4:	bf00      	nop
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	40022000 	.word	0x40022000

080093fc <WriteDatatoFlash>:
 Change History:
 Author           	Date                Remarks
 KloudQ Team      26-07-2021			Initial Definition
******************************************************************************/
uint32_t WriteDatatoFlash(uint8_t *data,uint32_t writeCycle)
{
 80093fc:	b590      	push	{r4, r7, lr}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
	u32FotaChunckLength = gsmInstance.u32FotaFileSizeBytes;
 8009406:	4b0d      	ldr	r3, [pc, #52]	; (800943c <WriteDatatoFlash+0x40>)
 8009408:	f8d3 3fa0 	ldr.w	r3, [r3, #4000]	; 0xfa0
 800940c:	4a0c      	ldr	r2, [pc, #48]	; (8009440 <WriteDatatoFlash+0x44>)
 800940e:	6013      	str	r3, [r2, #0]
	if(FLASH_If_Write((uint64_t *)data,u32FotaChunckLength,getNewFirmwareStorageLocation(),writeCycle) == FLASHIF_OK)
 8009410:	4b0b      	ldr	r3, [pc, #44]	; (8009440 <WriteDatatoFlash+0x44>)
 8009412:	681c      	ldr	r4, [r3, #0]
 8009414:	f000 f95c 	bl	80096d0 <getNewFirmwareStorageLocation>
 8009418:	4603      	mov	r3, r0
 800941a:	461a      	mov	r2, r3
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	4621      	mov	r1, r4
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 f80f 	bl	8009444 <FLASH_If_Write>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	d101      	bne.n	8009430 <WriteDatatoFlash+0x34>
//	if(FLASH_If_Write((uint64_t *)data,u32FotaChunckLength,enmBOOTSEGMENT_Y_JUMP,writeCycle) == FLASHIF_OK)

		return SUCCESS;
 800942c:	2301      	movs	r3, #1
 800942e:	e000      	b.n	8009432 <WriteDatatoFlash+0x36>
	else
		return FAIL;
 8009430:	2300      	movs	r3, #0
}
 8009432:	4618      	mov	r0, r3
 8009434:	370c      	adds	r7, #12
 8009436:	46bd      	mov	sp, r7
 8009438:	bd90      	pop	{r4, r7, pc}
 800943a:	bf00      	nop
 800943c:	200023e4 	.word	0x200023e4
 8009440:	20001a48 	.word	0x20001a48

08009444 <FLASH_If_Write>:
  * @retval 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint32_t FLASH_If_Write(uint64_t* Data ,uint32_t DataSize,enmBootMemorySegment BootMemoryRegion, uint32_t writeCycle)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b086      	sub	sp, #24
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	603b      	str	r3, [r7, #0]
 8009450:	4613      	mov	r3, r2
 8009452:	71fb      	strb	r3, [r7, #7]

   uint32_t sofar=0,numofwords = 0;
 8009454:	2300      	movs	r3, #0
 8009456:	617b      	str	r3, [r7, #20]
 8009458:	2300      	movs	r3, #0
 800945a:	613b      	str	r3, [r7, #16]

  numofwords = ((DataSize/8)+((DataSize%8)!=0));
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	08db      	lsrs	r3, r3, #3
 8009460:	68ba      	ldr	r2, [r7, #8]
 8009462:	f002 0207 	and.w	r2, r2, #7
 8009466:	2a00      	cmp	r2, #0
 8009468:	bf14      	ite	ne
 800946a:	2201      	movne	r2, #1
 800946c:	2200      	moveq	r2, #0
 800946e:	b2d2      	uxtb	r2, r2
 8009470:	4413      	add	r3, r2
 8009472:	613b      	str	r3, [r7, #16]

  if(BootMemoryRegion == enmBOOTSEGMENT_X_JUMP )
 8009474:	79fb      	ldrb	r3, [r7, #7]
 8009476:	2b02      	cmp	r3, #2
 8009478:	d147      	bne.n	800950a <FLASH_If_Write+0xc6>
  {
	  if(writeCycle == 1)
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	2b01      	cmp	r3, #1
 800947e:	d104      	bne.n	800948a <FLASH_If_Write+0x46>
	  		  u32MemoryDestination = FLASH_X_START_ADDR;
 8009480:	4b4a      	ldr	r3, [pc, #296]	; (80095ac <FLASH_If_Write+0x168>)
 8009482:	f04f 2208 	mov.w	r2, #134219776	; 0x8000800
 8009486:	601a      	str	r2, [r3, #0]
 8009488:	e003      	b.n	8009492 <FLASH_If_Write+0x4e>
	  else
		  u32MemoryDestination = u32LastMemoryWriteLocation;
 800948a:	4b49      	ldr	r3, [pc, #292]	; (80095b0 <FLASH_If_Write+0x16c>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a47      	ldr	r2, [pc, #284]	; (80095ac <FLASH_If_Write+0x168>)
 8009490:	6013      	str	r3, [r2, #0]

	  /* Unlock the Flash to enable the flash control register access *************/
	  FLASH_If_Init();
 8009492:	f7ff ffa1 	bl	80093d8 <FLASH_If_Init>

	 /* Program the user Flash area word by word
	  (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/
	  while (sofar<numofwords)
 8009496:	e02c      	b.n	80094f2 <FLASH_If_Write+0xae>
	  {
		  if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, u32MemoryDestination,*(uint64_t*)(Data+sofar)) == HAL_OK)
 8009498:	4b44      	ldr	r3, [pc, #272]	; (80095ac <FLASH_If_Write+0x168>)
 800949a:	6819      	ldr	r1, [r3, #0]
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	00db      	lsls	r3, r3, #3
 80094a0:	68fa      	ldr	r2, [r7, #12]
 80094a2:	4413      	add	r3, r2
 80094a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a8:	2000      	movs	r0, #0
 80094aa:	f004 fef9 	bl	800e2a0 <HAL_FLASH_Program>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d11a      	bne.n	80094ea <FLASH_If_Write+0xa6>
		  {
			  /* Check the written value */
			  if (*(uint64_t*)u32MemoryDestination != *(uint64_t*)(Data+sofar))
 80094b4:	4b3d      	ldr	r3, [pc, #244]	; (80095ac <FLASH_If_Write+0x168>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	00db      	lsls	r3, r3, #3
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	4413      	add	r3, r2
 80094c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c8:	4299      	cmp	r1, r3
 80094ca:	bf08      	it	eq
 80094cc:	4290      	cmpeq	r0, r2
 80094ce:	d003      	beq.n	80094d8 <FLASH_If_Write+0x94>
			  {
				  HAL_FLASH_Lock();
 80094d0:	f004 ff82 	bl	800e3d8 <HAL_FLASH_Lock>
				  /* Flash content doesn't match SRAM content */
				  return(FLASHIF_WRITEVERIFY_ERROR);
 80094d4:	2305      	movs	r3, #5
 80094d6:	e065      	b.n	80095a4 <FLASH_If_Write+0x160>

			  }
			  u32MemoryDestination += 8;  // use StartPageAddress += 2 for half word and 8 for double word
 80094d8:	4b34      	ldr	r3, [pc, #208]	; (80095ac <FLASH_If_Write+0x168>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	3308      	adds	r3, #8
 80094de:	4a33      	ldr	r2, [pc, #204]	; (80095ac <FLASH_If_Write+0x168>)
 80094e0:	6013      	str	r3, [r2, #0]
			  sofar++;
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	3301      	adds	r3, #1
 80094e6:	617b      	str	r3, [r7, #20]
 80094e8:	e003      	b.n	80094f2 <FLASH_If_Write+0xae>
		  else
		  {
			  /* Error occurred while writing data in Flash memory*/
			  /* Lock the Flash to disable the flash control register access (recommended
				      to protect the FLASH memory against possible unwanted operation) *********/
			  HAL_FLASH_Lock();
 80094ea:	f004 ff75 	bl	800e3d8 <HAL_FLASH_Lock>
			  return (FLASHIF_WRITING_ERROR);
 80094ee:	2304      	movs	r3, #4
 80094f0:	e058      	b.n	80095a4 <FLASH_If_Write+0x160>
	  while (sofar<numofwords)
 80094f2:	697a      	ldr	r2, [r7, #20]
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d3ce      	bcc.n	8009498 <FLASH_If_Write+0x54>
		  }
		}//end of while (sofar<numofwords)
		  /* Lock the Flash to disable the flash control register access (recommended
		  	      to protect the FLASH memory against possible unwanted operation) *********/
	  	  HAL_FLASH_Lock();
 80094fa:	f004 ff6d 	bl	800e3d8 <HAL_FLASH_Lock>
	  	 u32LastMemoryWriteLocation = u32MemoryDestination;
 80094fe:	4b2b      	ldr	r3, [pc, #172]	; (80095ac <FLASH_If_Write+0x168>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a2b      	ldr	r2, [pc, #172]	; (80095b0 <FLASH_If_Write+0x16c>)
 8009504:	6013      	str	r3, [r2, #0]
		  return (FLASHIF_OK);
 8009506:	2300      	movs	r3, #0
 8009508:	e04c      	b.n	80095a4 <FLASH_If_Write+0x160>
	}//end of if(BootMemoryRegion == enmBOOTSEGMENT_X_JUMP )

  else if(BootMemoryRegion == enmBOOTSEGMENT_Y_JUMP )
 800950a:	79fb      	ldrb	r3, [r7, #7]
 800950c:	2b03      	cmp	r3, #3
 800950e:	d146      	bne.n	800959e <FLASH_If_Write+0x15a>
    {
  	  if(writeCycle == 1)
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	2b01      	cmp	r3, #1
 8009514:	d103      	bne.n	800951e <FLASH_If_Write+0xda>
  	  		  u32MemoryDestination = FLASH_Y_START_ADDR;
 8009516:	4b25      	ldr	r3, [pc, #148]	; (80095ac <FLASH_If_Write+0x168>)
 8009518:	4a26      	ldr	r2, [pc, #152]	; (80095b4 <FLASH_If_Write+0x170>)
 800951a:	601a      	str	r2, [r3, #0]
 800951c:	e003      	b.n	8009526 <FLASH_If_Write+0xe2>
  	  else
  		  u32MemoryDestination = u32LastMemoryWriteLocation;
 800951e:	4b24      	ldr	r3, [pc, #144]	; (80095b0 <FLASH_If_Write+0x16c>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a22      	ldr	r2, [pc, #136]	; (80095ac <FLASH_If_Write+0x168>)
 8009524:	6013      	str	r3, [r2, #0]

  	  /* Unlock the Flash to enable the flash control register access *************/
  	  FLASH_If_Init();
 8009526:	f7ff ff57 	bl	80093d8 <FLASH_If_Init>

  	 /* Program the user Flash area word by word
  	  (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/
  	  while (sofar<numofwords)
 800952a:	e02c      	b.n	8009586 <FLASH_If_Write+0x142>
  	  {
  		  if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, u32MemoryDestination,*(uint64_t*)(Data+sofar)) == HAL_OK)
 800952c:	4b1f      	ldr	r3, [pc, #124]	; (80095ac <FLASH_If_Write+0x168>)
 800952e:	6819      	ldr	r1, [r3, #0]
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	00db      	lsls	r3, r3, #3
 8009534:	68fa      	ldr	r2, [r7, #12]
 8009536:	4413      	add	r3, r2
 8009538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953c:	2000      	movs	r0, #0
 800953e:	f004 feaf 	bl	800e2a0 <HAL_FLASH_Program>
 8009542:	4603      	mov	r3, r0
 8009544:	2b00      	cmp	r3, #0
 8009546:	d11a      	bne.n	800957e <FLASH_If_Write+0x13a>
  		  {
  			  /* Check the written value */
  			  if (*(uint64_t*)u32MemoryDestination != *(uint64_t*)(Data+sofar))
 8009548:	4b18      	ldr	r3, [pc, #96]	; (80095ac <FLASH_If_Write+0x168>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	00db      	lsls	r3, r3, #3
 8009554:	68fa      	ldr	r2, [r7, #12]
 8009556:	4413      	add	r3, r2
 8009558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800955c:	4299      	cmp	r1, r3
 800955e:	bf08      	it	eq
 8009560:	4290      	cmpeq	r0, r2
 8009562:	d003      	beq.n	800956c <FLASH_If_Write+0x128>
  			  {
  				  HAL_FLASH_Lock();
 8009564:	f004 ff38 	bl	800e3d8 <HAL_FLASH_Lock>
  				  /* Flash content doesn't match SRAM content */
  				  return(FLASHIF_WRITEVERIFY_ERROR);
 8009568:	2305      	movs	r3, #5
 800956a:	e01b      	b.n	80095a4 <FLASH_If_Write+0x160>

  			  }
  			  u32MemoryDestination += 8;  // use StartPageAddress += 2 for half word and 8 for double word
 800956c:	4b0f      	ldr	r3, [pc, #60]	; (80095ac <FLASH_If_Write+0x168>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	3308      	adds	r3, #8
 8009572:	4a0e      	ldr	r2, [pc, #56]	; (80095ac <FLASH_If_Write+0x168>)
 8009574:	6013      	str	r3, [r2, #0]
  			  sofar++;
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	3301      	adds	r3, #1
 800957a:	617b      	str	r3, [r7, #20]
 800957c:	e003      	b.n	8009586 <FLASH_If_Write+0x142>
  		  else
  		  {
  			  /* Error occurred while writing data in Flash memory*/
  			  /* Lock the Flash to disable the flash control register access (recommended
  				      to protect the FLASH memory against possible unwanted operation) *********/
  			  HAL_FLASH_Lock();
 800957e:	f004 ff2b 	bl	800e3d8 <HAL_FLASH_Lock>
  			  return (FLASHIF_WRITING_ERROR);
 8009582:	2304      	movs	r3, #4
 8009584:	e00e      	b.n	80095a4 <FLASH_If_Write+0x160>
  	  while (sofar<numofwords)
 8009586:	697a      	ldr	r2, [r7, #20]
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	429a      	cmp	r2, r3
 800958c:	d3ce      	bcc.n	800952c <FLASH_If_Write+0xe8>
  		  }
  		}//end of while (sofar<numofwords)
  		  /* Lock the Flash to disable the flash control register access (recommended
  		  	      to protect the FLASH memory against possible unwanted operation) *********/
  	  	  HAL_FLASH_Lock();
 800958e:	f004 ff23 	bl	800e3d8 <HAL_FLASH_Lock>
  	  	 u32LastMemoryWriteLocation = u32MemoryDestination;
 8009592:	4b06      	ldr	r3, [pc, #24]	; (80095ac <FLASH_If_Write+0x168>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a06      	ldr	r2, [pc, #24]	; (80095b0 <FLASH_If_Write+0x16c>)
 8009598:	6013      	str	r3, [r2, #0]
  		  return (FLASHIF_OK);
 800959a:	2300      	movs	r3, #0
 800959c:	e002      	b.n	80095a4 <FLASH_If_Write+0x160>
  	}//end of else if(BootMemoryRegion == enmBOOTSEGMENT_y_JUMP )
  else
  {
	  HAL_FLASH_Lock();
 800959e:	f004 ff1b 	bl	800e3d8 <HAL_FLASH_Lock>
	  return (FLASHIF_WRITING_ERROR);
 80095a2:	2304      	movs	r3, #4
  }


}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3718      	adds	r7, #24
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}
 80095ac:	200020d8 	.word	0x200020d8
 80095b0:	200020dc 	.word	0x200020dc
 80095b4:	08020000 	.word	0x08020000

080095b8 <GetPage>:


uint32_t GetPage(uint32_t Addr)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b085      	sub	sp, #20
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  uint32_t page = 0;
 80095c0:	2300      	movs	r3, #0
 80095c2:	60fb      	str	r3, [r7, #12]

  page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80095ca:	0adb      	lsrs	r3, r3, #11
 80095cc:	60fb      	str	r3, [r7, #12]
  return page;
 80095ce:	68fb      	ldr	r3, [r7, #12]
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3714      	adds	r7, #20
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <FLASH_If_Erase>:

uint32_t  FLASH_If_Erase(uint32_t state, enmBootMemorySegment BootMemoryRegion)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b086      	sub	sp, #24
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	460b      	mov	r3, r1
 80095e6:	70fb      	strb	r3, [r7, #3]
	uint32_t FirstPage = 0,EndPage = 0, NbOfPages = 0,PAGEError = 0;
 80095e8:	2300      	movs	r3, #0
 80095ea:	617b      	str	r3, [r7, #20]
 80095ec:	2300      	movs	r3, #0
 80095ee:	613b      	str	r3, [r7, #16]
 80095f0:	2300      	movs	r3, #0
 80095f2:	60fb      	str	r3, [r7, #12]
 80095f4:	2300      	movs	r3, #0
 80095f6:	60bb      	str	r3, [r7, #8]
	static FLASH_EraseInitTypeDef EraseInitStruct;

	if(BootMemoryRegion == enmBOOTSEGMENT_X_JUMP )
 80095f8:	78fb      	ldrb	r3, [r7, #3]
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d12b      	bne.n	8009656 <FLASH_If_Erase+0x7a>
	{
		/* Get the 1st page to erase */
		FirstPage = GetPage(FLASH_X_START_ADDR);
 80095fe:	f04f 2008 	mov.w	r0, #134219776	; 0x8000800
 8009602:	f7ff ffd9 	bl	80095b8 <GetPage>
 8009606:	6178      	str	r0, [r7, #20]

		/* Get the last page to erase */
		EndPage = GetPage(FLASH_X_END_ADDR);
 8009608:	482d      	ldr	r0, [pc, #180]	; (80096c0 <FLASH_If_Erase+0xe4>)
 800960a:	f7ff ffd5 	bl	80095b8 <GetPage>
 800960e:	6138      	str	r0, [r7, #16]

		/* Get the number of pages to erase from 1st page */
//		NbOfPages = ((EndPage - FirstPage))+1;
		NbOfPages = ((EndPage - FirstPage));
 8009610:	693a      	ldr	r2, [r7, #16]
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	1ad3      	subs	r3, r2, r3
 8009616:	60fb      	str	r3, [r7, #12]

		/* Fill EraseInit structure*/
		EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8009618:	4b2a      	ldr	r3, [pc, #168]	; (80096c4 <FLASH_If_Erase+0xe8>)
 800961a:	2200      	movs	r2, #0
 800961c:	601a      	str	r2, [r3, #0]
		EraseInitStruct.Banks     = FLASH_BANK_1;
 800961e:	4b29      	ldr	r3, [pc, #164]	; (80096c4 <FLASH_If_Erase+0xe8>)
 8009620:	2201      	movs	r2, #1
 8009622:	605a      	str	r2, [r3, #4]
		EraseInitStruct.Page		= FirstPage;
 8009624:	4a27      	ldr	r2, [pc, #156]	; (80096c4 <FLASH_If_Erase+0xe8>)
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	6093      	str	r3, [r2, #8]
		EraseInitStruct.NbPages	= NbOfPages;
 800962a:	4a26      	ldr	r2, [pc, #152]	; (80096c4 <FLASH_If_Erase+0xe8>)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	60d3      	str	r3, [r2, #12]

		/* Unlock the Flash to enable the flash control register access *************/
		FLASH_If_Init();
 8009630:	f7ff fed2 	bl	80093d8 <FLASH_If_Init>

		if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8009634:	f107 0308 	add.w	r3, r7, #8
 8009638:	4619      	mov	r1, r3
 800963a:	4822      	ldr	r0, [pc, #136]	; (80096c4 <FLASH_If_Erase+0xe8>)
 800963c:	f005 f824 	bl	800e688 <HAL_FLASHEx_Erase>
 8009640:	4603      	mov	r3, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d003      	beq.n	800964e <FLASH_If_Erase+0x72>
		{
			HAL_FLASH_Lock();
 8009646:	f004 fec7 	bl	800e3d8 <HAL_FLASH_Lock>
			return (FLASHIF_ERASE_ERROR);
 800964a:	2302      	movs	r3, #2
 800964c:	e034      	b.n	80096b8 <FLASH_If_Erase+0xdc>
		}
		else
		{
			HAL_FLASH_Lock();
 800964e:	f004 fec3 	bl	800e3d8 <HAL_FLASH_Lock>
			return (FLASHIF_ERASE_OK);
 8009652:	2301      	movs	r3, #1
 8009654:	e030      	b.n	80096b8 <FLASH_If_Erase+0xdc>
		}
	}// end of if(BootMemoryRegion == enmBOOTSEGMENT_X_JUMP )

	else if(BootMemoryRegion == enmBOOTSEGMENT_Y_JUMP )
 8009656:	78fb      	ldrb	r3, [r7, #3]
 8009658:	2b03      	cmp	r3, #3
 800965a:	d12a      	bne.n	80096b2 <FLASH_If_Erase+0xd6>
	{
		/* Get the 1st page to erase */
		FirstPage = GetPage(FLASH_Y_START_ADDR);
 800965c:	481a      	ldr	r0, [pc, #104]	; (80096c8 <FLASH_If_Erase+0xec>)
 800965e:	f7ff ffab 	bl	80095b8 <GetPage>
 8009662:	6178      	str	r0, [r7, #20]

		/* Get the last page to erase */
		EndPage = GetPage(FLASH_Y_END_ADDR);
 8009664:	4819      	ldr	r0, [pc, #100]	; (80096cc <FLASH_If_Erase+0xf0>)
 8009666:	f7ff ffa7 	bl	80095b8 <GetPage>
 800966a:	6138      	str	r0, [r7, #16]

		/* Get the number of pages to erase from 1st page */
		NbOfPages = ((EndPage - FirstPage));
 800966c:	693a      	ldr	r2, [r7, #16]
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	1ad3      	subs	r3, r2, r3
 8009672:	60fb      	str	r3, [r7, #12]

		/* Fill EraseInit structure*/
		EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8009674:	4b13      	ldr	r3, [pc, #76]	; (80096c4 <FLASH_If_Erase+0xe8>)
 8009676:	2200      	movs	r2, #0
 8009678:	601a      	str	r2, [r3, #0]
		EraseInitStruct.Banks     = FLASH_BANK_1;
 800967a:	4b12      	ldr	r3, [pc, #72]	; (80096c4 <FLASH_If_Erase+0xe8>)
 800967c:	2201      	movs	r2, #1
 800967e:	605a      	str	r2, [r3, #4]
		EraseInitStruct.Page		= FirstPage;
 8009680:	4a10      	ldr	r2, [pc, #64]	; (80096c4 <FLASH_If_Erase+0xe8>)
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	6093      	str	r3, [r2, #8]
		EraseInitStruct.NbPages	= NbOfPages;
 8009686:	4a0f      	ldr	r2, [pc, #60]	; (80096c4 <FLASH_If_Erase+0xe8>)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	60d3      	str	r3, [r2, #12]

		/* Unlock the Flash to enable the flash control register access *************/
		FLASH_If_Init();
 800968c:	f7ff fea4 	bl	80093d8 <FLASH_If_Init>

		if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8009690:	f107 0308 	add.w	r3, r7, #8
 8009694:	4619      	mov	r1, r3
 8009696:	480b      	ldr	r0, [pc, #44]	; (80096c4 <FLASH_If_Erase+0xe8>)
 8009698:	f004 fff6 	bl	800e688 <HAL_FLASHEx_Erase>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d003      	beq.n	80096aa <FLASH_If_Erase+0xce>
		{
			HAL_FLASH_Lock();
 80096a2:	f004 fe99 	bl	800e3d8 <HAL_FLASH_Lock>
			return (FLASHIF_ERASE_ERROR);
 80096a6:	2302      	movs	r3, #2
 80096a8:	e006      	b.n	80096b8 <FLASH_If_Erase+0xdc>
		}
		else
		{
			HAL_FLASH_Lock();
 80096aa:	f004 fe95 	bl	800e3d8 <HAL_FLASH_Lock>
			return (FLASHIF_ERASE_OK);
 80096ae:	2301      	movs	r3, #1
 80096b0:	e002      	b.n	80096b8 <FLASH_If_Erase+0xdc>
		}
	}// end of if(BootMemoryRegion == enmBOOTSEGMENT_Y_JUMP )
	else
	{
		HAL_FLASH_Lock();
 80096b2:	f004 fe91 	bl	800e3d8 <HAL_FLASH_Lock>
		return (FLASHIF_ERASE_ERROR);
 80096b6:	2302      	movs	r3, #2
	}
}//end of uint32_t  FLASH_If_Erase(uint32_t state, enmBootMemorySegment BootMemoryRegion)
 80096b8:	4618      	mov	r0, r3
 80096ba:	3718      	adds	r7, #24
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	0801f800 	.word	0x0801f800
 80096c4:	200020e4 	.word	0x200020e4
 80096c8:	08020000 	.word	0x08020000
 80096cc:	0803f000 	.word	0x0803f000

080096d0 <getNewFirmwareStorageLocation>:
 Change History:
 Author            	Date                Remarks
 KloudQ Team        30/03/2020			initial Definitions
******************************************************************************/
enmBootMemorySegment getNewFirmwareStorageLocation(void)
{
 80096d0:	b480      	push	{r7}
 80096d2:	af00      	add	r7, sp, #0
	if((BOOTMEMORYINFO == BOOT_MEM_X_JUMP) || (BOOTMEMORYINFO == BOOT_MEM_X))
 80096d4:	4b0c      	ldr	r3, [pc, #48]	; (8009708 <getNewFirmwareStorageLocation+0x38>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	2b58      	cmp	r3, #88	; 0x58
 80096da:	d003      	beq.n	80096e4 <getNewFirmwareStorageLocation+0x14>
 80096dc:	4b0a      	ldr	r3, [pc, #40]	; (8009708 <getNewFirmwareStorageLocation+0x38>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	2b7e      	cmp	r3, #126	; 0x7e
 80096e2:	d101      	bne.n	80096e8 <getNewFirmwareStorageLocation+0x18>
	{
		/* Current Firmware Location is in X-Memory Region .
		   Store New FW in Y Memory Region */
		return enmBOOTSEGMENT_Y_JUMP;
 80096e4:	2303      	movs	r3, #3
 80096e6:	e00a      	b.n	80096fe <getNewFirmwareStorageLocation+0x2e>

	}
	else if((BOOTMEMORYINFO == BOOT_MEM_Y_JUMP) || (BOOTMEMORYINFO == BOOT_MEM_Y))
 80096e8:	4b07      	ldr	r3, [pc, #28]	; (8009708 <getNewFirmwareStorageLocation+0x38>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2b59      	cmp	r3, #89	; 0x59
 80096ee:	d003      	beq.n	80096f8 <getNewFirmwareStorageLocation+0x28>
 80096f0:	4b05      	ldr	r3, [pc, #20]	; (8009708 <getNewFirmwareStorageLocation+0x38>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2b7f      	cmp	r3, #127	; 0x7f
 80096f6:	d101      	bne.n	80096fc <getNewFirmwareStorageLocation+0x2c>
	{
		/* Current Firmware Location is in Y-Memory Region .
		   Store New FW in X Memory Region */
		return enmBOOTSEGMENT_X_JUMP;
 80096f8:	2302      	movs	r3, #2
 80096fa:	e000      	b.n	80096fe <getNewFirmwareStorageLocation+0x2e>
	}
	else
	{
		/* Illegal Firmware Informations . Abort FOTA Jumping */
		return enmBOOTSEGMENT_Y_JUMP;
 80096fc:	2303      	movs	r3, #3
	}
}
 80096fe:	4618      	mov	r0, r3
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr
 8009708:	0803f800 	.word	0x0803f800

0800970c <flashWriteBootSection>:
 KloudQ Team        26/03/2020			initial Definitions
 Kloudq Team		27/03/2020			Wr/Rd Tested , Timeout added
******************************************************************************/
uint32_t gu32DataFromMemory = 0;
uint32_t flashWriteBootSection(enmBootMemorySegment memorySegment)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
 8009712:	4603      	mov	r3, r0
 8009714:	71fb      	strb	r3, [r7, #7]
	uint32_t u32TempDataBuffer = 0;
 8009716:	2300      	movs	r3, #0
 8009718:	60fb      	str	r3, [r7, #12]
	switch(memorySegment)
 800971a:	79fb      	ldrb	r3, [r7, #7]
 800971c:	2b03      	cmp	r3, #3
 800971e:	d863      	bhi.n	80097e8 <flashWriteBootSection+0xdc>
 8009720:	a201      	add	r2, pc, #4	; (adr r2, 8009728 <flashWriteBootSection+0x1c>)
 8009722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009726:	bf00      	nop
 8009728:	08009739 	.word	0x08009739
 800972c:	0800978d 	.word	0x0800978d
 8009730:	08009763 	.word	0x08009763
 8009734:	080097b7 	.word	0x080097b7
	{
		case enmBOOTSEGMENT_X:
			/* Will not be used during FOTA */
			if(EraseSinglePage(BOOTMEMORYADDRESS)== FLASHIF_ERASE_OK)
 8009738:	4836      	ldr	r0, [pc, #216]	; (8009814 <flashWriteBootSection+0x108>)
 800973a:	f000 f86f 	bl	800981c <EraseSinglePage>
 800973e:	4603      	mov	r3, r0
 8009740:	2b01      	cmp	r3, #1
 8009742:	d10a      	bne.n	800975a <flashWriteBootSection+0x4e>
			{
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, BOOTMEMORYADDRESS, BOOT_MEM_X);
 8009744:	f04f 027e 	mov.w	r2, #126	; 0x7e
 8009748:	f04f 0300 	mov.w	r3, #0
 800974c:	4931      	ldr	r1, [pc, #196]	; (8009814 <flashWriteBootSection+0x108>)
 800974e:	2000      	movs	r0, #0
 8009750:	f004 fda6 	bl	800e2a0 <HAL_FLASH_Program>
				u32TempDataBuffer = BOOT_MEM_X;
 8009754:	237e      	movs	r3, #126	; 0x7e
 8009756:	60fb      	str	r3, [r7, #12]
			else
			{
				HAL_FLASH_Lock();
				return 1;/* Memory Write Failed */
			}
			break;
 8009758:	e049      	b.n	80097ee <flashWriteBootSection+0xe2>
				HAL_FLASH_Lock();
 800975a:	f004 fe3d 	bl	800e3d8 <HAL_FLASH_Lock>
				return 1;/* Memory Write Failed */
 800975e:	2301      	movs	r3, #1
 8009760:	e053      	b.n	800980a <flashWriteBootSection+0xfe>
		case enmBOOTSEGMENT_X_JUMP:
			if(EraseSinglePage(BOOTMEMORYADDRESS)== FLASHIF_ERASE_OK)
 8009762:	482c      	ldr	r0, [pc, #176]	; (8009814 <flashWriteBootSection+0x108>)
 8009764:	f000 f85a 	bl	800981c <EraseSinglePage>
 8009768:	4603      	mov	r3, r0
 800976a:	2b01      	cmp	r3, #1
 800976c:	d10a      	bne.n	8009784 <flashWriteBootSection+0x78>
			{
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, BOOTMEMORYADDRESS, BOOT_MEM_X_JUMP);
 800976e:	f04f 0258 	mov.w	r2, #88	; 0x58
 8009772:	f04f 0300 	mov.w	r3, #0
 8009776:	4927      	ldr	r1, [pc, #156]	; (8009814 <flashWriteBootSection+0x108>)
 8009778:	2000      	movs	r0, #0
 800977a:	f004 fd91 	bl	800e2a0 <HAL_FLASH_Program>
				u32TempDataBuffer = BOOT_MEM_X_JUMP;
 800977e:	2358      	movs	r3, #88	; 0x58
 8009780:	60fb      	str	r3, [r7, #12]
			else
			{
				HAL_FLASH_Lock();
				return 1;/* Memory Write Failed */
			}
			break;
 8009782:	e034      	b.n	80097ee <flashWriteBootSection+0xe2>
				HAL_FLASH_Lock();
 8009784:	f004 fe28 	bl	800e3d8 <HAL_FLASH_Lock>
				return 1;/* Memory Write Failed */
 8009788:	2301      	movs	r3, #1
 800978a:	e03e      	b.n	800980a <flashWriteBootSection+0xfe>
		case enmBOOTSEGMENT_Y:
			/* Will not be used during FOTA */
			if(EraseSinglePage(BOOTMEMORYADDRESS)== FLASHIF_ERASE_OK)
 800978c:	4821      	ldr	r0, [pc, #132]	; (8009814 <flashWriteBootSection+0x108>)
 800978e:	f000 f845 	bl	800981c <EraseSinglePage>
 8009792:	4603      	mov	r3, r0
 8009794:	2b01      	cmp	r3, #1
 8009796:	d10a      	bne.n	80097ae <flashWriteBootSection+0xa2>
			{
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, BOOTMEMORYADDRESS, BOOT_MEM_Y);
 8009798:	f04f 027f 	mov.w	r2, #127	; 0x7f
 800979c:	f04f 0300 	mov.w	r3, #0
 80097a0:	491c      	ldr	r1, [pc, #112]	; (8009814 <flashWriteBootSection+0x108>)
 80097a2:	2000      	movs	r0, #0
 80097a4:	f004 fd7c 	bl	800e2a0 <HAL_FLASH_Program>
				u32TempDataBuffer = BOOT_MEM_Y;
 80097a8:	237f      	movs	r3, #127	; 0x7f
 80097aa:	60fb      	str	r3, [r7, #12]
			else
			{
				HAL_FLASH_Lock();
				return 1;/* Memory Write Failed */
			}
			break;
 80097ac:	e01f      	b.n	80097ee <flashWriteBootSection+0xe2>
				HAL_FLASH_Lock();
 80097ae:	f004 fe13 	bl	800e3d8 <HAL_FLASH_Lock>
				return 1;/* Memory Write Failed */
 80097b2:	2301      	movs	r3, #1
 80097b4:	e029      	b.n	800980a <flashWriteBootSection+0xfe>
		case enmBOOTSEGMENT_Y_JUMP:
			if(EraseSinglePage(BOOTMEMORYADDRESS)== FLASHIF_ERASE_OK)
 80097b6:	4817      	ldr	r0, [pc, #92]	; (8009814 <flashWriteBootSection+0x108>)
 80097b8:	f000 f830 	bl	800981c <EraseSinglePage>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d10e      	bne.n	80097e0 <flashWriteBootSection+0xd4>
			{
				/* Unlock the Flash to enable the flash control register access *************/
				FLASH_If_Init();
 80097c2:	f7ff fe09 	bl	80093d8 <FLASH_If_Init>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, BOOTMEMORYADDRESS, BOOT_MEM_Y_JUMP);
 80097c6:	f04f 0259 	mov.w	r2, #89	; 0x59
 80097ca:	f04f 0300 	mov.w	r3, #0
 80097ce:	4911      	ldr	r1, [pc, #68]	; (8009814 <flashWriteBootSection+0x108>)
 80097d0:	2000      	movs	r0, #0
 80097d2:	f004 fd65 	bl	800e2a0 <HAL_FLASH_Program>
				u32TempDataBuffer = BOOT_MEM_Y_JUMP;
 80097d6:	2359      	movs	r3, #89	; 0x59
 80097d8:	60fb      	str	r3, [r7, #12]
				HAL_FLASH_Lock();
 80097da:	f004 fdfd 	bl	800e3d8 <HAL_FLASH_Lock>
			else
			{
				HAL_FLASH_Lock();
				return 1;/* Memory Write Failed */
			}
			break;
 80097de:	e006      	b.n	80097ee <flashWriteBootSection+0xe2>
				HAL_FLASH_Lock();
 80097e0:	f004 fdfa 	bl	800e3d8 <HAL_FLASH_Lock>
				return 1;/* Memory Write Failed */
 80097e4:	2301      	movs	r3, #1
 80097e6:	e010      	b.n	800980a <flashWriteBootSection+0xfe>

		default:
			HAL_FLASH_Lock();
 80097e8:	f004 fdf6 	bl	800e3d8 <HAL_FLASH_Lock>
			break;
 80097ec:	bf00      	nop
	}

	HAL_FLASH_Lock();
 80097ee:	f004 fdf3 	bl	800e3d8 <HAL_FLASH_Lock>
	/* Verify Correctness of the data written */
	gu32DataFromMemory= *((uint32_t *) BOOTMEMORYADDRESS);
 80097f2:	4b08      	ldr	r3, [pc, #32]	; (8009814 <flashWriteBootSection+0x108>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a08      	ldr	r2, [pc, #32]	; (8009818 <flashWriteBootSection+0x10c>)
 80097f8:	6013      	str	r3, [r2, #0]
	if(gu32DataFromMemory == u32TempDataBuffer)
 80097fa:	4b07      	ldr	r3, [pc, #28]	; (8009818 <flashWriteBootSection+0x10c>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	68fa      	ldr	r2, [r7, #12]
 8009800:	429a      	cmp	r2, r3
 8009802:	d101      	bne.n	8009808 <flashWriteBootSection+0xfc>
		return 0; /* Memory Write Successful */
 8009804:	2300      	movs	r3, #0
 8009806:	e000      	b.n	800980a <flashWriteBootSection+0xfe>
	else
		return 1; /* Memory Write Failed */
 8009808:	2301      	movs	r3, #1

}
 800980a:	4618      	mov	r0, r3
 800980c:	3710      	adds	r7, #16
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
 8009812:	bf00      	nop
 8009814:	0803f800 	.word	0x0803f800
 8009818:	200020e0 	.word	0x200020e0

0800981c <EraseSinglePage>:

uint32_t EraseSinglePage(uint32_t EraseAddr)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b084      	sub	sp, #16
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError = 0;
 8009824:	2300      	movs	r3, #0
 8009826:	60fb      	str	r3, [r7, #12]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase	 = FLASH_TYPEERASE_PAGES;
 8009828:	4b12      	ldr	r3, [pc, #72]	; (8009874 <EraseSinglePage+0x58>)
 800982a:	2200      	movs	r2, #0
 800982c:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Banks    	 = FLASH_BANK_1;
 800982e:	4b11      	ldr	r3, [pc, #68]	; (8009874 <EraseSinglePage+0x58>)
 8009830:	2201      	movs	r2, #1
 8009832:	605a      	str	r2, [r3, #4]
	EraseInitStruct.Page		 = ((EraseAddr - FLASH_BASE) / FLASH_PAGE_SIZE);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800983a:	0adb      	lsrs	r3, r3, #11
 800983c:	4a0d      	ldr	r2, [pc, #52]	; (8009874 <EraseSinglePage+0x58>)
 800983e:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbPages		 = 1;
 8009840:	4b0c      	ldr	r3, [pc, #48]	; (8009874 <EraseSinglePage+0x58>)
 8009842:	2201      	movs	r2, #1
 8009844:	60da      	str	r2, [r3, #12]

	/* Unlock the Flash to enable the flash control register access *************/
	FLASH_If_Init();
 8009846:	f7ff fdc7 	bl	80093d8 <FLASH_If_Init>

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 800984a:	f107 030c 	add.w	r3, r7, #12
 800984e:	4619      	mov	r1, r3
 8009850:	4808      	ldr	r0, [pc, #32]	; (8009874 <EraseSinglePage+0x58>)
 8009852:	f004 ff19 	bl	800e688 <HAL_FLASHEx_Erase>
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d003      	beq.n	8009864 <EraseSinglePage+0x48>
	{
		HAL_FLASH_Lock();
 800985c:	f004 fdbc 	bl	800e3d8 <HAL_FLASH_Lock>
		return (FLASHIF_ERASE_ERROR);
 8009860:	2302      	movs	r3, #2
 8009862:	e002      	b.n	800986a <EraseSinglePage+0x4e>
	}
	else
	{
		HAL_FLASH_Lock();
 8009864:	f004 fdb8 	bl	800e3d8 <HAL_FLASH_Lock>
		return (FLASHIF_ERASE_OK);
 8009868:	2301      	movs	r3, #1
	}
}
 800986a:	4618      	mov	r0, r3
 800986c:	3710      	adds	r7, #16
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	200020f4 	.word	0x200020f4

08009878 <LL_USART_IsActiveFlag_TXE>:
{
 8009878:	b480      	push	{r7}
 800987a:	b083      	sub	sp, #12
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	69db      	ldr	r3, [r3, #28]
 8009884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009888:	2b80      	cmp	r3, #128	; 0x80
 800988a:	d101      	bne.n	8009890 <LL_USART_IsActiveFlag_TXE+0x18>
 800988c:	2301      	movs	r3, #1
 800988e:	e000      	b.n	8009892 <LL_USART_IsActiveFlag_TXE+0x1a>
 8009890:	2300      	movs	r3, #0
}
 8009892:	4618      	mov	r0, r3
 8009894:	370c      	adds	r7, #12
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr

0800989e <LL_USART_TransmitData8>:
{
 800989e:	b480      	push	{r7}
 80098a0:	b083      	sub	sp, #12
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
 80098a6:	460b      	mov	r3, r1
 80098a8:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 80098aa:	78fb      	ldrb	r3, [r7, #3]
 80098ac:	b29a      	uxth	r2, r3
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80098b2:	bf00      	nop
 80098b4:	370c      	adds	r7, #12
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr

080098be <modbusCRC16>:
 Change History:
 Author           	Date                Remarks
 KloudQ Team      11-04-18
******************************************************************************/
uint16_t modbusCRC16(uint8_t * data , uint8_t length)
{
 80098be:	b480      	push	{r7}
 80098c0:	b087      	sub	sp, #28
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
 80098c6:	460b      	mov	r3, r1
 80098c8:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0xFFFF;
 80098ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80098ce:	82fb      	strh	r3, [r7, #22]

	  for (int pos = 0; pos < length; pos++)
 80098d0:	2300      	movs	r3, #0
 80098d2:	613b      	str	r3, [r7, #16]
 80098d4:	e026      	b.n	8009924 <modbusCRC16+0x66>
	  {
	    crc ^= (uint16_t)data[pos];         // XOR byte into least sig. byte of crc
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	4413      	add	r3, r2
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	b29a      	uxth	r2, r3
 80098e0:	8afb      	ldrh	r3, [r7, #22]
 80098e2:	4053      	eors	r3, r2
 80098e4:	82fb      	strh	r3, [r7, #22]

	    for (int i = 8; i != 0; i--)  		// Loop over each bit
 80098e6:	2308      	movs	r3, #8
 80098e8:	60fb      	str	r3, [r7, #12]
 80098ea:	e015      	b.n	8009918 <modbusCRC16+0x5a>
	    {
	      if ((crc & 0x0001) != 0) 			// If the LSB is set
 80098ec:	8afb      	ldrh	r3, [r7, #22]
 80098ee:	f003 0301 	and.w	r3, r3, #1
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00a      	beq.n	800990c <modbusCRC16+0x4e>
	      {
	        crc >>= 1;                    	// Shift right and XOR 0xA001
 80098f6:	8afb      	ldrh	r3, [r7, #22]
 80098f8:	085b      	lsrs	r3, r3, #1
 80098fa:	82fb      	strh	r3, [r7, #22]
	        crc ^= 0xA001;
 80098fc:	8afb      	ldrh	r3, [r7, #22]
 80098fe:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8009902:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8009906:	43db      	mvns	r3, r3
 8009908:	82fb      	strh	r3, [r7, #22]
 800990a:	e002      	b.n	8009912 <modbusCRC16+0x54>
	      }
	      else                            	// Else LSB is not set
	        crc >>= 1;                    	// Just shift right
 800990c:	8afb      	ldrh	r3, [r7, #22]
 800990e:	085b      	lsrs	r3, r3, #1
 8009910:	82fb      	strh	r3, [r7, #22]
	    for (int i = 8; i != 0; i--)  		// Loop over each bit
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	3b01      	subs	r3, #1
 8009916:	60fb      	str	r3, [r7, #12]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d1e6      	bne.n	80098ec <modbusCRC16+0x2e>
	  for (int pos = 0; pos < length; pos++)
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	3301      	adds	r3, #1
 8009922:	613b      	str	r3, [r7, #16]
 8009924:	78fb      	ldrb	r3, [r7, #3]
 8009926:	693a      	ldr	r2, [r7, #16]
 8009928:	429a      	cmp	r2, r3
 800992a:	dbd4      	blt.n	80098d6 <modbusCRC16+0x18>
	    }
	  }
	  return crc;
 800992c:	8afb      	ldrh	r3, [r7, #22]
}
 800992e:	4618      	mov	r0, r3
 8009930:	371c      	adds	r7, #28
 8009932:	46bd      	mov	sp, r7
 8009934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009938:	4770      	bx	lr
	...

0800993c <updateModbusQueryFrame>:
 KloudQ Team 	   	11-04-18
 kloudQ Team	   	22-10-18			Update . Address Deference added
 Milind V			02-02-19			Updated Modbus query for Terex ONLY. It fetches 4 consecutive locations from register address 6
******************************************************************************/
void updateModbusQueryFrame(St_MBMaterQueryData *MbMasterQueryData)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
	uint16_t crc ;

	/* Form Query Frame String */
	memset(master.u8QueryFrame,0x00,sizeof(master.u8QueryFrame));
 8009944:	2208      	movs	r2, #8
 8009946:	2100      	movs	r1, #0
 8009948:	481e      	ldr	r0, [pc, #120]	; (80099c4 <updateModbusQueryFrame+0x88>)
 800994a:	f00c f84d 	bl	80159e8 <memset>

	master.u8QueryFrame[0] = MbMasterQueryData->u8MbSlaveID;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	781a      	ldrb	r2, [r3, #0]
 8009952:	4b1d      	ldr	r3, [pc, #116]	; (80099c8 <updateModbusQueryFrame+0x8c>)
 8009954:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	master.u8QueryFrame[1] = MbMasterQueryData->u8MbFunctionCode;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	785a      	ldrb	r2, [r3, #1]
 800995c:	4b1a      	ldr	r3, [pc, #104]	; (80099c8 <updateModbusQueryFrame+0x8c>)
 800995e:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	master.u8QueryFrame[2] = ((MbMasterQueryData->u16MbMbAddress - MB_ADDRESS_DEREF) >> 8);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	885b      	ldrh	r3, [r3, #2]
 8009966:	121b      	asrs	r3, r3, #8
 8009968:	b2da      	uxtb	r2, r3
 800996a:	4b17      	ldr	r3, [pc, #92]	; (80099c8 <updateModbusQueryFrame+0x8c>)
 800996c:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	master.u8QueryFrame[3] = ((MbMasterQueryData->u16MbMbAddress - MB_ADDRESS_DEREF)& 0xFF);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	885b      	ldrh	r3, [r3, #2]
 8009974:	b2da      	uxtb	r2, r3
 8009976:	4b14      	ldr	r3, [pc, #80]	; (80099c8 <updateModbusQueryFrame+0x8c>)
 8009978:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	master.u8QueryFrame[4] = ((MbMasterQueryData->u16MBNoPoints)>> 8);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	889b      	ldrh	r3, [r3, #4]
 8009980:	0a1b      	lsrs	r3, r3, #8
 8009982:	b29b      	uxth	r3, r3
 8009984:	b2da      	uxtb	r2, r3
 8009986:	4b10      	ldr	r3, [pc, #64]	; (80099c8 <updateModbusQueryFrame+0x8c>)
 8009988:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
	master.u8QueryFrame[5] = ((MbMasterQueryData->u16MBNoPoints) & 0xFF);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	889b      	ldrh	r3, [r3, #4]
 8009990:	b2da      	uxtb	r2, r3
 8009992:	4b0d      	ldr	r3, [pc, #52]	; (80099c8 <updateModbusQueryFrame+0x8c>)
 8009994:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
	crc = modbusCRC16(master.u8QueryFrame , 6);
 8009998:	2106      	movs	r1, #6
 800999a:	480a      	ldr	r0, [pc, #40]	; (80099c4 <updateModbusQueryFrame+0x88>)
 800999c:	f7ff ff8f 	bl	80098be <modbusCRC16>
 80099a0:	4603      	mov	r3, r0
 80099a2:	81fb      	strh	r3, [r7, #14]
	master.u8QueryFrame[6] = crc;
 80099a4:	89fb      	ldrh	r3, [r7, #14]
 80099a6:	b2da      	uxtb	r2, r3
 80099a8:	4b07      	ldr	r3, [pc, #28]	; (80099c8 <updateModbusQueryFrame+0x8c>)
 80099aa:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
	master.u8QueryFrame[7] = (crc >> 8);
 80099ae:	89fb      	ldrh	r3, [r7, #14]
 80099b0:	0a1b      	lsrs	r3, r3, #8
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	b2da      	uxtb	r2, r3
 80099b6:	4b04      	ldr	r3, [pc, #16]	; (80099c8 <updateModbusQueryFrame+0x8c>)
 80099b8:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
	/* End of Query Frame */


}
 80099bc:	bf00      	nop
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	20006c53 	.word	0x20006c53
 80099c8:	20006b4c 	.word	0x20006b4c

080099cc <ModbusMaster_FSM>:
 	 	 	 	 	 	 	 	 	 	Response Status Array Added
 Milind V		  02-02-19				Added code which sets and resets the RE and DE line for Tx and Rx of data in IDLE and SEND cases
 	 	 	 	 	 	 	 	 	 	Modified if else loop in SEND case
 ******************************************************************************/
void ModbusMaster_FSM(void)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b0d0      	sub	sp, #320	; 0x140
 80099d0:	af00      	add	r7, sp, #0
	static uint8_t s_u8TimeoutResponseQueryCntr = 0;
	static uint8_t u8MBQueryCharacterCounter = 0;
	uint16_t u16LoopCntr=0;
 80099d2:	2300      	movs	r3, #0
 80099d4:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e

	if(st_DeviceConfig.u8ModbusMaterEnFlag == 0)
 80099d8:	4b95      	ldr	r3, [pc, #596]	; (8009c30 <ModbusMaster_FSM+0x264>)
 80099da:	795b      	ldrb	r3, [r3, #5]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	f000 82bf 	beq.w	8009f60 <ModbusMaster_FSM+0x594>
	{
		return;
	}


	switch(modbusState)
 80099e2:	4b94      	ldr	r3, [pc, #592]	; (8009c34 <ModbusMaster_FSM+0x268>)
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	2b05      	cmp	r3, #5
 80099e8:	f200 82c3 	bhi.w	8009f72 <ModbusMaster_FSM+0x5a6>
 80099ec:	a201      	add	r2, pc, #4	; (adr r2, 80099f4 <ModbusMaster_FSM+0x28>)
 80099ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f2:	bf00      	nop
 80099f4:	08009a0d 	.word	0x08009a0d
 80099f8:	08009af1 	.word	0x08009af1
 80099fc:	08009b63 	.word	0x08009b63
 8009a00:	08009dd9 	.word	0x08009dd9
 8009a04:	08009e69 	.word	0x08009e69
 8009a08:	08009baf 	.word	0x08009baf
	{
		case enmMODBUS_IDLE:

			if(gu32ModbusPollDelay)
 8009a0c:	4b8a      	ldr	r3, [pc, #552]	; (8009c38 <ModbusMaster_FSM+0x26c>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	f040 82a7 	bne.w	8009f64 <ModbusMaster_FSM+0x598>
				break;

			/* Limit overflow of modbus operation state variable */
			if((master.u8MBOperationStatus != RESET) && (master.u8MBOperationStatus != SET))
 8009a16:	4b89      	ldr	r3, [pc, #548]	; (8009c3c <ModbusMaster_FSM+0x270>)
 8009a18:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d008      	beq.n	8009a32 <ModbusMaster_FSM+0x66>
 8009a20:	4b86      	ldr	r3, [pc, #536]	; (8009c3c <ModbusMaster_FSM+0x270>)
 8009a22:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d003      	beq.n	8009a32 <ModbusMaster_FSM+0x66>
			{
				master.u8MBOperationStatus = RESET;
 8009a2a:	4b84      	ldr	r3, [pc, #528]	; (8009c3c <ModbusMaster_FSM+0x270>)
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
			}

			//TODO remove Added for temporary testing
			master.u8MBOperationStatus = RESET;
 8009a32:	4b82      	ldr	r3, [pc, #520]	; (8009c3c <ModbusMaster_FSM+0x270>)
 8009a34:	2200      	movs	r2, #0
 8009a36:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8

			if(master.u8MBOperationStatus == RESET)
 8009a3a:	4b80      	ldr	r3, [pc, #512]	; (8009c3c <ModbusMaster_FSM+0x270>)
 8009a3c:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d14b      	bne.n	8009adc <ModbusMaster_FSM+0x110>
			{
				HAL_GPIO_WritePin(GPIOA,MB_DE_Pin,GPIO_PIN_SET);
 8009a44:	2201      	movs	r2, #1
 8009a46:	2102      	movs	r1, #2
 8009a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009a4c:	f005 faf8 	bl	800f040 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA,MB_RE_Pin,GPIO_PIN_SET);
 8009a50:	2201      	movs	r2, #1
 8009a52:	2101      	movs	r1, #1
 8009a54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009a58:	f005 faf2 	bl	800f040 <HAL_GPIO_WritePin>
				memset(master.u8SlaveResponseArray, 0x00, (30 * sizeof(int8_t)));
 8009a5c:	221e      	movs	r2, #30
 8009a5e:	2100      	movs	r1, #0
 8009a60:	4877      	ldr	r0, [pc, #476]	; (8009c40 <ModbusMaster_FSM+0x274>)
 8009a62:	f00b ffc1 	bl	80159e8 <memset>
				master.u8MBResponseCharacterCounter = 0;
 8009a66:	4b75      	ldr	r3, [pc, #468]	; (8009c3c <ModbusMaster_FSM+0x270>)
 8009a68:	2200      	movs	r2, #0
 8009a6a:	f883 21d7 	strb.w	r2, [r3, #471]	; 0x1d7
				gu8MBResponseFlag = 0;
 8009a6e:	4b75      	ldr	r3, [pc, #468]	; (8009c44 <ModbusMaster_FSM+0x278>)
 8009a70:	2200      	movs	r2, #0
 8009a72:	701a      	strb	r2, [r3, #0]

				if(u8MBQueryRegisterAddressCounter >= (st_DeviceConfig.u16MbTotalNoOfQuerys))
 8009a74:	4b74      	ldr	r3, [pc, #464]	; (8009c48 <ModbusMaster_FSM+0x27c>)
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	b29a      	uxth	r2, r3
 8009a7a:	4b6d      	ldr	r3, [pc, #436]	; (8009c30 <ModbusMaster_FSM+0x264>)
 8009a7c:	895b      	ldrh	r3, [r3, #10]
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d30b      	bcc.n	8009a9a <ModbusMaster_FSM+0xce>
				{
					u8MBQueryRegisterAddressCounter = 0;
 8009a82:	4b71      	ldr	r3, [pc, #452]	; (8009c48 <ModbusMaster_FSM+0x27c>)
 8009a84:	2200      	movs	r2, #0
 8009a86:	701a      	strb	r2, [r3, #0]
					gu32ModbusCycelRestartTmr = master.u32MbCycleRestartTmr;
 8009a88:	4b6c      	ldr	r3, [pc, #432]	; (8009c3c <ModbusMaster_FSM+0x270>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a6f      	ldr	r2, [pc, #444]	; (8009c4c <ModbusMaster_FSM+0x280>)
 8009a8e:	6013      	str	r3, [r2, #0]
					master.u8MBOperationStatus = SET;
 8009a90:	4b6a      	ldr	r3, [pc, #424]	; (8009c3c <ModbusMaster_FSM+0x270>)
 8009a92:	2201      	movs	r2, #1
 8009a94:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
					break;
 8009a98:	e26b      	b.n	8009f72 <ModbusMaster_FSM+0x5a6>
				}
				else
				{
					updateModbusQueryFrame(&(st_DeviceConfig.stMbMasterQuerysArr[u8MBQueryRegisterAddressCounter]));
 8009a9a:	4b6b      	ldr	r3, [pc, #428]	; (8009c48 <ModbusMaster_FSM+0x27c>)
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	4613      	mov	r3, r2
 8009aa2:	005b      	lsls	r3, r3, #1
 8009aa4:	4413      	add	r3, r2
 8009aa6:	005b      	lsls	r3, r3, #1
 8009aa8:	3308      	adds	r3, #8
 8009aaa:	4a61      	ldr	r2, [pc, #388]	; (8009c30 <ModbusMaster_FSM+0x264>)
 8009aac:	4413      	add	r3, r2
 8009aae:	3304      	adds	r3, #4
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f7ff ff43 	bl	800993c <updateModbusQueryFrame>
				}

				LL_USART_TransmitData8(USART2,master.u8QueryFrame[u8MBQueryCharacterCounter++]);
 8009ab6:	4b66      	ldr	r3, [pc, #408]	; (8009c50 <ModbusMaster_FSM+0x284>)
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	1c5a      	adds	r2, r3, #1
 8009abc:	b2d1      	uxtb	r1, r2
 8009abe:	4a64      	ldr	r2, [pc, #400]	; (8009c50 <ModbusMaster_FSM+0x284>)
 8009ac0:	7011      	strb	r1, [r2, #0]
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	4b5d      	ldr	r3, [pc, #372]	; (8009c3c <ModbusMaster_FSM+0x270>)
 8009ac6:	4413      	add	r3, r2
 8009ac8:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8009acc:	4619      	mov	r1, r3
 8009ace:	4861      	ldr	r0, [pc, #388]	; (8009c54 <ModbusMaster_FSM+0x288>)
 8009ad0:	f7ff fee5 	bl	800989e <LL_USART_TransmitData8>
				modbusState = enmMODBUS_SEND_QUERY;
 8009ad4:	4b57      	ldr	r3, [pc, #348]	; (8009c34 <ModbusMaster_FSM+0x268>)
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	701a      	strb	r2, [r3, #0]
				if(gu32ModbusCycelRestartTmr == 0)
				{
					master.u8MBOperationStatus = RESET;
				}
			}
			break;
 8009ada:	e245      	b.n	8009f68 <ModbusMaster_FSM+0x59c>
				if(gu32ModbusCycelRestartTmr == 0)
 8009adc:	4b5b      	ldr	r3, [pc, #364]	; (8009c4c <ModbusMaster_FSM+0x280>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	f040 8241 	bne.w	8009f68 <ModbusMaster_FSM+0x59c>
					master.u8MBOperationStatus = RESET;
 8009ae6:	4b55      	ldr	r3, [pc, #340]	; (8009c3c <ModbusMaster_FSM+0x270>)
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
			break;
 8009aee:	e23b      	b.n	8009f68 <ModbusMaster_FSM+0x59c>

		case enmMODBUS_SEND_QUERY:
			if(!LL_USART_IsActiveFlag_TXE(USART2))
 8009af0:	4858      	ldr	r0, [pc, #352]	; (8009c54 <ModbusMaster_FSM+0x288>)
 8009af2:	f7ff fec1 	bl	8009878 <LL_USART_IsActiveFlag_TXE>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	f000 8237 	beq.w	8009f6c <ModbusMaster_FSM+0x5a0>
			{
				/*No Nothing . Wait For Previous Character Transmission */
			}
			else
			{
				if(u8MBQueryCharacterCounter < 8)
 8009afe:	4b54      	ldr	r3, [pc, #336]	; (8009c50 <ModbusMaster_FSM+0x284>)
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	2b07      	cmp	r3, #7
 8009b04:	d80f      	bhi.n	8009b26 <ModbusMaster_FSM+0x15a>
				{
					LL_USART_TransmitData8(USART2,master.u8QueryFrame[u8MBQueryCharacterCounter++]);
 8009b06:	4b52      	ldr	r3, [pc, #328]	; (8009c50 <ModbusMaster_FSM+0x284>)
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	1c5a      	adds	r2, r3, #1
 8009b0c:	b2d1      	uxtb	r1, r2
 8009b0e:	4a50      	ldr	r2, [pc, #320]	; (8009c50 <ModbusMaster_FSM+0x284>)
 8009b10:	7011      	strb	r1, [r2, #0]
 8009b12:	461a      	mov	r2, r3
 8009b14:	4b49      	ldr	r3, [pc, #292]	; (8009c3c <ModbusMaster_FSM+0x270>)
 8009b16:	4413      	add	r3, r2
 8009b18:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	484d      	ldr	r0, [pc, #308]	; (8009c54 <ModbusMaster_FSM+0x288>)
 8009b20:	f7ff febd 	bl	800989e <LL_USART_TransmitData8>


				}

			}
			break;
 8009b24:	e222      	b.n	8009f6c <ModbusMaster_FSM+0x5a0>
					HAL_Delay(1);
 8009b26:	2001      	movs	r0, #1
 8009b28:	f000 fd08 	bl	800a53c <HAL_Delay>
					u8MBQueryCharacterCounter = 0;
 8009b2c:	4b48      	ldr	r3, [pc, #288]	; (8009c50 <ModbusMaster_FSM+0x284>)
 8009b2e:	2200      	movs	r2, #0
 8009b30:	701a      	strb	r2, [r3, #0]
					master.u8MBResponseCharacterCounter = 0;
 8009b32:	4b42      	ldr	r3, [pc, #264]	; (8009c3c <ModbusMaster_FSM+0x270>)
 8009b34:	2200      	movs	r2, #0
 8009b36:	f883 21d7 	strb.w	r2, [r3, #471]	; 0x1d7
					modbusState = enmMODBBUS_AWAIT_RESPONSE;
 8009b3a:	4b3e      	ldr	r3, [pc, #248]	; (8009c34 <ModbusMaster_FSM+0x268>)
 8009b3c:	2202      	movs	r2, #2
 8009b3e:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA,MB_DE_Pin,GPIO_PIN_RESET); // ~RE -> LOW - Tx disabled
 8009b40:	2200      	movs	r2, #0
 8009b42:	2102      	movs	r1, #2
 8009b44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009b48:	f005 fa7a 	bl	800f040 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,MB_RE_Pin,GPIO_PIN_RESET); // ~RE -> LOW - RCV enabled Tx disabled
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	2101      	movs	r1, #1
 8009b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009b54:	f005 fa74 	bl	800f040 <HAL_GPIO_WritePin>
					gu32ModbusResponseTimeout = master.u32MbResponseTimeout;
 8009b58:	4b38      	ldr	r3, [pc, #224]	; (8009c3c <ModbusMaster_FSM+0x270>)
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	4a3e      	ldr	r2, [pc, #248]	; (8009c58 <ModbusMaster_FSM+0x28c>)
 8009b5e:	6013      	str	r3, [r2, #0]
			break;
 8009b60:	e204      	b.n	8009f6c <ModbusMaster_FSM+0x5a0>

		case enmMODBBUS_AWAIT_RESPONSE:


			if((gu8MBResponseFlag == 1)&&(gu16ModbusFrameEndTimer == 0))
 8009b62:	4b38      	ldr	r3, [pc, #224]	; (8009c44 <ModbusMaster_FSM+0x278>)
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d116      	bne.n	8009b98 <ModbusMaster_FSM+0x1cc>
 8009b6a:	4b3c      	ldr	r3, [pc, #240]	; (8009c5c <ModbusMaster_FSM+0x290>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d112      	bne.n	8009b98 <ModbusMaster_FSM+0x1cc>
			{
				/* Check for EOF */
				//if((gu16ModbusFrameEndTimer == 0) && (gu32ModbusResponseTimeout != 0)) //change by Anil More
				if(gu16ModbusFrameEndTimer == 0)
 8009b72:	4b3a      	ldr	r3, [pc, #232]	; (8009c5c <ModbusMaster_FSM+0x290>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d106      	bne.n	8009b88 <ModbusMaster_FSM+0x1bc>
				{
					/* Response Frame Received . Parse Response */
					modbusState = enmMODBUS_PARSE_RESPONSE;
 8009b7a:	4b2e      	ldr	r3, [pc, #184]	; (8009c34 <ModbusMaster_FSM+0x268>)
 8009b7c:	2205      	movs	r2, #5
 8009b7e:	701a      	strb	r2, [r3, #0]
					gu8MBResponseFlag = 0;
 8009b80:	4b30      	ldr	r3, [pc, #192]	; (8009c44 <ModbusMaster_FSM+0x278>)
 8009b82:	2200      	movs	r2, #0
 8009b84:	701a      	strb	r2, [r3, #0]
				if(gu16ModbusFrameEndTimer == 0)
 8009b86:	e010      	b.n	8009baa <ModbusMaster_FSM+0x1de>
				}
				else if(gu32ModbusResponseTimeout == 0) /* Response Timeout */ //Added by Anil More.
 8009b88:	4b33      	ldr	r3, [pc, #204]	; (8009c58 <ModbusMaster_FSM+0x28c>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d10c      	bne.n	8009baa <ModbusMaster_FSM+0x1de>
				{
					modbusState = enmMODBUS_RESPONSE_TIMEOUT;
 8009b90:	4b28      	ldr	r3, [pc, #160]	; (8009c34 <ModbusMaster_FSM+0x268>)
 8009b92:	2204      	movs	r2, #4
 8009b94:	701a      	strb	r2, [r3, #0]
				if(gu16ModbusFrameEndTimer == 0)
 8009b96:	e008      	b.n	8009baa <ModbusMaster_FSM+0x1de>
				}
			}
			else
			{
				/* Response Timeout */
				if(gu32ModbusResponseTimeout == 0)
 8009b98:	4b2f      	ldr	r3, [pc, #188]	; (8009c58 <ModbusMaster_FSM+0x28c>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	f040 81e7 	bne.w	8009f70 <ModbusMaster_FSM+0x5a4>
					modbusState = enmMODBUS_RESPONSE_TIMEOUT;
 8009ba2:	4b24      	ldr	r3, [pc, #144]	; (8009c34 <ModbusMaster_FSM+0x268>)
 8009ba4:	2204      	movs	r2, #4
 8009ba6:	701a      	strb	r2, [r3, #0]
			}

			break;
 8009ba8:	e1e2      	b.n	8009f70 <ModbusMaster_FSM+0x5a4>
				if(gu16ModbusFrameEndTimer == 0)
 8009baa:	bf00      	nop
			break;
 8009bac:	e1e0      	b.n	8009f70 <ModbusMaster_FSM+0x5a4>

		case enmMODBUS_PARSE_RESPONSE:
			/* Process received response */
			if(master.u8SlaveResponseArray[0] == st_DeviceConfig.stMbMasterQuerysArr[u8MBQueryRegisterAddressCounter].u8MbFunctionCode)
 8009bae:	4b23      	ldr	r3, [pc, #140]	; (8009c3c <ModbusMaster_FSM+0x270>)
 8009bb0:	f893 210f 	ldrb.w	r2, [r3, #271]	; 0x10f
 8009bb4:	4b24      	ldr	r3, [pc, #144]	; (8009c48 <ModbusMaster_FSM+0x27c>)
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	4618      	mov	r0, r3
 8009bba:	491d      	ldr	r1, [pc, #116]	; (8009c30 <ModbusMaster_FSM+0x264>)
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	005b      	lsls	r3, r3, #1
 8009bc0:	4403      	add	r3, r0
 8009bc2:	005b      	lsls	r3, r3, #1
 8009bc4:	440b      	add	r3, r1
 8009bc6:	330d      	adds	r3, #13
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	f040 80c7 	bne.w	8009d5e <ModbusMaster_FSM+0x392>
			{
				uint8_t u8TempCRCArray[300];
				/* Function code and slave id is Correct .
				 * Verify CRC and Extract Number of data bytes*/
				memset((char *)u8TempCRCArray, 0, 100);
 8009bd0:	1d3b      	adds	r3, r7, #4
 8009bd2:	2264      	movs	r2, #100	; 0x64
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f00b ff06 	bl	80159e8 <memset>
				u8TempCRCArray[0] = st_DeviceConfig.stMbMasterQuerysArr[u8MBQueryRegisterAddressCounter].u8MbSlaveID;
 8009bdc:	4b1a      	ldr	r3, [pc, #104]	; (8009c48 <ModbusMaster_FSM+0x27c>)
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	4619      	mov	r1, r3
 8009be2:	4a13      	ldr	r2, [pc, #76]	; (8009c30 <ModbusMaster_FSM+0x264>)
 8009be4:	460b      	mov	r3, r1
 8009be6:	005b      	lsls	r3, r3, #1
 8009be8:	440b      	add	r3, r1
 8009bea:	005b      	lsls	r3, r3, #1
 8009bec:	4413      	add	r3, r2
 8009bee:	330c      	adds	r3, #12
 8009bf0:	781a      	ldrb	r2, [r3, #0]
 8009bf2:	1d3b      	adds	r3, r7, #4
 8009bf4:	701a      	strb	r2, [r3, #0]
				uint8_t u8MBNoDataBytes = (uint8_t)master.u8SlaveResponseArray[1];
 8009bf6:	4b11      	ldr	r3, [pc, #68]	; (8009c3c <ModbusMaster_FSM+0x270>)
 8009bf8:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009bfc:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
				uint32_t TempLoopVar = 0;
 8009c00:	2300      	movs	r3, #0
 8009c02:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

				if(u8MBQueryRegisterAddressCounter == 0)
 8009c06:	4b10      	ldr	r3, [pc, #64]	; (8009c48 <ModbusMaster_FSM+0x27c>)
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d104      	bne.n	8009c18 <ModbusMaster_FSM+0x24c>
				{
					ModbusBytesReceived = u8MBNoDataBytes;
 8009c0e:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009c12:	4a13      	ldr	r2, [pc, #76]	; (8009c60 <ModbusMaster_FSM+0x294>)
 8009c14:	6013      	str	r3, [r2, #0]
 8009c16:	e006      	b.n	8009c26 <ModbusMaster_FSM+0x25a>
				}
				else
				{
					ModbusBytesReceived += u8MBNoDataBytes;
 8009c18:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8009c1c:	4b10      	ldr	r3, [pc, #64]	; (8009c60 <ModbusMaster_FSM+0x294>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4413      	add	r3, r2
 8009c22:	4a0f      	ldr	r2, [pc, #60]	; (8009c60 <ModbusMaster_FSM+0x294>)
 8009c24:	6013      	str	r3, [r2, #0]
				}

				/* Add the data into array for CRC calculations */
				for(TempLoopVar =0; TempLoopVar < (u8MBNoDataBytes + 2); TempLoopVar++)
 8009c26:	2300      	movs	r3, #0
 8009c28:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8009c2c:	e02b      	b.n	8009c86 <ModbusMaster_FSM+0x2ba>
 8009c2e:	bf00      	nop
 8009c30:	200016e4 	.word	0x200016e4
 8009c34:	20002106 	.word	0x20002106
 8009c38:	20002114 	.word	0x20002114
 8009c3c:	20006b4c 	.word	0x20006b4c
 8009c40:	20006c5b 	.word	0x20006c5b
 8009c44:	20002104 	.word	0x20002104
 8009c48:	20002105 	.word	0x20002105
 8009c4c:	20002118 	.word	0x20002118
 8009c50:	2000211c 	.word	0x2000211c
 8009c54:	40004400 	.word	0x40004400
 8009c58:	20002110 	.word	0x20002110
 8009c5c:	2000210c 	.word	0x2000210c
 8009c60:	20002108 	.word	0x20002108
				{
					u8TempCRCArray[TempLoopVar + 1] = master.u8SlaveResponseArray[TempLoopVar];
 8009c64:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009c68:	3301      	adds	r3, #1
 8009c6a:	49a5      	ldr	r1, [pc, #660]	; (8009f00 <ModbusMaster_FSM+0x534>)
 8009c6c:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8009c70:	440a      	add	r2, r1
 8009c72:	f202 120f 	addw	r2, r2, #271	; 0x10f
 8009c76:	7811      	ldrb	r1, [r2, #0]
 8009c78:	1d3a      	adds	r2, r7, #4
 8009c7a:	54d1      	strb	r1, [r2, r3]
				for(TempLoopVar =0; TempLoopVar < (u8MBNoDataBytes + 2); TempLoopVar++)
 8009c7c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009c80:	3301      	adds	r3, #1
 8009c82:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8009c86:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009c8a:	3302      	adds	r3, #2
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d3e6      	bcc.n	8009c64 <ModbusMaster_FSM+0x298>
				}

				uint16_t u16TempCRC = modbusCRC16(u8TempCRCArray,(u8MBNoDataBytes + 3));
 8009c96:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009c9a:	3303      	adds	r3, #3
 8009c9c:	b2da      	uxtb	r2, r3
 8009c9e:	1d3b      	adds	r3, r7, #4
 8009ca0:	4611      	mov	r1, r2
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7ff fe0b 	bl	80098be <modbusCRC16>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
				uint8_t u8CRCHi = master.u8SlaveResponseArray[2 + u8MBNoDataBytes];    // CRC High Location
 8009cae:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009cb2:	3302      	adds	r3, #2
 8009cb4:	4a92      	ldr	r2, [pc, #584]	; (8009f00 <ModbusMaster_FSM+0x534>)
 8009cb6:	4413      	add	r3, r2
 8009cb8:	f893 310f 	ldrb.w	r3, [r3, #271]	; 0x10f
 8009cbc:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
				uint8_t u8CRCLow = master.u8SlaveResponseArray[2 + u8MBNoDataBytes + 1]; // CRC Low Location
 8009cc0:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009cc4:	3303      	adds	r3, #3
 8009cc6:	4a8e      	ldr	r2, [pc, #568]	; (8009f00 <ModbusMaster_FSM+0x534>)
 8009cc8:	4413      	add	r3, r2
 8009cca:	f893 310f 	ldrb.w	r3, [r3, #271]	; 0x10f
 8009cce:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132
				uint16_t u16ReceivedCRC =  (uint16_t)(u8CRCLow<<8)|(uint16_t)u8CRCHi;
 8009cd2:	f897 3132 	ldrb.w	r3, [r7, #306]	; 0x132
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	021b      	lsls	r3, r3, #8
 8009cda:	b29a      	uxth	r2, r3
 8009cdc:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130

				if(u16ReceivedCRC == u16TempCRC)
 8009ce8:	f8b7 2130 	ldrh.w	r2, [r7, #304]	; 0x130
 8009cec:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d130      	bne.n	8009d56 <ModbusMaster_FSM+0x38a>
				{
					s_u8TimeoutResponseQueryCntr = 0;
 8009cf4:	4b83      	ldr	r3, [pc, #524]	; (8009f04 <ModbusMaster_FSM+0x538>)
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_TogglePin(Comm_LED_GPIO_Port, Comm_LED_Pin);
 8009cfa:	2108      	movs	r1, #8
 8009cfc:	4882      	ldr	r0, [pc, #520]	; (8009f08 <ModbusMaster_FSM+0x53c>)
 8009cfe:	f005 f9cf 	bl	800f0a0 <HAL_GPIO_TogglePin>
					/* CRC is Correct */
//					/* Query Successful . Attempt Next Query with recommended delay */
					master.u16QueryNCCntrBufff[u8MBQueryRegisterAddressCounter] = 0;
 8009d02:	4b82      	ldr	r3, [pc, #520]	; (8009f0c <ModbusMaster_FSM+0x540>)
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	4a7e      	ldr	r2, [pc, #504]	; (8009f00 <ModbusMaster_FSM+0x534>)
 8009d08:	3350      	adds	r3, #80	; 0x50
 8009d0a:	005b      	lsls	r3, r3, #1
 8009d0c:	4413      	add	r3, r2
 8009d0e:	2200      	movs	r2, #0
 8009d10:	805a      	strh	r2, [r3, #2]
					master.enum_MBResponseStatusBuff[u8MBQueryRegisterAddressCounter] = enm_ResponseSucccess;
 8009d12:	4b7e      	ldr	r3, [pc, #504]	; (8009f0c <ModbusMaster_FSM+0x540>)
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	461a      	mov	r2, r3
 8009d18:	4b79      	ldr	r3, [pc, #484]	; (8009f00 <ModbusMaster_FSM+0x534>)
 8009d1a:	4413      	add	r3, r2
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
					MB_FillSlaveRawData(u8MBQueryRegisterAddressCounter,u8MBNoDataBytes);
 8009d22:	4b7a      	ldr	r3, [pc, #488]	; (8009f0c <ModbusMaster_FSM+0x540>)
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8009d2c:	b292      	uxth	r2, r2
 8009d2e:	4611      	mov	r1, r2
 8009d30:	4618      	mov	r0, r3
 8009d32:	f000 f93d 	bl	8009fb0 <MB_FillSlaveRawData>
					u8MBQueryRegisterAddressCounter++;
 8009d36:	4b75      	ldr	r3, [pc, #468]	; (8009f0c <ModbusMaster_FSM+0x540>)
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	b2da      	uxtb	r2, r3
 8009d3e:	4b73      	ldr	r3, [pc, #460]	; (8009f0c <ModbusMaster_FSM+0x540>)
 8009d40:	701a      	strb	r2, [r3, #0]

					resetModbusPort();
 8009d42:	f000 f925 	bl	8009f90 <resetModbusPort>
					gu32ModbusPollDelay = master.gu32ModbusPollDelay;
 8009d46:	4b6e      	ldr	r3, [pc, #440]	; (8009f00 <ModbusMaster_FSM+0x534>)
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	4a71      	ldr	r2, [pc, #452]	; (8009f10 <ModbusMaster_FSM+0x544>)
 8009d4c:	6013      	str	r3, [r2, #0]
					modbusState = enmMODBUS_IDLE;
 8009d4e:	4b71      	ldr	r3, [pc, #452]	; (8009f14 <ModbusMaster_FSM+0x548>)
 8009d50:	2200      	movs	r2, #0
 8009d52:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				modbusState = enmMODBUS_RETRY_QUERY;
			}
			break;
 8009d54:	e10d      	b.n	8009f72 <ModbusMaster_FSM+0x5a6>
					modbusState = enmMODBUS_RETRY_QUERY;
 8009d56:	4b6f      	ldr	r3, [pc, #444]	; (8009f14 <ModbusMaster_FSM+0x548>)
 8009d58:	2203      	movs	r2, #3
 8009d5a:	701a      	strb	r2, [r3, #0]
			break;
 8009d5c:	e109      	b.n	8009f72 <ModbusMaster_FSM+0x5a6>
			else if((master.u8SlaveResponseArray[0] & 0x80) == 0x80)
 8009d5e:	4b68      	ldr	r3, [pc, #416]	; (8009f00 <ModbusMaster_FSM+0x534>)
 8009d60:	f893 310f 	ldrb.w	r3, [r3, #271]	; 0x10f
 8009d64:	b25b      	sxtb	r3, r3
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	da32      	bge.n	8009dd0 <ModbusMaster_FSM+0x404>
				s_u8TimeoutResponseQueryCntr = 0;
 8009d6a:	4b66      	ldr	r3, [pc, #408]	; (8009f04 <ModbusMaster_FSM+0x538>)
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	701a      	strb	r2, [r3, #0]
				if(master.u16QueryNCCntrBufff[u8MBQueryRegisterAddressCounter]>3)
 8009d70:	4b66      	ldr	r3, [pc, #408]	; (8009f0c <ModbusMaster_FSM+0x540>)
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	4a62      	ldr	r2, [pc, #392]	; (8009f00 <ModbusMaster_FSM+0x534>)
 8009d76:	3350      	adds	r3, #80	; 0x50
 8009d78:	005b      	lsls	r3, r3, #1
 8009d7a:	4413      	add	r3, r2
 8009d7c:	885b      	ldrh	r3, [r3, #2]
 8009d7e:	2b03      	cmp	r3, #3
 8009d80:	d916      	bls.n	8009db0 <ModbusMaster_FSM+0x3e4>
					master.enum_MBResponseStatusBuff[u8MBQueryRegisterAddressCounter] = enm_ResponseException;  /*1 - Exception 0 - Success in query*/
 8009d82:	4b62      	ldr	r3, [pc, #392]	; (8009f0c <ModbusMaster_FSM+0x540>)
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	461a      	mov	r2, r3
 8009d88:	4b5d      	ldr	r3, [pc, #372]	; (8009f00 <ModbusMaster_FSM+0x534>)
 8009d8a:	4413      	add	r3, r2
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
					MB_FillSlaveRawData(u8MBQueryRegisterAddressCounter,0);
 8009d92:	4b5e      	ldr	r3, [pc, #376]	; (8009f0c <ModbusMaster_FSM+0x540>)
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	b29b      	uxth	r3, r3
 8009d98:	2100      	movs	r1, #0
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f000 f908 	bl	8009fb0 <MB_FillSlaveRawData>
					master.u16QueryNCCntrBufff[u8MBQueryRegisterAddressCounter]=0;
 8009da0:	4b5a      	ldr	r3, [pc, #360]	; (8009f0c <ModbusMaster_FSM+0x540>)
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	4a56      	ldr	r2, [pc, #344]	; (8009f00 <ModbusMaster_FSM+0x534>)
 8009da6:	3350      	adds	r3, #80	; 0x50
 8009da8:	005b      	lsls	r3, r3, #1
 8009daa:	4413      	add	r3, r2
 8009dac:	2200      	movs	r2, #0
 8009dae:	805a      	strh	r2, [r3, #2]
				u8MBQueryRegisterAddressCounter++;
 8009db0:	4b56      	ldr	r3, [pc, #344]	; (8009f0c <ModbusMaster_FSM+0x540>)
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	3301      	adds	r3, #1
 8009db6:	b2da      	uxtb	r2, r3
 8009db8:	4b54      	ldr	r3, [pc, #336]	; (8009f0c <ModbusMaster_FSM+0x540>)
 8009dba:	701a      	strb	r2, [r3, #0]
				resetModbusPort();
 8009dbc:	f000 f8e8 	bl	8009f90 <resetModbusPort>
				gu32ModbusPollDelay = master.gu32ModbusPollDelay;
 8009dc0:	4b4f      	ldr	r3, [pc, #316]	; (8009f00 <ModbusMaster_FSM+0x534>)
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	4a52      	ldr	r2, [pc, #328]	; (8009f10 <ModbusMaster_FSM+0x544>)
 8009dc6:	6013      	str	r3, [r2, #0]
				modbusState = enmMODBUS_IDLE;
 8009dc8:	4b52      	ldr	r3, [pc, #328]	; (8009f14 <ModbusMaster_FSM+0x548>)
 8009dca:	2200      	movs	r2, #0
 8009dcc:	701a      	strb	r2, [r3, #0]
			break;
 8009dce:	e0d0      	b.n	8009f72 <ModbusMaster_FSM+0x5a6>
				modbusState = enmMODBUS_RETRY_QUERY;
 8009dd0:	4b50      	ldr	r3, [pc, #320]	; (8009f14 <ModbusMaster_FSM+0x548>)
 8009dd2:	2203      	movs	r2, #3
 8009dd4:	701a      	strb	r2, [r3, #0]
			break;
 8009dd6:	e0cc      	b.n	8009f72 <ModbusMaster_FSM+0x5a6>

		case enmMODBUS_RETRY_QUERY:

			if(master.u8MBNoQueryAttempts > MB_QUERY_RETRY_ATTEMPTS)
 8009dd8:	4b49      	ldr	r3, [pc, #292]	; (8009f00 <ModbusMaster_FSM+0x534>)
 8009dda:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8009dde:	2b02      	cmp	r3, #2
 8009de0:	d930      	bls.n	8009e44 <ModbusMaster_FSM+0x478>
			{
				/* Max Retry Attempt Reached . Log Error and fetch Next Address */
				//master.u32SlaveData[u8MBQueryRegisterAddressCounter] = 0xFF;
				master.u16QueryNCCntrBufff[u8MBQueryRegisterAddressCounter]++;
 8009de2:	4b4a      	ldr	r3, [pc, #296]	; (8009f0c <ModbusMaster_FSM+0x540>)
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	461a      	mov	r2, r3
 8009de8:	4945      	ldr	r1, [pc, #276]	; (8009f00 <ModbusMaster_FSM+0x534>)
 8009dea:	f102 0350 	add.w	r3, r2, #80	; 0x50
 8009dee:	005b      	lsls	r3, r3, #1
 8009df0:	440b      	add	r3, r1
 8009df2:	885b      	ldrh	r3, [r3, #2]
 8009df4:	3301      	adds	r3, #1
 8009df6:	b298      	uxth	r0, r3
 8009df8:	4941      	ldr	r1, [pc, #260]	; (8009f00 <ModbusMaster_FSM+0x534>)
 8009dfa:	f102 0350 	add.w	r3, r2, #80	; 0x50
 8009dfe:	005b      	lsls	r3, r3, #1
 8009e00:	440b      	add	r3, r1
 8009e02:	4602      	mov	r2, r0
 8009e04:	805a      	strh	r2, [r3, #2]
				if(master.u16QueryNCCntrBufff[u8MBQueryRegisterAddressCounter]>4)
 8009e06:	4b41      	ldr	r3, [pc, #260]	; (8009f0c <ModbusMaster_FSM+0x540>)
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	4a3d      	ldr	r2, [pc, #244]	; (8009f00 <ModbusMaster_FSM+0x534>)
 8009e0c:	3350      	adds	r3, #80	; 0x50
 8009e0e:	005b      	lsls	r3, r3, #1
 8009e10:	4413      	add	r3, r2
 8009e12:	885b      	ldrh	r3, [r3, #2]
 8009e14:	2b04      	cmp	r3, #4
 8009e16:	d90e      	bls.n	8009e36 <ModbusMaster_FSM+0x46a>
				{
					master.enum_MBResponseStatusBuff[u8MBQueryRegisterAddressCounter] = enm_ResponseCRCInvalid;
 8009e18:	4b3c      	ldr	r3, [pc, #240]	; (8009f0c <ModbusMaster_FSM+0x540>)
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	4b38      	ldr	r3, [pc, #224]	; (8009f00 <ModbusMaster_FSM+0x534>)
 8009e20:	4413      	add	r3, r2
 8009e22:	2203      	movs	r2, #3
 8009e24:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
					MB_FillSlaveRawData(u8MBQueryRegisterAddressCounter,0);
 8009e28:	4b38      	ldr	r3, [pc, #224]	; (8009f0c <ModbusMaster_FSM+0x540>)
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	2100      	movs	r1, #0
 8009e30:	4618      	mov	r0, r3
 8009e32:	f000 f8bd 	bl	8009fb0 <MB_FillSlaveRawData>
				}
				u8MBQueryRegisterAddressCounter++;
 8009e36:	4b35      	ldr	r3, [pc, #212]	; (8009f0c <ModbusMaster_FSM+0x540>)
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	3301      	adds	r3, #1
 8009e3c:	b2da      	uxtb	r2, r3
 8009e3e:	4b33      	ldr	r3, [pc, #204]	; (8009f0c <ModbusMaster_FSM+0x540>)
 8009e40:	701a      	strb	r2, [r3, #0]
 8009e42:	e007      	b.n	8009e54 <ModbusMaster_FSM+0x488>
			}
			else
			{
				/* Retry Same Register Address Query */
				master.u8MBNoQueryAttempts++;
 8009e44:	4b2e      	ldr	r3, [pc, #184]	; (8009f00 <ModbusMaster_FSM+0x534>)
 8009e46:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	b2da      	uxtb	r2, r3
 8009e4e:	4b2c      	ldr	r3, [pc, #176]	; (8009f00 <ModbusMaster_FSM+0x534>)
 8009e50:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			}

			resetModbusPort();
 8009e54:	f000 f89c 	bl	8009f90 <resetModbusPort>
			gu32ModbusPollDelay = master.gu32ModbusPollDelay;
 8009e58:	4b29      	ldr	r3, [pc, #164]	; (8009f00 <ModbusMaster_FSM+0x534>)
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	4a2c      	ldr	r2, [pc, #176]	; (8009f10 <ModbusMaster_FSM+0x544>)
 8009e5e:	6013      	str	r3, [r2, #0]
			modbusState = enmMODBUS_IDLE;
 8009e60:	4b2c      	ldr	r3, [pc, #176]	; (8009f14 <ModbusMaster_FSM+0x548>)
 8009e62:	2200      	movs	r2, #0
 8009e64:	701a      	strb	r2, [r3, #0]
			break;
 8009e66:	e084      	b.n	8009f72 <ModbusMaster_FSM+0x5a6>

		case enmMODBUS_RESPONSE_TIMEOUT:
			/*  */
			/* Response Time Out*/

			master.u16QueryNCCntrBufff[u8MBQueryRegisterAddressCounter]++;
 8009e68:	4b28      	ldr	r3, [pc, #160]	; (8009f0c <ModbusMaster_FSM+0x540>)
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	4924      	ldr	r1, [pc, #144]	; (8009f00 <ModbusMaster_FSM+0x534>)
 8009e70:	f102 0350 	add.w	r3, r2, #80	; 0x50
 8009e74:	005b      	lsls	r3, r3, #1
 8009e76:	440b      	add	r3, r1
 8009e78:	885b      	ldrh	r3, [r3, #2]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	b298      	uxth	r0, r3
 8009e7e:	4920      	ldr	r1, [pc, #128]	; (8009f00 <ModbusMaster_FSM+0x534>)
 8009e80:	f102 0350 	add.w	r3, r2, #80	; 0x50
 8009e84:	005b      	lsls	r3, r3, #1
 8009e86:	440b      	add	r3, r1
 8009e88:	4602      	mov	r2, r0
 8009e8a:	805a      	strh	r2, [r3, #2]

			if(master.u16QueryNCCntrBufff[u8MBQueryRegisterAddressCounter]>4)
 8009e8c:	4b1f      	ldr	r3, [pc, #124]	; (8009f0c <ModbusMaster_FSM+0x540>)
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	4a1b      	ldr	r2, [pc, #108]	; (8009f00 <ModbusMaster_FSM+0x534>)
 8009e92:	3350      	adds	r3, #80	; 0x50
 8009e94:	005b      	lsls	r3, r3, #1
 8009e96:	4413      	add	r3, r2
 8009e98:	885b      	ldrh	r3, [r3, #2]
 8009e9a:	2b04      	cmp	r3, #4
 8009e9c:	d916      	bls.n	8009ecc <ModbusMaster_FSM+0x500>
			{
				master.enum_MBResponseStatusBuff[u8MBQueryRegisterAddressCounter] = enm_ResponseTimeOut;
 8009e9e:	4b1b      	ldr	r3, [pc, #108]	; (8009f0c <ModbusMaster_FSM+0x540>)
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	4b16      	ldr	r3, [pc, #88]	; (8009f00 <ModbusMaster_FSM+0x534>)
 8009ea6:	4413      	add	r3, r2
 8009ea8:	2202      	movs	r2, #2
 8009eaa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
				MB_FillSlaveRawData(u8MBQueryRegisterAddressCounter,0);
 8009eae:	4b17      	ldr	r3, [pc, #92]	; (8009f0c <ModbusMaster_FSM+0x540>)
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	2100      	movs	r1, #0
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f000 f87a 	bl	8009fb0 <MB_FillSlaveRawData>
				master.u16QueryNCCntrBufff[u8MBQueryRegisterAddressCounter] = 4;
 8009ebc:	4b13      	ldr	r3, [pc, #76]	; (8009f0c <ModbusMaster_FSM+0x540>)
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	4a0f      	ldr	r2, [pc, #60]	; (8009f00 <ModbusMaster_FSM+0x534>)
 8009ec2:	3350      	adds	r3, #80	; 0x50
 8009ec4:	005b      	lsls	r3, r3, #1
 8009ec6:	4413      	add	r3, r2
 8009ec8:	2204      	movs	r2, #4
 8009eca:	805a      	strh	r2, [r3, #2]
			}


			//This as per Vishal Request
			s_u8TimeoutResponseQueryCntr++;
 8009ecc:	4b0d      	ldr	r3, [pc, #52]	; (8009f04 <ModbusMaster_FSM+0x538>)
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	b2da      	uxtb	r2, r3
 8009ed4:	4b0b      	ldr	r3, [pc, #44]	; (8009f04 <ModbusMaster_FSM+0x538>)
 8009ed6:	701a      	strb	r2, [r3, #0]
			if(s_u8TimeoutResponseQueryCntr > st_DeviceConfig.u16MbTotalNoOfQuerys)
 8009ed8:	4b0a      	ldr	r3, [pc, #40]	; (8009f04 <ModbusMaster_FSM+0x538>)
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	b29a      	uxth	r2, r3
 8009ede:	4b0e      	ldr	r3, [pc, #56]	; (8009f18 <ModbusMaster_FSM+0x54c>)
 8009ee0:	895b      	ldrh	r3, [r3, #10]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d92c      	bls.n	8009f40 <ModbusMaster_FSM+0x574>
			{
				s_u8TimeoutResponseQueryCntr = 0;
 8009ee6:	4b07      	ldr	r3, [pc, #28]	; (8009f04 <ModbusMaster_FSM+0x538>)
 8009ee8:	2200      	movs	r2, #0
 8009eea:	701a      	strb	r2, [r3, #0]

				//OFF The LED
				HAL_GPIO_WritePin(Comm_LED_GPIO_Port, Comm_LED_Pin,GPIO_PIN_RESET);
 8009eec:	2200      	movs	r2, #0
 8009eee:	2108      	movs	r1, #8
 8009ef0:	4805      	ldr	r0, [pc, #20]	; (8009f08 <ModbusMaster_FSM+0x53c>)
 8009ef2:	f005 f8a5 	bl	800f040 <HAL_GPIO_WritePin>

				//Declare all Response
				for(u16LoopCntr=0;u16LoopCntr<st_DeviceConfig.u16MbTotalNoOfQuerys ; u16LoopCntr++)
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8009efc:	e01a      	b.n	8009f34 <ModbusMaster_FSM+0x568>
 8009efe:	bf00      	nop
 8009f00:	20006b4c 	.word	0x20006b4c
 8009f04:	2000211d 	.word	0x2000211d
 8009f08:	48000400 	.word	0x48000400
 8009f0c:	20002105 	.word	0x20002105
 8009f10:	20002114 	.word	0x20002114
 8009f14:	20002106 	.word	0x20002106
 8009f18:	200016e4 	.word	0x200016e4
				{
					master.enum_MBResponseStatusBuff[u16LoopCntr] = enm_ResponseTimeOut;
 8009f1c:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8009f20:	4a16      	ldr	r2, [pc, #88]	; (8009f7c <ModbusMaster_FSM+0x5b0>)
 8009f22:	4413      	add	r3, r2
 8009f24:	2202      	movs	r2, #2
 8009f26:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
				for(u16LoopCntr=0;u16LoopCntr<st_DeviceConfig.u16MbTotalNoOfQuerys ; u16LoopCntr++)
 8009f2a:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8009f2e:	3301      	adds	r3, #1
 8009f30:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8009f34:	4b12      	ldr	r3, [pc, #72]	; (8009f80 <ModbusMaster_FSM+0x5b4>)
 8009f36:	895b      	ldrh	r3, [r3, #10]
 8009f38:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d3ed      	bcc.n	8009f1c <ModbusMaster_FSM+0x550>
				}
			}

			u8MBQueryRegisterAddressCounter++;
 8009f40:	4b10      	ldr	r3, [pc, #64]	; (8009f84 <ModbusMaster_FSM+0x5b8>)
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	3301      	adds	r3, #1
 8009f46:	b2da      	uxtb	r2, r3
 8009f48:	4b0e      	ldr	r3, [pc, #56]	; (8009f84 <ModbusMaster_FSM+0x5b8>)
 8009f4a:	701a      	strb	r2, [r3, #0]
			resetModbusPort();
 8009f4c:	f000 f820 	bl	8009f90 <resetModbusPort>
			gu32ModbusPollDelay = FIVEHUNDRED_MS;/*500 ms For enmMODBUS_IDLE state */
 8009f50:	4b0d      	ldr	r3, [pc, #52]	; (8009f88 <ModbusMaster_FSM+0x5bc>)
 8009f52:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009f56:	601a      	str	r2, [r3, #0]
			modbusState = enmMODBUS_IDLE;
 8009f58:	4b0c      	ldr	r3, [pc, #48]	; (8009f8c <ModbusMaster_FSM+0x5c0>)
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	701a      	strb	r2, [r3, #0]
			break;
 8009f5e:	e008      	b.n	8009f72 <ModbusMaster_FSM+0x5a6>
		return;
 8009f60:	bf00      	nop
 8009f62:	e006      	b.n	8009f72 <ModbusMaster_FSM+0x5a6>
				break;
 8009f64:	bf00      	nop
 8009f66:	e004      	b.n	8009f72 <ModbusMaster_FSM+0x5a6>
			break;
 8009f68:	bf00      	nop
 8009f6a:	e002      	b.n	8009f72 <ModbusMaster_FSM+0x5a6>
			break;
 8009f6c:	bf00      	nop
 8009f6e:	e000      	b.n	8009f72 <ModbusMaster_FSM+0x5a6>
			break;
 8009f70:	bf00      	nop
	}
}
 8009f72:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	20006b4c 	.word	0x20006b4c
 8009f80:	200016e4 	.word	0x200016e4
 8009f84:	20002105 	.word	0x20002105
 8009f88:	20002114 	.word	0x20002114
 8009f8c:	20002106 	.word	0x20002106

08009f90 <resetModbusPort>:

void resetModbusPort()
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,MB_DE_Pin,GPIO_PIN_RESET);
 8009f94:	2200      	movs	r2, #0
 8009f96:	2102      	movs	r1, #2
 8009f98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009f9c:	f005 f850 	bl	800f040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,MB_RE_Pin,GPIO_PIN_SET);
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	2101      	movs	r1, #1
 8009fa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009fa8:	f005 f84a 	bl	800f040 <HAL_GPIO_WritePin>
}
 8009fac:	bf00      	nop
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <MB_FillSlaveRawData>:
 Author           	Date                Remarks
 Anil More		    23-05-2022

******************************************************************************/
static void MB_FillSlaveRawData(uint16_t u16QueryCntr, uint16_t u16NumberofBytesReceived)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b085      	sub	sp, #20
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	460a      	mov	r2, r1
 8009fba:	80fb      	strh	r3, [r7, #6]
 8009fbc:	4613      	mov	r3, r2
 8009fbe:	80bb      	strh	r3, [r7, #4]

	uint16_t u16DataFillStartIndex = 0;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	81fb      	strh	r3, [r7, #14]
	uint16_t u16LoopCntr= 0;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	81bb      	strh	r3, [r7, #12]
	if(st_DeviceConfig.u16MbTotalNoOfQuerys > u16QueryCntr)
 8009fc8:	4b31      	ldr	r3, [pc, #196]	; (800a090 <MB_FillSlaveRawData+0xe0>)
 8009fca:	895b      	ldrh	r3, [r3, #10]
 8009fcc:	88fa      	ldrh	r2, [r7, #6]
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d258      	bcs.n	800a084 <MB_FillSlaveRawData+0xd4>
	{
		/*Step 1: Calculate the start index for the store data of the respective query*/
			for(u16LoopCntr=0;u16LoopCntr<u16QueryCntr;u16LoopCntr++)
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	81bb      	strh	r3, [r7, #12]
 8009fd6:	e00b      	b.n	8009ff0 <MB_FillSlaveRawData+0x40>
			{
				u16DataFillStartIndex += master.u16NoOfBytesForValidResponse[u16LoopCntr];
 8009fd8:	89bb      	ldrh	r3, [r7, #12]
 8009fda:	4a2e      	ldr	r2, [pc, #184]	; (800a094 <MB_FillSlaveRawData+0xe4>)
 8009fdc:	3304      	adds	r3, #4
 8009fde:	005b      	lsls	r3, r3, #1
 8009fe0:	4413      	add	r3, r2
 8009fe2:	889a      	ldrh	r2, [r3, #4]
 8009fe4:	89fb      	ldrh	r3, [r7, #14]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	81fb      	strh	r3, [r7, #14]
			for(u16LoopCntr=0;u16LoopCntr<u16QueryCntr;u16LoopCntr++)
 8009fea:	89bb      	ldrh	r3, [r7, #12]
 8009fec:	3301      	adds	r3, #1
 8009fee:	81bb      	strh	r3, [r7, #12]
 8009ff0:	89ba      	ldrh	r2, [r7, #12]
 8009ff2:	88fb      	ldrh	r3, [r7, #6]
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d3ef      	bcc.n	8009fd8 <MB_FillSlaveRawData+0x28>
		 *   2) Number of bytes received are same as expected Bytes
		 *  If the above two conditions are true Then Fill The Received Raw data in the master.u8SlaveData buffer
		 *  If any condition is false in the above 2 conditions, fill the zero data.
		 */

			if((master.enum_MBResponseStatusBuff[u16QueryCntr] == enm_ResponseSucccess)&&
 8009ff8:	88fb      	ldrh	r3, [r7, #6]
 8009ffa:	4a26      	ldr	r2, [pc, #152]	; (800a094 <MB_FillSlaveRawData+0xe4>)
 8009ffc:	4413      	add	r3, r2
 8009ffe:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a002:	2b00      	cmp	r3, #0
 800a004:	d126      	bne.n	800a054 <MB_FillSlaveRawData+0xa4>
					(u16NumberofBytesReceived ==  master.u16NoOfBytesForValidResponse[u16QueryCntr] ))
 800a006:	88fb      	ldrh	r3, [r7, #6]
 800a008:	4a22      	ldr	r2, [pc, #136]	; (800a094 <MB_FillSlaveRawData+0xe4>)
 800a00a:	3304      	adds	r3, #4
 800a00c:	005b      	lsls	r3, r3, #1
 800a00e:	4413      	add	r3, r2
 800a010:	889b      	ldrh	r3, [r3, #4]
			if((master.enum_MBResponseStatusBuff[u16QueryCntr] == enm_ResponseSucccess)&&
 800a012:	88ba      	ldrh	r2, [r7, #4]
 800a014:	429a      	cmp	r2, r3
 800a016:	d11d      	bne.n	800a054 <MB_FillSlaveRawData+0xa4>
			{
				/*communication established successfully Fill Response data*/
				for(u16LoopCntr=0;u16LoopCntr<master.u16NoOfBytesForValidResponse[u16QueryCntr];u16LoopCntr++)
 800a018:	2300      	movs	r3, #0
 800a01a:	81bb      	strh	r3, [r7, #12]
 800a01c:	e010      	b.n	800a040 <MB_FillSlaveRawData+0x90>
				{
					master.u8SlaveData[u16DataFillStartIndex+u16LoopCntr]= master.u8SlaveResponseArray[2+u16LoopCntr];
 800a01e:	89bb      	ldrh	r3, [r7, #12]
 800a020:	1c9a      	adds	r2, r3, #2
 800a022:	89f9      	ldrh	r1, [r7, #14]
 800a024:	89bb      	ldrh	r3, [r7, #12]
 800a026:	440b      	add	r3, r1
 800a028:	491a      	ldr	r1, [pc, #104]	; (800a094 <MB_FillSlaveRawData+0xe4>)
 800a02a:	440a      	add	r2, r1
 800a02c:	f892 110f 	ldrb.w	r1, [r2, #271]	; 0x10f
 800a030:	4a18      	ldr	r2, [pc, #96]	; (800a094 <MB_FillSlaveRawData+0xe4>)
 800a032:	4413      	add	r3, r2
 800a034:	460a      	mov	r2, r1
 800a036:	f883 21d9 	strb.w	r2, [r3, #473]	; 0x1d9
				for(u16LoopCntr=0;u16LoopCntr<master.u16NoOfBytesForValidResponse[u16QueryCntr];u16LoopCntr++)
 800a03a:	89bb      	ldrh	r3, [r7, #12]
 800a03c:	3301      	adds	r3, #1
 800a03e:	81bb      	strh	r3, [r7, #12]
 800a040:	88fb      	ldrh	r3, [r7, #6]
 800a042:	4a14      	ldr	r2, [pc, #80]	; (800a094 <MB_FillSlaveRawData+0xe4>)
 800a044:	3304      	adds	r3, #4
 800a046:	005b      	lsls	r3, r3, #1
 800a048:	4413      	add	r3, r2
 800a04a:	889b      	ldrh	r3, [r3, #4]
 800a04c:	89ba      	ldrh	r2, [r7, #12]
 800a04e:	429a      	cmp	r2, r3
 800a050:	d3e5      	bcc.n	800a01e <MB_FillSlaveRawData+0x6e>
			if((master.enum_MBResponseStatusBuff[u16QueryCntr] == enm_ResponseSucccess)&&
 800a052:	e017      	b.n	800a084 <MB_FillSlaveRawData+0xd4>
				}
			}
			else
			{
				/*Something went wrong Either Timeout Error or CRC error or garbage data received*/
				for(u16LoopCntr=0;u16LoopCntr<master.u16NoOfBytesForValidResponse[u16QueryCntr];u16LoopCntr++)
 800a054:	2300      	movs	r3, #0
 800a056:	81bb      	strh	r3, [r7, #12]
 800a058:	e00a      	b.n	800a070 <MB_FillSlaveRawData+0xc0>
				{
					master.u8SlaveData[u16DataFillStartIndex+u16LoopCntr]= 0;
 800a05a:	89fa      	ldrh	r2, [r7, #14]
 800a05c:	89bb      	ldrh	r3, [r7, #12]
 800a05e:	4413      	add	r3, r2
 800a060:	4a0c      	ldr	r2, [pc, #48]	; (800a094 <MB_FillSlaveRawData+0xe4>)
 800a062:	4413      	add	r3, r2
 800a064:	2200      	movs	r2, #0
 800a066:	f883 21d9 	strb.w	r2, [r3, #473]	; 0x1d9
				for(u16LoopCntr=0;u16LoopCntr<master.u16NoOfBytesForValidResponse[u16QueryCntr];u16LoopCntr++)
 800a06a:	89bb      	ldrh	r3, [r7, #12]
 800a06c:	3301      	adds	r3, #1
 800a06e:	81bb      	strh	r3, [r7, #12]
 800a070:	88fb      	ldrh	r3, [r7, #6]
 800a072:	4a08      	ldr	r2, [pc, #32]	; (800a094 <MB_FillSlaveRawData+0xe4>)
 800a074:	3304      	adds	r3, #4
 800a076:	005b      	lsls	r3, r3, #1
 800a078:	4413      	add	r3, r2
 800a07a:	889b      	ldrh	r3, [r3, #4]
 800a07c:	89ba      	ldrh	r2, [r7, #12]
 800a07e:	429a      	cmp	r2, r3
 800a080:	d3eb      	bcc.n	800a05a <MB_FillSlaveRawData+0xaa>
	else
	{
		//DO Nothing
		//Invalid State
	}
}
 800a082:	e7ff      	b.n	800a084 <MB_FillSlaveRawData+0xd4>
 800a084:	bf00      	nop
 800a086:	3714      	adds	r7, #20
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr
 800a090:	200016e4 	.word	0x200016e4
 800a094:	20006b4c 	.word	0x20006b4c

0800a098 <getrtcStamp>:
 Change History:
 Author           	Date                Remarks
 KloudQ Team      11-04-18
******************************************************************************/
void getrtcStamp(void)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc,&STime1,RTC_FORMAT_BCD);
 800a09c:	2201      	movs	r2, #1
 800a09e:	4926      	ldr	r1, [pc, #152]	; (800a138 <getrtcStamp+0xa0>)
 800a0a0:	4826      	ldr	r0, [pc, #152]	; (800a13c <getrtcStamp+0xa4>)
 800a0a2:	f008 fd2b 	bl	8012afc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc,&SDate1,RTC_FORMAT_BCD);
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	4925      	ldr	r1, [pc, #148]	; (800a140 <getrtcStamp+0xa8>)
 800a0aa:	4824      	ldr	r0, [pc, #144]	; (800a13c <getrtcStamp+0xa4>)
 800a0ac:	f008 fea0 	bl	8012df0 <HAL_RTC_GetDate>

	itoa(BCDToDecimal(SDate1.Year),gau8Year,PAYLOAD_DATA_STRING_RADIX);
 800a0b0:	4b23      	ldr	r3, [pc, #140]	; (800a140 <getrtcStamp+0xa8>)
 800a0b2:	78db      	ldrb	r3, [r3, #3]
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f000 f86f 	bl	800a198 <BCDToDecimal>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	220a      	movs	r2, #10
 800a0be:	4921      	ldr	r1, [pc, #132]	; (800a144 <getrtcStamp+0xac>)
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f00b fc71 	bl	80159a8 <itoa>
	itoa(BCDToDecimal(SDate1.Month),gau8Month,PAYLOAD_DATA_STRING_RADIX);
 800a0c6:	4b1e      	ldr	r3, [pc, #120]	; (800a140 <getrtcStamp+0xa8>)
 800a0c8:	785b      	ldrb	r3, [r3, #1]
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f000 f864 	bl	800a198 <BCDToDecimal>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	220a      	movs	r2, #10
 800a0d4:	491c      	ldr	r1, [pc, #112]	; (800a148 <getrtcStamp+0xb0>)
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f00b fc66 	bl	80159a8 <itoa>
	itoa(BCDToDecimal(SDate1.Date),gau8Date,PAYLOAD_DATA_STRING_RADIX);
 800a0dc:	4b18      	ldr	r3, [pc, #96]	; (800a140 <getrtcStamp+0xa8>)
 800a0de:	789b      	ldrb	r3, [r3, #2]
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f000 f859 	bl	800a198 <BCDToDecimal>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	220a      	movs	r2, #10
 800a0ea:	4918      	ldr	r1, [pc, #96]	; (800a14c <getrtcStamp+0xb4>)
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f00b fc5b 	bl	80159a8 <itoa>

	itoa(BCDToDecimal(STime1.Hours),gau8Hour,PAYLOAD_DATA_STRING_RADIX);
 800a0f2:	4b11      	ldr	r3, [pc, #68]	; (800a138 <getrtcStamp+0xa0>)
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f000 f84e 	bl	800a198 <BCDToDecimal>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	220a      	movs	r2, #10
 800a100:	4913      	ldr	r1, [pc, #76]	; (800a150 <getrtcStamp+0xb8>)
 800a102:	4618      	mov	r0, r3
 800a104:	f00b fc50 	bl	80159a8 <itoa>
	itoa(BCDToDecimal(STime1.Minutes),gau8Minutes,PAYLOAD_DATA_STRING_RADIX);
 800a108:	4b0b      	ldr	r3, [pc, #44]	; (800a138 <getrtcStamp+0xa0>)
 800a10a:	785b      	ldrb	r3, [r3, #1]
 800a10c:	4618      	mov	r0, r3
 800a10e:	f000 f843 	bl	800a198 <BCDToDecimal>
 800a112:	4603      	mov	r3, r0
 800a114:	220a      	movs	r2, #10
 800a116:	490f      	ldr	r1, [pc, #60]	; (800a154 <getrtcStamp+0xbc>)
 800a118:	4618      	mov	r0, r3
 800a11a:	f00b fc45 	bl	80159a8 <itoa>
	itoa(BCDToDecimal(STime1.Seconds),gau8Seconds,PAYLOAD_DATA_STRING_RADIX);
 800a11e:	4b06      	ldr	r3, [pc, #24]	; (800a138 <getrtcStamp+0xa0>)
 800a120:	789b      	ldrb	r3, [r3, #2]
 800a122:	4618      	mov	r0, r3
 800a124:	f000 f838 	bl	800a198 <BCDToDecimal>
 800a128:	4603      	mov	r3, r0
 800a12a:	220a      	movs	r2, #10
 800a12c:	490a      	ldr	r1, [pc, #40]	; (800a158 <getrtcStamp+0xc0>)
 800a12e:	4618      	mov	r0, r3
 800a130:	f00b fc3a 	bl	80159a8 <itoa>
}
 800a134:	bf00      	nop
 800a136:	bd80      	pop	{r7, pc}
 800a138:	20007114 	.word	0x20007114
 800a13c:	20003728 	.word	0x20003728
 800a140:	20007110 	.word	0x20007110
 800a144:	20001444 	.word	0x20001444
 800a148:	2000144c 	.word	0x2000144c
 800a14c:	20001450 	.word	0x20001450
 800a150:	20001454 	.word	0x20001454
 800a154:	20001458 	.word	0x20001458
 800a158:	2000145c 	.word	0x2000145c

0800a15c <DecimalToBCD>:
 Change History:
 Author           	Date                Remarks
 KloudQ Team      13-10-2020			100133
******************************************************************************/
uint32_t DecimalToBCD (uint32_t Decimal)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
   return (((Decimal/10) << 4) | (Decimal % 10));
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	4a0b      	ldr	r2, [pc, #44]	; (800a194 <DecimalToBCD+0x38>)
 800a168:	fba2 2303 	umull	r2, r3, r2, r3
 800a16c:	08db      	lsrs	r3, r3, #3
 800a16e:	0118      	lsls	r0, r3, #4
 800a170:	6879      	ldr	r1, [r7, #4]
 800a172:	4b08      	ldr	r3, [pc, #32]	; (800a194 <DecimalToBCD+0x38>)
 800a174:	fba3 2301 	umull	r2, r3, r3, r1
 800a178:	08da      	lsrs	r2, r3, #3
 800a17a:	4613      	mov	r3, r2
 800a17c:	009b      	lsls	r3, r3, #2
 800a17e:	4413      	add	r3, r2
 800a180:	005b      	lsls	r3, r3, #1
 800a182:	1aca      	subs	r2, r1, r3
 800a184:	ea40 0302 	orr.w	r3, r0, r2
}
 800a188:	4618      	mov	r0, r3
 800a18a:	370c      	adds	r7, #12
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr
 800a194:	cccccccd 	.word	0xcccccccd

0800a198 <BCDToDecimal>:
 Change History:
 Author           	Date                Remarks
 KloudQ Team      13-10-2020			100133
******************************************************************************/
uint32_t BCDToDecimal(uint32_t BCD)
{
 800a198:	b480      	push	{r7}
 800a19a:	b083      	sub	sp, #12
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
   return (((BCD >> 4) * 10) + (BCD & 0xF));
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	091a      	lsrs	r2, r3, #4
 800a1a4:	4613      	mov	r3, r2
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	4413      	add	r3, r2
 800a1aa:	005b      	lsls	r3, r3, #1
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f003 030f 	and.w	r3, r3, #15
 800a1b4:	4413      	add	r3, r2
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	370c      	adds	r7, #12
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr
	...

0800a1c4 <HAL_TIM_PeriodElapsedCallback>:
 Change History:
 Author           	Date                Remarks
 System Generated  11-04-18
******************************************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
	/*HP Timer Interrupt : 50 us*/

	if(htim->Instance == TIM7)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a70      	ldr	r2, [pc, #448]	; (800a394 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	f040 80d8 	bne.w	800a388 <HAL_TIM_PeriodElapsedCallback+0x1c4>
	{
		if(gu32I2CMemoryOperationTimeout)gu32I2CMemoryOperationTimeout--;
 800a1d8:	4b6f      	ldr	r3, [pc, #444]	; (800a398 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d004      	beq.n	800a1ea <HAL_TIM_PeriodElapsedCallback+0x26>
 800a1e0:	4b6d      	ldr	r3, [pc, #436]	; (800a398 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	3b01      	subs	r3, #1
 800a1e6:	4a6c      	ldr	r2, [pc, #432]	; (800a398 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800a1e8:	6013      	str	r3, [r2, #0]
//
		if(gu32GSMCharacterTimeout)gu32GSMCharacterTimeout--;
 800a1ea:	4b6c      	ldr	r3, [pc, #432]	; (800a39c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d004      	beq.n	800a1fc <HAL_TIM_PeriodElapsedCallback+0x38>
 800a1f2:	4b6a      	ldr	r3, [pc, #424]	; (800a39c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	3b01      	subs	r3, #1
 800a1f8:	4a68      	ldr	r2, [pc, #416]	; (800a39c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800a1fa:	6013      	str	r3, [r2, #0]
		if(gsmInstance.u32GSMTimer)gsmInstance.u32GSMTimer--;
 800a1fc:	4b68      	ldr	r3, [pc, #416]	; (800a3a0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800a1fe:	f8d3 3f90 	ldr.w	r3, [r3, #3984]	; 0xf90
 800a202:	2b00      	cmp	r3, #0
 800a204:	d006      	beq.n	800a214 <HAL_TIM_PeriodElapsedCallback+0x50>
 800a206:	4b66      	ldr	r3, [pc, #408]	; (800a3a0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800a208:	f8d3 3f90 	ldr.w	r3, [r3, #3984]	; 0xf90
 800a20c:	3b01      	subs	r3, #1
 800a20e:	4a64      	ldr	r2, [pc, #400]	; (800a3a0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800a210:	f8c2 3f90 	str.w	r3, [r2, #3984]	; 0xf90
		if(gsmInstance.u32GSMResponseTimer)gsmInstance.u32GSMResponseTimer--;
 800a214:	4b62      	ldr	r3, [pc, #392]	; (800a3a0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800a216:	f8d3 3fa4 	ldr.w	r3, [r3, #4004]	; 0xfa4
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d006      	beq.n	800a22c <HAL_TIM_PeriodElapsedCallback+0x68>
 800a21e:	4b60      	ldr	r3, [pc, #384]	; (800a3a0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800a220:	f8d3 3fa4 	ldr.w	r3, [r3, #4004]	; 0xfa4
 800a224:	3b01      	subs	r3, #1
 800a226:	4a5e      	ldr	r2, [pc, #376]	; (800a3a0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800a228:	f8c2 3fa4 	str.w	r3, [r2, #4004]	; 0xfa4
		if(gsmInstance.u32GSMHeartbeatTimer)gsmInstance.u32GSMHeartbeatTimer--;
 800a22c:	4b5c      	ldr	r3, [pc, #368]	; (800a3a0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800a22e:	f8d3 3f9c 	ldr.w	r3, [r3, #3996]	; 0xf9c
 800a232:	2b00      	cmp	r3, #0
 800a234:	d006      	beq.n	800a244 <HAL_TIM_PeriodElapsedCallback+0x80>
 800a236:	4b5a      	ldr	r3, [pc, #360]	; (800a3a0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800a238:	f8d3 3f9c 	ldr.w	r3, [r3, #3996]	; 0xf9c
 800a23c:	3b01      	subs	r3, #1
 800a23e:	4a58      	ldr	r2, [pc, #352]	; (800a3a0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800a240:	f8c2 3f9c 	str.w	r3, [r2, #3996]	; 0xf9c

		if(gu32PayloadQueueEnqueue)gu32PayloadQueueEnqueue--;
 800a244:	4b57      	ldr	r3, [pc, #348]	; (800a3a4 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d004      	beq.n	800a256 <HAL_TIM_PeriodElapsedCallback+0x92>
 800a24c:	4b55      	ldr	r3, [pc, #340]	; (800a3a4 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	3b01      	subs	r3, #1
 800a252:	4a54      	ldr	r2, [pc, #336]	; (800a3a4 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800a254:	6013      	str	r3, [r2, #0]
		if(gu32GEOQueueEnqueue)gu32GEOQueueEnqueue--;
 800a256:	4b54      	ldr	r3, [pc, #336]	; (800a3a8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d004      	beq.n	800a268 <HAL_TIM_PeriodElapsedCallback+0xa4>
 800a25e:	4b52      	ldr	r3, [pc, #328]	; (800a3a8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	3b01      	subs	r3, #1
 800a264:	4a50      	ldr	r2, [pc, #320]	; (800a3a8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800a266:	6013      	str	r3, [r2, #0]
		if(gu32FotaFileReadTimer)gu32FotaFileReadTimer--;
 800a268:	4b50      	ldr	r3, [pc, #320]	; (800a3ac <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d004      	beq.n	800a27a <HAL_TIM_PeriodElapsedCallback+0xb6>
 800a270:	4b4e      	ldr	r3, [pc, #312]	; (800a3ac <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	3b01      	subs	r3, #1
 800a276:	4a4d      	ldr	r2, [pc, #308]	; (800a3ac <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800a278:	6013      	str	r3, [r2, #0]
		if(gu32GSMHangTimer)gu32GSMHangTimer--;
 800a27a:	4b4d      	ldr	r3, [pc, #308]	; (800a3b0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d004      	beq.n	800a28c <HAL_TIM_PeriodElapsedCallback+0xc8>
 800a282:	4b4b      	ldr	r3, [pc, #300]	; (800a3b0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	3b01      	subs	r3, #1
 800a288:	4a49      	ldr	r2, [pc, #292]	; (800a3b0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800a28a:	6013      	str	r3, [r2, #0]
		if(gu16GSMCycleTimeout)gu16GSMCycleTimeout--;
 800a28c:	4b49      	ldr	r3, [pc, #292]	; (800a3b4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d004      	beq.n	800a29e <HAL_TIM_PeriodElapsedCallback+0xda>
 800a294:	4b47      	ldr	r3, [pc, #284]	; (800a3b4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	3b01      	subs	r3, #1
 800a29a:	4a46      	ldr	r2, [pc, #280]	; (800a3b4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800a29c:	6013      	str	r3, [r2, #0]

		/* RTC Timer Variables */
		if(gu8rtcUpdateTimer)gu8rtcUpdateTimer--;
 800a29e:	4b46      	ldr	r3, [pc, #280]	; (800a3b8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d004      	beq.n	800a2b0 <HAL_TIM_PeriodElapsedCallback+0xec>
 800a2a6:	4b44      	ldr	r3, [pc, #272]	; (800a3b8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	3b01      	subs	r3, #1
 800a2ac:	4a42      	ldr	r2, [pc, #264]	; (800a3b8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800a2ae:	6013      	str	r3, [r2, #0]

		/*LED*/
		if(gu32LEDDelay)gu32LEDDelay--;
 800a2b0:	4b42      	ldr	r3, [pc, #264]	; (800a3bc <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d004      	beq.n	800a2c2 <HAL_TIM_PeriodElapsedCallback+0xfe>
 800a2b8:	4b40      	ldr	r3, [pc, #256]	; (800a3bc <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	3b01      	subs	r3, #1
 800a2be:	4a3f      	ldr	r2, [pc, #252]	; (800a3bc <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800a2c0:	6013      	str	r3, [r2, #0]
		if(gu32ModuleInitTimer)gu32ModuleInitTimer --;
 800a2c2:	4b3f      	ldr	r3, [pc, #252]	; (800a3c0 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d004      	beq.n	800a2d4 <HAL_TIM_PeriodElapsedCallback+0x110>
 800a2ca:	4b3d      	ldr	r3, [pc, #244]	; (800a3c0 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	3b01      	subs	r3, #1
 800a2d0:	4a3b      	ldr	r2, [pc, #236]	; (800a3c0 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800a2d2:	6013      	str	r3, [r2, #0]

		/*CAN*/
		if(gu32CANQueryPollTimer)gu32CANQueryPollTimer--;
 800a2d4:	4b3b      	ldr	r3, [pc, #236]	; (800a3c4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d004      	beq.n	800a2e6 <HAL_TIM_PeriodElapsedCallback+0x122>
 800a2dc:	4b39      	ldr	r3, [pc, #228]	; (800a3c4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	3b01      	subs	r3, #1
 800a2e2:	4a38      	ldr	r2, [pc, #224]	; (800a3c4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800a2e4:	6013      	str	r3, [r2, #0]
		if(gu32CANCommandResponseTimeout) gu32CANCommandResponseTimeout--;
 800a2e6:	4b38      	ldr	r3, [pc, #224]	; (800a3c8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d004      	beq.n	800a2f8 <HAL_TIM_PeriodElapsedCallback+0x134>
 800a2ee:	4b36      	ldr	r3, [pc, #216]	; (800a3c8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	3b01      	subs	r3, #1
 800a2f4:	4a34      	ldr	r2, [pc, #208]	; (800a3c8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800a2f6:	6013      	str	r3, [r2, #0]

		/*ADC*/
		if(gu32ADCRestartTimer)gu32ADCRestartTimer--;
 800a2f8:	4b34      	ldr	r3, [pc, #208]	; (800a3cc <HAL_TIM_PeriodElapsedCallback+0x208>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d004      	beq.n	800a30a <HAL_TIM_PeriodElapsedCallback+0x146>
 800a300:	4b32      	ldr	r3, [pc, #200]	; (800a3cc <HAL_TIM_PeriodElapsedCallback+0x208>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	3b01      	subs	r3, #1
 800a306:	4a31      	ldr	r2, [pc, #196]	; (800a3cc <HAL_TIM_PeriodElapsedCallback+0x208>)
 800a308:	6013      	str	r3, [r2, #0]
        /* RTC */
		if( gu32rtcBackupTimer) gu32rtcBackupTimer--;
 800a30a:	4b31      	ldr	r3, [pc, #196]	; (800a3d0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d004      	beq.n	800a31c <HAL_TIM_PeriodElapsedCallback+0x158>
 800a312:	4b2f      	ldr	r3, [pc, #188]	; (800a3d0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	3b01      	subs	r3, #1
 800a318:	4a2d      	ldr	r2, [pc, #180]	; (800a3d0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800a31a:	6013      	str	r3, [r2, #0]
		/*Heart Beat*/
		if(gu32HeartBeatDelay)gu32HeartBeatDelay--;
 800a31c:	4b2d      	ldr	r3, [pc, #180]	; (800a3d4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d004      	beq.n	800a32e <HAL_TIM_PeriodElapsedCallback+0x16a>
 800a324:	4b2b      	ldr	r3, [pc, #172]	; (800a3d4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	3b01      	subs	r3, #1
 800a32a:	4a2a      	ldr	r2, [pc, #168]	; (800a3d4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800a32c:	6013      	str	r3, [r2, #0]
		/*Flash Timer*/
		if(FlashStr.u32SerialFlashDelay)
 800a32e:	4b2a      	ldr	r3, [pc, #168]	; (800a3d8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800a330:	691b      	ldr	r3, [r3, #16]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d004      	beq.n	800a340 <HAL_TIM_PeriodElapsedCallback+0x17c>
			FlashStr.u32SerialFlashDelay--;
 800a336:	4b28      	ldr	r3, [pc, #160]	; (800a3d8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800a338:	691b      	ldr	r3, [r3, #16]
 800a33a:	3b01      	subs	r3, #1
 800a33c:	4a26      	ldr	r2, [pc, #152]	; (800a3d8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800a33e:	6113      	str	r3, [r2, #16]
		/*MODBus*/
		if(gu16ModbusFrameEndTimer)gu16ModbusFrameEndTimer--;
 800a340:	4b26      	ldr	r3, [pc, #152]	; (800a3dc <HAL_TIM_PeriodElapsedCallback+0x218>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d004      	beq.n	800a352 <HAL_TIM_PeriodElapsedCallback+0x18e>
 800a348:	4b24      	ldr	r3, [pc, #144]	; (800a3dc <HAL_TIM_PeriodElapsedCallback+0x218>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	3b01      	subs	r3, #1
 800a34e:	4a23      	ldr	r2, [pc, #140]	; (800a3dc <HAL_TIM_PeriodElapsedCallback+0x218>)
 800a350:	6013      	str	r3, [r2, #0]
		if(gu32ModbusResponseTimeout)gu32ModbusResponseTimeout--;
 800a352:	4b23      	ldr	r3, [pc, #140]	; (800a3e0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d004      	beq.n	800a364 <HAL_TIM_PeriodElapsedCallback+0x1a0>
 800a35a:	4b21      	ldr	r3, [pc, #132]	; (800a3e0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	3b01      	subs	r3, #1
 800a360:	4a1f      	ldr	r2, [pc, #124]	; (800a3e0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800a362:	6013      	str	r3, [r2, #0]
		if(gu32ModbusPollDelay)gu32ModbusPollDelay--;
 800a364:	4b1f      	ldr	r3, [pc, #124]	; (800a3e4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d004      	beq.n	800a376 <HAL_TIM_PeriodElapsedCallback+0x1b2>
 800a36c:	4b1d      	ldr	r3, [pc, #116]	; (800a3e4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	3b01      	subs	r3, #1
 800a372:	4a1c      	ldr	r2, [pc, #112]	; (800a3e4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800a374:	6013      	str	r3, [r2, #0]
		if(gu32ModbusCycelRestartTmr)gu32ModbusCycelRestartTmr--;
 800a376:	4b1c      	ldr	r3, [pc, #112]	; (800a3e8 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d004      	beq.n	800a388 <HAL_TIM_PeriodElapsedCallback+0x1c4>
 800a37e:	4b1a      	ldr	r3, [pc, #104]	; (800a3e8 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	3b01      	subs	r3, #1
 800a384:	4a18      	ldr	r2, [pc, #96]	; (800a3e8 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800a386:	6013      	str	r3, [r2, #0]

	} // End of if(htim->Instance == TIM7)
}
 800a388:	bf00      	nop
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr
 800a394:	40001400 	.word	0x40001400
 800a398:	20002168 	.word	0x20002168
 800a39c:	20002154 	.word	0x20002154
 800a3a0:	200023e4 	.word	0x200023e4
 800a3a4:	20002158 	.word	0x20002158
 800a3a8:	2000215c 	.word	0x2000215c
 800a3ac:	2000216c 	.word	0x2000216c
 800a3b0:	20002170 	.word	0x20002170
 800a3b4:	20001460 	.word	0x20001460
 800a3b8:	20001464 	.word	0x20001464
 800a3bc:	20002164 	.word	0x20002164
 800a3c0:	20002174 	.word	0x20002174
 800a3c4:	20002178 	.word	0x20002178
 800a3c8:	2000217c 	.word	0x2000217c
 800a3cc:	20002160 	.word	0x20002160
 800a3d0:	20001468 	.word	0x20001468
 800a3d4:	20002180 	.word	0x20002180
 800a3d8:	2000374c 	.word	0x2000374c
 800a3dc:	2000210c 	.word	0x2000210c
 800a3e0:	20002110 	.word	0x20002110
 800a3e4:	20002114 	.word	0x20002114
 800a3e8:	20002118 	.word	0x20002118

0800a3ec <HAL_TIM_IC_CaptureCallback>:
 100138			   	27-02-19			Falling / Ceiling Logic for RPM with 80 base
 100138				28-02-19			Changed falling - ceiling in 2 parts, 0-50
 	 	 	 	 	 	 	 	 	 	and 51-100 as required by Manitou
******************************************************************************/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b083      	sub	sp, #12
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
}
 800a3f4:	bf00      	nop
 800a3f6:	370c      	adds	r7, #12
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr

0800a400 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800a400:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a438 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800a404:	f7fc ffb6 	bl	8007374 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a408:	480c      	ldr	r0, [pc, #48]	; (800a43c <LoopForever+0x6>)
  ldr r1, =_edata
 800a40a:	490d      	ldr	r1, [pc, #52]	; (800a440 <LoopForever+0xa>)
  ldr r2, =_sidata
 800a40c:	4a0d      	ldr	r2, [pc, #52]	; (800a444 <LoopForever+0xe>)
  movs r3, #0
 800a40e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a410:	e002      	b.n	800a418 <LoopCopyDataInit>

0800a412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a416:	3304      	adds	r3, #4

0800a418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a41a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a41c:	d3f9      	bcc.n	800a412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a41e:	4a0a      	ldr	r2, [pc, #40]	; (800a448 <LoopForever+0x12>)
  ldr r4, =_ebss
 800a420:	4c0a      	ldr	r4, [pc, #40]	; (800a44c <LoopForever+0x16>)
  movs r3, #0
 800a422:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a424:	e001      	b.n	800a42a <LoopFillZerobss>

0800a426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a428:	3204      	adds	r2, #4

0800a42a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a42a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a42c:	d3fb      	bcc.n	800a426 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a42e:	f00b fa7f 	bl	8015930 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800a432:	f7f9 ff19 	bl	8004268 <main>

0800a436 <LoopForever>:

LoopForever:
    b LoopForever
 800a436:	e7fe      	b.n	800a436 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800a438:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800a43c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a440:	200016c8 	.word	0x200016c8
  ldr r2, =_sidata
 800a444:	0801c6ac 	.word	0x0801c6ac
  ldr r2, =_sbss
 800a448:	200016c8 	.word	0x200016c8
  ldr r4, =_ebss
 800a44c:	2000713c 	.word	0x2000713c

0800a450 <COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800a450:	e7fe      	b.n	800a450 <COMP_IRQHandler>

0800a452 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a452:	b580      	push	{r7, lr}
 800a454:	b082      	sub	sp, #8
 800a456:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800a458:	2300      	movs	r3, #0
 800a45a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a45c:	2003      	movs	r0, #3
 800a45e:	f003 fb05 	bl	800da6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a462:	200f      	movs	r0, #15
 800a464:	f000 f80e 	bl	800a484 <HAL_InitTick>
 800a468:	4603      	mov	r3, r0
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d002      	beq.n	800a474 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800a46e:	2301      	movs	r3, #1
 800a470:	71fb      	strb	r3, [r7, #7]
 800a472:	e001      	b.n	800a478 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800a474:	f7fc fdc4 	bl	8007000 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800a478:	79fb      	ldrb	r3, [r7, #7]
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3708      	adds	r7, #8
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
	...

0800a484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800a48c:	2300      	movs	r3, #0
 800a48e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800a490:	4b17      	ldr	r3, [pc, #92]	; (800a4f0 <HAL_InitTick+0x6c>)
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d023      	beq.n	800a4e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800a498:	4b16      	ldr	r3, [pc, #88]	; (800a4f4 <HAL_InitTick+0x70>)
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	4b14      	ldr	r3, [pc, #80]	; (800a4f0 <HAL_InitTick+0x6c>)
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a4a6:	fbb3 f3f1 	udiv	r3, r3, r1
 800a4aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f003 fb58 	bl	800db64 <HAL_SYSTICK_Config>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d10f      	bne.n	800a4da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2b0f      	cmp	r3, #15
 800a4be:	d809      	bhi.n	800a4d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	6879      	ldr	r1, [r7, #4]
 800a4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4c8:	f003 faf0 	bl	800daac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a4cc:	4a0a      	ldr	r2, [pc, #40]	; (800a4f8 <HAL_InitTick+0x74>)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6013      	str	r3, [r2, #0]
 800a4d2:	e007      	b.n	800a4e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	73fb      	strb	r3, [r7, #15]
 800a4d8:	e004      	b.n	800a4e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800a4da:	2301      	movs	r3, #1
 800a4dc:	73fb      	strb	r3, [r7, #15]
 800a4de:	e001      	b.n	800a4e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800a4e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3710      	adds	r7, #16
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	20001470 	.word	0x20001470
 800a4f4:	20000ff8 	.word	0x20000ff8
 800a4f8:	2000146c 	.word	0x2000146c

0800a4fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800a500:	4b06      	ldr	r3, [pc, #24]	; (800a51c <HAL_IncTick+0x20>)
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	461a      	mov	r2, r3
 800a506:	4b06      	ldr	r3, [pc, #24]	; (800a520 <HAL_IncTick+0x24>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4413      	add	r3, r2
 800a50c:	4a04      	ldr	r2, [pc, #16]	; (800a520 <HAL_IncTick+0x24>)
 800a50e:	6013      	str	r3, [r2, #0]
}
 800a510:	bf00      	nop
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr
 800a51a:	bf00      	nop
 800a51c:	20001470 	.word	0x20001470
 800a520:	20007128 	.word	0x20007128

0800a524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a524:	b480      	push	{r7}
 800a526:	af00      	add	r7, sp, #0
  return uwTick;
 800a528:	4b03      	ldr	r3, [pc, #12]	; (800a538 <HAL_GetTick+0x14>)
 800a52a:	681b      	ldr	r3, [r3, #0]
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr
 800a536:	bf00      	nop
 800a538:	20007128 	.word	0x20007128

0800a53c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a544:	f7ff ffee 	bl	800a524 <HAL_GetTick>
 800a548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a554:	d005      	beq.n	800a562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800a556:	4b0a      	ldr	r3, [pc, #40]	; (800a580 <HAL_Delay+0x44>)
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	461a      	mov	r2, r3
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	4413      	add	r3, r2
 800a560:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a562:	bf00      	nop
 800a564:	f7ff ffde 	bl	800a524 <HAL_GetTick>
 800a568:	4602      	mov	r2, r0
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	1ad3      	subs	r3, r2, r3
 800a56e:	68fa      	ldr	r2, [r7, #12]
 800a570:	429a      	cmp	r2, r3
 800a572:	d8f7      	bhi.n	800a564 <HAL_Delay+0x28>
  {
  }
}
 800a574:	bf00      	nop
 800a576:	bf00      	nop
 800a578:	3710      	adds	r7, #16
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
 800a57e:	bf00      	nop
 800a580:	20001470 	.word	0x20001470

0800a584 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	689b      	ldr	r3, [r3, #8]
 800a592:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	431a      	orrs	r2, r3
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	609a      	str	r2, [r3, #8]
}
 800a59e:	bf00      	nop
 800a5a0:	370c      	adds	r7, #12
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr

0800a5aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800a5aa:	b480      	push	{r7}
 800a5ac:	b083      	sub	sp, #12
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
 800a5b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	689b      	ldr	r3, [r3, #8]
 800a5b8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	431a      	orrs	r2, r3
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	609a      	str	r2, [r3, #8]
}
 800a5c4:	bf00      	nop
 800a5c6:	370c      	adds	r7, #12
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr

0800a5d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b083      	sub	sp, #12
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	689b      	ldr	r3, [r3, #8]
 800a5dc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <LL_ADC_GetResolution>:
  *         @arg @ref LL_ADC_RESOLUTION_10B
  *         @arg @ref LL_ADC_RESOLUTION_8B
  *         @arg @ref LL_ADC_RESOLUTION_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetResolution(ADC_TypeDef *ADCx)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	68db      	ldr	r3, [r3, #12]
 800a5f8:	f003 0318 	and.w	r3, r3, #24
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	370c      	adds	r7, #12
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800a608:	b480      	push	{r7}
 800a60a:	b087      	sub	sp, #28
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	607a      	str	r2, [r7, #4]
 800a614:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	3360      	adds	r3, #96	; 0x60
 800a61a:	461a      	mov	r2, r3
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	4413      	add	r3, r2
 800a622:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	681a      	ldr	r2, [r3, #0]
 800a628:	4b08      	ldr	r3, [pc, #32]	; (800a64c <LL_ADC_SetOffset+0x44>)
 800a62a:	4013      	ands	r3, r2
 800a62c:	687a      	ldr	r2, [r7, #4]
 800a62e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800a632:	683a      	ldr	r2, [r7, #0]
 800a634:	430a      	orrs	r2, r1
 800a636:	4313      	orrs	r3, r2
 800a638:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800a640:	bf00      	nop
 800a642:	371c      	adds	r7, #28
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr
 800a64c:	03fff000 	.word	0x03fff000

0800a650 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800a650:	b480      	push	{r7}
 800a652:	b085      	sub	sp, #20
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	3360      	adds	r3, #96	; 0x60
 800a65e:	461a      	mov	r2, r3
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	009b      	lsls	r3, r3, #2
 800a664:	4413      	add	r3, r2
 800a666:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800a670:	4618      	mov	r0, r3
 800a672:	3714      	adds	r7, #20
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b087      	sub	sp, #28
 800a680:	af00      	add	r7, sp, #0
 800a682:	60f8      	str	r0, [r7, #12]
 800a684:	60b9      	str	r1, [r7, #8]
 800a686:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	3360      	adds	r3, #96	; 0x60
 800a68c:	461a      	mov	r2, r3
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	4413      	add	r3, r2
 800a694:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	431a      	orrs	r2, r3
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800a6a6:	bf00      	nop
 800a6a8:	371c      	adds	r7, #28
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr

0800a6b2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800a6b2:	b480      	push	{r7}
 800a6b4:	b083      	sub	sp, #12
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	68db      	ldr	r3, [r3, #12]
 800a6be:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d101      	bne.n	800a6ca <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e000      	b.n	800a6cc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800a6ca:	2300      	movs	r3, #0
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	370c      	adds	r7, #12
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr

0800a6d8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b087      	sub	sp, #28
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	60f8      	str	r0, [r7, #12]
 800a6e0:	60b9      	str	r1, [r7, #8]
 800a6e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	3330      	adds	r3, #48	; 0x30
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	0a1b      	lsrs	r3, r3, #8
 800a6ee:	009b      	lsls	r3, r3, #2
 800a6f0:	f003 030c 	and.w	r3, r3, #12
 800a6f4:	4413      	add	r3, r2
 800a6f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	f003 031f 	and.w	r3, r3, #31
 800a702:	211f      	movs	r1, #31
 800a704:	fa01 f303 	lsl.w	r3, r1, r3
 800a708:	43db      	mvns	r3, r3
 800a70a:	401a      	ands	r2, r3
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	0e9b      	lsrs	r3, r3, #26
 800a710:	f003 011f 	and.w	r1, r3, #31
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	f003 031f 	and.w	r3, r3, #31
 800a71a:	fa01 f303 	lsl.w	r3, r1, r3
 800a71e:	431a      	orrs	r2, r3
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800a724:	bf00      	nop
 800a726:	371c      	adds	r7, #28
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr

0800a730 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a73c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a740:	2b00      	cmp	r3, #0
 800a742:	d101      	bne.n	800a748 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800a744:	2301      	movs	r3, #1
 800a746:	e000      	b.n	800a74a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800a748:	2300      	movs	r3, #0
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	370c      	adds	r7, #12
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr

0800a756 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800a756:	b480      	push	{r7}
 800a758:	b087      	sub	sp, #28
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	60f8      	str	r0, [r7, #12]
 800a75e:	60b9      	str	r1, [r7, #8]
 800a760:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	3314      	adds	r3, #20
 800a766:	461a      	mov	r2, r3
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	0e5b      	lsrs	r3, r3, #25
 800a76c:	009b      	lsls	r3, r3, #2
 800a76e:	f003 0304 	and.w	r3, r3, #4
 800a772:	4413      	add	r3, r2
 800a774:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	0d1b      	lsrs	r3, r3, #20
 800a77e:	f003 031f 	and.w	r3, r3, #31
 800a782:	2107      	movs	r1, #7
 800a784:	fa01 f303 	lsl.w	r3, r1, r3
 800a788:	43db      	mvns	r3, r3
 800a78a:	401a      	ands	r2, r3
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	0d1b      	lsrs	r3, r3, #20
 800a790:	f003 031f 	and.w	r3, r3, #31
 800a794:	6879      	ldr	r1, [r7, #4]
 800a796:	fa01 f303 	lsl.w	r3, r1, r3
 800a79a:	431a      	orrs	r2, r3
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800a7a0:	bf00      	nop
 800a7a2:	371c      	adds	r7, #28
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b085      	sub	sp, #20
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7c4:	43db      	mvns	r3, r3
 800a7c6:	401a      	ands	r2, r3
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f003 0318 	and.w	r3, r3, #24
 800a7ce:	4908      	ldr	r1, [pc, #32]	; (800a7f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 800a7d0:	40d9      	lsrs	r1, r3
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	400b      	ands	r3, r1
 800a7d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7da:	431a      	orrs	r2, r3
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800a7e2:	bf00      	nop
 800a7e4:	3714      	adds	r7, #20
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr
 800a7ee:	bf00      	nop
 800a7f0:	0007ffff 	.word	0x0007ffff

0800a7f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b083      	sub	sp, #12
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	689b      	ldr	r3, [r3, #8]
 800a800:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800a804:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a808:	687a      	ldr	r2, [r7, #4]
 800a80a:	6093      	str	r3, [r2, #8]
}
 800a80c:	bf00      	nop
 800a80e:	370c      	adds	r7, #12
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	689b      	ldr	r3, [r3, #8]
 800a824:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a828:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a82c:	d101      	bne.n	800a832 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800a82e:	2301      	movs	r3, #1
 800a830:	e000      	b.n	800a834 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800a832:	2300      	movs	r3, #0
}
 800a834:	4618      	mov	r0, r3
 800a836:	370c      	adds	r7, #12
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr

0800a840 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800a840:	b480      	push	{r7}
 800a842:	b083      	sub	sp, #12
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800a850:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a854:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800a85c:	bf00      	nop
 800a85e:	370c      	adds	r7, #12
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr

0800a868 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	689b      	ldr	r3, [r3, #8]
 800a874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a878:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a87c:	d101      	bne.n	800a882 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800a87e:	2301      	movs	r3, #1
 800a880:	e000      	b.n	800a884 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800a882:	2300      	movs	r3, #0
}
 800a884:	4618      	mov	r0, r3
 800a886:	370c      	adds	r7, #12
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr

0800a890 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800a890:	b480      	push	{r7}
 800a892:	b083      	sub	sp, #12
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	689b      	ldr	r3, [r3, #8]
 800a89c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a8a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a8a4:	f043 0201 	orr.w	r2, r3, #1
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800a8ac:	bf00      	nop
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	689b      	ldr	r3, [r3, #8]
 800a8c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a8c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a8cc:	f043 0202 	orr.w	r2, r3, #2
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800a8d4:	bf00      	nop
 800a8d6:	370c      	adds	r7, #12
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr

0800a8e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b083      	sub	sp, #12
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	689b      	ldr	r3, [r3, #8]
 800a8ec:	f003 0301 	and.w	r3, r3, #1
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d101      	bne.n	800a8f8 <LL_ADC_IsEnabled+0x18>
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	e000      	b.n	800a8fa <LL_ADC_IsEnabled+0x1a>
 800a8f8:	2300      	movs	r3, #0
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	370c      	adds	r7, #12
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr

0800a906 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800a906:	b480      	push	{r7}
 800a908:	b083      	sub	sp, #12
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	f003 0302 	and.w	r3, r3, #2
 800a916:	2b02      	cmp	r3, #2
 800a918:	d101      	bne.n	800a91e <LL_ADC_IsDisableOngoing+0x18>
 800a91a:	2301      	movs	r3, #1
 800a91c:	e000      	b.n	800a920 <LL_ADC_IsDisableOngoing+0x1a>
 800a91e:	2300      	movs	r3, #0
}
 800a920:	4618      	mov	r0, r3
 800a922:	370c      	adds	r7, #12
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr

0800a92c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b083      	sub	sp, #12
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	689b      	ldr	r3, [r3, #8]
 800a938:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a93c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a940:	f043 0204 	orr.w	r2, r3, #4
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800a948:	bf00      	nop
 800a94a:	370c      	adds	r7, #12
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr

0800a954 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800a954:	b480      	push	{r7}
 800a956:	b083      	sub	sp, #12
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a964:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a968:	f043 0210 	orr.w	r2, r3, #16
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800a970:	bf00      	nop
 800a972:	370c      	adds	r7, #12
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr

0800a97c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b083      	sub	sp, #12
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	689b      	ldr	r3, [r3, #8]
 800a988:	f003 0304 	and.w	r3, r3, #4
 800a98c:	2b04      	cmp	r3, #4
 800a98e:	d101      	bne.n	800a994 <LL_ADC_REG_IsConversionOngoing+0x18>
 800a990:	2301      	movs	r3, #1
 800a992:	e000      	b.n	800a996 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a994:	2300      	movs	r3, #0
}
 800a996:	4618      	mov	r0, r3
 800a998:	370c      	adds	r7, #12
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr

0800a9a2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800a9a2:	b480      	push	{r7}
 800a9a4:	b083      	sub	sp, #12
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	689b      	ldr	r3, [r3, #8]
 800a9ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a9b2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a9b6:	f043 0220 	orr.w	r2, r3, #32
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800a9be:	bf00      	nop
 800a9c0:	370c      	adds	r7, #12
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr

0800a9ca <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800a9ca:	b480      	push	{r7}
 800a9cc:	b083      	sub	sp, #12
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	689b      	ldr	r3, [r3, #8]
 800a9d6:	f003 0308 	and.w	r3, r3, #8
 800a9da:	2b08      	cmp	r3, #8
 800a9dc:	d101      	bne.n	800a9e2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800a9de:	2301      	movs	r3, #1
 800a9e0:	e000      	b.n	800a9e4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800a9e2:	2300      	movs	r3, #0
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	370c      	adds	r7, #12
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr

0800a9f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b088      	sub	sp, #32
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d101      	bne.n	800aa0a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800aa06:	2301      	movs	r3, #1
 800aa08:	e330      	b.n	800b06c <HAL_ADC_Init+0x67c>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	4a9e      	ldr	r2, [pc, #632]	; (800ac88 <HAL_ADC_Init+0x298>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d004      	beq.n	800aa1e <HAL_ADC_Init+0x2e>
 800aa14:	f240 1199 	movw	r1, #409	; 0x199
 800aa18:	489c      	ldr	r0, [pc, #624]	; (800ac8c <HAL_ADC_Init+0x29c>)
 800aa1a:	f7f9 fdb3 	bl	8004584 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa26:	d049      	beq.n	800aabc <HAL_ADC_Init+0xcc>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa30:	d044      	beq.n	800aabc <HAL_ADC_Init+0xcc>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aa3a:	d03f      	beq.n	800aabc <HAL_ADC_Init+0xcc>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d03b      	beq.n	800aabc <HAL_ADC_Init+0xcc>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	685b      	ldr	r3, [r3, #4]
 800aa48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aa4c:	d036      	beq.n	800aabc <HAL_ADC_Init+0xcc>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800aa56:	d031      	beq.n	800aabc <HAL_ADC_Init+0xcc>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800aa60:	d02c      	beq.n	800aabc <HAL_ADC_Init+0xcc>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa6a:	d027      	beq.n	800aabc <HAL_ADC_Init+0xcc>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	685b      	ldr	r3, [r3, #4]
 800aa70:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800aa74:	d022      	beq.n	800aabc <HAL_ADC_Init+0xcc>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800aa7e:	d01d      	beq.n	800aabc <HAL_ADC_Init+0xcc>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800aa88:	d018      	beq.n	800aabc <HAL_ADC_Init+0xcc>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa92:	d013      	beq.n	800aabc <HAL_ADC_Init+0xcc>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800aa9c:	d00e      	beq.n	800aabc <HAL_ADC_Init+0xcc>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800aaa6:	d009      	beq.n	800aabc <HAL_ADC_Init+0xcc>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800aab0:	d004      	beq.n	800aabc <HAL_ADC_Init+0xcc>
 800aab2:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800aab6:	4875      	ldr	r0, [pc, #468]	; (800ac8c <HAL_ADC_Init+0x29c>)
 800aab8:	f7f9 fd64 	bl	8004584 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	689b      	ldr	r3, [r3, #8]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d010      	beq.n	800aae6 <HAL_ADC_Init+0xf6>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	689b      	ldr	r3, [r3, #8]
 800aac8:	2b08      	cmp	r3, #8
 800aaca:	d00c      	beq.n	800aae6 <HAL_ADC_Init+0xf6>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	689b      	ldr	r3, [r3, #8]
 800aad0:	2b10      	cmp	r3, #16
 800aad2:	d008      	beq.n	800aae6 <HAL_ADC_Init+0xf6>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	689b      	ldr	r3, [r3, #8]
 800aad8:	2b18      	cmp	r3, #24
 800aada:	d004      	beq.n	800aae6 <HAL_ADC_Init+0xf6>
 800aadc:	f240 119b 	movw	r1, #411	; 0x19b
 800aae0:	486a      	ldr	r0, [pc, #424]	; (800ac8c <HAL_ADC_Init+0x29c>)
 800aae2:	f7f9 fd4f 	bl	8004584 <assert_failed>
#if defined(ADC_CFGR_DFSDMCFG) &&defined(DFSDM1_Channel0)
  assert_param(IS_ADC_DFSDMCFG_MODE(hadc));
#endif
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	68db      	ldr	r3, [r3, #12]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d008      	beq.n	800ab00 <HAL_ADC_Init+0x110>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	68db      	ldr	r3, [r3, #12]
 800aaf2:	2b20      	cmp	r3, #32
 800aaf4:	d004      	beq.n	800ab00 <HAL_ADC_Init+0x110>
 800aaf6:	f240 119f 	movw	r1, #415	; 0x19f
 800aafa:	4864      	ldr	r0, [pc, #400]	; (800ac8c <HAL_ADC_Init+0x29c>)
 800aafc:	f7f9 fd42 	bl	8004584 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	691b      	ldr	r3, [r3, #16]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d008      	beq.n	800ab1a <HAL_ADC_Init+0x12a>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	691b      	ldr	r3, [r3, #16]
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	d004      	beq.n	800ab1a <HAL_ADC_Init+0x12a>
 800ab10:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 800ab14:	485d      	ldr	r0, [pc, #372]	; (800ac8c <HAL_ADC_Init+0x29c>)
 800ab16:	f7f9 fd35 	bl	8004584 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	7e5b      	ldrb	r3, [r3, #25]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d008      	beq.n	800ab34 <HAL_ADC_Init+0x144>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	7e5b      	ldrb	r3, [r3, #25]
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d004      	beq.n	800ab34 <HAL_ADC_Init+0x144>
 800ab2a:	f240 11a1 	movw	r1, #417	; 0x1a1
 800ab2e:	4857      	ldr	r0, [pc, #348]	; (800ac8c <HAL_ADC_Init+0x29c>)
 800ab30:	f7f9 fd28 	bl	8004584 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d013      	beq.n	800ab64 <HAL_ADC_Init+0x174>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab44:	d00e      	beq.n	800ab64 <HAL_ADC_Init+0x174>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab4e:	d009      	beq.n	800ab64 <HAL_ADC_Init+0x174>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ab58:	d004      	beq.n	800ab64 <HAL_ADC_Init+0x174>
 800ab5a:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 800ab5e:	484b      	ldr	r0, [pc, #300]	; (800ac8c <HAL_ADC_Init+0x29c>)
 800ab60:	f7f9 fd10 	bl	8004584 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc, hadc->Init.ExternalTrigConv));
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab6c:	d053      	beq.n	800ac16 <HAL_ADC_Init+0x226>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab72:	f5b3 6f88 	cmp.w	r3, #1088	; 0x440
 800ab76:	d04e      	beq.n	800ac16 <HAL_ADC_Init+0x226>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab7c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800ab80:	d049      	beq.n	800ac16 <HAL_ADC_Init+0x226>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab86:	f5b3 6f98 	cmp.w	r3, #1216	; 0x4c0
 800ab8a:	d044      	beq.n	800ac16 <HAL_ADC_Init+0x226>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab90:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800ab94:	d03f      	beq.n	800ac16 <HAL_ADC_Init+0x226>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab9a:	f5b3 6fa8 	cmp.w	r3, #1344	; 0x540
 800ab9e:	d03a      	beq.n	800ac16 <HAL_ADC_Init+0x226>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aba4:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 800aba8:	d035      	beq.n	800ac16 <HAL_ADC_Init+0x226>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abae:	f5b3 6fb8 	cmp.w	r3, #1472	; 0x5c0
 800abb2:	d030      	beq.n	800ac16 <HAL_ADC_Init+0x226>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abb8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800abbc:	d02b      	beq.n	800ac16 <HAL_ADC_Init+0x226>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abc2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800abc6:	d026      	beq.n	800ac16 <HAL_ADC_Init+0x226>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abcc:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 800abd0:	d021      	beq.n	800ac16 <HAL_ADC_Init+0x226>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abd6:	f5b3 6fd8 	cmp.w	r3, #1728	; 0x6c0
 800abda:	d01c      	beq.n	800ac16 <HAL_ADC_Init+0x226>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abe0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800abe4:	d017      	beq.n	800ac16 <HAL_ADC_Init+0x226>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abea:	f5b3 6fe8 	cmp.w	r3, #1856	; 0x740
 800abee:	d012      	beq.n	800ac16 <HAL_ADC_Init+0x226>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abf4:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 800abf8:	d00d      	beq.n	800ac16 <HAL_ADC_Init+0x226>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abfe:	f5b3 6ff8 	cmp.w	r3, #1984	; 0x7c0
 800ac02:	d008      	beq.n	800ac16 <HAL_ADC_Init+0x226>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d004      	beq.n	800ac16 <HAL_ADC_Init+0x226>
 800ac0c:	f240 11a3 	movw	r1, #419	; 0x1a3
 800ac10:	481e      	ldr	r0, [pc, #120]	; (800ac8c <HAL_ADC_Init+0x29c>)
 800ac12:	f7f9 fcb7 	bl	8004584 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d009      	beq.n	800ac34 <HAL_ADC_Init+0x244>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d004      	beq.n	800ac34 <HAL_ADC_Init+0x244>
 800ac2a:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800ac2e:	4817      	ldr	r0, [pc, #92]	; (800ac8c <HAL_ADC_Init+0x29c>)
 800ac30:	f7f9 fca8 	bl	8004584 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	695b      	ldr	r3, [r3, #20]
 800ac38:	2b04      	cmp	r3, #4
 800ac3a:	d008      	beq.n	800ac4e <HAL_ADC_Init+0x25e>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	695b      	ldr	r3, [r3, #20]
 800ac40:	2b08      	cmp	r3, #8
 800ac42:	d004      	beq.n	800ac4e <HAL_ADC_Init+0x25e>
 800ac44:	f240 11a5 	movw	r1, #421	; 0x1a5
 800ac48:	4810      	ldr	r0, [pc, #64]	; (800ac8c <HAL_ADC_Init+0x29c>)
 800ac4a:	f7f9 fc9b 	bl	8004584 <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d009      	beq.n	800ac6a <HAL_ADC_Init+0x27a>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac5e:	d004      	beq.n	800ac6a <HAL_ADC_Init+0x27a>
 800ac60:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 800ac64:	4809      	ldr	r0, [pc, #36]	; (800ac8c <HAL_ADC_Init+0x29c>)
 800ac66:	f7f9 fc8d 	bl	8004584 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	7e1b      	ldrb	r3, [r3, #24]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d00e      	beq.n	800ac90 <HAL_ADC_Init+0x2a0>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	7e1b      	ldrb	r3, [r3, #24]
 800ac76:	2b01      	cmp	r3, #1
 800ac78:	d00a      	beq.n	800ac90 <HAL_ADC_Init+0x2a0>
 800ac7a:	f240 11a7 	movw	r1, #423	; 0x1a7
 800ac7e:	4803      	ldr	r0, [pc, #12]	; (800ac8c <HAL_ADC_Init+0x29c>)
 800ac80:	f7f9 fc80 	bl	8004584 <assert_failed>
 800ac84:	e004      	b.n	800ac90 <HAL_ADC_Init+0x2a0>
 800ac86:	bf00      	nop
 800ac88:	50040000 	.word	0x50040000
 800ac8c:	0801b7fc 	.word	0x0801b7fc
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d009      	beq.n	800acae <HAL_ADC_Init+0x2be>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	d004      	beq.n	800acae <HAL_ADC_Init+0x2be>
 800aca4:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 800aca8:	483a      	ldr	r0, [pc, #232]	; (800ad94 <HAL_ADC_Init+0x3a4>)
 800acaa:	f7f9 fc6b 	bl	8004584 <assert_failed>

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	691b      	ldr	r3, [r3, #16]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d02d      	beq.n	800ad12 <HAL_ADC_Init+0x322>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	69db      	ldr	r3, [r3, #28]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d003      	beq.n	800acc6 <HAL_ADC_Init+0x2d6>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	69db      	ldr	r3, [r3, #28]
 800acc2:	2b10      	cmp	r3, #16
 800acc4:	d904      	bls.n	800acd0 <HAL_ADC_Init+0x2e0>
 800acc6:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 800acca:	4832      	ldr	r0, [pc, #200]	; (800ad94 <HAL_ADC_Init+0x3a4>)
 800accc:	f7f9 fc5a 	bl	8004584 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d009      	beq.n	800acee <HAL_ADC_Init+0x2fe>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d004      	beq.n	800acee <HAL_ADC_Init+0x2fe>
 800ace4:	f240 11ad 	movw	r1, #429	; 0x1ad
 800ace8:	482a      	ldr	r0, [pc, #168]	; (800ad94 <HAL_ADC_Init+0x3a4>)
 800acea:	f7f9 fc4b 	bl	8004584 <assert_failed>

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	d10c      	bne.n	800ad12 <HAL_ADC_Init+0x322>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d003      	beq.n	800ad08 <HAL_ADC_Init+0x318>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad04:	2b08      	cmp	r3, #8
 800ad06:	d904      	bls.n	800ad12 <HAL_ADC_Init+0x322>
 800ad08:	f240 11b1 	movw	r1, #433	; 0x1b1
 800ad0c:	4821      	ldr	r0, [pc, #132]	; (800ad94 <HAL_ADC_Init+0x3a4>)
 800ad0e:	f7f9 fc39 	bl	8004584 <assert_failed>
    }
  }

  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ad18:	2b01      	cmp	r3, #1
 800ad1a:	d108      	bne.n	800ad2e <HAL_ADC_Init+0x33e>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	7e5b      	ldrb	r3, [r3, #25]
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	d104      	bne.n	800ad2e <HAL_ADC_Init+0x33e>
 800ad24:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 800ad28:	481a      	ldr	r0, [pc, #104]	; (800ad94 <HAL_ADC_Init+0x3a4>)
 800ad2a:	f7f9 fc2b 	bl	8004584 <assert_failed>

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d109      	bne.n	800ad4a <HAL_ADC_Init+0x35a>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f7f6 fed6 	bl	8001ae8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2200      	movs	r2, #0
 800ad46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f7ff fd62 	bl	800a818 <LL_ADC_IsDeepPowerDownEnabled>
 800ad54:	4603      	mov	r3, r0
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d004      	beq.n	800ad64 <HAL_ADC_Init+0x374>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7ff fd48 	bl	800a7f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f7ff fd7d 	bl	800a868 <LL_ADC_IsInternalRegulatorEnabled>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d11b      	bne.n	800adac <HAL_ADC_Init+0x3bc>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f7ff fd61 	bl	800a840 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800ad7e:	4b06      	ldr	r3, [pc, #24]	; (800ad98 <HAL_ADC_Init+0x3a8>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	099b      	lsrs	r3, r3, #6
 800ad84:	4a05      	ldr	r2, [pc, #20]	; (800ad9c <HAL_ADC_Init+0x3ac>)
 800ad86:	fba2 2303 	umull	r2, r3, r2, r3
 800ad8a:	099b      	lsrs	r3, r3, #6
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	005b      	lsls	r3, r3, #1
 800ad90:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800ad92:	e008      	b.n	800ada6 <HAL_ADC_Init+0x3b6>
 800ad94:	0801b7fc 	.word	0x0801b7fc
 800ad98:	20000ff8 	.word	0x20000ff8
 800ad9c:	053e2d63 	.word	0x053e2d63
    {
      wait_loop_index--;
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	3b01      	subs	r3, #1
 800ada4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d1f9      	bne.n	800ada0 <HAL_ADC_Init+0x3b0>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4618      	mov	r0, r3
 800adb2:	f7ff fd59 	bl	800a868 <LL_ADC_IsInternalRegulatorEnabled>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d10d      	bne.n	800add8 <HAL_ADC_Init+0x3e8>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adc0:	f043 0210 	orr.w	r2, r3, #16
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adcc:	f043 0201 	orr.w	r2, r3, #1
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800add4:	2301      	movs	r3, #1
 800add6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	4618      	mov	r0, r3
 800adde:	f7ff fdcd 	bl	800a97c <LL_ADC_REG_IsConversionOngoing>
 800ade2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ade8:	f003 0310 	and.w	r3, r3, #16
 800adec:	2b00      	cmp	r3, #0
 800adee:	f040 8134 	bne.w	800b05a <HAL_ADC_Init+0x66a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	f040 8130 	bne.w	800b05a <HAL_ADC_Init+0x66a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adfe:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800ae02:	f043 0202 	orr.w	r2, r3, #2
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7ff fd66 	bl	800a8e0 <LL_ADC_IsEnabled>
 800ae14:	4603      	mov	r3, r0
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d10b      	bne.n	800ae32 <HAL_ADC_Init+0x442>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800ae1a:	4896      	ldr	r0, [pc, #600]	; (800b074 <HAL_ADC_Init+0x684>)
 800ae1c:	f7ff fd60 	bl	800a8e0 <LL_ADC_IsEnabled>
 800ae20:	4603      	mov	r3, r0
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d105      	bne.n	800ae32 <HAL_ADC_Init+0x442>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	4619      	mov	r1, r3
 800ae2c:	4892      	ldr	r0, [pc, #584]	; (800b078 <HAL_ADC_Init+0x688>)
 800ae2e:	f7ff fba9 	bl	800a584 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	7e5b      	ldrb	r3, [r3, #25]
 800ae36:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800ae3c:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800ae42:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800ae48:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ae50:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800ae52:	4313      	orrs	r3, r2
 800ae54:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	d106      	bne.n	800ae6e <HAL_ADC_Init+0x47e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae64:	3b01      	subs	r3, #1
 800ae66:	045b      	lsls	r3, r3, #17
 800ae68:	69ba      	ldr	r2, [r7, #24]
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d009      	beq.n	800ae8a <HAL_ADC_Init+0x49a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae7a:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae82:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800ae84:	69ba      	ldr	r2, [r7, #24]
 800ae86:	4313      	orrs	r3, r2
 800ae88:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	68da      	ldr	r2, [r3, #12]
 800ae90:	4b7a      	ldr	r3, [pc, #488]	; (800b07c <HAL_ADC_Init+0x68c>)
 800ae92:	4013      	ands	r3, r2
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	6812      	ldr	r2, [r2, #0]
 800ae98:	69b9      	ldr	r1, [r7, #24]
 800ae9a:	430b      	orrs	r3, r1
 800ae9c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	4618      	mov	r0, r3
 800aea4:	f7ff fd6a 	bl	800a97c <LL_ADC_REG_IsConversionOngoing>
 800aea8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f7ff fd8b 	bl	800a9ca <LL_ADC_INJ_IsConversionOngoing>
 800aeb4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	f040 80ac 	bne.w	800b016 <HAL_ADC_Init+0x626>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	f040 80a8 	bne.w	800b016 <HAL_ADC_Init+0x626>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800aeca:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aed2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800aed4:	4313      	orrs	r3, r2
 800aed6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	68db      	ldr	r3, [r3, #12]
 800aede:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aee2:	f023 0302 	bic.w	r3, r3, #2
 800aee6:	687a      	ldr	r2, [r7, #4]
 800aee8:	6812      	ldr	r2, [r2, #0]
 800aeea:	69b9      	ldr	r1, [r7, #24]
 800aeec:	430b      	orrs	r3, r1
 800aeee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800aef6:	2b01      	cmp	r3, #1
 800aef8:	f040 8085 	bne.w	800b006 <HAL_ADC_Init+0x616>
      {
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af00:	2b00      	cmp	r3, #0
 800af02:	d020      	beq.n	800af46 <HAL_ADC_Init+0x556>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af08:	2b04      	cmp	r3, #4
 800af0a:	d01c      	beq.n	800af46 <HAL_ADC_Init+0x556>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af10:	2b08      	cmp	r3, #8
 800af12:	d018      	beq.n	800af46 <HAL_ADC_Init+0x556>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af18:	2b0c      	cmp	r3, #12
 800af1a:	d014      	beq.n	800af46 <HAL_ADC_Init+0x556>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af20:	2b10      	cmp	r3, #16
 800af22:	d010      	beq.n	800af46 <HAL_ADC_Init+0x556>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af28:	2b14      	cmp	r3, #20
 800af2a:	d00c      	beq.n	800af46 <HAL_ADC_Init+0x556>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af30:	2b18      	cmp	r3, #24
 800af32:	d008      	beq.n	800af46 <HAL_ADC_Init+0x556>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af38:	2b1c      	cmp	r3, #28
 800af3a:	d004      	beq.n	800af46 <HAL_ADC_Init+0x556>
 800af3c:	f240 2167 	movw	r1, #615	; 0x267
 800af40:	484f      	ldr	r0, [pc, #316]	; (800b080 <HAL_ADC_Init+0x690>)
 800af42:	f7f9 fb1f 	bl	8004584 <assert_failed>
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d025      	beq.n	800af9a <HAL_ADC_Init+0x5aa>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af52:	2b20      	cmp	r3, #32
 800af54:	d021      	beq.n	800af9a <HAL_ADC_Init+0x5aa>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af5a:	2b40      	cmp	r3, #64	; 0x40
 800af5c:	d01d      	beq.n	800af9a <HAL_ADC_Init+0x5aa>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af62:	2b60      	cmp	r3, #96	; 0x60
 800af64:	d019      	beq.n	800af9a <HAL_ADC_Init+0x5aa>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af6a:	2b80      	cmp	r3, #128	; 0x80
 800af6c:	d015      	beq.n	800af9a <HAL_ADC_Init+0x5aa>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af72:	2ba0      	cmp	r3, #160	; 0xa0
 800af74:	d011      	beq.n	800af9a <HAL_ADC_Init+0x5aa>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af7a:	2bc0      	cmp	r3, #192	; 0xc0
 800af7c:	d00d      	beq.n	800af9a <HAL_ADC_Init+0x5aa>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af82:	2be0      	cmp	r3, #224	; 0xe0
 800af84:	d009      	beq.n	800af9a <HAL_ADC_Init+0x5aa>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af8e:	d004      	beq.n	800af9a <HAL_ADC_Init+0x5aa>
 800af90:	f44f 711a 	mov.w	r1, #616	; 0x268
 800af94:	483a      	ldr	r0, [pc, #232]	; (800b080 <HAL_ADC_Init+0x690>)
 800af96:	f7f9 faf5 	bl	8004584 <assert_failed>
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d009      	beq.n	800afb6 <HAL_ADC_Init+0x5c6>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afaa:	d004      	beq.n	800afb6 <HAL_ADC_Init+0x5c6>
 800afac:	f240 2169 	movw	r1, #617	; 0x269
 800afb0:	4833      	ldr	r0, [pc, #204]	; (800b080 <HAL_ADC_Init+0x690>)
 800afb2:	f7f9 fae7 	bl	8004584 <assert_failed>
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d00a      	beq.n	800afd4 <HAL_ADC_Init+0x5e4>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afc2:	f240 4201 	movw	r2, #1025	; 0x401
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d004      	beq.n	800afd4 <HAL_ADC_Init+0x5e4>
 800afca:	f240 216a 	movw	r1, #618	; 0x26a
 800afce:	482c      	ldr	r0, [pc, #176]	; (800b080 <HAL_ADC_Init+0x690>)
 800afd0:	f7f9 fad8 	bl	8004584 <assert_failed>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	691b      	ldr	r3, [r3, #16]
 800afda:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800afde:	f023 0304 	bic.w	r3, r3, #4
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800afea:	4311      	orrs	r1, r2
 800afec:	687a      	ldr	r2, [r7, #4]
 800afee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800aff0:	4311      	orrs	r1, r2
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800aff6:	430a      	orrs	r2, r1
 800aff8:	431a      	orrs	r2, r3
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f042 0201 	orr.w	r2, r2, #1
 800b002:	611a      	str	r2, [r3, #16]
 800b004:	e007      	b.n	800b016 <HAL_ADC_Init+0x626>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	691a      	ldr	r2, [r3, #16]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f022 0201 	bic.w	r2, r2, #1
 800b014:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	691b      	ldr	r3, [r3, #16]
 800b01a:	2b01      	cmp	r3, #1
 800b01c:	d10c      	bne.n	800b038 <HAL_ADC_Init+0x648>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b024:	f023 010f 	bic.w	r1, r3, #15
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	69db      	ldr	r3, [r3, #28]
 800b02c:	1e5a      	subs	r2, r3, #1
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	430a      	orrs	r2, r1
 800b034:	631a      	str	r2, [r3, #48]	; 0x30
 800b036:	e007      	b.n	800b048 <HAL_ADC_Init+0x658>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f022 020f 	bic.w	r2, r2, #15
 800b046:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b04c:	f023 0303 	bic.w	r3, r3, #3
 800b050:	f043 0201 	orr.w	r2, r3, #1
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	655a      	str	r2, [r3, #84]	; 0x54
 800b058:	e007      	b.n	800b06a <HAL_ADC_Init+0x67a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b05e:	f043 0210 	orr.w	r2, r3, #16
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800b066:	2301      	movs	r3, #1
 800b068:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800b06a:	7ffb      	ldrb	r3, [r7, #31]
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3720      	adds	r7, #32
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}
 800b074:	50040000 	.word	0x50040000
 800b078:	50040300 	.word	0x50040300
 800b07c:	fff0c007 	.word	0xfff0c007
 800b080:	0801b7fc 	.word	0x0801b7fc

0800b084 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b086      	sub	sp, #24
 800b088:	af00      	add	r7, sp, #0
 800b08a:	60f8      	str	r0, [r7, #12]
 800b08c:	60b9      	str	r1, [r7, #8]
 800b08e:	607a      	str	r2, [r7, #4]
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	4a3f      	ldr	r2, [pc, #252]	; (800b194 <HAL_ADC_Start_DMA+0x110>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d004      	beq.n	800b0a4 <HAL_ADC_Start_DMA+0x20>
 800b09a:	f240 71c9 	movw	r1, #1993	; 0x7c9
 800b09e:	483e      	ldr	r0, [pc, #248]	; (800b198 <HAL_ADC_Start_DMA+0x114>)
 800b0a0:	f7f9 fa70 	bl	8004584 <assert_failed>

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f7ff fc67 	bl	800a97c <LL_ADC_REG_IsConversionOngoing>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d167      	bne.n	800b184 <HAL_ADC_Start_DMA+0x100>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b0ba:	2b01      	cmp	r3, #1
 800b0bc:	d101      	bne.n	800b0c2 <HAL_ADC_Start_DMA+0x3e>
 800b0be:	2302      	movs	r3, #2
 800b0c0:	e063      	b.n	800b18a <HAL_ADC_Start_DMA+0x106>
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800b0ca:	68f8      	ldr	r0, [r7, #12]
 800b0cc:	f001 f962 	bl	800c394 <ADC_Enable>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800b0d4:	7dfb      	ldrb	r3, [r7, #23]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d14f      	bne.n	800b17a <HAL_ADC_Start_DMA+0xf6>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b0e2:	f023 0301 	bic.w	r3, r3, #1
 800b0e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d006      	beq.n	800b108 <HAL_ADC_Start_DMA+0x84>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0fe:	f023 0206 	bic.w	r2, r3, #6
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	659a      	str	r2, [r3, #88]	; 0x58
 800b106:	e002      	b.n	800b10e <HAL_ADC_Start_DMA+0x8a>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2200      	movs	r2, #0
 800b10c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b112:	4a22      	ldr	r2, [pc, #136]	; (800b19c <HAL_ADC_Start_DMA+0x118>)
 800b114:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b11a:	4a21      	ldr	r2, [pc, #132]	; (800b1a0 <HAL_ADC_Start_DMA+0x11c>)
 800b11c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b122:	4a20      	ldr	r2, [pc, #128]	; (800b1a4 <HAL_ADC_Start_DMA+0x120>)
 800b124:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	221c      	movs	r2, #28
 800b12c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2200      	movs	r2, #0
 800b132:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	685a      	ldr	r2, [r3, #4]
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f042 0210 	orr.w	r2, r2, #16
 800b144:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	68da      	ldr	r2, [r3, #12]
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f042 0201 	orr.w	r2, r2, #1
 800b154:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	3340      	adds	r3, #64	; 0x40
 800b160:	4619      	mov	r1, r3
 800b162:	68ba      	ldr	r2, [r7, #8]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f002 fec1 	bl	800deec <HAL_DMA_Start_IT>
 800b16a:	4603      	mov	r3, r0
 800b16c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	4618      	mov	r0, r3
 800b174:	f7ff fbda 	bl	800a92c <LL_ADC_REG_StartConversion>
 800b178:	e006      	b.n	800b188 <HAL_ADC_Start_DMA+0x104>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2200      	movs	r2, #0
 800b17e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800b182:	e001      	b.n	800b188 <HAL_ADC_Start_DMA+0x104>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800b184:	2302      	movs	r3, #2
 800b186:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800b188:	7dfb      	ldrb	r3, [r7, #23]
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3718      	adds	r7, #24
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	50040000 	.word	0x50040000
 800b198:	0801b7fc 	.word	0x0801b7fc
 800b19c:	0800c55f 	.word	0x0800c55f
 800b1a0:	0800c637 	.word	0x0800c637
 800b1a4:	0800c653 	.word	0x0800c653

0800b1a8 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b084      	sub	sp, #16
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4a32      	ldr	r2, [pc, #200]	; (800b280 <HAL_ADC_Stop_DMA+0xd8>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d004      	beq.n	800b1c4 <HAL_ADC_Stop_DMA+0x1c>
 800b1ba:	f640 0154 	movw	r1, #2132	; 0x854
 800b1be:	4831      	ldr	r0, [pc, #196]	; (800b284 <HAL_ADC_Stop_DMA+0xdc>)
 800b1c0:	f7f9 f9e0 	bl	8004584 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b1ca:	2b01      	cmp	r3, #1
 800b1cc:	d101      	bne.n	800b1d2 <HAL_ADC_Stop_DMA+0x2a>
 800b1ce:	2302      	movs	r3, #2
 800b1d0:	e051      	b.n	800b276 <HAL_ADC_Stop_DMA+0xce>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2201      	movs	r2, #1
 800b1d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800b1da:	2103      	movs	r1, #3
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f001 f801 	bl	800c1e4 <ADC_ConversionStop>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800b1e6:	7bfb      	ldrb	r3, [r7, #15]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d13f      	bne.n	800b26c <HAL_ADC_Stop_DMA+0xc4>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	68da      	ldr	r2, [r3, #12]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f022 0201 	bic.w	r2, r2, #1
 800b1fa:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b200:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b204:	b2db      	uxtb	r3, r3
 800b206:	2b02      	cmp	r3, #2
 800b208:	d10f      	bne.n	800b22a <HAL_ADC_Stop_DMA+0x82>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b20e:	4618      	mov	r0, r3
 800b210:	f002 feda 	bl	800dfc8 <HAL_DMA_Abort>
 800b214:	4603      	mov	r3, r0
 800b216:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800b218:	7bfb      	ldrb	r3, [r7, #15]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d005      	beq.n	800b22a <HAL_ADC_Stop_DMA+0x82>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b222:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	685a      	ldr	r2, [r3, #4]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f022 0210 	bic.w	r2, r2, #16
 800b238:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800b23a:	7bfb      	ldrb	r3, [r7, #15]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d105      	bne.n	800b24c <HAL_ADC_Stop_DMA+0xa4>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f001 f92d 	bl	800c4a0 <ADC_Disable>
 800b246:	4603      	mov	r3, r0
 800b248:	73fb      	strb	r3, [r7, #15]
 800b24a:	e002      	b.n	800b252 <HAL_ADC_Stop_DMA+0xaa>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f001 f927 	bl	800c4a0 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800b252:	7bfb      	ldrb	r3, [r7, #15]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d109      	bne.n	800b26c <HAL_ADC_Stop_DMA+0xc4>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b25c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800b260:	f023 0301 	bic.w	r3, r3, #1
 800b264:	f043 0201 	orr.w	r2, r3, #1
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2200      	movs	r2, #0
 800b270:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800b274:	7bfb      	ldrb	r3, [r7, #15]
}
 800b276:	4618      	mov	r0, r3
 800b278:	3710      	adds	r7, #16
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
 800b27e:	bf00      	nop
 800b280:	50040000 	.word	0x50040000
 800b284:	0801b7fc 	.word	0x0801b7fc

0800b288 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b088      	sub	sp, #32
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800b290:	2300      	movs	r3, #0
 800b292:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	617b      	str	r3, [r7, #20]
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	4a87      	ldr	r2, [pc, #540]	; (800b4c8 <HAL_ADC_IRQHandler+0x240>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d004      	beq.n	800b2b8 <HAL_ADC_IRQHandler+0x30>
 800b2ae:	f640 01c3 	movw	r1, #2243	; 0x8c3
 800b2b2:	4886      	ldr	r0, [pc, #536]	; (800b4cc <HAL_ADC_IRQHandler+0x244>)
 800b2b4:	f7f9 f966 	bl	8004584 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	695b      	ldr	r3, [r3, #20]
 800b2bc:	2b04      	cmp	r3, #4
 800b2be:	d008      	beq.n	800b2d2 <HAL_ADC_IRQHandler+0x4a>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	695b      	ldr	r3, [r3, #20]
 800b2c4:	2b08      	cmp	r3, #8
 800b2c6:	d004      	beq.n	800b2d2 <HAL_ADC_IRQHandler+0x4a>
 800b2c8:	f640 01c4 	movw	r1, #2244	; 0x8c4
 800b2cc:	487f      	ldr	r0, [pc, #508]	; (800b4cc <HAL_ADC_IRQHandler+0x244>)
 800b2ce:	f7f9 f959 	bl	8004584 <assert_failed>

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800b2d2:	69bb      	ldr	r3, [r7, #24]
 800b2d4:	f003 0302 	and.w	r3, r3, #2
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d017      	beq.n	800b30c <HAL_ADC_IRQHandler+0x84>
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	f003 0302 	and.w	r3, r3, #2
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d012      	beq.n	800b30c <HAL_ADC_IRQHandler+0x84>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2ea:	f003 0310 	and.w	r3, r3, #16
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d105      	bne.n	800b2fe <HAL_ADC_IRQHandler+0x76>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2f6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f001 f9e9 	bl	800c6d6 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	2202      	movs	r2, #2
 800b30a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800b30c:	69bb      	ldr	r3, [r7, #24]
 800b30e:	f003 0304 	and.w	r3, r3, #4
 800b312:	2b00      	cmp	r3, #0
 800b314:	d004      	beq.n	800b320 <HAL_ADC_IRQHandler+0x98>
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	f003 0304 	and.w	r3, r3, #4
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d109      	bne.n	800b334 <HAL_ADC_IRQHandler+0xac>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800b320:	69bb      	ldr	r3, [r7, #24]
 800b322:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800b326:	2b00      	cmp	r3, #0
 800b328:	d05e      	beq.n	800b3e8 <HAL_ADC_IRQHandler+0x160>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	f003 0308 	and.w	r3, r3, #8
 800b330:	2b00      	cmp	r3, #0
 800b332:	d059      	beq.n	800b3e8 <HAL_ADC_IRQHandler+0x160>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b338:	f003 0310 	and.w	r3, r3, #16
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d105      	bne.n	800b34c <HAL_ADC_IRQHandler+0xc4>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b344:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4618      	mov	r0, r3
 800b352:	f7ff f9ae 	bl	800a6b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 800b356:	4603      	mov	r3, r0
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d03e      	beq.n	800b3da <HAL_ADC_IRQHandler+0x152>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	68db      	ldr	r3, [r3, #12]
 800b362:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d135      	bne.n	800b3da <HAL_ADC_IRQHandler+0x152>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f003 0308 	and.w	r3, r3, #8
 800b378:	2b08      	cmp	r3, #8
 800b37a:	d12e      	bne.n	800b3da <HAL_ADC_IRQHandler+0x152>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4618      	mov	r0, r3
 800b382:	f7ff fafb 	bl	800a97c <LL_ADC_REG_IsConversionOngoing>
 800b386:	4603      	mov	r3, r0
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d11a      	bne.n	800b3c2 <HAL_ADC_IRQHandler+0x13a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	685a      	ldr	r2, [r3, #4]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f022 020c 	bic.w	r2, r2, #12
 800b39a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d112      	bne.n	800b3da <HAL_ADC_IRQHandler+0x152>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3b8:	f043 0201 	orr.w	r2, r3, #1
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	655a      	str	r2, [r3, #84]	; 0x54
 800b3c0:	e00b      	b.n	800b3da <HAL_ADC_IRQHandler+0x152>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3c6:	f043 0210 	orr.w	r2, r3, #16
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3d2:	f043 0201 	orr.w	r2, r3, #1
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f7fc fd4e 	bl	8007e7c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	220c      	movs	r2, #12
 800b3e6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800b3e8:	69bb      	ldr	r3, [r7, #24]
 800b3ea:	f003 0320 	and.w	r3, r3, #32
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d004      	beq.n	800b3fc <HAL_ADC_IRQHandler+0x174>
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	f003 0320 	and.w	r3, r3, #32
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d109      	bne.n	800b410 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800b3fc:	69bb      	ldr	r3, [r7, #24]
 800b3fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800b402:	2b00      	cmp	r3, #0
 800b404:	d077      	beq.n	800b4f6 <HAL_ADC_IRQHandler+0x26e>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d072      	beq.n	800b4f6 <HAL_ADC_IRQHandler+0x26e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b414:	f003 0310 	and.w	r3, r3, #16
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d105      	bne.n	800b428 <HAL_ADC_IRQHandler+0x1a0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b420:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4618      	mov	r0, r3
 800b42e:	f7ff f97f 	bl	800a730 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800b432:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4618      	mov	r0, r3
 800b43a:	f7ff f93a 	bl	800a6b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 800b43e:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	68db      	ldr	r3, [r3, #12]
 800b446:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d04c      	beq.n	800b4e8 <HAL_ADC_IRQHandler+0x260>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b454:	2b00      	cmp	r3, #0
 800b456:	d007      	beq.n	800b468 <HAL_ADC_IRQHandler+0x1e0>
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d044      	beq.n	800b4e8 <HAL_ADC_IRQHandler+0x260>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800b464:	2b00      	cmp	r3, #0
 800b466:	d13f      	bne.n	800b4e8 <HAL_ADC_IRQHandler+0x260>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b472:	2b40      	cmp	r3, #64	; 0x40
 800b474:	d138      	bne.n	800b4e8 <HAL_ADC_IRQHandler+0x260>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d133      	bne.n	800b4e8 <HAL_ADC_IRQHandler+0x260>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4618      	mov	r0, r3
 800b486:	f7ff faa0 	bl	800a9ca <LL_ADC_INJ_IsConversionOngoing>
 800b48a:	4603      	mov	r3, r0
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d11f      	bne.n	800b4d0 <HAL_ADC_IRQHandler+0x248>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	685a      	ldr	r2, [r3, #4]
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b49e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4a4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d117      	bne.n	800b4e8 <HAL_ADC_IRQHandler+0x260>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4bc:	f043 0201 	orr.w	r2, r3, #1
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	655a      	str	r2, [r3, #84]	; 0x54
 800b4c4:	e010      	b.n	800b4e8 <HAL_ADC_IRQHandler+0x260>
 800b4c6:	bf00      	nop
 800b4c8:	50040000 	.word	0x50040000
 800b4cc:	0801b7fc 	.word	0x0801b7fc
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4d4:	f043 0210 	orr.w	r2, r3, #16
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4e0:	f043 0201 	orr.w	r2, r3, #1
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f001 f8cc 	bl	800c686 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	2260      	movs	r2, #96	; 0x60
 800b4f4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800b4f6:	69bb      	ldr	r3, [r7, #24]
 800b4f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d011      	beq.n	800b524 <HAL_ADC_IRQHandler+0x29c>
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b506:	2b00      	cmp	r3, #0
 800b508:	d00c      	beq.n	800b524 <HAL_ADC_IRQHandler+0x29c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b50e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f000 f890 	bl	800b63c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	2280      	movs	r2, #128	; 0x80
 800b522:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800b524:	69bb      	ldr	r3, [r7, #24]
 800b526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d012      	beq.n	800b554 <HAL_ADC_IRQHandler+0x2cc>
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b534:	2b00      	cmp	r3, #0
 800b536:	d00d      	beq.n	800b554 <HAL_ADC_IRQHandler+0x2cc>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b53c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f001 f8b2 	bl	800c6ae <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b552:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800b554:	69bb      	ldr	r3, [r7, #24]
 800b556:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d012      	beq.n	800b584 <HAL_ADC_IRQHandler+0x2fc>
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b564:	2b00      	cmp	r3, #0
 800b566:	d00d      	beq.n	800b584 <HAL_ADC_IRQHandler+0x2fc>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b56c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f001 f8a4 	bl	800c6c2 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b582:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800b584:	69bb      	ldr	r3, [r7, #24]
 800b586:	f003 0310 	and.w	r3, r3, #16
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d02a      	beq.n	800b5e4 <HAL_ADC_IRQHandler+0x35c>
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	f003 0310 	and.w	r3, r3, #16
 800b594:	2b00      	cmp	r3, #0
 800b596:	d025      	beq.n	800b5e4 <HAL_ADC_IRQHandler+0x35c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d102      	bne.n	800b5a6 <HAL_ADC_IRQHandler+0x31e>
    {
      overrun_error = 1UL;
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	61fb      	str	r3, [r7, #28]
 800b5a4:	e008      	b.n	800b5b8 <HAL_ADC_IRQHandler+0x330>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	68db      	ldr	r3, [r3, #12]
 800b5ac:	f003 0301 	and.w	r3, r3, #1
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d001      	beq.n	800b5b8 <HAL_ADC_IRQHandler+0x330>
        {
          overrun_error = 1UL;
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 800b5b8:	69fb      	ldr	r3, [r7, #28]
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d10e      	bne.n	800b5dc <HAL_ADC_IRQHandler+0x354>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5c2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5ce:	f043 0202 	orr.w	r2, r3, #2
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f000 f83a 	bl	800b650 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	2210      	movs	r2, #16
 800b5e2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800b5e4:	69bb      	ldr	r3, [r7, #24]
 800b5e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d018      	beq.n	800b620 <HAL_ADC_IRQHandler+0x398>
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d013      	beq.n	800b620 <HAL_ADC_IRQHandler+0x398>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5fc:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b608:	f043 0208 	orr.w	r2, r3, #8
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b618:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f001 f83d 	bl	800c69a <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800b620:	bf00      	nop
 800b622:	3720      	adds	r7, #32
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}

0800b628 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800b628:	b480      	push	{r7}
 800b62a:	b083      	sub	sp, #12
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800b630:	bf00      	nop
 800b632:	370c      	adds	r7, #12
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr

0800b63c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b083      	sub	sp, #12
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800b644:	bf00      	nop
 800b646:	370c      	adds	r7, #12
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr

0800b650 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800b650:	b480      	push	{r7}
 800b652:	b083      	sub	sp, #12
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800b658:	bf00      	nop
 800b65a:	370c      	adds	r7, #12
 800b65c:	46bd      	mov	sp, r7
 800b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b662:	4770      	bx	lr

0800b664 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800b664:	b590      	push	{r4, r7, lr}
 800b666:	b0b7      	sub	sp, #220	; 0xdc
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b66e:	2300      	movs	r3, #0
 800b670:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800b674:	2300      	movs	r3, #0
 800b676:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	4aa4      	ldr	r2, [pc, #656]	; (800b910 <HAL_ADC_ConfigChannel+0x2ac>)
 800b67e:	4293      	cmp	r3, r2
 800b680:	d004      	beq.n	800b68c <HAL_ADC_ConfigChannel+0x28>
 800b682:	f640 2195 	movw	r1, #2709	; 0xa95
 800b686:	48a3      	ldr	r0, [pc, #652]	; (800b914 <HAL_ADC_ConfigChannel+0x2b0>)
 800b688:	f7f8 ff7c 	bl	8004584 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	2b06      	cmp	r3, #6
 800b692:	d04f      	beq.n	800b734 <HAL_ADC_ConfigChannel+0xd0>
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	685b      	ldr	r3, [r3, #4]
 800b698:	2b0c      	cmp	r3, #12
 800b69a:	d04b      	beq.n	800b734 <HAL_ADC_ConfigChannel+0xd0>
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	2b12      	cmp	r3, #18
 800b6a2:	d047      	beq.n	800b734 <HAL_ADC_ConfigChannel+0xd0>
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	2b18      	cmp	r3, #24
 800b6aa:	d043      	beq.n	800b734 <HAL_ADC_ConfigChannel+0xd0>
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	685b      	ldr	r3, [r3, #4]
 800b6b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6b4:	d03e      	beq.n	800b734 <HAL_ADC_ConfigChannel+0xd0>
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 800b6be:	d039      	beq.n	800b734 <HAL_ADC_ConfigChannel+0xd0>
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	685b      	ldr	r3, [r3, #4]
 800b6c4:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 800b6c8:	d034      	beq.n	800b734 <HAL_ADC_ConfigChannel+0xd0>
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	685b      	ldr	r3, [r3, #4]
 800b6ce:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 800b6d2:	d02f      	beq.n	800b734 <HAL_ADC_ConfigChannel+0xd0>
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800b6dc:	d02a      	beq.n	800b734 <HAL_ADC_ConfigChannel+0xd0>
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	685b      	ldr	r3, [r3, #4]
 800b6e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6e6:	d025      	beq.n	800b734 <HAL_ADC_ConfigChannel+0xd0>
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	f240 2206 	movw	r2, #518	; 0x206
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d01f      	beq.n	800b734 <HAL_ADC_ConfigChannel+0xd0>
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 800b6fc:	d01a      	beq.n	800b734 <HAL_ADC_ConfigChannel+0xd0>
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	f240 2212 	movw	r2, #530	; 0x212
 800b706:	4293      	cmp	r3, r2
 800b708:	d014      	beq.n	800b734 <HAL_ADC_ConfigChannel+0xd0>
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b712:	d00f      	beq.n	800b734 <HAL_ADC_ConfigChannel+0xd0>
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	685b      	ldr	r3, [r3, #4]
 800b718:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b71c:	d00a      	beq.n	800b734 <HAL_ADC_ConfigChannel+0xd0>
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	f240 3206 	movw	r2, #774	; 0x306
 800b726:	4293      	cmp	r3, r2
 800b728:	d004      	beq.n	800b734 <HAL_ADC_ConfigChannel+0xd0>
 800b72a:	f640 2196 	movw	r1, #2710	; 0xa96
 800b72e:	4879      	ldr	r0, [pc, #484]	; (800b914 <HAL_ADC_ConfigChannel+0x2b0>)
 800b730:	f7f8 ff28 	bl	8004584 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	689b      	ldr	r3, [r3, #8]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d020      	beq.n	800b77e <HAL_ADC_ConfigChannel+0x11a>
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	689b      	ldr	r3, [r3, #8]
 800b740:	2b01      	cmp	r3, #1
 800b742:	d01c      	beq.n	800b77e <HAL_ADC_ConfigChannel+0x11a>
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	689b      	ldr	r3, [r3, #8]
 800b748:	2b02      	cmp	r3, #2
 800b74a:	d018      	beq.n	800b77e <HAL_ADC_ConfigChannel+0x11a>
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	689b      	ldr	r3, [r3, #8]
 800b750:	2b03      	cmp	r3, #3
 800b752:	d014      	beq.n	800b77e <HAL_ADC_ConfigChannel+0x11a>
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	689b      	ldr	r3, [r3, #8]
 800b758:	2b04      	cmp	r3, #4
 800b75a:	d010      	beq.n	800b77e <HAL_ADC_ConfigChannel+0x11a>
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	689b      	ldr	r3, [r3, #8]
 800b760:	2b05      	cmp	r3, #5
 800b762:	d00c      	beq.n	800b77e <HAL_ADC_ConfigChannel+0x11a>
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	689b      	ldr	r3, [r3, #8]
 800b768:	2b06      	cmp	r3, #6
 800b76a:	d008      	beq.n	800b77e <HAL_ADC_ConfigChannel+0x11a>
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	689b      	ldr	r3, [r3, #8]
 800b770:	2b07      	cmp	r3, #7
 800b772:	d004      	beq.n	800b77e <HAL_ADC_ConfigChannel+0x11a>
 800b774:	f640 2197 	movw	r1, #2711	; 0xa97
 800b778:	4866      	ldr	r0, [pc, #408]	; (800b914 <HAL_ADC_ConfigChannel+0x2b0>)
 800b77a:	f7f8 ff03 	bl	8004584 <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	68db      	ldr	r3, [r3, #12]
 800b782:	2b7f      	cmp	r3, #127	; 0x7f
 800b784:	d009      	beq.n	800b79a <HAL_ADC_ConfigChannel+0x136>
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	68db      	ldr	r3, [r3, #12]
 800b78a:	4a63      	ldr	r2, [pc, #396]	; (800b918 <HAL_ADC_ConfigChannel+0x2b4>)
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d004      	beq.n	800b79a <HAL_ADC_ConfigChannel+0x136>
 800b790:	f640 2198 	movw	r1, #2712	; 0xa98
 800b794:	485f      	ldr	r0, [pc, #380]	; (800b914 <HAL_ADC_ConfigChannel+0x2b0>)
 800b796:	f7f8 fef5 	bl	8004584 <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	691b      	ldr	r3, [r3, #16]
 800b79e:	2b04      	cmp	r3, #4
 800b7a0:	d014      	beq.n	800b7cc <HAL_ADC_ConfigChannel+0x168>
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	691b      	ldr	r3, [r3, #16]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d010      	beq.n	800b7cc <HAL_ADC_ConfigChannel+0x168>
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	691b      	ldr	r3, [r3, #16]
 800b7ae:	2b01      	cmp	r3, #1
 800b7b0:	d00c      	beq.n	800b7cc <HAL_ADC_ConfigChannel+0x168>
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	691b      	ldr	r3, [r3, #16]
 800b7b6:	2b02      	cmp	r3, #2
 800b7b8:	d008      	beq.n	800b7cc <HAL_ADC_ConfigChannel+0x168>
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	691b      	ldr	r3, [r3, #16]
 800b7be:	2b03      	cmp	r3, #3
 800b7c0:	d004      	beq.n	800b7cc <HAL_ADC_ConfigChannel+0x168>
 800b7c2:	f640 2199 	movw	r1, #2713	; 0xa99
 800b7c6:	4853      	ldr	r0, [pc, #332]	; (800b914 <HAL_ADC_ConfigChannel+0x2b0>)
 800b7c8:	f7f8 fedc 	bl	8004584 <assert_failed>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	695c      	ldr	r4, [r3, #20]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f7fe ff09 	bl	800a5ec <LL_ADC_GetResolution>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	089b      	lsrs	r3, r3, #2
 800b7de:	f640 72ff 	movw	r2, #4095	; 0xfff
 800b7e2:	fa22 f303 	lsr.w	r3, r2, r3
 800b7e6:	429c      	cmp	r4, r3
 800b7e8:	d904      	bls.n	800b7f4 <HAL_ADC_ConfigChannel+0x190>
 800b7ea:	f640 219a 	movw	r1, #2714	; 0xa9a
 800b7ee:	4849      	ldr	r0, [pc, #292]	; (800b914 <HAL_ADC_ConfigChannel+0x2b0>)
 800b7f0:	f7f8 fec8 	bl	8004584 <assert_failed>

  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	691b      	ldr	r3, [r3, #16]
 800b7f8:	2b04      	cmp	r3, #4
 800b7fa:	d009      	beq.n	800b810 <HAL_ADC_ConfigChannel+0x1ac>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b802:	2b01      	cmp	r3, #1
 800b804:	d104      	bne.n	800b810 <HAL_ADC_ConfigChannel+0x1ac>
 800b806:	f640 219e 	movw	r1, #2718	; 0xa9e
 800b80a:	4842      	ldr	r0, [pc, #264]	; (800b914 <HAL_ADC_ConfigChannel+0x2b0>)
 800b80c:	f7f8 feba 	bl	8004584 <assert_failed>

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	4a40      	ldr	r2, [pc, #256]	; (800b918 <HAL_ADC_ConfigChannel+0x2b4>)
 800b816:	4293      	cmp	r3, r2
 800b818:	f000 80c0 	beq.w	800b99c <HAL_ADC_ConfigChannel+0x338>
  {
    assert_param(IS_ADC_CHANNEL(hadc, sConfig->Channel));
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4a3b      	ldr	r2, [pc, #236]	; (800b910 <HAL_ADC_ConfigChannel+0x2ac>)
 800b822:	4293      	cmp	r3, r2
 800b824:	f040 80b4 	bne.w	800b990 <HAL_ADC_ConfigChannel+0x32c>
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	4a3b      	ldr	r2, [pc, #236]	; (800b91c <HAL_ADC_ConfigChannel+0x2b8>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	f000 8104 	beq.w	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	4a39      	ldr	r2, [pc, #228]	; (800b920 <HAL_ADC_ConfigChannel+0x2bc>)
 800b83a:	4293      	cmp	r3, r2
 800b83c:	f000 80fe 	beq.w	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	4a37      	ldr	r2, [pc, #220]	; (800b924 <HAL_ADC_ConfigChannel+0x2c0>)
 800b846:	4293      	cmp	r3, r2
 800b848:	f000 80f8 	beq.w	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4a35      	ldr	r2, [pc, #212]	; (800b928 <HAL_ADC_ConfigChannel+0x2c4>)
 800b852:	4293      	cmp	r3, r2
 800b854:	f000 80f2 	beq.w	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4a33      	ldr	r2, [pc, #204]	; (800b92c <HAL_ADC_ConfigChannel+0x2c8>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	f000 80ec 	beq.w	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4a31      	ldr	r2, [pc, #196]	; (800b930 <HAL_ADC_ConfigChannel+0x2cc>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	f000 80e6 	beq.w	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	4a2f      	ldr	r2, [pc, #188]	; (800b934 <HAL_ADC_ConfigChannel+0x2d0>)
 800b876:	4293      	cmp	r3, r2
 800b878:	f000 80e0 	beq.w	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4a2d      	ldr	r2, [pc, #180]	; (800b938 <HAL_ADC_ConfigChannel+0x2d4>)
 800b882:	4293      	cmp	r3, r2
 800b884:	f000 80da 	beq.w	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	4a2b      	ldr	r2, [pc, #172]	; (800b93c <HAL_ADC_ConfigChannel+0x2d8>)
 800b88e:	4293      	cmp	r3, r2
 800b890:	f000 80d4 	beq.w	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	4a29      	ldr	r2, [pc, #164]	; (800b940 <HAL_ADC_ConfigChannel+0x2dc>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	f000 80ce 	beq.w	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4a27      	ldr	r2, [pc, #156]	; (800b944 <HAL_ADC_ConfigChannel+0x2e0>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	f000 80c8 	beq.w	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	4a25      	ldr	r2, [pc, #148]	; (800b948 <HAL_ADC_ConfigChannel+0x2e4>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	f000 80c2 	beq.w	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	4a23      	ldr	r2, [pc, #140]	; (800b94c <HAL_ADC_ConfigChannel+0x2e8>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	f000 80bc 	beq.w	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4a21      	ldr	r2, [pc, #132]	; (800b950 <HAL_ADC_ConfigChannel+0x2ec>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	f000 80b6 	beq.w	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4a1f      	ldr	r2, [pc, #124]	; (800b954 <HAL_ADC_ConfigChannel+0x2f0>)
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	f000 80b0 	beq.w	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	4a1d      	ldr	r2, [pc, #116]	; (800b958 <HAL_ADC_ConfigChannel+0x2f4>)
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	f000 80aa 	beq.w	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4a1b      	ldr	r2, [pc, #108]	; (800b95c <HAL_ADC_ConfigChannel+0x2f8>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	f000 80a4 	beq.w	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4a19      	ldr	r2, [pc, #100]	; (800b960 <HAL_ADC_ConfigChannel+0x2fc>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	f000 809e 	beq.w	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4a17      	ldr	r2, [pc, #92]	; (800b964 <HAL_ADC_ConfigChannel+0x300>)
 800b906:	4293      	cmp	r3, r2
 800b908:	f000 8098 	beq.w	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800b90c:	e02c      	b.n	800b968 <HAL_ADC_ConfigChannel+0x304>
 800b90e:	bf00      	nop
 800b910:	50040000 	.word	0x50040000
 800b914:	0801b7fc 	.word	0x0801b7fc
 800b918:	407f0000 	.word	0x407f0000
 800b91c:	04300002 	.word	0x04300002
 800b920:	08600004 	.word	0x08600004
 800b924:	0c900008 	.word	0x0c900008
 800b928:	10c00010 	.word	0x10c00010
 800b92c:	14f00020 	.word	0x14f00020
 800b930:	19200040 	.word	0x19200040
 800b934:	1d500080 	.word	0x1d500080
 800b938:	21800100 	.word	0x21800100
 800b93c:	25b00200 	.word	0x25b00200
 800b940:	2a000400 	.word	0x2a000400
 800b944:	2e300800 	.word	0x2e300800
 800b948:	32601000 	.word	0x32601000
 800b94c:	36902000 	.word	0x36902000
 800b950:	3ac04000 	.word	0x3ac04000
 800b954:	3ef08000 	.word	0x3ef08000
 800b958:	43210000 	.word	0x43210000
 800b95c:	47520000 	.word	0x47520000
 800b960:	4b840000 	.word	0x4b840000
 800b964:	80000001 	.word	0x80000001
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4aa9      	ldr	r2, [pc, #676]	; (800bc14 <HAL_ADC_ConfigChannel+0x5b0>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d064      	beq.n	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	4aa8      	ldr	r2, [pc, #672]	; (800bc18 <HAL_ADC_ConfigChannel+0x5b4>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d05f      	beq.n	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4aa6      	ldr	r2, [pc, #664]	; (800bc1c <HAL_ADC_ConfigChannel+0x5b8>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d05a      	beq.n	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4aa5      	ldr	r2, [pc, #660]	; (800bc20 <HAL_ADC_ConfigChannel+0x5bc>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d055      	beq.n	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800b990:	f640 21a3 	movw	r1, #2723	; 0xaa3
 800b994:	48a3      	ldr	r0, [pc, #652]	; (800bc24 <HAL_ADC_ConfigChannel+0x5c0>)
 800b996:	f7f8 fdf5 	bl	8004584 <assert_failed>
 800b99a:	e04f      	b.n	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
  }
  else
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4aa1      	ldr	r2, [pc, #644]	; (800bc28 <HAL_ADC_ConfigChannel+0x5c4>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d04a      	beq.n	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	4aa0      	ldr	r2, [pc, #640]	; (800bc2c <HAL_ADC_ConfigChannel+0x5c8>)
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d045      	beq.n	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4a9e      	ldr	r2, [pc, #632]	; (800bc30 <HAL_ADC_ConfigChannel+0x5cc>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d040      	beq.n	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	4a9d      	ldr	r2, [pc, #628]	; (800bc34 <HAL_ADC_ConfigChannel+0x5d0>)
 800b9c0:	4293      	cmp	r3, r2
 800b9c2:	d03b      	beq.n	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a9b      	ldr	r2, [pc, #620]	; (800bc38 <HAL_ADC_ConfigChannel+0x5d4>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d036      	beq.n	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	4a9a      	ldr	r2, [pc, #616]	; (800bc3c <HAL_ADC_ConfigChannel+0x5d8>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d031      	beq.n	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4a98      	ldr	r2, [pc, #608]	; (800bc40 <HAL_ADC_ConfigChannel+0x5dc>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d02c      	beq.n	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	4a97      	ldr	r2, [pc, #604]	; (800bc44 <HAL_ADC_ConfigChannel+0x5e0>)
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d027      	beq.n	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	4a95      	ldr	r2, [pc, #596]	; (800bc48 <HAL_ADC_ConfigChannel+0x5e4>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d022      	beq.n	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	4a94      	ldr	r2, [pc, #592]	; (800bc4c <HAL_ADC_ConfigChannel+0x5e8>)
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d01d      	beq.n	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	4a92      	ldr	r2, [pc, #584]	; (800bc50 <HAL_ADC_ConfigChannel+0x5ec>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d018      	beq.n	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	4a91      	ldr	r2, [pc, #580]	; (800bc54 <HAL_ADC_ConfigChannel+0x5f0>)
 800ba10:	4293      	cmp	r3, r2
 800ba12:	d013      	beq.n	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	4a8f      	ldr	r2, [pc, #572]	; (800bc58 <HAL_ADC_ConfigChannel+0x5f4>)
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d00e      	beq.n	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	4a8e      	ldr	r2, [pc, #568]	; (800bc5c <HAL_ADC_ConfigChannel+0x5f8>)
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d009      	beq.n	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	4a8c      	ldr	r2, [pc, #560]	; (800bc60 <HAL_ADC_ConfigChannel+0x5fc>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d004      	beq.n	800ba3c <HAL_ADC_ConfigChannel+0x3d8>
 800ba32:	f640 21a7 	movw	r1, #2727	; 0xaa7
 800ba36:	487b      	ldr	r0, [pc, #492]	; (800bc24 <HAL_ADC_ConfigChannel+0x5c0>)
 800ba38:	f7f8 fda4 	bl	8004584 <assert_failed>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ba42:	2b01      	cmp	r3, #1
 800ba44:	d101      	bne.n	800ba4a <HAL_ADC_ConfigChannel+0x3e6>
 800ba46:	2302      	movs	r3, #2
 800ba48:	e3b7      	b.n	800c1ba <HAL_ADC_ConfigChannel+0xb56>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	4618      	mov	r0, r3
 800ba58:	f7fe ff90 	bl	800a97c <LL_ADC_REG_IsConversionOngoing>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	f040 839c 	bne.w	800c19c <HAL_ADC_ConfigChannel+0xb38>
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6818      	ldr	r0, [r3, #0]
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	6859      	ldr	r1, [r3, #4]
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	461a      	mov	r2, r3
 800ba72:	f7fe fe31 	bl	800a6d8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f7fe ff7e 	bl	800a97c <LL_ADC_REG_IsConversionOngoing>
 800ba80:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f7fe ff9e 	bl	800a9ca <LL_ADC_INJ_IsConversionOngoing>
 800ba8e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800ba92:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	f040 81ce 	bne.w	800be38 <HAL_ADC_ConfigChannel+0x7d4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800ba9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	f040 81c9 	bne.w	800be38 <HAL_ADC_ConfigChannel+0x7d4>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6818      	ldr	r0, [r3, #0]
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	6819      	ldr	r1, [r3, #0]
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	689b      	ldr	r3, [r3, #8]
 800bab2:	461a      	mov	r2, r3
 800bab4:	f7fe fe4f 	bl	800a756 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	695a      	ldr	r2, [r3, #20]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	68db      	ldr	r3, [r3, #12]
 800bac2:	08db      	lsrs	r3, r3, #3
 800bac4:	f003 0303 	and.w	r3, r3, #3
 800bac8:	005b      	lsls	r3, r3, #1
 800baca:	fa02 f303 	lsl.w	r3, r2, r3
 800bace:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	691b      	ldr	r3, [r3, #16]
 800bad6:	2b04      	cmp	r3, #4
 800bad8:	d00a      	beq.n	800baf0 <HAL_ADC_ConfigChannel+0x48c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6818      	ldr	r0, [r3, #0]
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	6919      	ldr	r1, [r3, #16]
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	681a      	ldr	r2, [r3, #0]
 800bae6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800baea:	f7fe fd8d 	bl	800a608 <LL_ADC_SetOffset>
 800baee:	e1a3      	b.n	800be38 <HAL_ADC_ConfigChannel+0x7d4>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	2100      	movs	r1, #0
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7fe fdaa 	bl	800a650 <LL_ADC_GetOffsetChannel>
 800bafc:	4603      	mov	r3, r0
 800bafe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d10a      	bne.n	800bb1c <HAL_ADC_ConfigChannel+0x4b8>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	2100      	movs	r1, #0
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f7fe fd9f 	bl	800a650 <LL_ADC_GetOffsetChannel>
 800bb12:	4603      	mov	r3, r0
 800bb14:	0e9b      	lsrs	r3, r3, #26
 800bb16:	f003 021f 	and.w	r2, r3, #31
 800bb1a:	e01e      	b.n	800bb5a <HAL_ADC_ConfigChannel+0x4f6>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	2100      	movs	r1, #0
 800bb22:	4618      	mov	r0, r3
 800bb24:	f7fe fd94 	bl	800a650 <LL_ADC_GetOffsetChannel>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bb32:	fa93 f3a3 	rbit	r3, r3
 800bb36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 800bb3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bb3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 800bb42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d101      	bne.n	800bb4e <HAL_ADC_ConfigChannel+0x4ea>
    return 32U;
 800bb4a:	2320      	movs	r3, #32
 800bb4c:	e004      	b.n	800bb58 <HAL_ADC_ConfigChannel+0x4f4>
  return __builtin_clz(value);
 800bb4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bb52:	fab3 f383 	clz	r3, r3
 800bb56:	b2db      	uxtb	r3, r3
 800bb58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d105      	bne.n	800bb72 <HAL_ADC_ConfigChannel+0x50e>
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	0e9b      	lsrs	r3, r3, #26
 800bb6c:	f003 031f 	and.w	r3, r3, #31
 800bb70:	e018      	b.n	800bba4 <HAL_ADC_ConfigChannel+0x540>
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb7a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800bb7e:	fa93 f3a3 	rbit	r3, r3
 800bb82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800bb86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bb8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800bb8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d101      	bne.n	800bb9a <HAL_ADC_ConfigChannel+0x536>
    return 32U;
 800bb96:	2320      	movs	r3, #32
 800bb98:	e004      	b.n	800bba4 <HAL_ADC_ConfigChannel+0x540>
  return __builtin_clz(value);
 800bb9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bb9e:	fab3 f383 	clz	r3, r3
 800bba2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d106      	bne.n	800bbb6 <HAL_ADC_ConfigChannel+0x552>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	2200      	movs	r2, #0
 800bbae:	2100      	movs	r1, #0
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f7fe fd63 	bl	800a67c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	2101      	movs	r1, #1
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f7fe fd47 	bl	800a650 <LL_ADC_GetOffsetChannel>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d10a      	bne.n	800bbe2 <HAL_ADC_ConfigChannel+0x57e>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	2101      	movs	r1, #1
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f7fe fd3c 	bl	800a650 <LL_ADC_GetOffsetChannel>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	0e9b      	lsrs	r3, r3, #26
 800bbdc:	f003 021f 	and.w	r2, r3, #31
 800bbe0:	e046      	b.n	800bc70 <HAL_ADC_ConfigChannel+0x60c>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	2101      	movs	r1, #1
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f7fe fd31 	bl	800a650 <LL_ADC_GetOffsetChannel>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bbf4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bbf8:	fa93 f3a3 	rbit	r3, r3
 800bbfc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800bc00:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bc04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800bc08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d129      	bne.n	800bc64 <HAL_ADC_ConfigChannel+0x600>
    return 32U;
 800bc10:	2320      	movs	r3, #32
 800bc12:	e02c      	b.n	800bc6e <HAL_ADC_ConfigChannel+0x60a>
 800bc14:	c7520000 	.word	0xc7520000
 800bc18:	cb840000 	.word	0xcb840000
 800bc1c:	c75a0000 	.word	0xc75a0000
 800bc20:	cb8c0000 	.word	0xcb8c0000
 800bc24:	0801b7fc 	.word	0x0801b7fc
 800bc28:	04300002 	.word	0x04300002
 800bc2c:	08600004 	.word	0x08600004
 800bc30:	0c900008 	.word	0x0c900008
 800bc34:	10c00010 	.word	0x10c00010
 800bc38:	14f00020 	.word	0x14f00020
 800bc3c:	19200040 	.word	0x19200040
 800bc40:	1d500080 	.word	0x1d500080
 800bc44:	21800100 	.word	0x21800100
 800bc48:	25b00200 	.word	0x25b00200
 800bc4c:	2a000400 	.word	0x2a000400
 800bc50:	2e300800 	.word	0x2e300800
 800bc54:	32601000 	.word	0x32601000
 800bc58:	36902000 	.word	0x36902000
 800bc5c:	3ac04000 	.word	0x3ac04000
 800bc60:	3ef08000 	.word	0x3ef08000
  return __builtin_clz(value);
 800bc64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bc68:	fab3 f383 	clz	r3, r3
 800bc6c:	b2db      	uxtb	r3, r3
 800bc6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d105      	bne.n	800bc88 <HAL_ADC_ConfigChannel+0x624>
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	0e9b      	lsrs	r3, r3, #26
 800bc82:	f003 031f 	and.w	r3, r3, #31
 800bc86:	e018      	b.n	800bcba <HAL_ADC_ConfigChannel+0x656>
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bc94:	fa93 f3a3 	rbit	r3, r3
 800bc98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800bc9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bca0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800bca4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d101      	bne.n	800bcb0 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 800bcac:	2320      	movs	r3, #32
 800bcae:	e004      	b.n	800bcba <HAL_ADC_ConfigChannel+0x656>
  return __builtin_clz(value);
 800bcb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bcb4:	fab3 f383 	clz	r3, r3
 800bcb8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	d106      	bne.n	800bccc <HAL_ADC_ConfigChannel+0x668>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	2101      	movs	r1, #1
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f7fe fcd8 	bl	800a67c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	2102      	movs	r1, #2
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f7fe fcbc 	bl	800a650 <LL_ADC_GetOffsetChannel>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d10a      	bne.n	800bcf8 <HAL_ADC_ConfigChannel+0x694>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	2102      	movs	r1, #2
 800bce8:	4618      	mov	r0, r3
 800bcea:	f7fe fcb1 	bl	800a650 <LL_ADC_GetOffsetChannel>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	0e9b      	lsrs	r3, r3, #26
 800bcf2:	f003 021f 	and.w	r2, r3, #31
 800bcf6:	e01e      	b.n	800bd36 <HAL_ADC_ConfigChannel+0x6d2>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	2102      	movs	r1, #2
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7fe fca6 	bl	800a650 <LL_ADC_GetOffsetChannel>
 800bd04:	4603      	mov	r3, r0
 800bd06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bd0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bd0e:	fa93 f3a3 	rbit	r3, r3
 800bd12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800bd16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bd1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800bd1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d101      	bne.n	800bd2a <HAL_ADC_ConfigChannel+0x6c6>
    return 32U;
 800bd26:	2320      	movs	r3, #32
 800bd28:	e004      	b.n	800bd34 <HAL_ADC_ConfigChannel+0x6d0>
  return __builtin_clz(value);
 800bd2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bd2e:	fab3 f383 	clz	r3, r3
 800bd32:	b2db      	uxtb	r3, r3
 800bd34:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d105      	bne.n	800bd4e <HAL_ADC_ConfigChannel+0x6ea>
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	0e9b      	lsrs	r3, r3, #26
 800bd48:	f003 031f 	and.w	r3, r3, #31
 800bd4c:	e016      	b.n	800bd7c <HAL_ADC_ConfigChannel+0x718>
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bd56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bd5a:	fa93 f3a3 	rbit	r3, r3
 800bd5e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800bd60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bd62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800bd66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d101      	bne.n	800bd72 <HAL_ADC_ConfigChannel+0x70e>
    return 32U;
 800bd6e:	2320      	movs	r3, #32
 800bd70:	e004      	b.n	800bd7c <HAL_ADC_ConfigChannel+0x718>
  return __builtin_clz(value);
 800bd72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bd76:	fab3 f383 	clz	r3, r3
 800bd7a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d106      	bne.n	800bd8e <HAL_ADC_ConfigChannel+0x72a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	2200      	movs	r2, #0
 800bd86:	2102      	movs	r1, #2
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f7fe fc77 	bl	800a67c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	2103      	movs	r1, #3
 800bd94:	4618      	mov	r0, r3
 800bd96:	f7fe fc5b 	bl	800a650 <LL_ADC_GetOffsetChannel>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d10a      	bne.n	800bdba <HAL_ADC_ConfigChannel+0x756>
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	2103      	movs	r1, #3
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7fe fc50 	bl	800a650 <LL_ADC_GetOffsetChannel>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	0e9b      	lsrs	r3, r3, #26
 800bdb4:	f003 021f 	and.w	r2, r3, #31
 800bdb8:	e017      	b.n	800bdea <HAL_ADC_ConfigChannel+0x786>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	2103      	movs	r1, #3
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7fe fc45 	bl	800a650 <LL_ADC_GetOffsetChannel>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bdca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bdcc:	fa93 f3a3 	rbit	r3, r3
 800bdd0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800bdd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bdd4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800bdd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d101      	bne.n	800bde0 <HAL_ADC_ConfigChannel+0x77c>
    return 32U;
 800bddc:	2320      	movs	r3, #32
 800bdde:	e003      	b.n	800bde8 <HAL_ADC_ConfigChannel+0x784>
  return __builtin_clz(value);
 800bde0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bde2:	fab3 f383 	clz	r3, r3
 800bde6:	b2db      	uxtb	r3, r3
 800bde8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d105      	bne.n	800be02 <HAL_ADC_ConfigChannel+0x79e>
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	0e9b      	lsrs	r3, r3, #26
 800bdfc:	f003 031f 	and.w	r3, r3, #31
 800be00:	e011      	b.n	800be26 <HAL_ADC_ConfigChannel+0x7c2>
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800be08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be0a:	fa93 f3a3 	rbit	r3, r3
 800be0e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800be10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be12:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800be14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be16:	2b00      	cmp	r3, #0
 800be18:	d101      	bne.n	800be1e <HAL_ADC_ConfigChannel+0x7ba>
    return 32U;
 800be1a:	2320      	movs	r3, #32
 800be1c:	e003      	b.n	800be26 <HAL_ADC_ConfigChannel+0x7c2>
  return __builtin_clz(value);
 800be1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be20:	fab3 f383 	clz	r3, r3
 800be24:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800be26:	429a      	cmp	r2, r3
 800be28:	d106      	bne.n	800be38 <HAL_ADC_ConfigChannel+0x7d4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	2200      	movs	r2, #0
 800be30:	2103      	movs	r1, #3
 800be32:	4618      	mov	r0, r3
 800be34:	f7fe fc22 	bl	800a67c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	4618      	mov	r0, r3
 800be3e:	f7fe fd4f 	bl	800a8e0 <LL_ADC_IsEnabled>
 800be42:	4603      	mov	r3, r0
 800be44:	2b00      	cmp	r3, #0
 800be46:	f040 813f 	bne.w	800c0c8 <HAL_ADC_ConfigChannel+0xa64>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6818      	ldr	r0, [r3, #0]
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	6819      	ldr	r1, [r3, #0]
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	68db      	ldr	r3, [r3, #12]
 800be56:	461a      	mov	r2, r3
 800be58:	f7fe fca8 	bl	800a7ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	68db      	ldr	r3, [r3, #12]
 800be60:	4a8e      	ldr	r2, [pc, #568]	; (800c09c <HAL_ADC_ConfigChannel+0xa38>)
 800be62:	4293      	cmp	r3, r2
 800be64:	f040 8130 	bne.w	800c0c8 <HAL_ADC_ConfigChannel+0xa64>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be74:	2b00      	cmp	r3, #0
 800be76:	d10b      	bne.n	800be90 <HAL_ADC_ConfigChannel+0x82c>
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	0e9b      	lsrs	r3, r3, #26
 800be7e:	3301      	adds	r3, #1
 800be80:	f003 031f 	and.w	r3, r3, #31
 800be84:	2b09      	cmp	r3, #9
 800be86:	bf94      	ite	ls
 800be88:	2301      	movls	r3, #1
 800be8a:	2300      	movhi	r3, #0
 800be8c:	b2db      	uxtb	r3, r3
 800be8e:	e019      	b.n	800bec4 <HAL_ADC_ConfigChannel+0x860>
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800be96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be98:	fa93 f3a3 	rbit	r3, r3
 800be9c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800be9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bea0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800bea2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d101      	bne.n	800beac <HAL_ADC_ConfigChannel+0x848>
    return 32U;
 800bea8:	2320      	movs	r3, #32
 800beaa:	e003      	b.n	800beb4 <HAL_ADC_ConfigChannel+0x850>
  return __builtin_clz(value);
 800beac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800beae:	fab3 f383 	clz	r3, r3
 800beb2:	b2db      	uxtb	r3, r3
 800beb4:	3301      	adds	r3, #1
 800beb6:	f003 031f 	and.w	r3, r3, #31
 800beba:	2b09      	cmp	r3, #9
 800bebc:	bf94      	ite	ls
 800bebe:	2301      	movls	r3, #1
 800bec0:	2300      	movhi	r3, #0
 800bec2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d079      	beq.n	800bfbc <HAL_ADC_ConfigChannel+0x958>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d107      	bne.n	800bee4 <HAL_ADC_ConfigChannel+0x880>
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	0e9b      	lsrs	r3, r3, #26
 800beda:	3301      	adds	r3, #1
 800bedc:	069b      	lsls	r3, r3, #26
 800bede:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800bee2:	e015      	b.n	800bf10 <HAL_ADC_ConfigChannel+0x8ac>
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800beea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800beec:	fa93 f3a3 	rbit	r3, r3
 800bef0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800bef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bef4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800bef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d101      	bne.n	800bf00 <HAL_ADC_ConfigChannel+0x89c>
    return 32U;
 800befc:	2320      	movs	r3, #32
 800befe:	e003      	b.n	800bf08 <HAL_ADC_ConfigChannel+0x8a4>
  return __builtin_clz(value);
 800bf00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf02:	fab3 f383 	clz	r3, r3
 800bf06:	b2db      	uxtb	r3, r3
 800bf08:	3301      	adds	r3, #1
 800bf0a:	069b      	lsls	r3, r3, #26
 800bf0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d109      	bne.n	800bf30 <HAL_ADC_ConfigChannel+0x8cc>
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	0e9b      	lsrs	r3, r3, #26
 800bf22:	3301      	adds	r3, #1
 800bf24:	f003 031f 	and.w	r3, r3, #31
 800bf28:	2101      	movs	r1, #1
 800bf2a:	fa01 f303 	lsl.w	r3, r1, r3
 800bf2e:	e017      	b.n	800bf60 <HAL_ADC_ConfigChannel+0x8fc>
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bf36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf38:	fa93 f3a3 	rbit	r3, r3
 800bf3c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800bf3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf40:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800bf42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d101      	bne.n	800bf4c <HAL_ADC_ConfigChannel+0x8e8>
    return 32U;
 800bf48:	2320      	movs	r3, #32
 800bf4a:	e003      	b.n	800bf54 <HAL_ADC_ConfigChannel+0x8f0>
  return __builtin_clz(value);
 800bf4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf4e:	fab3 f383 	clz	r3, r3
 800bf52:	b2db      	uxtb	r3, r3
 800bf54:	3301      	adds	r3, #1
 800bf56:	f003 031f 	and.w	r3, r3, #31
 800bf5a:	2101      	movs	r1, #1
 800bf5c:	fa01 f303 	lsl.w	r3, r1, r3
 800bf60:	ea42 0103 	orr.w	r1, r2, r3
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d10a      	bne.n	800bf86 <HAL_ADC_ConfigChannel+0x922>
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	0e9b      	lsrs	r3, r3, #26
 800bf76:	3301      	adds	r3, #1
 800bf78:	f003 021f 	and.w	r2, r3, #31
 800bf7c:	4613      	mov	r3, r2
 800bf7e:	005b      	lsls	r3, r3, #1
 800bf80:	4413      	add	r3, r2
 800bf82:	051b      	lsls	r3, r3, #20
 800bf84:	e018      	b.n	800bfb8 <HAL_ADC_ConfigChannel+0x954>
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bf8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8e:	fa93 f3a3 	rbit	r3, r3
 800bf92:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800bf94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf96:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800bf98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d101      	bne.n	800bfa2 <HAL_ADC_ConfigChannel+0x93e>
    return 32U;
 800bf9e:	2320      	movs	r3, #32
 800bfa0:	e003      	b.n	800bfaa <HAL_ADC_ConfigChannel+0x946>
  return __builtin_clz(value);
 800bfa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfa4:	fab3 f383 	clz	r3, r3
 800bfa8:	b2db      	uxtb	r3, r3
 800bfaa:	3301      	adds	r3, #1
 800bfac:	f003 021f 	and.w	r2, r3, #31
 800bfb0:	4613      	mov	r3, r2
 800bfb2:	005b      	lsls	r3, r3, #1
 800bfb4:	4413      	add	r3, r2
 800bfb6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bfb8:	430b      	orrs	r3, r1
 800bfba:	e080      	b.n	800c0be <HAL_ADC_ConfigChannel+0xa5a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d107      	bne.n	800bfd8 <HAL_ADC_ConfigChannel+0x974>
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	0e9b      	lsrs	r3, r3, #26
 800bfce:	3301      	adds	r3, #1
 800bfd0:	069b      	lsls	r3, r3, #26
 800bfd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800bfd6:	e015      	b.n	800c004 <HAL_ADC_ConfigChannel+0x9a0>
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bfde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe0:	fa93 f3a3 	rbit	r3, r3
 800bfe4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800bfe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800bfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d101      	bne.n	800bff4 <HAL_ADC_ConfigChannel+0x990>
    return 32U;
 800bff0:	2320      	movs	r3, #32
 800bff2:	e003      	b.n	800bffc <HAL_ADC_ConfigChannel+0x998>
  return __builtin_clz(value);
 800bff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff6:	fab3 f383 	clz	r3, r3
 800bffa:	b2db      	uxtb	r3, r3
 800bffc:	3301      	adds	r3, #1
 800bffe:	069b      	lsls	r3, r3, #26
 800c000:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d109      	bne.n	800c024 <HAL_ADC_ConfigChannel+0x9c0>
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	0e9b      	lsrs	r3, r3, #26
 800c016:	3301      	adds	r3, #1
 800c018:	f003 031f 	and.w	r3, r3, #31
 800c01c:	2101      	movs	r1, #1
 800c01e:	fa01 f303 	lsl.w	r3, r1, r3
 800c022:	e017      	b.n	800c054 <HAL_ADC_ConfigChannel+0x9f0>
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c02a:	6a3b      	ldr	r3, [r7, #32]
 800c02c:	fa93 f3a3 	rbit	r3, r3
 800c030:	61fb      	str	r3, [r7, #28]
  return result;
 800c032:	69fb      	ldr	r3, [r7, #28]
 800c034:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800c036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d101      	bne.n	800c040 <HAL_ADC_ConfigChannel+0x9dc>
    return 32U;
 800c03c:	2320      	movs	r3, #32
 800c03e:	e003      	b.n	800c048 <HAL_ADC_ConfigChannel+0x9e4>
  return __builtin_clz(value);
 800c040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c042:	fab3 f383 	clz	r3, r3
 800c046:	b2db      	uxtb	r3, r3
 800c048:	3301      	adds	r3, #1
 800c04a:	f003 031f 	and.w	r3, r3, #31
 800c04e:	2101      	movs	r1, #1
 800c050:	fa01 f303 	lsl.w	r3, r1, r3
 800c054:	ea42 0103 	orr.w	r1, r2, r3
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c060:	2b00      	cmp	r3, #0
 800c062:	d10d      	bne.n	800c080 <HAL_ADC_ConfigChannel+0xa1c>
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	0e9b      	lsrs	r3, r3, #26
 800c06a:	3301      	adds	r3, #1
 800c06c:	f003 021f 	and.w	r2, r3, #31
 800c070:	4613      	mov	r3, r2
 800c072:	005b      	lsls	r3, r3, #1
 800c074:	4413      	add	r3, r2
 800c076:	3b1e      	subs	r3, #30
 800c078:	051b      	lsls	r3, r3, #20
 800c07a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c07e:	e01d      	b.n	800c0bc <HAL_ADC_ConfigChannel+0xa58>
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	fa93 f3a3 	rbit	r3, r3
 800c08c:	613b      	str	r3, [r7, #16]
  return result;
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800c092:	69bb      	ldr	r3, [r7, #24]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d103      	bne.n	800c0a0 <HAL_ADC_ConfigChannel+0xa3c>
    return 32U;
 800c098:	2320      	movs	r3, #32
 800c09a:	e005      	b.n	800c0a8 <HAL_ADC_ConfigChannel+0xa44>
 800c09c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	fab3 f383 	clz	r3, r3
 800c0a6:	b2db      	uxtb	r3, r3
 800c0a8:	3301      	adds	r3, #1
 800c0aa:	f003 021f 	and.w	r2, r3, #31
 800c0ae:	4613      	mov	r3, r2
 800c0b0:	005b      	lsls	r3, r3, #1
 800c0b2:	4413      	add	r3, r2
 800c0b4:	3b1e      	subs	r3, #30
 800c0b6:	051b      	lsls	r3, r3, #20
 800c0b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c0bc:	430b      	orrs	r3, r1
 800c0be:	683a      	ldr	r2, [r7, #0]
 800c0c0:	6892      	ldr	r2, [r2, #8]
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	f7fe fb47 	bl	800a756 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	681a      	ldr	r2, [r3, #0]
 800c0cc:	4b3d      	ldr	r3, [pc, #244]	; (800c1c4 <HAL_ADC_ConfigChannel+0xb60>)
 800c0ce:	4013      	ands	r3, r2
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d06c      	beq.n	800c1ae <HAL_ADC_ConfigChannel+0xb4a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800c0d4:	483c      	ldr	r0, [pc, #240]	; (800c1c8 <HAL_ADC_ConfigChannel+0xb64>)
 800c0d6:	f7fe fa7b 	bl	800a5d0 <LL_ADC_GetCommonPathInternalCh>
 800c0da:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	4a3a      	ldr	r2, [pc, #232]	; (800c1cc <HAL_ADC_ConfigChannel+0xb68>)
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	d127      	bne.n	800c138 <HAL_ADC_ConfigChannel+0xad4>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800c0e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c0ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d121      	bne.n	800c138 <HAL_ADC_ConfigChannel+0xad4>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	4a35      	ldr	r2, [pc, #212]	; (800c1d0 <HAL_ADC_ConfigChannel+0xb6c>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d157      	bne.n	800c1ae <HAL_ADC_ConfigChannel+0xb4a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c0fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c102:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c106:	4619      	mov	r1, r3
 800c108:	482f      	ldr	r0, [pc, #188]	; (800c1c8 <HAL_ADC_ConfigChannel+0xb64>)
 800c10a:	f7fe fa4e 	bl	800a5aa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c10e:	4b31      	ldr	r3, [pc, #196]	; (800c1d4 <HAL_ADC_ConfigChannel+0xb70>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	099b      	lsrs	r3, r3, #6
 800c114:	4a30      	ldr	r2, [pc, #192]	; (800c1d8 <HAL_ADC_ConfigChannel+0xb74>)
 800c116:	fba2 2303 	umull	r2, r3, r2, r3
 800c11a:	099b      	lsrs	r3, r3, #6
 800c11c:	1c5a      	adds	r2, r3, #1
 800c11e:	4613      	mov	r3, r2
 800c120:	005b      	lsls	r3, r3, #1
 800c122:	4413      	add	r3, r2
 800c124:	009b      	lsls	r3, r3, #2
 800c126:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800c128:	e002      	b.n	800c130 <HAL_ADC_ConfigChannel+0xacc>
          {
            wait_loop_index--;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	3b01      	subs	r3, #1
 800c12e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d1f9      	bne.n	800c12a <HAL_ADC_ConfigChannel+0xac6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c136:	e03a      	b.n	800c1ae <HAL_ADC_ConfigChannel+0xb4a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	4a27      	ldr	r2, [pc, #156]	; (800c1dc <HAL_ADC_ConfigChannel+0xb78>)
 800c13e:	4293      	cmp	r3, r2
 800c140:	d113      	bne.n	800c16a <HAL_ADC_ConfigChannel+0xb06>
 800c142:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c146:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d10d      	bne.n	800c16a <HAL_ADC_ConfigChannel+0xb06>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	4a1f      	ldr	r2, [pc, #124]	; (800c1d0 <HAL_ADC_ConfigChannel+0xb6c>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d12a      	bne.n	800c1ae <HAL_ADC_ConfigChannel+0xb4a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c158:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c15c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c160:	4619      	mov	r1, r3
 800c162:	4819      	ldr	r0, [pc, #100]	; (800c1c8 <HAL_ADC_ConfigChannel+0xb64>)
 800c164:	f7fe fa21 	bl	800a5aa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c168:	e021      	b.n	800c1ae <HAL_ADC_ConfigChannel+0xb4a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	4a1c      	ldr	r2, [pc, #112]	; (800c1e0 <HAL_ADC_ConfigChannel+0xb7c>)
 800c170:	4293      	cmp	r3, r2
 800c172:	d11c      	bne.n	800c1ae <HAL_ADC_ConfigChannel+0xb4a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800c174:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c178:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d116      	bne.n	800c1ae <HAL_ADC_ConfigChannel+0xb4a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	4a12      	ldr	r2, [pc, #72]	; (800c1d0 <HAL_ADC_ConfigChannel+0xb6c>)
 800c186:	4293      	cmp	r3, r2
 800c188:	d111      	bne.n	800c1ae <HAL_ADC_ConfigChannel+0xb4a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c18a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c18e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c192:	4619      	mov	r1, r3
 800c194:	480c      	ldr	r0, [pc, #48]	; (800c1c8 <HAL_ADC_ConfigChannel+0xb64>)
 800c196:	f7fe fa08 	bl	800a5aa <LL_ADC_SetCommonPathInternalCh>
 800c19a:	e008      	b.n	800c1ae <HAL_ADC_ConfigChannel+0xb4a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1a0:	f043 0220 	orr.w	r2, r3, #32
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800c1b6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	37dc      	adds	r7, #220	; 0xdc
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd90      	pop	{r4, r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	80080000 	.word	0x80080000
 800c1c8:	50040300 	.word	0x50040300
 800c1cc:	c7520000 	.word	0xc7520000
 800c1d0:	50040000 	.word	0x50040000
 800c1d4:	20000ff8 	.word	0x20000ff8
 800c1d8:	053e2d63 	.word	0x053e2d63
 800c1dc:	cb840000 	.word	0xcb840000
 800c1e0:	80000001 	.word	0x80000001

0800c1e4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b088      	sub	sp, #32
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	4a63      	ldr	r2, [pc, #396]	; (800c388 <ADC_ConversionStop+0x1a4>)
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	d004      	beq.n	800c20a <ADC_ConversionStop+0x26>
 800c200:	f44f 614c 	mov.w	r1, #3264	; 0xcc0
 800c204:	4861      	ldr	r0, [pc, #388]	; (800c38c <ADC_ConversionStop+0x1a8>)
 800c206:	f7f8 f9bd 	bl	8004584 <assert_failed>
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	2b01      	cmp	r3, #1
 800c20e:	d00a      	beq.n	800c226 <ADC_ConversionStop+0x42>
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	2b02      	cmp	r3, #2
 800c214:	d007      	beq.n	800c226 <ADC_ConversionStop+0x42>
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	2b03      	cmp	r3, #3
 800c21a:	d004      	beq.n	800c226 <ADC_ConversionStop+0x42>
 800c21c:	f640 41c1 	movw	r1, #3265	; 0xcc1
 800c220:	485a      	ldr	r0, [pc, #360]	; (800c38c <ADC_ConversionStop+0x1a8>)
 800c222:	f7f8 f9af 	bl	8004584 <assert_failed>

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7fe fba6 	bl	800a97c <LL_ADC_REG_IsConversionOngoing>
 800c230:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	4618      	mov	r0, r3
 800c238:	f7fe fbc7 	bl	800a9ca <LL_ADC_INJ_IsConversionOngoing>
 800c23c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d103      	bne.n	800c24c <ADC_ConversionStop+0x68>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2b00      	cmp	r3, #0
 800c248:	f000 8098 	beq.w	800c37c <ADC_ConversionStop+0x198>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	68db      	ldr	r3, [r3, #12]
 800c252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c256:	2b00      	cmp	r3, #0
 800c258:	d02a      	beq.n	800c2b0 <ADC_ConversionStop+0xcc>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	7e5b      	ldrb	r3, [r3, #25]
 800c25e:	2b01      	cmp	r3, #1
 800c260:	d126      	bne.n	800c2b0 <ADC_ConversionStop+0xcc>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	7e1b      	ldrb	r3, [r3, #24]
 800c266:	2b01      	cmp	r3, #1
 800c268:	d122      	bne.n	800c2b0 <ADC_ConversionStop+0xcc>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800c26a:	2301      	movs	r3, #1
 800c26c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800c26e:	e014      	b.n	800c29a <ADC_ConversionStop+0xb6>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800c270:	69fb      	ldr	r3, [r7, #28]
 800c272:	4a47      	ldr	r2, [pc, #284]	; (800c390 <ADC_ConversionStop+0x1ac>)
 800c274:	4293      	cmp	r3, r2
 800c276:	d90d      	bls.n	800c294 <ADC_ConversionStop+0xb0>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c27c:	f043 0210 	orr.w	r2, r3, #16
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c288:	f043 0201 	orr.w	r2, r3, #1
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800c290:	2301      	movs	r3, #1
 800c292:	e074      	b.n	800c37e <ADC_ConversionStop+0x19a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800c294:	69fb      	ldr	r3, [r7, #28]
 800c296:	3301      	adds	r3, #1
 800c298:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2a4:	2b40      	cmp	r3, #64	; 0x40
 800c2a6:	d1e3      	bne.n	800c270 <ADC_ConversionStop+0x8c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	2240      	movs	r2, #64	; 0x40
 800c2ae:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800c2b0:	69bb      	ldr	r3, [r7, #24]
 800c2b2:	2b02      	cmp	r3, #2
 800c2b4:	d014      	beq.n	800c2e0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f7fe fb5e 	bl	800a97c <LL_ADC_REG_IsConversionOngoing>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d00c      	beq.n	800c2e0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7fe fb1b 	bl	800a906 <LL_ADC_IsDisableOngoing>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d104      	bne.n	800c2e0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f7fe fb3a 	bl	800a954 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800c2e0:	69bb      	ldr	r3, [r7, #24]
 800c2e2:	2b01      	cmp	r3, #1
 800c2e4:	d014      	beq.n	800c310 <ADC_ConversionStop+0x12c>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f7fe fb6d 	bl	800a9ca <LL_ADC_INJ_IsConversionOngoing>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d00c      	beq.n	800c310 <ADC_ConversionStop+0x12c>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f7fe fb03 	bl	800a906 <LL_ADC_IsDisableOngoing>
 800c300:	4603      	mov	r3, r0
 800c302:	2b00      	cmp	r3, #0
 800c304:	d104      	bne.n	800c310 <ADC_ConversionStop+0x12c>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	4618      	mov	r0, r3
 800c30c:	f7fe fb49 	bl	800a9a2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800c310:	69bb      	ldr	r3, [r7, #24]
 800c312:	2b02      	cmp	r3, #2
 800c314:	d005      	beq.n	800c322 <ADC_ConversionStop+0x13e>
 800c316:	69bb      	ldr	r3, [r7, #24]
 800c318:	2b03      	cmp	r3, #3
 800c31a:	d105      	bne.n	800c328 <ADC_ConversionStop+0x144>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800c31c:	230c      	movs	r3, #12
 800c31e:	617b      	str	r3, [r7, #20]
        break;
 800c320:	e005      	b.n	800c32e <ADC_ConversionStop+0x14a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800c322:	2308      	movs	r3, #8
 800c324:	617b      	str	r3, [r7, #20]
        break;
 800c326:	e002      	b.n	800c32e <ADC_ConversionStop+0x14a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800c328:	2304      	movs	r3, #4
 800c32a:	617b      	str	r3, [r7, #20]
        break;
 800c32c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800c32e:	f7fe f8f9 	bl	800a524 <HAL_GetTick>
 800c332:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800c334:	e01b      	b.n	800c36e <ADC_ConversionStop+0x18a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800c336:	f7fe f8f5 	bl	800a524 <HAL_GetTick>
 800c33a:	4602      	mov	r2, r0
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	1ad3      	subs	r3, r2, r3
 800c340:	2b05      	cmp	r3, #5
 800c342:	d914      	bls.n	800c36e <ADC_ConversionStop+0x18a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	689a      	ldr	r2, [r3, #8]
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	4013      	ands	r3, r2
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d00d      	beq.n	800c36e <ADC_ConversionStop+0x18a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c356:	f043 0210 	orr.w	r2, r3, #16
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c362:	f043 0201 	orr.w	r2, r3, #1
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800c36a:	2301      	movs	r3, #1
 800c36c:	e007      	b.n	800c37e <ADC_ConversionStop+0x19a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	689a      	ldr	r2, [r3, #8]
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	4013      	ands	r3, r2
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d1dc      	bne.n	800c336 <ADC_ConversionStop+0x152>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800c37c:	2300      	movs	r3, #0
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3720      	adds	r7, #32
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}
 800c386:	bf00      	nop
 800c388:	50040000 	.word	0x50040000
 800c38c:	0801b7fc 	.word	0x0801b7fc
 800c390:	a33fffff 	.word	0xa33fffff

0800c394 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b084      	sub	sp, #16
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800c39c:	2300      	movs	r3, #0
 800c39e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f7fe fa9b 	bl	800a8e0 <LL_ADC_IsEnabled>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d169      	bne.n	800c484 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	689a      	ldr	r2, [r3, #8]
 800c3b6:	4b36      	ldr	r3, [pc, #216]	; (800c490 <ADC_Enable+0xfc>)
 800c3b8:	4013      	ands	r3, r2
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d00d      	beq.n	800c3da <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3c2:	f043 0210 	orr.w	r2, r3, #16
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3ce:	f043 0201 	orr.w	r2, r3, #1
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	e055      	b.n	800c486 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7fe fa56 	bl	800a890 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800c3e4:	482b      	ldr	r0, [pc, #172]	; (800c494 <ADC_Enable+0x100>)
 800c3e6:	f7fe f8f3 	bl	800a5d0 <LL_ADC_GetCommonPathInternalCh>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d013      	beq.n	800c41c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c3f4:	4b28      	ldr	r3, [pc, #160]	; (800c498 <ADC_Enable+0x104>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	099b      	lsrs	r3, r3, #6
 800c3fa:	4a28      	ldr	r2, [pc, #160]	; (800c49c <ADC_Enable+0x108>)
 800c3fc:	fba2 2303 	umull	r2, r3, r2, r3
 800c400:	099b      	lsrs	r3, r3, #6
 800c402:	1c5a      	adds	r2, r3, #1
 800c404:	4613      	mov	r3, r2
 800c406:	005b      	lsls	r3, r3, #1
 800c408:	4413      	add	r3, r2
 800c40a:	009b      	lsls	r3, r3, #2
 800c40c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800c40e:	e002      	b.n	800c416 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	3b01      	subs	r3, #1
 800c414:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d1f9      	bne.n	800c410 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800c41c:	f7fe f882 	bl	800a524 <HAL_GetTick>
 800c420:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c422:	e028      	b.n	800c476 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	4618      	mov	r0, r3
 800c42a:	f7fe fa59 	bl	800a8e0 <LL_ADC_IsEnabled>
 800c42e:	4603      	mov	r3, r0
 800c430:	2b00      	cmp	r3, #0
 800c432:	d104      	bne.n	800c43e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	4618      	mov	r0, r3
 800c43a:	f7fe fa29 	bl	800a890 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800c43e:	f7fe f871 	bl	800a524 <HAL_GetTick>
 800c442:	4602      	mov	r2, r0
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	1ad3      	subs	r3, r2, r3
 800c448:	2b02      	cmp	r3, #2
 800c44a:	d914      	bls.n	800c476 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	f003 0301 	and.w	r3, r3, #1
 800c456:	2b01      	cmp	r3, #1
 800c458:	d00d      	beq.n	800c476 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c45e:	f043 0210 	orr.w	r2, r3, #16
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c46a:	f043 0201 	orr.w	r2, r3, #1
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800c472:	2301      	movs	r3, #1
 800c474:	e007      	b.n	800c486 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f003 0301 	and.w	r3, r3, #1
 800c480:	2b01      	cmp	r3, #1
 800c482:	d1cf      	bne.n	800c424 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c484:	2300      	movs	r3, #0
}
 800c486:	4618      	mov	r0, r3
 800c488:	3710      	adds	r7, #16
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	bf00      	nop
 800c490:	8000003f 	.word	0x8000003f
 800c494:	50040300 	.word	0x50040300
 800c498:	20000ff8 	.word	0x20000ff8
 800c49c:	053e2d63 	.word	0x053e2d63

0800c4a0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b084      	sub	sp, #16
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f7fe fa2a 	bl	800a906 <LL_ADC_IsDisableOngoing>
 800c4b2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f7fe fa11 	bl	800a8e0 <LL_ADC_IsEnabled>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d047      	beq.n	800c554 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d144      	bne.n	800c554 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	689b      	ldr	r3, [r3, #8]
 800c4d0:	f003 030d 	and.w	r3, r3, #13
 800c4d4:	2b01      	cmp	r3, #1
 800c4d6:	d10c      	bne.n	800c4f2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7fe f9eb 	bl	800a8b8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	2203      	movs	r2, #3
 800c4e8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800c4ea:	f7fe f81b 	bl	800a524 <HAL_GetTick>
 800c4ee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c4f0:	e029      	b.n	800c546 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4f6:	f043 0210 	orr.w	r2, r3, #16
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c502:	f043 0201 	orr.w	r2, r3, #1
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800c50a:	2301      	movs	r3, #1
 800c50c:	e023      	b.n	800c556 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800c50e:	f7fe f809 	bl	800a524 <HAL_GetTick>
 800c512:	4602      	mov	r2, r0
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	1ad3      	subs	r3, r2, r3
 800c518:	2b02      	cmp	r3, #2
 800c51a:	d914      	bls.n	800c546 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	689b      	ldr	r3, [r3, #8]
 800c522:	f003 0301 	and.w	r3, r3, #1
 800c526:	2b00      	cmp	r3, #0
 800c528:	d00d      	beq.n	800c546 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c52e:	f043 0210 	orr.w	r2, r3, #16
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c53a:	f043 0201 	orr.w	r2, r3, #1
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800c542:	2301      	movs	r3, #1
 800c544:	e007      	b.n	800c556 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	689b      	ldr	r3, [r3, #8]
 800c54c:	f003 0301 	and.w	r3, r3, #1
 800c550:	2b00      	cmp	r3, #0
 800c552:	d1dc      	bne.n	800c50e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c554:	2300      	movs	r3, #0
}
 800c556:	4618      	mov	r0, r3
 800c558:	3710      	adds	r7, #16
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}

0800c55e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800c55e:	b580      	push	{r7, lr}
 800c560:	b084      	sub	sp, #16
 800c562:	af00      	add	r7, sp, #0
 800c564:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c56a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c570:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c574:	2b00      	cmp	r3, #0
 800c576:	d14b      	bne.n	800c610 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c57c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f003 0308 	and.w	r3, r3, #8
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d021      	beq.n	800c5d6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	4618      	mov	r0, r3
 800c598:	f7fe f88b 	bl	800a6b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 800c59c:	4603      	mov	r3, r0
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d032      	beq.n	800c608 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	68db      	ldr	r3, [r3, #12]
 800c5a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d12b      	bne.n	800c608 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d11f      	bne.n	800c608 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5cc:	f043 0201 	orr.w	r2, r3, #1
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	655a      	str	r2, [r3, #84]	; 0x54
 800c5d4:	e018      	b.n	800c608 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	68db      	ldr	r3, [r3, #12]
 800c5dc:	f003 0302 	and.w	r3, r3, #2
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d111      	bne.n	800c608 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d105      	bne.n	800c608 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c600:	f043 0201 	orr.w	r2, r3, #1
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800c608:	68f8      	ldr	r0, [r7, #12]
 800c60a:	f7fb fc37 	bl	8007e7c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800c60e:	e00e      	b.n	800c62e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c614:	f003 0310 	and.w	r3, r3, #16
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d003      	beq.n	800c624 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800c61c:	68f8      	ldr	r0, [r7, #12]
 800c61e:	f7ff f817 	bl	800b650 <HAL_ADC_ErrorCallback>
}
 800c622:	e004      	b.n	800c62e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	4798      	blx	r3
}
 800c62e:	bf00      	nop
 800c630:	3710      	adds	r7, #16
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}

0800c636 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800c636:	b580      	push	{r7, lr}
 800c638:	b084      	sub	sp, #16
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c642:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800c644:	68f8      	ldr	r0, [r7, #12]
 800c646:	f7fe ffef 	bl	800b628 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c64a:	bf00      	nop
 800c64c:	3710      	adds	r7, #16
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}

0800c652 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800c652:	b580      	push	{r7, lr}
 800c654:	b084      	sub	sp, #16
 800c656:	af00      	add	r7, sp, #0
 800c658:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c65e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c664:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c670:	f043 0204 	orr.w	r2, r3, #4
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800c678:	68f8      	ldr	r0, [r7, #12]
 800c67a:	f7fe ffe9 	bl	800b650 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c67e:	bf00      	nop
 800c680:	3710      	adds	r7, #16
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}

0800c686 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800c686:	b480      	push	{r7}
 800c688:	b083      	sub	sp, #12
 800c68a:	af00      	add	r7, sp, #0
 800c68c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800c68e:	bf00      	nop
 800c690:	370c      	adds	r7, #12
 800c692:	46bd      	mov	sp, r7
 800c694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c698:	4770      	bx	lr

0800c69a <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800c69a:	b480      	push	{r7}
 800c69c:	b083      	sub	sp, #12
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800c6a2:	bf00      	nop
 800c6a4:	370c      	adds	r7, #12
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ac:	4770      	bx	lr

0800c6ae <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800c6ae:	b480      	push	{r7}
 800c6b0:	b083      	sub	sp, #12
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800c6b6:	bf00      	nop
 800c6b8:	370c      	adds	r7, #12
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c0:	4770      	bx	lr

0800c6c2 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800c6c2:	b480      	push	{r7}
 800c6c4:	b083      	sub	sp, #12
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800c6ca:	bf00      	nop
 800c6cc:	370c      	adds	r7, #12
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d4:	4770      	bx	lr

0800c6d6 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800c6d6:	b480      	push	{r7}
 800c6d8:	b083      	sub	sp, #12
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800c6de:	bf00      	nop
 800c6e0:	370c      	adds	r7, #12
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e8:	4770      	bx	lr
	...

0800c6ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b084      	sub	sp, #16
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d101      	bne.n	800c6fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	e208      	b.n	800cb10 <HAL_CAN_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	4a9e      	ldr	r2, [pc, #632]	; (800c97c <HAL_CAN_Init+0x290>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d004      	beq.n	800c712 <HAL_CAN_Init+0x26>
 800c708:	f240 111d 	movw	r1, #285	; 0x11d
 800c70c:	489c      	ldr	r0, [pc, #624]	; (800c980 <HAL_CAN_Init+0x294>)
 800c70e:	f7f7 ff39 	bl	8004584 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	7e1b      	ldrb	r3, [r3, #24]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d008      	beq.n	800c72c <HAL_CAN_Init+0x40>
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	7e1b      	ldrb	r3, [r3, #24]
 800c71e:	2b01      	cmp	r3, #1
 800c720:	d004      	beq.n	800c72c <HAL_CAN_Init+0x40>
 800c722:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800c726:	4896      	ldr	r0, [pc, #600]	; (800c980 <HAL_CAN_Init+0x294>)
 800c728:	f7f7 ff2c 	bl	8004584 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	7e5b      	ldrb	r3, [r3, #25]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d008      	beq.n	800c746 <HAL_CAN_Init+0x5a>
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	7e5b      	ldrb	r3, [r3, #25]
 800c738:	2b01      	cmp	r3, #1
 800c73a:	d004      	beq.n	800c746 <HAL_CAN_Init+0x5a>
 800c73c:	f240 111f 	movw	r1, #287	; 0x11f
 800c740:	488f      	ldr	r0, [pc, #572]	; (800c980 <HAL_CAN_Init+0x294>)
 800c742:	f7f7 ff1f 	bl	8004584 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	7e9b      	ldrb	r3, [r3, #26]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d008      	beq.n	800c760 <HAL_CAN_Init+0x74>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	7e9b      	ldrb	r3, [r3, #26]
 800c752:	2b01      	cmp	r3, #1
 800c754:	d004      	beq.n	800c760 <HAL_CAN_Init+0x74>
 800c756:	f44f 7190 	mov.w	r1, #288	; 0x120
 800c75a:	4889      	ldr	r0, [pc, #548]	; (800c980 <HAL_CAN_Init+0x294>)
 800c75c:	f7f7 ff12 	bl	8004584 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	7edb      	ldrb	r3, [r3, #27]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d008      	beq.n	800c77a <HAL_CAN_Init+0x8e>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	7edb      	ldrb	r3, [r3, #27]
 800c76c:	2b01      	cmp	r3, #1
 800c76e:	d004      	beq.n	800c77a <HAL_CAN_Init+0x8e>
 800c770:	f240 1121 	movw	r1, #289	; 0x121
 800c774:	4882      	ldr	r0, [pc, #520]	; (800c980 <HAL_CAN_Init+0x294>)
 800c776:	f7f7 ff05 	bl	8004584 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	7f1b      	ldrb	r3, [r3, #28]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d008      	beq.n	800c794 <HAL_CAN_Init+0xa8>
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	7f1b      	ldrb	r3, [r3, #28]
 800c786:	2b01      	cmp	r3, #1
 800c788:	d004      	beq.n	800c794 <HAL_CAN_Init+0xa8>
 800c78a:	f44f 7191 	mov.w	r1, #290	; 0x122
 800c78e:	487c      	ldr	r0, [pc, #496]	; (800c980 <HAL_CAN_Init+0x294>)
 800c790:	f7f7 fef8 	bl	8004584 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	7f5b      	ldrb	r3, [r3, #29]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d008      	beq.n	800c7ae <HAL_CAN_Init+0xc2>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	7f5b      	ldrb	r3, [r3, #29]
 800c7a0:	2b01      	cmp	r3, #1
 800c7a2:	d004      	beq.n	800c7ae <HAL_CAN_Init+0xc2>
 800c7a4:	f240 1123 	movw	r1, #291	; 0x123
 800c7a8:	4875      	ldr	r0, [pc, #468]	; (800c980 <HAL_CAN_Init+0x294>)
 800c7aa:	f7f7 feeb 	bl	8004584 <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	689b      	ldr	r3, [r3, #8]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d013      	beq.n	800c7de <HAL_CAN_Init+0xf2>
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	689b      	ldr	r3, [r3, #8]
 800c7ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7be:	d00e      	beq.n	800c7de <HAL_CAN_Init+0xf2>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	689b      	ldr	r3, [r3, #8]
 800c7c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c7c8:	d009      	beq.n	800c7de <HAL_CAN_Init+0xf2>
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	689b      	ldr	r3, [r3, #8]
 800c7ce:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800c7d2:	d004      	beq.n	800c7de <HAL_CAN_Init+0xf2>
 800c7d4:	f44f 7192 	mov.w	r1, #292	; 0x124
 800c7d8:	4869      	ldr	r0, [pc, #420]	; (800c980 <HAL_CAN_Init+0x294>)
 800c7da:	f7f7 fed3 	bl	8004584 <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	68db      	ldr	r3, [r3, #12]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d013      	beq.n	800c80e <HAL_CAN_Init+0x122>
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	68db      	ldr	r3, [r3, #12]
 800c7ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c7ee:	d00e      	beq.n	800c80e <HAL_CAN_Init+0x122>
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	68db      	ldr	r3, [r3, #12]
 800c7f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c7f8:	d009      	beq.n	800c80e <HAL_CAN_Init+0x122>
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	68db      	ldr	r3, [r3, #12]
 800c7fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c802:	d004      	beq.n	800c80e <HAL_CAN_Init+0x122>
 800c804:	f240 1125 	movw	r1, #293	; 0x125
 800c808:	485d      	ldr	r0, [pc, #372]	; (800c980 <HAL_CAN_Init+0x294>)
 800c80a:	f7f7 febb 	bl	8004584 <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	691b      	ldr	r3, [r3, #16]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d04f      	beq.n	800c8b6 <HAL_CAN_Init+0x1ca>
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	691b      	ldr	r3, [r3, #16]
 800c81a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c81e:	d04a      	beq.n	800c8b6 <HAL_CAN_Init+0x1ca>
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	691b      	ldr	r3, [r3, #16]
 800c824:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c828:	d045      	beq.n	800c8b6 <HAL_CAN_Init+0x1ca>
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	691b      	ldr	r3, [r3, #16]
 800c82e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c832:	d040      	beq.n	800c8b6 <HAL_CAN_Init+0x1ca>
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	691b      	ldr	r3, [r3, #16]
 800c838:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c83c:	d03b      	beq.n	800c8b6 <HAL_CAN_Init+0x1ca>
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	691b      	ldr	r3, [r3, #16]
 800c842:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c846:	d036      	beq.n	800c8b6 <HAL_CAN_Init+0x1ca>
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	691b      	ldr	r3, [r3, #16]
 800c84c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c850:	d031      	beq.n	800c8b6 <HAL_CAN_Init+0x1ca>
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	691b      	ldr	r3, [r3, #16]
 800c856:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 800c85a:	d02c      	beq.n	800c8b6 <HAL_CAN_Init+0x1ca>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	691b      	ldr	r3, [r3, #16]
 800c860:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c864:	d027      	beq.n	800c8b6 <HAL_CAN_Init+0x1ca>
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	691b      	ldr	r3, [r3, #16]
 800c86a:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 800c86e:	d022      	beq.n	800c8b6 <HAL_CAN_Init+0x1ca>
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	691b      	ldr	r3, [r3, #16]
 800c874:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 800c878:	d01d      	beq.n	800c8b6 <HAL_CAN_Init+0x1ca>
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	691b      	ldr	r3, [r3, #16]
 800c87e:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 800c882:	d018      	beq.n	800c8b6 <HAL_CAN_Init+0x1ca>
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	691b      	ldr	r3, [r3, #16]
 800c888:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800c88c:	d013      	beq.n	800c8b6 <HAL_CAN_Init+0x1ca>
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	691b      	ldr	r3, [r3, #16]
 800c892:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 800c896:	d00e      	beq.n	800c8b6 <HAL_CAN_Init+0x1ca>
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	691b      	ldr	r3, [r3, #16]
 800c89c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800c8a0:	d009      	beq.n	800c8b6 <HAL_CAN_Init+0x1ca>
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	691b      	ldr	r3, [r3, #16]
 800c8a6:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800c8aa:	d004      	beq.n	800c8b6 <HAL_CAN_Init+0x1ca>
 800c8ac:	f44f 7193 	mov.w	r1, #294	; 0x126
 800c8b0:	4833      	ldr	r0, [pc, #204]	; (800c980 <HAL_CAN_Init+0x294>)
 800c8b2:	f7f7 fe67 	bl	8004584 <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	695b      	ldr	r3, [r3, #20]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d027      	beq.n	800c90e <HAL_CAN_Init+0x222>
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	695b      	ldr	r3, [r3, #20]
 800c8c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c8c6:	d022      	beq.n	800c90e <HAL_CAN_Init+0x222>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	695b      	ldr	r3, [r3, #20]
 800c8cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c8d0:	d01d      	beq.n	800c90e <HAL_CAN_Init+0x222>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	695b      	ldr	r3, [r3, #20]
 800c8d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c8da:	d018      	beq.n	800c90e <HAL_CAN_Init+0x222>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	695b      	ldr	r3, [r3, #20]
 800c8e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c8e4:	d013      	beq.n	800c90e <HAL_CAN_Init+0x222>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	695b      	ldr	r3, [r3, #20]
 800c8ea:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800c8ee:	d00e      	beq.n	800c90e <HAL_CAN_Init+0x222>
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	695b      	ldr	r3, [r3, #20]
 800c8f4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c8f8:	d009      	beq.n	800c90e <HAL_CAN_Init+0x222>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	695b      	ldr	r3, [r3, #20]
 800c8fe:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 800c902:	d004      	beq.n	800c90e <HAL_CAN_Init+0x222>
 800c904:	f240 1127 	movw	r1, #295	; 0x127
 800c908:	481d      	ldr	r0, [pc, #116]	; (800c980 <HAL_CAN_Init+0x294>)
 800c90a:	f7f7 fe3b 	bl	8004584 <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	685b      	ldr	r3, [r3, #4]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d004      	beq.n	800c920 <HAL_CAN_Init+0x234>
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	685b      	ldr	r3, [r3, #4]
 800c91a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c91e:	d904      	bls.n	800c92a <HAL_CAN_Init+0x23e>
 800c920:	f44f 7194 	mov.w	r1, #296	; 0x128
 800c924:	4816      	ldr	r0, [pc, #88]	; (800c980 <HAL_CAN_Init+0x294>)
 800c926:	f7f7 fe2d 	bl	8004584 <assert_failed>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c930:	b2db      	uxtb	r3, r3
 800c932:	2b00      	cmp	r3, #0
 800c934:	d102      	bne.n	800c93c <HAL_CAN_Init+0x250>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f7f5 f9a8 	bl	8001c8c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	681a      	ldr	r2, [r3, #0]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f042 0201 	orr.w	r2, r2, #1
 800c94a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c94c:	f7fd fdea 	bl	800a524 <HAL_GetTick>
 800c950:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800c952:	e017      	b.n	800c984 <HAL_CAN_Init+0x298>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800c954:	f7fd fde6 	bl	800a524 <HAL_GetTick>
 800c958:	4602      	mov	r2, r0
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	1ad3      	subs	r3, r2, r3
 800c95e:	2b0a      	cmp	r3, #10
 800c960:	d910      	bls.n	800c984 <HAL_CAN_Init+0x298>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c966:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2205      	movs	r2, #5
 800c972:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800c976:	2301      	movs	r3, #1
 800c978:	e0ca      	b.n	800cb10 <HAL_CAN_Init+0x424>
 800c97a:	bf00      	nop
 800c97c:	40006400 	.word	0x40006400
 800c980:	0801b834 	.word	0x0801b834
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	685b      	ldr	r3, [r3, #4]
 800c98a:	f003 0301 	and.w	r3, r3, #1
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d0e0      	beq.n	800c954 <HAL_CAN_Init+0x268>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	681a      	ldr	r2, [r3, #0]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f022 0202 	bic.w	r2, r2, #2
 800c9a0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c9a2:	f7fd fdbf 	bl	800a524 <HAL_GetTick>
 800c9a6:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800c9a8:	e012      	b.n	800c9d0 <HAL_CAN_Init+0x2e4>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800c9aa:	f7fd fdbb 	bl	800a524 <HAL_GetTick>
 800c9ae:	4602      	mov	r2, r0
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	1ad3      	subs	r3, r2, r3
 800c9b4:	2b0a      	cmp	r3, #10
 800c9b6:	d90b      	bls.n	800c9d0 <HAL_CAN_Init+0x2e4>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9bc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2205      	movs	r2, #5
 800c9c8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	e09f      	b.n	800cb10 <HAL_CAN_Init+0x424>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	685b      	ldr	r3, [r3, #4]
 800c9d6:	f003 0302 	and.w	r3, r3, #2
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d1e5      	bne.n	800c9aa <HAL_CAN_Init+0x2be>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	7e1b      	ldrb	r3, [r3, #24]
 800c9e2:	2b01      	cmp	r3, #1
 800c9e4:	d108      	bne.n	800c9f8 <HAL_CAN_Init+0x30c>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	681a      	ldr	r2, [r3, #0]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c9f4:	601a      	str	r2, [r3, #0]
 800c9f6:	e007      	b.n	800ca08 <HAL_CAN_Init+0x31c>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	681a      	ldr	r2, [r3, #0]
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ca06:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	7e5b      	ldrb	r3, [r3, #25]
 800ca0c:	2b01      	cmp	r3, #1
 800ca0e:	d108      	bne.n	800ca22 <HAL_CAN_Init+0x336>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	681a      	ldr	r2, [r3, #0]
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ca1e:	601a      	str	r2, [r3, #0]
 800ca20:	e007      	b.n	800ca32 <HAL_CAN_Init+0x346>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	681a      	ldr	r2, [r3, #0]
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ca30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	7e9b      	ldrb	r3, [r3, #26]
 800ca36:	2b01      	cmp	r3, #1
 800ca38:	d108      	bne.n	800ca4c <HAL_CAN_Init+0x360>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	681a      	ldr	r2, [r3, #0]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	f042 0220 	orr.w	r2, r2, #32
 800ca48:	601a      	str	r2, [r3, #0]
 800ca4a:	e007      	b.n	800ca5c <HAL_CAN_Init+0x370>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	681a      	ldr	r2, [r3, #0]
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f022 0220 	bic.w	r2, r2, #32
 800ca5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	7edb      	ldrb	r3, [r3, #27]
 800ca60:	2b01      	cmp	r3, #1
 800ca62:	d108      	bne.n	800ca76 <HAL_CAN_Init+0x38a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	681a      	ldr	r2, [r3, #0]
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f022 0210 	bic.w	r2, r2, #16
 800ca72:	601a      	str	r2, [r3, #0]
 800ca74:	e007      	b.n	800ca86 <HAL_CAN_Init+0x39a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	681a      	ldr	r2, [r3, #0]
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	f042 0210 	orr.w	r2, r2, #16
 800ca84:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	7f1b      	ldrb	r3, [r3, #28]
 800ca8a:	2b01      	cmp	r3, #1
 800ca8c:	d108      	bne.n	800caa0 <HAL_CAN_Init+0x3b4>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	681a      	ldr	r2, [r3, #0]
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	f042 0208 	orr.w	r2, r2, #8
 800ca9c:	601a      	str	r2, [r3, #0]
 800ca9e:	e007      	b.n	800cab0 <HAL_CAN_Init+0x3c4>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	681a      	ldr	r2, [r3, #0]
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f022 0208 	bic.w	r2, r2, #8
 800caae:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	7f5b      	ldrb	r3, [r3, #29]
 800cab4:	2b01      	cmp	r3, #1
 800cab6:	d108      	bne.n	800caca <HAL_CAN_Init+0x3de>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	681a      	ldr	r2, [r3, #0]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f042 0204 	orr.w	r2, r2, #4
 800cac6:	601a      	str	r2, [r3, #0]
 800cac8:	e007      	b.n	800cada <HAL_CAN_Init+0x3ee>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	681a      	ldr	r2, [r3, #0]
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	f022 0204 	bic.w	r2, r2, #4
 800cad8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	689a      	ldr	r2, [r3, #8]
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	68db      	ldr	r3, [r3, #12]
 800cae2:	431a      	orrs	r2, r3
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	691b      	ldr	r3, [r3, #16]
 800cae8:	431a      	orrs	r2, r3
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	695b      	ldr	r3, [r3, #20]
 800caee:	ea42 0103 	orr.w	r1, r2, r3
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	685b      	ldr	r3, [r3, #4]
 800caf6:	1e5a      	subs	r2, r3, #1
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	430a      	orrs	r2, r1
 800cafe:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2200      	movs	r2, #0
 800cb04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2201      	movs	r2, #1
 800cb0a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800cb0e:	2300      	movs	r3, #0
}
 800cb10:	4618      	mov	r0, r3
 800cb12:	3710      	adds	r7, #16
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}

0800cb18 <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d101      	bne.n	800cb2a <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 800cb26:	2301      	movs	r3, #1
 800cb28:	e01f      	b.n	800cb6a <HAL_CAN_DeInit+0x52>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	4a11      	ldr	r2, [pc, #68]	; (800cb74 <HAL_CAN_DeInit+0x5c>)
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d004      	beq.n	800cb3e <HAL_CAN_DeInit+0x26>
 800cb34:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800cb38:	480f      	ldr	r0, [pc, #60]	; (800cb78 <HAL_CAN_DeInit+0x60>)
 800cb3a:	f7f7 fd23 	bl	8004584 <assert_failed>

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f000 f990 	bl	800ce64 <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f7f5 f905 	bl	8001d54 <HAL_CAN_MspDeInit>
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	681a      	ldr	r2, [r3, #0]
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cb58:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2200      	movs	r2, #0
 800cb64:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800cb68:	2300      	movs	r3, #0
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3708      	adds	r7, #8
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
 800cb72:	bf00      	nop
 800cb74:	40006400 	.word	0x40006400
 800cb78:	0801b834 	.word	0x0801b834

0800cb7c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b086      	sub	sp, #24
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
 800cb84:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cb92:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800cb94:	7cfb      	ldrb	r3, [r7, #19]
 800cb96:	2b01      	cmp	r3, #1
 800cb98:	d003      	beq.n	800cba2 <HAL_CAN_ConfigFilter+0x26>
 800cb9a:	7cfb      	ldrb	r3, [r7, #19]
 800cb9c:	2b02      	cmp	r3, #2
 800cb9e:	f040 810f 	bne.w	800cdc0 <HAL_CAN_ConfigFilter+0x244>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbaa:	d304      	bcc.n	800cbb6 <HAL_CAN_ConfigFilter+0x3a>
 800cbac:	f240 3151 	movw	r1, #849	; 0x351
 800cbb0:	4889      	ldr	r0, [pc, #548]	; (800cdd8 <HAL_CAN_ConfigFilter+0x25c>)
 800cbb2:	f7f7 fce7 	bl	8004584 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	685b      	ldr	r3, [r3, #4]
 800cbba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbbe:	d304      	bcc.n	800cbca <HAL_CAN_ConfigFilter+0x4e>
 800cbc0:	f240 3152 	movw	r1, #850	; 0x352
 800cbc4:	4884      	ldr	r0, [pc, #528]	; (800cdd8 <HAL_CAN_ConfigFilter+0x25c>)
 800cbc6:	f7f7 fcdd 	bl	8004584 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	689b      	ldr	r3, [r3, #8]
 800cbce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbd2:	d304      	bcc.n	800cbde <HAL_CAN_ConfigFilter+0x62>
 800cbd4:	f240 3153 	movw	r1, #851	; 0x353
 800cbd8:	487f      	ldr	r0, [pc, #508]	; (800cdd8 <HAL_CAN_ConfigFilter+0x25c>)
 800cbda:	f7f7 fcd3 	bl	8004584 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	68db      	ldr	r3, [r3, #12]
 800cbe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbe6:	d304      	bcc.n	800cbf2 <HAL_CAN_ConfigFilter+0x76>
 800cbe8:	f44f 7155 	mov.w	r1, #852	; 0x354
 800cbec:	487a      	ldr	r0, [pc, #488]	; (800cdd8 <HAL_CAN_ConfigFilter+0x25c>)
 800cbee:	f7f7 fcc9 	bl	8004584 <assert_failed>
    assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	699b      	ldr	r3, [r3, #24]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d008      	beq.n	800cc0c <HAL_CAN_ConfigFilter+0x90>
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	699b      	ldr	r3, [r3, #24]
 800cbfe:	2b01      	cmp	r3, #1
 800cc00:	d004      	beq.n	800cc0c <HAL_CAN_ConfigFilter+0x90>
 800cc02:	f240 3155 	movw	r1, #853	; 0x355
 800cc06:	4874      	ldr	r0, [pc, #464]	; (800cdd8 <HAL_CAN_ConfigFilter+0x25c>)
 800cc08:	f7f7 fcbc 	bl	8004584 <assert_failed>
    assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	69db      	ldr	r3, [r3, #28]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d008      	beq.n	800cc26 <HAL_CAN_ConfigFilter+0xaa>
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	69db      	ldr	r3, [r3, #28]
 800cc18:	2b01      	cmp	r3, #1
 800cc1a:	d004      	beq.n	800cc26 <HAL_CAN_ConfigFilter+0xaa>
 800cc1c:	f240 3156 	movw	r1, #854	; 0x356
 800cc20:	486d      	ldr	r0, [pc, #436]	; (800cdd8 <HAL_CAN_ConfigFilter+0x25c>)
 800cc22:	f7f7 fcaf 	bl	8004584 <assert_failed>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	691b      	ldr	r3, [r3, #16]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d008      	beq.n	800cc40 <HAL_CAN_ConfigFilter+0xc4>
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	691b      	ldr	r3, [r3, #16]
 800cc32:	2b01      	cmp	r3, #1
 800cc34:	d004      	beq.n	800cc40 <HAL_CAN_ConfigFilter+0xc4>
 800cc36:	f240 3157 	movw	r1, #855	; 0x357
 800cc3a:	4867      	ldr	r0, [pc, #412]	; (800cdd8 <HAL_CAN_ConfigFilter+0x25c>)
 800cc3c:	f7f7 fca2 	bl	8004584 <assert_failed>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	6a1b      	ldr	r3, [r3, #32]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d008      	beq.n	800cc5a <HAL_CAN_ConfigFilter+0xde>
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	6a1b      	ldr	r3, [r3, #32]
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	d004      	beq.n	800cc5a <HAL_CAN_ConfigFilter+0xde>
 800cc50:	f44f 7156 	mov.w	r1, #856	; 0x358
 800cc54:	4860      	ldr	r0, [pc, #384]	; (800cdd8 <HAL_CAN_ConfigFilter+0x25c>)
 800cc56:	f7f7 fc95 	bl	8004584 <assert_failed>
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
#else
    /* CAN1 is single instance with 14 dedicated filters banks */

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	695b      	ldr	r3, [r3, #20]
 800cc5e:	2b0d      	cmp	r3, #13
 800cc60:	d904      	bls.n	800cc6c <HAL_CAN_ConfigFilter+0xf0>
 800cc62:	f240 3166 	movw	r1, #870	; 0x366
 800cc66:	485c      	ldr	r0, [pc, #368]	; (800cdd8 <HAL_CAN_ConfigFilter+0x25c>)
 800cc68:	f7f7 fc8c 	bl	8004584 <assert_failed>
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cc72:	f043 0201 	orr.w	r2, r3, #1
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	695b      	ldr	r3, [r3, #20]
 800cc80:	f003 031f 	and.w	r3, r3, #31
 800cc84:	2201      	movs	r2, #1
 800cc86:	fa02 f303 	lsl.w	r3, r2, r3
 800cc8a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	43db      	mvns	r3, r3
 800cc96:	401a      	ands	r2, r3
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	69db      	ldr	r3, [r3, #28]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d123      	bne.n	800ccee <HAL_CAN_ConfigFilter+0x172>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	43db      	mvns	r3, r3
 800ccb0:	401a      	ands	r2, r3
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	68db      	ldr	r3, [r3, #12]
 800ccbc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	685b      	ldr	r3, [r3, #4]
 800ccc2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800ccc4:	683a      	ldr	r2, [r7, #0]
 800ccc6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800ccc8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	3248      	adds	r2, #72	; 0x48
 800ccce:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	689b      	ldr	r3, [r3, #8]
 800ccd6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800cce2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800cce4:	6979      	ldr	r1, [r7, #20]
 800cce6:	3348      	adds	r3, #72	; 0x48
 800cce8:	00db      	lsls	r3, r3, #3
 800ccea:	440b      	add	r3, r1
 800ccec:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	69db      	ldr	r3, [r3, #28]
 800ccf2:	2b01      	cmp	r3, #1
 800ccf4:	d122      	bne.n	800cd3c <HAL_CAN_ConfigFilter+0x1c0>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	431a      	orrs	r2, r3
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	685b      	ldr	r3, [r3, #4]
 800cd10:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800cd12:	683a      	ldr	r2, [r7, #0]
 800cd14:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800cd16:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	3248      	adds	r2, #72	; 0x48
 800cd1c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	689b      	ldr	r3, [r3, #8]
 800cd24:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	68db      	ldr	r3, [r3, #12]
 800cd2a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800cd30:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800cd32:	6979      	ldr	r1, [r7, #20]
 800cd34:	3348      	adds	r3, #72	; 0x48
 800cd36:	00db      	lsls	r3, r3, #3
 800cd38:	440b      	add	r3, r1
 800cd3a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	699b      	ldr	r3, [r3, #24]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d109      	bne.n	800cd58 <HAL_CAN_ConfigFilter+0x1dc>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800cd44:	697b      	ldr	r3, [r7, #20]
 800cd46:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	43db      	mvns	r3, r3
 800cd4e:	401a      	ands	r2, r3
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800cd56:	e007      	b.n	800cd68 <HAL_CAN_ConfigFilter+0x1ec>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	431a      	orrs	r2, r3
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	691b      	ldr	r3, [r3, #16]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d109      	bne.n	800cd84 <HAL_CAN_ConfigFilter+0x208>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	43db      	mvns	r3, r3
 800cd7a:	401a      	ands	r2, r3
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800cd82:	e007      	b.n	800cd94 <HAL_CAN_ConfigFilter+0x218>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	431a      	orrs	r2, r3
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	6a1b      	ldr	r3, [r3, #32]
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	d107      	bne.n	800cdac <HAL_CAN_ConfigFilter+0x230>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	431a      	orrs	r2, r3
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cdb2:	f023 0201 	bic.w	r2, r3, #1
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	e006      	b.n	800cdce <HAL_CAN_ConfigFilter+0x252>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdc4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800cdcc:	2301      	movs	r3, #1
  }
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3718      	adds	r7, #24
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}
 800cdd6:	bf00      	nop
 800cdd8:	0801b834 	.word	0x0801b834

0800cddc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b084      	sub	sp, #16
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cdea:	b2db      	uxtb	r3, r3
 800cdec:	2b01      	cmp	r3, #1
 800cdee:	d12e      	bne.n	800ce4e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2202      	movs	r2, #2
 800cdf4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	681a      	ldr	r2, [r3, #0]
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f022 0201 	bic.w	r2, r2, #1
 800ce06:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ce08:	f7fd fb8c 	bl	800a524 <HAL_GetTick>
 800ce0c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800ce0e:	e012      	b.n	800ce36 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800ce10:	f7fd fb88 	bl	800a524 <HAL_GetTick>
 800ce14:	4602      	mov	r2, r0
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	1ad3      	subs	r3, r2, r3
 800ce1a:	2b0a      	cmp	r3, #10
 800ce1c:	d90b      	bls.n	800ce36 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2205      	movs	r2, #5
 800ce2e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800ce32:	2301      	movs	r3, #1
 800ce34:	e012      	b.n	800ce5c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	685b      	ldr	r3, [r3, #4]
 800ce3c:	f003 0301 	and.w	r3, r3, #1
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d1e5      	bne.n	800ce10 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2200      	movs	r2, #0
 800ce48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	e006      	b.n	800ce5c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce52:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800ce5a:	2301      	movs	r3, #1
  }
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3710      	adds	r7, #16
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}

0800ce64 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b084      	sub	sp, #16
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ce72:	b2db      	uxtb	r3, r3
 800ce74:	2b02      	cmp	r3, #2
 800ce76:	d133      	bne.n	800cee0 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	681a      	ldr	r2, [r3, #0]
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	f042 0201 	orr.w	r2, r2, #1
 800ce86:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ce88:	f7fd fb4c 	bl	800a524 <HAL_GetTick>
 800ce8c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800ce8e:	e012      	b.n	800ceb6 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800ce90:	f7fd fb48 	bl	800a524 <HAL_GetTick>
 800ce94:	4602      	mov	r2, r0
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	1ad3      	subs	r3, r2, r3
 800ce9a:	2b0a      	cmp	r3, #10
 800ce9c:	d90b      	bls.n	800ceb6 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cea2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2205      	movs	r2, #5
 800ceae:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800ceb2:	2301      	movs	r3, #1
 800ceb4:	e01b      	b.n	800ceee <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	685b      	ldr	r3, [r3, #4]
 800cebc:	f003 0301 	and.w	r3, r3, #1
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d0e5      	beq.n	800ce90 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	681a      	ldr	r2, [r3, #0]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f022 0202 	bic.w	r2, r2, #2
 800ced2:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2201      	movs	r2, #1
 800ced8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 800cedc:	2300      	movs	r3, #0
 800cede:	e006      	b.n	800ceee <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cee4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800ceec:	2301      	movs	r3, #1
  }
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3710      	adds	r7, #16
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}
	...

0800cef8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b088      	sub	sp, #32
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	60f8      	str	r0, [r7, #12]
 800cf00:	60b9      	str	r1, [r7, #8]
 800cf02:	607a      	str	r2, [r7, #4]
 800cf04:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cf0c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	689b      	ldr	r3, [r3, #8]
 800cf14:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	689b      	ldr	r3, [r3, #8]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d008      	beq.n	800cf30 <HAL_CAN_AddTxMessage+0x38>
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	689b      	ldr	r3, [r3, #8]
 800cf22:	2b04      	cmp	r3, #4
 800cf24:	d004      	beq.n	800cf30 <HAL_CAN_AddTxMessage+0x38>
 800cf26:	f240 41cf 	movw	r1, #1231	; 0x4cf
 800cf2a:	487f      	ldr	r0, [pc, #508]	; (800d128 <HAL_CAN_AddTxMessage+0x230>)
 800cf2c:	f7f7 fb2a 	bl	8004584 <assert_failed>
  assert_param(IS_CAN_RTR(pHeader->RTR));
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	68db      	ldr	r3, [r3, #12]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d008      	beq.n	800cf4a <HAL_CAN_AddTxMessage+0x52>
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	68db      	ldr	r3, [r3, #12]
 800cf3c:	2b02      	cmp	r3, #2
 800cf3e:	d004      	beq.n	800cf4a <HAL_CAN_AddTxMessage+0x52>
 800cf40:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
 800cf44:	4878      	ldr	r0, [pc, #480]	; (800d128 <HAL_CAN_AddTxMessage+0x230>)
 800cf46:	f7f7 fb1d 	bl	8004584 <assert_failed>
  assert_param(IS_CAN_DLC(pHeader->DLC));
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	691b      	ldr	r3, [r3, #16]
 800cf4e:	2b08      	cmp	r3, #8
 800cf50:	d904      	bls.n	800cf5c <HAL_CAN_AddTxMessage+0x64>
 800cf52:	f240 41d1 	movw	r1, #1233	; 0x4d1
 800cf56:	4874      	ldr	r0, [pc, #464]	; (800d128 <HAL_CAN_AddTxMessage+0x230>)
 800cf58:	f7f7 fb14 	bl	8004584 <assert_failed>
  if (pHeader->IDE == CAN_ID_STD)
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	689b      	ldr	r3, [r3, #8]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d10a      	bne.n	800cf7a <HAL_CAN_AddTxMessage+0x82>
  {
    assert_param(IS_CAN_STDID(pHeader->StdId));
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cf6c:	d30f      	bcc.n	800cf8e <HAL_CAN_AddTxMessage+0x96>
 800cf6e:	f240 41d4 	movw	r1, #1236	; 0x4d4
 800cf72:	486d      	ldr	r0, [pc, #436]	; (800d128 <HAL_CAN_AddTxMessage+0x230>)
 800cf74:	f7f7 fb06 	bl	8004584 <assert_failed>
 800cf78:	e009      	b.n	800cf8e <HAL_CAN_AddTxMessage+0x96>
  }
  else
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	685b      	ldr	r3, [r3, #4]
 800cf7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf82:	d304      	bcc.n	800cf8e <HAL_CAN_AddTxMessage+0x96>
 800cf84:	f44f 619b 	mov.w	r1, #1240	; 0x4d8
 800cf88:	4867      	ldr	r0, [pc, #412]	; (800d128 <HAL_CAN_AddTxMessage+0x230>)
 800cf8a:	f7f7 fafb 	bl	8004584 <assert_failed>
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	7d1b      	ldrb	r3, [r3, #20]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d008      	beq.n	800cfa8 <HAL_CAN_AddTxMessage+0xb0>
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	7d1b      	ldrb	r3, [r3, #20]
 800cf9a:	2b01      	cmp	r3, #1
 800cf9c:	d004      	beq.n	800cfa8 <HAL_CAN_AddTxMessage+0xb0>
 800cf9e:	f240 41da 	movw	r1, #1242	; 0x4da
 800cfa2:	4861      	ldr	r0, [pc, #388]	; (800d128 <HAL_CAN_AddTxMessage+0x230>)
 800cfa4:	f7f7 faee 	bl	8004584 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 800cfa8:	7ffb      	ldrb	r3, [r7, #31]
 800cfaa:	2b01      	cmp	r3, #1
 800cfac:	d003      	beq.n	800cfb6 <HAL_CAN_AddTxMessage+0xbe>
 800cfae:	7ffb      	ldrb	r3, [r7, #31]
 800cfb0:	2b02      	cmp	r3, #2
 800cfb2:	f040 80ad 	bne.w	800d110 <HAL_CAN_AddTxMessage+0x218>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800cfb6:	69bb      	ldr	r3, [r7, #24]
 800cfb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d10a      	bne.n	800cfd6 <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800cfc0:	69bb      	ldr	r3, [r7, #24]
 800cfc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d105      	bne.n	800cfd6 <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME2) != 0U))
 800cfca:	69bb      	ldr	r3, [r7, #24]
 800cfcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	f000 8095 	beq.w	800d100 <HAL_CAN_AddTxMessage+0x208>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800cfd6:	69bb      	ldr	r3, [r7, #24]
 800cfd8:	0e1b      	lsrs	r3, r3, #24
 800cfda:	f003 0303 	and.w	r3, r3, #3
 800cfde:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800cfe0:	2201      	movs	r2, #1
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	409a      	lsls	r2, r3
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	689b      	ldr	r3, [r3, #8]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d10d      	bne.n	800d00e <HAL_CAN_AddTxMessage+0x116>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800cffc:	68f9      	ldr	r1, [r7, #12]
 800cffe:	6809      	ldr	r1, [r1, #0]
 800d000:	431a      	orrs	r2, r3
 800d002:	697b      	ldr	r3, [r7, #20]
 800d004:	3318      	adds	r3, #24
 800d006:	011b      	lsls	r3, r3, #4
 800d008:	440b      	add	r3, r1
 800d00a:	601a      	str	r2, [r3, #0]
 800d00c:	e00f      	b.n	800d02e <HAL_CAN_AddTxMessage+0x136>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	685b      	ldr	r3, [r3, #4]
 800d012:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800d018:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800d01e:	68f9      	ldr	r1, [r7, #12]
 800d020:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800d022:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800d024:	697b      	ldr	r3, [r7, #20]
 800d026:	3318      	adds	r3, #24
 800d028:	011b      	lsls	r3, r3, #4
 800d02a:	440b      	add	r3, r1
 800d02c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	6819      	ldr	r1, [r3, #0]
 800d032:	68bb      	ldr	r3, [r7, #8]
 800d034:	691a      	ldr	r2, [r3, #16]
 800d036:	697b      	ldr	r3, [r7, #20]
 800d038:	3318      	adds	r3, #24
 800d03a:	011b      	lsls	r3, r3, #4
 800d03c:	440b      	add	r3, r1
 800d03e:	3304      	adds	r3, #4
 800d040:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	7d1b      	ldrb	r3, [r3, #20]
 800d046:	2b01      	cmp	r3, #1
 800d048:	d111      	bne.n	800d06e <HAL_CAN_AddTxMessage+0x176>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	681a      	ldr	r2, [r3, #0]
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	3318      	adds	r3, #24
 800d052:	011b      	lsls	r3, r3, #4
 800d054:	4413      	add	r3, r2
 800d056:	3304      	adds	r3, #4
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	68fa      	ldr	r2, [r7, #12]
 800d05c:	6811      	ldr	r1, [r2, #0]
 800d05e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	3318      	adds	r3, #24
 800d066:	011b      	lsls	r3, r3, #4
 800d068:	440b      	add	r3, r1
 800d06a:	3304      	adds	r3, #4
 800d06c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	3307      	adds	r3, #7
 800d072:	781b      	ldrb	r3, [r3, #0]
 800d074:	061a      	lsls	r2, r3, #24
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	3306      	adds	r3, #6
 800d07a:	781b      	ldrb	r3, [r3, #0]
 800d07c:	041b      	lsls	r3, r3, #16
 800d07e:	431a      	orrs	r2, r3
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	3305      	adds	r3, #5
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	021b      	lsls	r3, r3, #8
 800d088:	4313      	orrs	r3, r2
 800d08a:	687a      	ldr	r2, [r7, #4]
 800d08c:	3204      	adds	r2, #4
 800d08e:	7812      	ldrb	r2, [r2, #0]
 800d090:	4610      	mov	r0, r2
 800d092:	68fa      	ldr	r2, [r7, #12]
 800d094:	6811      	ldr	r1, [r2, #0]
 800d096:	ea43 0200 	orr.w	r2, r3, r0
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	011b      	lsls	r3, r3, #4
 800d09e:	440b      	add	r3, r1
 800d0a0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800d0a4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	3303      	adds	r3, #3
 800d0aa:	781b      	ldrb	r3, [r3, #0]
 800d0ac:	061a      	lsls	r2, r3, #24
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	3302      	adds	r3, #2
 800d0b2:	781b      	ldrb	r3, [r3, #0]
 800d0b4:	041b      	lsls	r3, r3, #16
 800d0b6:	431a      	orrs	r2, r3
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	3301      	adds	r3, #1
 800d0bc:	781b      	ldrb	r3, [r3, #0]
 800d0be:	021b      	lsls	r3, r3, #8
 800d0c0:	4313      	orrs	r3, r2
 800d0c2:	687a      	ldr	r2, [r7, #4]
 800d0c4:	7812      	ldrb	r2, [r2, #0]
 800d0c6:	4610      	mov	r0, r2
 800d0c8:	68fa      	ldr	r2, [r7, #12]
 800d0ca:	6811      	ldr	r1, [r2, #0]
 800d0cc:	ea43 0200 	orr.w	r2, r3, r0
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	011b      	lsls	r3, r3, #4
 800d0d4:	440b      	add	r3, r1
 800d0d6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800d0da:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	681a      	ldr	r2, [r3, #0]
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	3318      	adds	r3, #24
 800d0e4:	011b      	lsls	r3, r3, #4
 800d0e6:	4413      	add	r3, r2
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	68fa      	ldr	r2, [r7, #12]
 800d0ec:	6811      	ldr	r1, [r2, #0]
 800d0ee:	f043 0201 	orr.w	r2, r3, #1
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	3318      	adds	r3, #24
 800d0f6:	011b      	lsls	r3, r3, #4
 800d0f8:	440b      	add	r3, r1
 800d0fa:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	e00e      	b.n	800d11e <HAL_CAN_AddTxMessage+0x226>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d104:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800d10c:	2301      	movs	r3, #1
 800d10e:	e006      	b.n	800d11e <HAL_CAN_AddTxMessage+0x226>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d114:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800d11c:	2301      	movs	r3, #1
  }
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3720      	adds	r7, #32
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}
 800d126:	bf00      	nop
 800d128:	0801b834 	.word	0x0801b834

0800d12c <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800d12c:	b480      	push	{r7}
 800d12e:	b085      	sub	sp, #20
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800d134:	2300      	movs	r3, #0
 800d136:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d13e:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800d140:	7afb      	ldrb	r3, [r7, #11]
 800d142:	2b01      	cmp	r3, #1
 800d144:	d002      	beq.n	800d14c <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800d146:	7afb      	ldrb	r3, [r7, #11]
 800d148:	2b02      	cmp	r3, #2
 800d14a:	d11d      	bne.n	800d188 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	689b      	ldr	r3, [r3, #8]
 800d152:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d156:	2b00      	cmp	r3, #0
 800d158:	d002      	beq.n	800d160 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	3301      	adds	r3, #1
 800d15e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	689b      	ldr	r3, [r3, #8]
 800d166:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d002      	beq.n	800d174 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	3301      	adds	r3, #1
 800d172:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	689b      	ldr	r3, [r3, #8]
 800d17a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d002      	beq.n	800d188 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	3301      	adds	r3, #1
 800d186:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800d188:	68fb      	ldr	r3, [r7, #12]
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3714      	adds	r7, #20
 800d18e:	46bd      	mov	sp, r7
 800d190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d194:	4770      	bx	lr
	...

0800d198 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b086      	sub	sp, #24
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	60f8      	str	r0, [r7, #12]
 800d1a0:	60b9      	str	r1, [r7, #8]
 800d1a2:	607a      	str	r2, [r7, #4]
 800d1a4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d1ac:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d007      	beq.n	800d1c4 <HAL_CAN_GetRxMessage+0x2c>
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	2b01      	cmp	r3, #1
 800d1b8:	d004      	beq.n	800d1c4 <HAL_CAN_GetRxMessage+0x2c>
 800d1ba:	f240 51ce 	movw	r1, #1486	; 0x5ce
 800d1be:	4884      	ldr	r0, [pc, #528]	; (800d3d0 <HAL_CAN_GetRxMessage+0x238>)
 800d1c0:	f7f7 f9e0 	bl	8004584 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 800d1c4:	7dfb      	ldrb	r3, [r7, #23]
 800d1c6:	2b01      	cmp	r3, #1
 800d1c8:	d003      	beq.n	800d1d2 <HAL_CAN_GetRxMessage+0x3a>
 800d1ca:	7dfb      	ldrb	r3, [r7, #23]
 800d1cc:	2b02      	cmp	r3, #2
 800d1ce:	f040 80f3 	bne.w	800d3b8 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d10e      	bne.n	800d1f6 <HAL_CAN_GetRxMessage+0x5e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	68db      	ldr	r3, [r3, #12]
 800d1de:	f003 0303 	and.w	r3, r3, #3
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d116      	bne.n	800d214 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	e0e7      	b.n	800d3c6 <HAL_CAN_GetRxMessage+0x22e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	691b      	ldr	r3, [r3, #16]
 800d1fc:	f003 0303 	and.w	r3, r3, #3
 800d200:	2b00      	cmp	r3, #0
 800d202:	d107      	bne.n	800d214 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d208:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800d210:	2301      	movs	r3, #1
 800d212:	e0d8      	b.n	800d3c6 <HAL_CAN_GetRxMessage+0x22e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681a      	ldr	r2, [r3, #0]
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	331b      	adds	r3, #27
 800d21c:	011b      	lsls	r3, r3, #4
 800d21e:	4413      	add	r3, r2
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f003 0204 	and.w	r2, r3, #4
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	689b      	ldr	r3, [r3, #8]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d10c      	bne.n	800d24c <HAL_CAN_GetRxMessage+0xb4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	681a      	ldr	r2, [r3, #0]
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	331b      	adds	r3, #27
 800d23a:	011b      	lsls	r3, r3, #4
 800d23c:	4413      	add	r3, r2
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	0d5b      	lsrs	r3, r3, #21
 800d242:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	601a      	str	r2, [r3, #0]
 800d24a:	e00b      	b.n	800d264 <HAL_CAN_GetRxMessage+0xcc>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	681a      	ldr	r2, [r3, #0]
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	331b      	adds	r3, #27
 800d254:	011b      	lsls	r3, r3, #4
 800d256:	4413      	add	r3, r2
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	08db      	lsrs	r3, r3, #3
 800d25c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	681a      	ldr	r2, [r3, #0]
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	331b      	adds	r3, #27
 800d26c:	011b      	lsls	r3, r3, #4
 800d26e:	4413      	add	r3, r2
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	f003 0202 	and.w	r2, r3, #2
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	681a      	ldr	r2, [r3, #0]
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	331b      	adds	r3, #27
 800d282:	011b      	lsls	r3, r3, #4
 800d284:	4413      	add	r3, r2
 800d286:	3304      	adds	r3, #4
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	f003 020f 	and.w	r2, r3, #15
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	681a      	ldr	r2, [r3, #0]
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	331b      	adds	r3, #27
 800d29a:	011b      	lsls	r3, r3, #4
 800d29c:	4413      	add	r3, r2
 800d29e:	3304      	adds	r3, #4
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	0a1b      	lsrs	r3, r3, #8
 800d2a4:	b2da      	uxtb	r2, r3
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	681a      	ldr	r2, [r3, #0]
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	331b      	adds	r3, #27
 800d2b2:	011b      	lsls	r3, r3, #4
 800d2b4:	4413      	add	r3, r2
 800d2b6:	3304      	adds	r3, #4
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	0c1b      	lsrs	r3, r3, #16
 800d2bc:	b29a      	uxth	r2, r3
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	681a      	ldr	r2, [r3, #0]
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	011b      	lsls	r3, r3, #4
 800d2ca:	4413      	add	r3, r2
 800d2cc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	b2da      	uxtb	r2, r3
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	681a      	ldr	r2, [r3, #0]
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	011b      	lsls	r3, r3, #4
 800d2e0:	4413      	add	r3, r2
 800d2e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	0a1a      	lsrs	r2, r3, #8
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	3301      	adds	r3, #1
 800d2ee:	b2d2      	uxtb	r2, r2
 800d2f0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	681a      	ldr	r2, [r3, #0]
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	011b      	lsls	r3, r3, #4
 800d2fa:	4413      	add	r3, r2
 800d2fc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	0c1a      	lsrs	r2, r3, #16
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	3302      	adds	r3, #2
 800d308:	b2d2      	uxtb	r2, r2
 800d30a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	681a      	ldr	r2, [r3, #0]
 800d310:	68bb      	ldr	r3, [r7, #8]
 800d312:	011b      	lsls	r3, r3, #4
 800d314:	4413      	add	r3, r2
 800d316:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	0e1a      	lsrs	r2, r3, #24
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	3303      	adds	r3, #3
 800d322:	b2d2      	uxtb	r2, r2
 800d324:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	681a      	ldr	r2, [r3, #0]
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	011b      	lsls	r3, r3, #4
 800d32e:	4413      	add	r3, r2
 800d330:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800d334:	681a      	ldr	r2, [r3, #0]
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	3304      	adds	r3, #4
 800d33a:	b2d2      	uxtb	r2, r2
 800d33c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	681a      	ldr	r2, [r3, #0]
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	011b      	lsls	r3, r3, #4
 800d346:	4413      	add	r3, r2
 800d348:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	0a1a      	lsrs	r2, r3, #8
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	3305      	adds	r3, #5
 800d354:	b2d2      	uxtb	r2, r2
 800d356:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	681a      	ldr	r2, [r3, #0]
 800d35c:	68bb      	ldr	r3, [r7, #8]
 800d35e:	011b      	lsls	r3, r3, #4
 800d360:	4413      	add	r3, r2
 800d362:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	0c1a      	lsrs	r2, r3, #16
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	3306      	adds	r3, #6
 800d36e:	b2d2      	uxtb	r2, r2
 800d370:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	681a      	ldr	r2, [r3, #0]
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	011b      	lsls	r3, r3, #4
 800d37a:	4413      	add	r3, r2
 800d37c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	0e1a      	lsrs	r2, r3, #24
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	3307      	adds	r3, #7
 800d388:	b2d2      	uxtb	r2, r2
 800d38a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d108      	bne.n	800d3a4 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	68da      	ldr	r2, [r3, #12]
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f042 0220 	orr.w	r2, r2, #32
 800d3a0:	60da      	str	r2, [r3, #12]
 800d3a2:	e007      	b.n	800d3b4 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	691a      	ldr	r2, [r3, #16]
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f042 0220 	orr.w	r2, r2, #32
 800d3b2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	e006      	b.n	800d3c6 <HAL_CAN_GetRxMessage+0x22e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800d3c4:	2301      	movs	r3, #1
  }
}
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	3718      	adds	r7, #24
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}
 800d3ce:	bf00      	nop
 800d3d0:	0801b834 	.word	0x0801b834

0800d3d4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b084      	sub	sp, #16
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d3e4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	4a11      	ldr	r2, [pc, #68]	; (800d430 <HAL_CAN_ActivateNotification+0x5c>)
 800d3ea:	4293      	cmp	r3, r2
 800d3ec:	d904      	bls.n	800d3f8 <HAL_CAN_ActivateNotification+0x24>
 800d3ee:	f240 615f 	movw	r1, #1631	; 0x65f
 800d3f2:	4810      	ldr	r0, [pc, #64]	; (800d434 <HAL_CAN_ActivateNotification+0x60>)
 800d3f4:	f7f7 f8c6 	bl	8004584 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 800d3f8:	7bfb      	ldrb	r3, [r7, #15]
 800d3fa:	2b01      	cmp	r3, #1
 800d3fc:	d002      	beq.n	800d404 <HAL_CAN_ActivateNotification+0x30>
 800d3fe:	7bfb      	ldrb	r3, [r7, #15]
 800d400:	2b02      	cmp	r3, #2
 800d402:	d109      	bne.n	800d418 <HAL_CAN_ActivateNotification+0x44>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	6959      	ldr	r1, [r3, #20]
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	683a      	ldr	r2, [r7, #0]
 800d410:	430a      	orrs	r2, r1
 800d412:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800d414:	2300      	movs	r3, #0
 800d416:	e006      	b.n	800d426 <HAL_CAN_ActivateNotification+0x52>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d41c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800d424:	2301      	movs	r3, #1
  }
}
 800d426:	4618      	mov	r0, r3
 800d428:	3710      	adds	r7, #16
 800d42a:	46bd      	mov	sp, r7
 800d42c:	bd80      	pop	{r7, pc}
 800d42e:	bf00      	nop
 800d430:	00038f7f 	.word	0x00038f7f
 800d434:	0801b834 	.word	0x0801b834

0800d438 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b08a      	sub	sp, #40	; 0x28
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800d440:	2300      	movs	r3, #0
 800d442:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	695b      	ldr	r3, [r3, #20]
 800d44a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	685b      	ldr	r3, [r3, #4]
 800d452:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	689b      	ldr	r3, [r3, #8]
 800d45a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	68db      	ldr	r3, [r3, #12]
 800d462:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	691b      	ldr	r3, [r3, #16]
 800d46a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	699b      	ldr	r3, [r3, #24]
 800d472:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800d474:	6a3b      	ldr	r3, [r7, #32]
 800d476:	f003 0301 	and.w	r3, r3, #1
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d07c      	beq.n	800d578 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800d47e:	69bb      	ldr	r3, [r7, #24]
 800d480:	f003 0301 	and.w	r3, r3, #1
 800d484:	2b00      	cmp	r3, #0
 800d486:	d023      	beq.n	800d4d0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	2201      	movs	r2, #1
 800d48e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800d490:	69bb      	ldr	r3, [r7, #24]
 800d492:	f003 0302 	and.w	r3, r3, #2
 800d496:	2b00      	cmp	r3, #0
 800d498:	d003      	beq.n	800d4a2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f000 f983 	bl	800d7a6 <HAL_CAN_TxMailbox0CompleteCallback>
 800d4a0:	e016      	b.n	800d4d0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800d4a2:	69bb      	ldr	r3, [r7, #24]
 800d4a4:	f003 0304 	and.w	r3, r3, #4
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d004      	beq.n	800d4b6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800d4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d4b2:	627b      	str	r3, [r7, #36]	; 0x24
 800d4b4:	e00c      	b.n	800d4d0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800d4b6:	69bb      	ldr	r3, [r7, #24]
 800d4b8:	f003 0308 	and.w	r3, r3, #8
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d004      	beq.n	800d4ca <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800d4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d4c6:	627b      	str	r3, [r7, #36]	; 0x24
 800d4c8:	e002      	b.n	800d4d0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f000 f989 	bl	800d7e2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800d4d0:	69bb      	ldr	r3, [r7, #24]
 800d4d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d024      	beq.n	800d524 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d4e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800d4e4:	69bb      	ldr	r3, [r7, #24]
 800d4e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d003      	beq.n	800d4f6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f000 f963 	bl	800d7ba <HAL_CAN_TxMailbox1CompleteCallback>
 800d4f4:	e016      	b.n	800d524 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800d4f6:	69bb      	ldr	r3, [r7, #24]
 800d4f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d004      	beq.n	800d50a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800d500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d502:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d506:	627b      	str	r3, [r7, #36]	; 0x24
 800d508:	e00c      	b.n	800d524 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800d50a:	69bb      	ldr	r3, [r7, #24]
 800d50c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d510:	2b00      	cmp	r3, #0
 800d512:	d004      	beq.n	800d51e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800d514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d516:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d51a:	627b      	str	r3, [r7, #36]	; 0x24
 800d51c:	e002      	b.n	800d524 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f000 f969 	bl	800d7f6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800d524:	69bb      	ldr	r3, [r7, #24]
 800d526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d024      	beq.n	800d578 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800d536:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800d538:	69bb      	ldr	r3, [r7, #24]
 800d53a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d003      	beq.n	800d54a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f000 f943 	bl	800d7ce <HAL_CAN_TxMailbox2CompleteCallback>
 800d548:	e016      	b.n	800d578 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800d54a:	69bb      	ldr	r3, [r7, #24]
 800d54c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d550:	2b00      	cmp	r3, #0
 800d552:	d004      	beq.n	800d55e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800d554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d55a:	627b      	str	r3, [r7, #36]	; 0x24
 800d55c:	e00c      	b.n	800d578 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800d55e:	69bb      	ldr	r3, [r7, #24]
 800d560:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d564:	2b00      	cmp	r3, #0
 800d566:	d004      	beq.n	800d572 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800d568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d56a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d56e:	627b      	str	r3, [r7, #36]	; 0x24
 800d570:	e002      	b.n	800d578 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f000 f949 	bl	800d80a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800d578:	6a3b      	ldr	r3, [r7, #32]
 800d57a:	f003 0308 	and.w	r3, r3, #8
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d00c      	beq.n	800d59c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	f003 0310 	and.w	r3, r3, #16
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d007      	beq.n	800d59c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800d58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d58e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d592:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	2210      	movs	r2, #16
 800d59a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800d59c:	6a3b      	ldr	r3, [r7, #32]
 800d59e:	f003 0304 	and.w	r3, r3, #4
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d00b      	beq.n	800d5be <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800d5a6:	697b      	ldr	r3, [r7, #20]
 800d5a8:	f003 0308 	and.w	r3, r3, #8
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d006      	beq.n	800d5be <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	2208      	movs	r2, #8
 800d5b6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f000 f930 	bl	800d81e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800d5be:	6a3b      	ldr	r3, [r7, #32]
 800d5c0:	f003 0302 	and.w	r3, r3, #2
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d009      	beq.n	800d5dc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	68db      	ldr	r3, [r3, #12]
 800d5ce:	f003 0303 	and.w	r3, r3, #3
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d002      	beq.n	800d5dc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f7fa fd52 	bl	8008080 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800d5dc:	6a3b      	ldr	r3, [r7, #32]
 800d5de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d00c      	beq.n	800d600 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	f003 0310 	and.w	r3, r3, #16
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d007      	beq.n	800d600 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800d5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d5f6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	2210      	movs	r2, #16
 800d5fe:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800d600:	6a3b      	ldr	r3, [r7, #32]
 800d602:	f003 0320 	and.w	r3, r3, #32
 800d606:	2b00      	cmp	r3, #0
 800d608:	d00b      	beq.n	800d622 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800d60a:	693b      	ldr	r3, [r7, #16]
 800d60c:	f003 0308 	and.w	r3, r3, #8
 800d610:	2b00      	cmp	r3, #0
 800d612:	d006      	beq.n	800d622 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	2208      	movs	r2, #8
 800d61a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f000 f912 	bl	800d846 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800d622:	6a3b      	ldr	r3, [r7, #32]
 800d624:	f003 0310 	and.w	r3, r3, #16
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d009      	beq.n	800d640 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	691b      	ldr	r3, [r3, #16]
 800d632:	f003 0303 	and.w	r3, r3, #3
 800d636:	2b00      	cmp	r3, #0
 800d638:	d002      	beq.n	800d640 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f000 f8f9 	bl	800d832 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800d640:	6a3b      	ldr	r3, [r7, #32]
 800d642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d646:	2b00      	cmp	r3, #0
 800d648:	d00b      	beq.n	800d662 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800d64a:	69fb      	ldr	r3, [r7, #28]
 800d64c:	f003 0310 	and.w	r3, r3, #16
 800d650:	2b00      	cmp	r3, #0
 800d652:	d006      	beq.n	800d662 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	2210      	movs	r2, #16
 800d65a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	f000 f8fc 	bl	800d85a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800d662:	6a3b      	ldr	r3, [r7, #32]
 800d664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d00b      	beq.n	800d684 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800d66c:	69fb      	ldr	r3, [r7, #28]
 800d66e:	f003 0308 	and.w	r3, r3, #8
 800d672:	2b00      	cmp	r3, #0
 800d674:	d006      	beq.n	800d684 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	2208      	movs	r2, #8
 800d67c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f000 f8f5 	bl	800d86e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800d684:	6a3b      	ldr	r3, [r7, #32]
 800d686:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d07b      	beq.n	800d786 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800d68e:	69fb      	ldr	r3, [r7, #28]
 800d690:	f003 0304 	and.w	r3, r3, #4
 800d694:	2b00      	cmp	r3, #0
 800d696:	d072      	beq.n	800d77e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800d698:	6a3b      	ldr	r3, [r7, #32]
 800d69a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d008      	beq.n	800d6b4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d003      	beq.n	800d6b4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800d6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ae:	f043 0301 	orr.w	r3, r3, #1
 800d6b2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800d6b4:	6a3b      	ldr	r3, [r7, #32]
 800d6b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d008      	beq.n	800d6d0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d003      	beq.n	800d6d0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800d6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ca:	f043 0302 	orr.w	r3, r3, #2
 800d6ce:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800d6d0:	6a3b      	ldr	r3, [r7, #32]
 800d6d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d008      	beq.n	800d6ec <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d003      	beq.n	800d6ec <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800d6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e6:	f043 0304 	orr.w	r3, r3, #4
 800d6ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800d6ec:	6a3b      	ldr	r3, [r7, #32]
 800d6ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d043      	beq.n	800d77e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d03e      	beq.n	800d77e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d706:	2b60      	cmp	r3, #96	; 0x60
 800d708:	d02b      	beq.n	800d762 <HAL_CAN_IRQHandler+0x32a>
 800d70a:	2b60      	cmp	r3, #96	; 0x60
 800d70c:	d82e      	bhi.n	800d76c <HAL_CAN_IRQHandler+0x334>
 800d70e:	2b50      	cmp	r3, #80	; 0x50
 800d710:	d022      	beq.n	800d758 <HAL_CAN_IRQHandler+0x320>
 800d712:	2b50      	cmp	r3, #80	; 0x50
 800d714:	d82a      	bhi.n	800d76c <HAL_CAN_IRQHandler+0x334>
 800d716:	2b40      	cmp	r3, #64	; 0x40
 800d718:	d019      	beq.n	800d74e <HAL_CAN_IRQHandler+0x316>
 800d71a:	2b40      	cmp	r3, #64	; 0x40
 800d71c:	d826      	bhi.n	800d76c <HAL_CAN_IRQHandler+0x334>
 800d71e:	2b30      	cmp	r3, #48	; 0x30
 800d720:	d010      	beq.n	800d744 <HAL_CAN_IRQHandler+0x30c>
 800d722:	2b30      	cmp	r3, #48	; 0x30
 800d724:	d822      	bhi.n	800d76c <HAL_CAN_IRQHandler+0x334>
 800d726:	2b10      	cmp	r3, #16
 800d728:	d002      	beq.n	800d730 <HAL_CAN_IRQHandler+0x2f8>
 800d72a:	2b20      	cmp	r3, #32
 800d72c:	d005      	beq.n	800d73a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800d72e:	e01d      	b.n	800d76c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800d730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d732:	f043 0308 	orr.w	r3, r3, #8
 800d736:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800d738:	e019      	b.n	800d76e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800d73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d73c:	f043 0310 	orr.w	r3, r3, #16
 800d740:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800d742:	e014      	b.n	800d76e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800d744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d746:	f043 0320 	orr.w	r3, r3, #32
 800d74a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800d74c:	e00f      	b.n	800d76e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800d74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d754:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800d756:	e00a      	b.n	800d76e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800d758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d75a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d75e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800d760:	e005      	b.n	800d76e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800d762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d768:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800d76a:	e000      	b.n	800d76e <HAL_CAN_IRQHandler+0x336>
            break;
 800d76c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	699a      	ldr	r2, [r3, #24]
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d77c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	2204      	movs	r2, #4
 800d784:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800d786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d008      	beq.n	800d79e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d792:	431a      	orrs	r2, r3
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800d798:	6878      	ldr	r0, [r7, #4]
 800d79a:	f7fa fe1f 	bl	80083dc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800d79e:	bf00      	nop
 800d7a0:	3728      	adds	r7, #40	; 0x28
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}

0800d7a6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800d7a6:	b480      	push	{r7}
 800d7a8:	b083      	sub	sp, #12
 800d7aa:	af00      	add	r7, sp, #0
 800d7ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800d7ae:	bf00      	nop
 800d7b0:	370c      	adds	r7, #12
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b8:	4770      	bx	lr

0800d7ba <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800d7ba:	b480      	push	{r7}
 800d7bc:	b083      	sub	sp, #12
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800d7c2:	bf00      	nop
 800d7c4:	370c      	adds	r7, #12
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7cc:	4770      	bx	lr

0800d7ce <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800d7ce:	b480      	push	{r7}
 800d7d0:	b083      	sub	sp, #12
 800d7d2:	af00      	add	r7, sp, #0
 800d7d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800d7d6:	bf00      	nop
 800d7d8:	370c      	adds	r7, #12
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e0:	4770      	bx	lr

0800d7e2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800d7e2:	b480      	push	{r7}
 800d7e4:	b083      	sub	sp, #12
 800d7e6:	af00      	add	r7, sp, #0
 800d7e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800d7ea:	bf00      	nop
 800d7ec:	370c      	adds	r7, #12
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f4:	4770      	bx	lr

0800d7f6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800d7f6:	b480      	push	{r7}
 800d7f8:	b083      	sub	sp, #12
 800d7fa:	af00      	add	r7, sp, #0
 800d7fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800d7fe:	bf00      	nop
 800d800:	370c      	adds	r7, #12
 800d802:	46bd      	mov	sp, r7
 800d804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d808:	4770      	bx	lr

0800d80a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800d80a:	b480      	push	{r7}
 800d80c:	b083      	sub	sp, #12
 800d80e:	af00      	add	r7, sp, #0
 800d810:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800d812:	bf00      	nop
 800d814:	370c      	adds	r7, #12
 800d816:	46bd      	mov	sp, r7
 800d818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81c:	4770      	bx	lr

0800d81e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800d81e:	b480      	push	{r7}
 800d820:	b083      	sub	sp, #12
 800d822:	af00      	add	r7, sp, #0
 800d824:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800d826:	bf00      	nop
 800d828:	370c      	adds	r7, #12
 800d82a:	46bd      	mov	sp, r7
 800d82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d830:	4770      	bx	lr

0800d832 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800d832:	b480      	push	{r7}
 800d834:	b083      	sub	sp, #12
 800d836:	af00      	add	r7, sp, #0
 800d838:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800d83a:	bf00      	nop
 800d83c:	370c      	adds	r7, #12
 800d83e:	46bd      	mov	sp, r7
 800d840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d844:	4770      	bx	lr

0800d846 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800d846:	b480      	push	{r7}
 800d848:	b083      	sub	sp, #12
 800d84a:	af00      	add	r7, sp, #0
 800d84c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800d84e:	bf00      	nop
 800d850:	370c      	adds	r7, #12
 800d852:	46bd      	mov	sp, r7
 800d854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d858:	4770      	bx	lr

0800d85a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800d85a:	b480      	push	{r7}
 800d85c:	b083      	sub	sp, #12
 800d85e:	af00      	add	r7, sp, #0
 800d860:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800d862:	bf00      	nop
 800d864:	370c      	adds	r7, #12
 800d866:	46bd      	mov	sp, r7
 800d868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86c:	4770      	bx	lr

0800d86e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800d86e:	b480      	push	{r7}
 800d870:	b083      	sub	sp, #12
 800d872:	af00      	add	r7, sp, #0
 800d874:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800d876:	bf00      	nop
 800d878:	370c      	adds	r7, #12
 800d87a:	46bd      	mov	sp, r7
 800d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d880:	4770      	bx	lr
	...

0800d884 <__NVIC_SetPriorityGrouping>:
{
 800d884:	b480      	push	{r7}
 800d886:	b085      	sub	sp, #20
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f003 0307 	and.w	r3, r3, #7
 800d892:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d894:	4b0c      	ldr	r3, [pc, #48]	; (800d8c8 <__NVIC_SetPriorityGrouping+0x44>)
 800d896:	68db      	ldr	r3, [r3, #12]
 800d898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d89a:	68ba      	ldr	r2, [r7, #8]
 800d89c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800d8a0:	4013      	ands	r3, r2
 800d8a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800d8ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800d8b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d8b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800d8b6:	4a04      	ldr	r2, [pc, #16]	; (800d8c8 <__NVIC_SetPriorityGrouping+0x44>)
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	60d3      	str	r3, [r2, #12]
}
 800d8bc:	bf00      	nop
 800d8be:	3714      	adds	r7, #20
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c6:	4770      	bx	lr
 800d8c8:	e000ed00 	.word	0xe000ed00

0800d8cc <__NVIC_GetPriorityGrouping>:
{
 800d8cc:	b480      	push	{r7}
 800d8ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d8d0:	4b04      	ldr	r3, [pc, #16]	; (800d8e4 <__NVIC_GetPriorityGrouping+0x18>)
 800d8d2:	68db      	ldr	r3, [r3, #12]
 800d8d4:	0a1b      	lsrs	r3, r3, #8
 800d8d6:	f003 0307 	and.w	r3, r3, #7
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e2:	4770      	bx	lr
 800d8e4:	e000ed00 	.word	0xe000ed00

0800d8e8 <__NVIC_EnableIRQ>:
{
 800d8e8:	b480      	push	{r7}
 800d8ea:	b083      	sub	sp, #12
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d8f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	db0b      	blt.n	800d912 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d8fa:	79fb      	ldrb	r3, [r7, #7]
 800d8fc:	f003 021f 	and.w	r2, r3, #31
 800d900:	4907      	ldr	r1, [pc, #28]	; (800d920 <__NVIC_EnableIRQ+0x38>)
 800d902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d906:	095b      	lsrs	r3, r3, #5
 800d908:	2001      	movs	r0, #1
 800d90a:	fa00 f202 	lsl.w	r2, r0, r2
 800d90e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800d912:	bf00      	nop
 800d914:	370c      	adds	r7, #12
 800d916:	46bd      	mov	sp, r7
 800d918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91c:	4770      	bx	lr
 800d91e:	bf00      	nop
 800d920:	e000e100 	.word	0xe000e100

0800d924 <__NVIC_DisableIRQ>:
{
 800d924:	b480      	push	{r7}
 800d926:	b083      	sub	sp, #12
 800d928:	af00      	add	r7, sp, #0
 800d92a:	4603      	mov	r3, r0
 800d92c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d92e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d932:	2b00      	cmp	r3, #0
 800d934:	db12      	blt.n	800d95c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d936:	79fb      	ldrb	r3, [r7, #7]
 800d938:	f003 021f 	and.w	r2, r3, #31
 800d93c:	490a      	ldr	r1, [pc, #40]	; (800d968 <__NVIC_DisableIRQ+0x44>)
 800d93e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d942:	095b      	lsrs	r3, r3, #5
 800d944:	2001      	movs	r0, #1
 800d946:	fa00 f202 	lsl.w	r2, r0, r2
 800d94a:	3320      	adds	r3, #32
 800d94c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800d950:	f3bf 8f4f 	dsb	sy
}
 800d954:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d956:	f3bf 8f6f 	isb	sy
}
 800d95a:	bf00      	nop
}
 800d95c:	bf00      	nop
 800d95e:	370c      	adds	r7, #12
 800d960:	46bd      	mov	sp, r7
 800d962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d966:	4770      	bx	lr
 800d968:	e000e100 	.word	0xe000e100

0800d96c <__NVIC_SetPriority>:
{
 800d96c:	b480      	push	{r7}
 800d96e:	b083      	sub	sp, #12
 800d970:	af00      	add	r7, sp, #0
 800d972:	4603      	mov	r3, r0
 800d974:	6039      	str	r1, [r7, #0]
 800d976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	db0a      	blt.n	800d996 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	b2da      	uxtb	r2, r3
 800d984:	490c      	ldr	r1, [pc, #48]	; (800d9b8 <__NVIC_SetPriority+0x4c>)
 800d986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d98a:	0112      	lsls	r2, r2, #4
 800d98c:	b2d2      	uxtb	r2, r2
 800d98e:	440b      	add	r3, r1
 800d990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d994:	e00a      	b.n	800d9ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	b2da      	uxtb	r2, r3
 800d99a:	4908      	ldr	r1, [pc, #32]	; (800d9bc <__NVIC_SetPriority+0x50>)
 800d99c:	79fb      	ldrb	r3, [r7, #7]
 800d99e:	f003 030f 	and.w	r3, r3, #15
 800d9a2:	3b04      	subs	r3, #4
 800d9a4:	0112      	lsls	r2, r2, #4
 800d9a6:	b2d2      	uxtb	r2, r2
 800d9a8:	440b      	add	r3, r1
 800d9aa:	761a      	strb	r2, [r3, #24]
}
 800d9ac:	bf00      	nop
 800d9ae:	370c      	adds	r7, #12
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b6:	4770      	bx	lr
 800d9b8:	e000e100 	.word	0xe000e100
 800d9bc:	e000ed00 	.word	0xe000ed00

0800d9c0 <NVIC_EncodePriority>:
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	b089      	sub	sp, #36	; 0x24
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	60f8      	str	r0, [r7, #12]
 800d9c8:	60b9      	str	r1, [r7, #8]
 800d9ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	f003 0307 	and.w	r3, r3, #7
 800d9d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d9d4:	69fb      	ldr	r3, [r7, #28]
 800d9d6:	f1c3 0307 	rsb	r3, r3, #7
 800d9da:	2b04      	cmp	r3, #4
 800d9dc:	bf28      	it	cs
 800d9de:	2304      	movcs	r3, #4
 800d9e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d9e2:	69fb      	ldr	r3, [r7, #28]
 800d9e4:	3304      	adds	r3, #4
 800d9e6:	2b06      	cmp	r3, #6
 800d9e8:	d902      	bls.n	800d9f0 <NVIC_EncodePriority+0x30>
 800d9ea:	69fb      	ldr	r3, [r7, #28]
 800d9ec:	3b03      	subs	r3, #3
 800d9ee:	e000      	b.n	800d9f2 <NVIC_EncodePriority+0x32>
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d9f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d9f8:	69bb      	ldr	r3, [r7, #24]
 800d9fa:	fa02 f303 	lsl.w	r3, r2, r3
 800d9fe:	43da      	mvns	r2, r3
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	401a      	ands	r2, r3
 800da04:	697b      	ldr	r3, [r7, #20]
 800da06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800da08:	f04f 31ff 	mov.w	r1, #4294967295
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	fa01 f303 	lsl.w	r3, r1, r3
 800da12:	43d9      	mvns	r1, r3
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800da18:	4313      	orrs	r3, r2
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	3724      	adds	r7, #36	; 0x24
 800da1e:	46bd      	mov	sp, r7
 800da20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da24:	4770      	bx	lr
	...

0800da28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b082      	sub	sp, #8
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	3b01      	subs	r3, #1
 800da34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800da38:	d301      	bcc.n	800da3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800da3a:	2301      	movs	r3, #1
 800da3c:	e00f      	b.n	800da5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800da3e:	4a0a      	ldr	r2, [pc, #40]	; (800da68 <SysTick_Config+0x40>)
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	3b01      	subs	r3, #1
 800da44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800da46:	210f      	movs	r1, #15
 800da48:	f04f 30ff 	mov.w	r0, #4294967295
 800da4c:	f7ff ff8e 	bl	800d96c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800da50:	4b05      	ldr	r3, [pc, #20]	; (800da68 <SysTick_Config+0x40>)
 800da52:	2200      	movs	r2, #0
 800da54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800da56:	4b04      	ldr	r3, [pc, #16]	; (800da68 <SysTick_Config+0x40>)
 800da58:	2207      	movs	r2, #7
 800da5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800da5c:	2300      	movs	r3, #0
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3708      	adds	r7, #8
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}
 800da66:	bf00      	nop
 800da68:	e000e010 	.word	0xe000e010

0800da6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b082      	sub	sp, #8
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2b07      	cmp	r3, #7
 800da78:	d00f      	beq.n	800da9a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2b06      	cmp	r3, #6
 800da7e:	d00c      	beq.n	800da9a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2b05      	cmp	r3, #5
 800da84:	d009      	beq.n	800da9a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2b04      	cmp	r3, #4
 800da8a:	d006      	beq.n	800da9a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2b03      	cmp	r3, #3
 800da90:	d003      	beq.n	800da9a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800da92:	21a6      	movs	r1, #166	; 0xa6
 800da94:	4804      	ldr	r0, [pc, #16]	; (800daa8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800da96:	f7f6 fd75 	bl	8004584 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f7ff fef2 	bl	800d884 <__NVIC_SetPriorityGrouping>
}
 800daa0:	bf00      	nop
 800daa2:	3708      	adds	r7, #8
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}
 800daa8:	0801b86c 	.word	0x0801b86c

0800daac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b086      	sub	sp, #24
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	4603      	mov	r3, r0
 800dab4:	60b9      	str	r1, [r7, #8]
 800dab6:	607a      	str	r2, [r7, #4]
 800dab8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800daba:	2300      	movs	r3, #0
 800dabc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2b0f      	cmp	r3, #15
 800dac2:	d903      	bls.n	800dacc <HAL_NVIC_SetPriority+0x20>
 800dac4:	21be      	movs	r1, #190	; 0xbe
 800dac6:	480e      	ldr	r0, [pc, #56]	; (800db00 <HAL_NVIC_SetPriority+0x54>)
 800dac8:	f7f6 fd5c 	bl	8004584 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	2b0f      	cmp	r3, #15
 800dad0:	d903      	bls.n	800dada <HAL_NVIC_SetPriority+0x2e>
 800dad2:	21bf      	movs	r1, #191	; 0xbf
 800dad4:	480a      	ldr	r0, [pc, #40]	; (800db00 <HAL_NVIC_SetPriority+0x54>)
 800dad6:	f7f6 fd55 	bl	8004584 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 800dada:	f7ff fef7 	bl	800d8cc <__NVIC_GetPriorityGrouping>
 800dade:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800dae0:	687a      	ldr	r2, [r7, #4]
 800dae2:	68b9      	ldr	r1, [r7, #8]
 800dae4:	6978      	ldr	r0, [r7, #20]
 800dae6:	f7ff ff6b 	bl	800d9c0 <NVIC_EncodePriority>
 800daea:	4602      	mov	r2, r0
 800daec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800daf0:	4611      	mov	r1, r2
 800daf2:	4618      	mov	r0, r3
 800daf4:	f7ff ff3a 	bl	800d96c <__NVIC_SetPriority>
}
 800daf8:	bf00      	nop
 800dafa:	3718      	adds	r7, #24
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}
 800db00:	0801b86c 	.word	0x0801b86c

0800db04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b082      	sub	sp, #8
 800db08:	af00      	add	r7, sp, #0
 800db0a:	4603      	mov	r3, r0
 800db0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800db0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db12:	2b00      	cmp	r3, #0
 800db14:	da03      	bge.n	800db1e <HAL_NVIC_EnableIRQ+0x1a>
 800db16:	21d2      	movs	r1, #210	; 0xd2
 800db18:	4805      	ldr	r0, [pc, #20]	; (800db30 <HAL_NVIC_EnableIRQ+0x2c>)
 800db1a:	f7f6 fd33 	bl	8004584 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800db1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db22:	4618      	mov	r0, r3
 800db24:	f7ff fee0 	bl	800d8e8 <__NVIC_EnableIRQ>
}
 800db28:	bf00      	nop
 800db2a:	3708      	adds	r7, #8
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}
 800db30:	0801b86c 	.word	0x0801b86c

0800db34 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b082      	sub	sp, #8
 800db38:	af00      	add	r7, sp, #0
 800db3a:	4603      	mov	r3, r0
 800db3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800db3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db42:	2b00      	cmp	r3, #0
 800db44:	da03      	bge.n	800db4e <HAL_NVIC_DisableIRQ+0x1a>
 800db46:	21e2      	movs	r1, #226	; 0xe2
 800db48:	4805      	ldr	r0, [pc, #20]	; (800db60 <HAL_NVIC_DisableIRQ+0x2c>)
 800db4a:	f7f6 fd1b 	bl	8004584 <assert_failed>
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800db4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db52:	4618      	mov	r0, r3
 800db54:	f7ff fee6 	bl	800d924 <__NVIC_DisableIRQ>
}
 800db58:	bf00      	nop
 800db5a:	3708      	adds	r7, #8
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}
 800db60:	0801b86c 	.word	0x0801b86c

0800db64 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b082      	sub	sp, #8
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f7ff ff5b 	bl	800da28 <SysTick_Config>
 800db72:	4603      	mov	r3, r0
}
 800db74:	4618      	mov	r0, r3
 800db76:	3708      	adds	r7, #8
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}

0800db7c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b084      	sub	sp, #16
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d101      	bne.n	800db8e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800db8a:	2301      	movs	r3, #1
 800db8c:	e19d      	b.n	800deca <HAL_DMA_Init+0x34e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	4a79      	ldr	r2, [pc, #484]	; (800dd78 <HAL_DMA_Init+0x1fc>)
 800db94:	4293      	cmp	r3, r2
 800db96:	d044      	beq.n	800dc22 <HAL_DMA_Init+0xa6>
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	4a77      	ldr	r2, [pc, #476]	; (800dd7c <HAL_DMA_Init+0x200>)
 800db9e:	4293      	cmp	r3, r2
 800dba0:	d03f      	beq.n	800dc22 <HAL_DMA_Init+0xa6>
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	4a76      	ldr	r2, [pc, #472]	; (800dd80 <HAL_DMA_Init+0x204>)
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	d03a      	beq.n	800dc22 <HAL_DMA_Init+0xa6>
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	4a74      	ldr	r2, [pc, #464]	; (800dd84 <HAL_DMA_Init+0x208>)
 800dbb2:	4293      	cmp	r3, r2
 800dbb4:	d035      	beq.n	800dc22 <HAL_DMA_Init+0xa6>
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	4a73      	ldr	r2, [pc, #460]	; (800dd88 <HAL_DMA_Init+0x20c>)
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	d030      	beq.n	800dc22 <HAL_DMA_Init+0xa6>
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	4a71      	ldr	r2, [pc, #452]	; (800dd8c <HAL_DMA_Init+0x210>)
 800dbc6:	4293      	cmp	r3, r2
 800dbc8:	d02b      	beq.n	800dc22 <HAL_DMA_Init+0xa6>
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	4a70      	ldr	r2, [pc, #448]	; (800dd90 <HAL_DMA_Init+0x214>)
 800dbd0:	4293      	cmp	r3, r2
 800dbd2:	d026      	beq.n	800dc22 <HAL_DMA_Init+0xa6>
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	4a6e      	ldr	r2, [pc, #440]	; (800dd94 <HAL_DMA_Init+0x218>)
 800dbda:	4293      	cmp	r3, r2
 800dbdc:	d021      	beq.n	800dc22 <HAL_DMA_Init+0xa6>
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	4a6d      	ldr	r2, [pc, #436]	; (800dd98 <HAL_DMA_Init+0x21c>)
 800dbe4:	4293      	cmp	r3, r2
 800dbe6:	d01c      	beq.n	800dc22 <HAL_DMA_Init+0xa6>
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	4a6b      	ldr	r2, [pc, #428]	; (800dd9c <HAL_DMA_Init+0x220>)
 800dbee:	4293      	cmp	r3, r2
 800dbf0:	d017      	beq.n	800dc22 <HAL_DMA_Init+0xa6>
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	4a6a      	ldr	r2, [pc, #424]	; (800dda0 <HAL_DMA_Init+0x224>)
 800dbf8:	4293      	cmp	r3, r2
 800dbfa:	d012      	beq.n	800dc22 <HAL_DMA_Init+0xa6>
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	4a68      	ldr	r2, [pc, #416]	; (800dda4 <HAL_DMA_Init+0x228>)
 800dc02:	4293      	cmp	r3, r2
 800dc04:	d00d      	beq.n	800dc22 <HAL_DMA_Init+0xa6>
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	4a67      	ldr	r2, [pc, #412]	; (800dda8 <HAL_DMA_Init+0x22c>)
 800dc0c:	4293      	cmp	r3, r2
 800dc0e:	d008      	beq.n	800dc22 <HAL_DMA_Init+0xa6>
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	4a65      	ldr	r2, [pc, #404]	; (800ddac <HAL_DMA_Init+0x230>)
 800dc16:	4293      	cmp	r3, r2
 800dc18:	d003      	beq.n	800dc22 <HAL_DMA_Init+0xa6>
 800dc1a:	21a5      	movs	r1, #165	; 0xa5
 800dc1c:	4864      	ldr	r0, [pc, #400]	; (800ddb0 <HAL_DMA_Init+0x234>)
 800dc1e:	f7f6 fcb1 	bl	8004584 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	689b      	ldr	r3, [r3, #8]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d00c      	beq.n	800dc44 <HAL_DMA_Init+0xc8>
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	689b      	ldr	r3, [r3, #8]
 800dc2e:	2b10      	cmp	r3, #16
 800dc30:	d008      	beq.n	800dc44 <HAL_DMA_Init+0xc8>
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	689b      	ldr	r3, [r3, #8]
 800dc36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dc3a:	d003      	beq.n	800dc44 <HAL_DMA_Init+0xc8>
 800dc3c:	21a6      	movs	r1, #166	; 0xa6
 800dc3e:	485c      	ldr	r0, [pc, #368]	; (800ddb0 <HAL_DMA_Init+0x234>)
 800dc40:	f7f6 fca0 	bl	8004584 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	68db      	ldr	r3, [r3, #12]
 800dc48:	2b40      	cmp	r3, #64	; 0x40
 800dc4a:	d007      	beq.n	800dc5c <HAL_DMA_Init+0xe0>
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	68db      	ldr	r3, [r3, #12]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d003      	beq.n	800dc5c <HAL_DMA_Init+0xe0>
 800dc54:	21a7      	movs	r1, #167	; 0xa7
 800dc56:	4856      	ldr	r0, [pc, #344]	; (800ddb0 <HAL_DMA_Init+0x234>)
 800dc58:	f7f6 fc94 	bl	8004584 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	691b      	ldr	r3, [r3, #16]
 800dc60:	2b80      	cmp	r3, #128	; 0x80
 800dc62:	d007      	beq.n	800dc74 <HAL_DMA_Init+0xf8>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	691b      	ldr	r3, [r3, #16]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d003      	beq.n	800dc74 <HAL_DMA_Init+0xf8>
 800dc6c:	21a8      	movs	r1, #168	; 0xa8
 800dc6e:	4850      	ldr	r0, [pc, #320]	; (800ddb0 <HAL_DMA_Init+0x234>)
 800dc70:	f7f6 fc88 	bl	8004584 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	695b      	ldr	r3, [r3, #20]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d00d      	beq.n	800dc98 <HAL_DMA_Init+0x11c>
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	695b      	ldr	r3, [r3, #20]
 800dc80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc84:	d008      	beq.n	800dc98 <HAL_DMA_Init+0x11c>
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	695b      	ldr	r3, [r3, #20]
 800dc8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc8e:	d003      	beq.n	800dc98 <HAL_DMA_Init+0x11c>
 800dc90:	21a9      	movs	r1, #169	; 0xa9
 800dc92:	4847      	ldr	r0, [pc, #284]	; (800ddb0 <HAL_DMA_Init+0x234>)
 800dc94:	f7f6 fc76 	bl	8004584 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	699b      	ldr	r3, [r3, #24]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d00d      	beq.n	800dcbc <HAL_DMA_Init+0x140>
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	699b      	ldr	r3, [r3, #24]
 800dca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dca8:	d008      	beq.n	800dcbc <HAL_DMA_Init+0x140>
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	699b      	ldr	r3, [r3, #24]
 800dcae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dcb2:	d003      	beq.n	800dcbc <HAL_DMA_Init+0x140>
 800dcb4:	21aa      	movs	r1, #170	; 0xaa
 800dcb6:	483e      	ldr	r0, [pc, #248]	; (800ddb0 <HAL_DMA_Init+0x234>)
 800dcb8:	f7f6 fc64 	bl	8004584 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	69db      	ldr	r3, [r3, #28]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d007      	beq.n	800dcd4 <HAL_DMA_Init+0x158>
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	69db      	ldr	r3, [r3, #28]
 800dcc8:	2b20      	cmp	r3, #32
 800dcca:	d003      	beq.n	800dcd4 <HAL_DMA_Init+0x158>
 800dccc:	21ab      	movs	r1, #171	; 0xab
 800dcce:	4838      	ldr	r0, [pc, #224]	; (800ddb0 <HAL_DMA_Init+0x234>)
 800dcd0:	f7f6 fc58 	bl	8004584 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	6a1b      	ldr	r3, [r3, #32]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d012      	beq.n	800dd02 <HAL_DMA_Init+0x186>
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6a1b      	ldr	r3, [r3, #32]
 800dce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dce4:	d00d      	beq.n	800dd02 <HAL_DMA_Init+0x186>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6a1b      	ldr	r3, [r3, #32]
 800dcea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dcee:	d008      	beq.n	800dd02 <HAL_DMA_Init+0x186>
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	6a1b      	ldr	r3, [r3, #32]
 800dcf4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800dcf8:	d003      	beq.n	800dd02 <HAL_DMA_Init+0x186>
 800dcfa:	21ac      	movs	r1, #172	; 0xac
 800dcfc:	482c      	ldr	r0, [pc, #176]	; (800ddb0 <HAL_DMA_Init+0x234>)
 800dcfe:	f7f6 fc41 	bl	8004584 <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	685b      	ldr	r3, [r3, #4]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d01f      	beq.n	800dd4a <HAL_DMA_Init+0x1ce>
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	685b      	ldr	r3, [r3, #4]
 800dd0e:	2b01      	cmp	r3, #1
 800dd10:	d01b      	beq.n	800dd4a <HAL_DMA_Init+0x1ce>
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	685b      	ldr	r3, [r3, #4]
 800dd16:	2b02      	cmp	r3, #2
 800dd18:	d017      	beq.n	800dd4a <HAL_DMA_Init+0x1ce>
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	685b      	ldr	r3, [r3, #4]
 800dd1e:	2b03      	cmp	r3, #3
 800dd20:	d013      	beq.n	800dd4a <HAL_DMA_Init+0x1ce>
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	685b      	ldr	r3, [r3, #4]
 800dd26:	2b04      	cmp	r3, #4
 800dd28:	d00f      	beq.n	800dd4a <HAL_DMA_Init+0x1ce>
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	685b      	ldr	r3, [r3, #4]
 800dd2e:	2b05      	cmp	r3, #5
 800dd30:	d00b      	beq.n	800dd4a <HAL_DMA_Init+0x1ce>
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	685b      	ldr	r3, [r3, #4]
 800dd36:	2b06      	cmp	r3, #6
 800dd38:	d007      	beq.n	800dd4a <HAL_DMA_Init+0x1ce>
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	685b      	ldr	r3, [r3, #4]
 800dd3e:	2b07      	cmp	r3, #7
 800dd40:	d003      	beq.n	800dd4a <HAL_DMA_Init+0x1ce>
 800dd42:	21ae      	movs	r1, #174	; 0xae
 800dd44:	481a      	ldr	r0, [pc, #104]	; (800ddb0 <HAL_DMA_Init+0x234>)
 800dd46:	f7f6 fc1d 	bl	8004584 <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	461a      	mov	r2, r3
 800dd50:	4b18      	ldr	r3, [pc, #96]	; (800ddb4 <HAL_DMA_Init+0x238>)
 800dd52:	429a      	cmp	r2, r3
 800dd54:	d836      	bhi.n	800ddc4 <HAL_DMA_Init+0x248>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	461a      	mov	r2, r3
 800dd5c:	4b16      	ldr	r3, [pc, #88]	; (800ddb8 <HAL_DMA_Init+0x23c>)
 800dd5e:	4413      	add	r3, r2
 800dd60:	4a16      	ldr	r2, [pc, #88]	; (800ddbc <HAL_DMA_Init+0x240>)
 800dd62:	fba2 2303 	umull	r2, r3, r2, r3
 800dd66:	091b      	lsrs	r3, r3, #4
 800dd68:	009a      	lsls	r2, r3, #2
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	4a13      	ldr	r2, [pc, #76]	; (800ddc0 <HAL_DMA_Init+0x244>)
 800dd72:	641a      	str	r2, [r3, #64]	; 0x40
 800dd74:	e035      	b.n	800dde2 <HAL_DMA_Init+0x266>
 800dd76:	bf00      	nop
 800dd78:	40020008 	.word	0x40020008
 800dd7c:	4002001c 	.word	0x4002001c
 800dd80:	40020030 	.word	0x40020030
 800dd84:	40020044 	.word	0x40020044
 800dd88:	40020058 	.word	0x40020058
 800dd8c:	4002006c 	.word	0x4002006c
 800dd90:	40020080 	.word	0x40020080
 800dd94:	40020408 	.word	0x40020408
 800dd98:	4002041c 	.word	0x4002041c
 800dd9c:	40020430 	.word	0x40020430
 800dda0:	40020444 	.word	0x40020444
 800dda4:	40020458 	.word	0x40020458
 800dda8:	4002046c 	.word	0x4002046c
 800ddac:	40020480 	.word	0x40020480
 800ddb0:	0801b8a8 	.word	0x0801b8a8
 800ddb4:	40020407 	.word	0x40020407
 800ddb8:	bffdfff8 	.word	0xbffdfff8
 800ddbc:	cccccccd 	.word	0xcccccccd
 800ddc0:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	461a      	mov	r2, r3
 800ddca:	4b42      	ldr	r3, [pc, #264]	; (800ded4 <HAL_DMA_Init+0x358>)
 800ddcc:	4413      	add	r3, r2
 800ddce:	4a42      	ldr	r2, [pc, #264]	; (800ded8 <HAL_DMA_Init+0x35c>)
 800ddd0:	fba2 2303 	umull	r2, r3, r2, r3
 800ddd4:	091b      	lsrs	r3, r3, #4
 800ddd6:	009a      	lsls	r2, r3, #2
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	4a3f      	ldr	r2, [pc, #252]	; (800dedc <HAL_DMA_Init+0x360>)
 800dde0:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2202      	movs	r2, #2
 800dde6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800ddf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ddfc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800de06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	691b      	ldr	r3, [r3, #16]
 800de0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800de12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	699b      	ldr	r3, [r3, #24]
 800de18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800de1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6a1b      	ldr	r3, [r3, #32]
 800de24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800de26:	68fa      	ldr	r2, [r7, #12]
 800de28:	4313      	orrs	r3, r2
 800de2a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	68fa      	ldr	r2, [r7, #12]
 800de32:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	689b      	ldr	r3, [r3, #8]
 800de38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800de3c:	d039      	beq.n	800deb2 <HAL_DMA_Init+0x336>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de42:	4a27      	ldr	r2, [pc, #156]	; (800dee0 <HAL_DMA_Init+0x364>)
 800de44:	4293      	cmp	r3, r2
 800de46:	d11a      	bne.n	800de7e <HAL_DMA_Init+0x302>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800de48:	4b26      	ldr	r3, [pc, #152]	; (800dee4 <HAL_DMA_Init+0x368>)
 800de4a:	681a      	ldr	r2, [r3, #0]
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de50:	f003 031c 	and.w	r3, r3, #28
 800de54:	210f      	movs	r1, #15
 800de56:	fa01 f303 	lsl.w	r3, r1, r3
 800de5a:	43db      	mvns	r3, r3
 800de5c:	4921      	ldr	r1, [pc, #132]	; (800dee4 <HAL_DMA_Init+0x368>)
 800de5e:	4013      	ands	r3, r2
 800de60:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800de62:	4b20      	ldr	r3, [pc, #128]	; (800dee4 <HAL_DMA_Init+0x368>)
 800de64:	681a      	ldr	r2, [r3, #0]
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	6859      	ldr	r1, [r3, #4]
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de6e:	f003 031c 	and.w	r3, r3, #28
 800de72:	fa01 f303 	lsl.w	r3, r1, r3
 800de76:	491b      	ldr	r1, [pc, #108]	; (800dee4 <HAL_DMA_Init+0x368>)
 800de78:	4313      	orrs	r3, r2
 800de7a:	600b      	str	r3, [r1, #0]
 800de7c:	e019      	b.n	800deb2 <HAL_DMA_Init+0x336>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800de7e:	4b1a      	ldr	r3, [pc, #104]	; (800dee8 <HAL_DMA_Init+0x36c>)
 800de80:	681a      	ldr	r2, [r3, #0]
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de86:	f003 031c 	and.w	r3, r3, #28
 800de8a:	210f      	movs	r1, #15
 800de8c:	fa01 f303 	lsl.w	r3, r1, r3
 800de90:	43db      	mvns	r3, r3
 800de92:	4915      	ldr	r1, [pc, #84]	; (800dee8 <HAL_DMA_Init+0x36c>)
 800de94:	4013      	ands	r3, r2
 800de96:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800de98:	4b13      	ldr	r3, [pc, #76]	; (800dee8 <HAL_DMA_Init+0x36c>)
 800de9a:	681a      	ldr	r2, [r3, #0]
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	6859      	ldr	r1, [r3, #4]
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dea4:	f003 031c 	and.w	r3, r3, #28
 800dea8:	fa01 f303 	lsl.w	r3, r1, r3
 800deac:	490e      	ldr	r1, [pc, #56]	; (800dee8 <HAL_DMA_Init+0x36c>)
 800deae:	4313      	orrs	r3, r2
 800deb0:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2200      	movs	r2, #0
 800deb6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2201      	movs	r2, #1
 800debc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2200      	movs	r2, #0
 800dec4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800dec8:	2300      	movs	r3, #0
}
 800deca:	4618      	mov	r0, r3
 800decc:	3710      	adds	r7, #16
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}
 800ded2:	bf00      	nop
 800ded4:	bffdfbf8 	.word	0xbffdfbf8
 800ded8:	cccccccd 	.word	0xcccccccd
 800dedc:	40020400 	.word	0x40020400
 800dee0:	40020000 	.word	0x40020000
 800dee4:	400200a8 	.word	0x400200a8
 800dee8:	400204a8 	.word	0x400204a8

0800deec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b086      	sub	sp, #24
 800def0:	af00      	add	r7, sp, #0
 800def2:	60f8      	str	r0, [r7, #12]
 800def4:	60b9      	str	r1, [r7, #8]
 800def6:	607a      	str	r2, [r7, #4]
 800def8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800defa:	2300      	movs	r3, #0
 800defc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d003      	beq.n	800df0c <HAL_DMA_Start_IT+0x20>
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df0a:	d304      	bcc.n	800df16 <HAL_DMA_Start_IT+0x2a>
 800df0c:	f240 11df 	movw	r1, #479	; 0x1df
 800df10:	482c      	ldr	r0, [pc, #176]	; (800dfc4 <HAL_DMA_Start_IT+0xd8>)
 800df12:	f7f6 fb37 	bl	8004584 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	d101      	bne.n	800df24 <HAL_DMA_Start_IT+0x38>
 800df20:	2302      	movs	r3, #2
 800df22:	e04b      	b.n	800dfbc <HAL_DMA_Start_IT+0xd0>
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	2201      	movs	r2, #1
 800df28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800df32:	b2db      	uxtb	r3, r3
 800df34:	2b01      	cmp	r3, #1
 800df36:	d13a      	bne.n	800dfae <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	2202      	movs	r2, #2
 800df3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	2200      	movs	r2, #0
 800df44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	681a      	ldr	r2, [r3, #0]
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	f022 0201 	bic.w	r2, r2, #1
 800df54:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	687a      	ldr	r2, [r7, #4]
 800df5a:	68b9      	ldr	r1, [r7, #8]
 800df5c:	68f8      	ldr	r0, [r7, #12]
 800df5e:	f000 f96f 	bl	800e240 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df66:	2b00      	cmp	r3, #0
 800df68:	d008      	beq.n	800df7c <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	681a      	ldr	r2, [r3, #0]
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	f042 020e 	orr.w	r2, r2, #14
 800df78:	601a      	str	r2, [r3, #0]
 800df7a:	e00f      	b.n	800df9c <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	681a      	ldr	r2, [r3, #0]
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	f022 0204 	bic.w	r2, r2, #4
 800df8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	681a      	ldr	r2, [r3, #0]
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	f042 020a 	orr.w	r2, r2, #10
 800df9a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	681a      	ldr	r2, [r3, #0]
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	f042 0201 	orr.w	r2, r2, #1
 800dfaa:	601a      	str	r2, [r3, #0]
 800dfac:	e005      	b.n	800dfba <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800dfb6:	2302      	movs	r3, #2
 800dfb8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800dfba:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3718      	adds	r7, #24
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}
 800dfc4:	0801b8a8 	.word	0x0801b8a8

0800dfc8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800dfc8:	b480      	push	{r7}
 800dfca:	b085      	sub	sp, #20
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800dfda:	b2db      	uxtb	r3, r3
 800dfdc:	2b02      	cmp	r3, #2
 800dfde:	d008      	beq.n	800dff2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	2204      	movs	r2, #4
 800dfe4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2200      	movs	r2, #0
 800dfea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800dfee:	2301      	movs	r3, #1
 800dff0:	e022      	b.n	800e038 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	681a      	ldr	r2, [r3, #0]
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	f022 020e 	bic.w	r2, r2, #14
 800e000:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	681a      	ldr	r2, [r3, #0]
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	f022 0201 	bic.w	r2, r2, #1
 800e010:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e016:	f003 021c 	and.w	r2, r3, #28
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e01e:	2101      	movs	r1, #1
 800e020:	fa01 f202 	lsl.w	r2, r1, r2
 800e024:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2201      	movs	r2, #1
 800e02a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	2200      	movs	r2, #0
 800e032:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800e036:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800e038:	4618      	mov	r0, r3
 800e03a:	3714      	adds	r7, #20
 800e03c:	46bd      	mov	sp, r7
 800e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e042:	4770      	bx	lr

0800e044 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b084      	sub	sp, #16
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e04c:	2300      	movs	r3, #0
 800e04e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800e056:	b2db      	uxtb	r3, r3
 800e058:	2b02      	cmp	r3, #2
 800e05a:	d005      	beq.n	800e068 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2204      	movs	r2, #4
 800e060:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800e062:	2301      	movs	r3, #1
 800e064:	73fb      	strb	r3, [r7, #15]
 800e066:	e029      	b.n	800e0bc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	681a      	ldr	r2, [r3, #0]
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	f022 020e 	bic.w	r2, r2, #14
 800e076:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	681a      	ldr	r2, [r3, #0]
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	f022 0201 	bic.w	r2, r2, #1
 800e086:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e08c:	f003 021c 	and.w	r2, r3, #28
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e094:	2101      	movs	r1, #1
 800e096:	fa01 f202 	lsl.w	r2, r1, r2
 800e09a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2201      	movs	r2, #1
 800e0a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d003      	beq.n	800e0bc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0b8:	6878      	ldr	r0, [r7, #4]
 800e0ba:	4798      	blx	r3
    }
  }
  return status;
 800e0bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0be:	4618      	mov	r0, r3
 800e0c0:	3710      	adds	r7, #16
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}

0800e0c6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800e0c6:	b580      	push	{r7, lr}
 800e0c8:	b084      	sub	sp, #16
 800e0ca:	af00      	add	r7, sp, #0
 800e0cc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0e2:	f003 031c 	and.w	r3, r3, #28
 800e0e6:	2204      	movs	r2, #4
 800e0e8:	409a      	lsls	r2, r3
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	4013      	ands	r3, r2
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d026      	beq.n	800e140 <HAL_DMA_IRQHandler+0x7a>
 800e0f2:	68bb      	ldr	r3, [r7, #8]
 800e0f4:	f003 0304 	and.w	r3, r3, #4
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d021      	beq.n	800e140 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	f003 0320 	and.w	r3, r3, #32
 800e106:	2b00      	cmp	r3, #0
 800e108:	d107      	bne.n	800e11a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	681a      	ldr	r2, [r3, #0]
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	f022 0204 	bic.w	r2, r2, #4
 800e118:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e11e:	f003 021c 	and.w	r2, r3, #28
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e126:	2104      	movs	r1, #4
 800e128:	fa01 f202 	lsl.w	r2, r1, r2
 800e12c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e132:	2b00      	cmp	r3, #0
 800e134:	d071      	beq.n	800e21a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800e13e:	e06c      	b.n	800e21a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e144:	f003 031c 	and.w	r3, r3, #28
 800e148:	2202      	movs	r2, #2
 800e14a:	409a      	lsls	r2, r3
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	4013      	ands	r3, r2
 800e150:	2b00      	cmp	r3, #0
 800e152:	d02e      	beq.n	800e1b2 <HAL_DMA_IRQHandler+0xec>
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	f003 0302 	and.w	r3, r3, #2
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d029      	beq.n	800e1b2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	f003 0320 	and.w	r3, r3, #32
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d10b      	bne.n	800e184 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	681a      	ldr	r2, [r3, #0]
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	f022 020a 	bic.w	r2, r2, #10
 800e17a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2201      	movs	r2, #1
 800e180:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e188:	f003 021c 	and.w	r2, r3, #28
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e190:	2102      	movs	r1, #2
 800e192:	fa01 f202 	lsl.w	r2, r1, r2
 800e196:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2200      	movs	r2, #0
 800e19c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d038      	beq.n	800e21a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800e1b0:	e033      	b.n	800e21a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1b6:	f003 031c 	and.w	r3, r3, #28
 800e1ba:	2208      	movs	r2, #8
 800e1bc:	409a      	lsls	r2, r3
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	4013      	ands	r3, r2
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d02a      	beq.n	800e21c <HAL_DMA_IRQHandler+0x156>
 800e1c6:	68bb      	ldr	r3, [r7, #8]
 800e1c8:	f003 0308 	and.w	r3, r3, #8
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d025      	beq.n	800e21c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	681a      	ldr	r2, [r3, #0]
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	f022 020e 	bic.w	r2, r2, #14
 800e1de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1e4:	f003 021c 	and.w	r2, r3, #28
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1ec:	2101      	movs	r1, #1
 800e1ee:	fa01 f202 	lsl.w	r2, r1, r2
 800e1f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2201      	movs	r2, #1
 800e1f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2201      	movs	r2, #1
 800e1fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	2200      	movs	r2, #0
 800e206:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d004      	beq.n	800e21c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800e21a:	bf00      	nop
 800e21c:	bf00      	nop
}
 800e21e:	3710      	adds	r7, #16
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}

0800e224 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800e224:	b480      	push	{r7}
 800e226:	b083      	sub	sp, #12
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800e232:	b2db      	uxtb	r3, r3
}
 800e234:	4618      	mov	r0, r3
 800e236:	370c      	adds	r7, #12
 800e238:	46bd      	mov	sp, r7
 800e23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23e:	4770      	bx	lr

0800e240 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e240:	b480      	push	{r7}
 800e242:	b085      	sub	sp, #20
 800e244:	af00      	add	r7, sp, #0
 800e246:	60f8      	str	r0, [r7, #12]
 800e248:	60b9      	str	r1, [r7, #8]
 800e24a:	607a      	str	r2, [r7, #4]
 800e24c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e252:	f003 021c 	and.w	r2, r3, #28
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e25a:	2101      	movs	r1, #1
 800e25c:	fa01 f202 	lsl.w	r2, r1, r2
 800e260:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	683a      	ldr	r2, [r7, #0]
 800e268:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	689b      	ldr	r3, [r3, #8]
 800e26e:	2b10      	cmp	r3, #16
 800e270:	d108      	bne.n	800e284 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	687a      	ldr	r2, [r7, #4]
 800e278:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	68ba      	ldr	r2, [r7, #8]
 800e280:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800e282:	e007      	b.n	800e294 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	68ba      	ldr	r2, [r7, #8]
 800e28a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	687a      	ldr	r2, [r7, #4]
 800e292:	60da      	str	r2, [r3, #12]
}
 800e294:	bf00      	nop
 800e296:	3714      	adds	r7, #20
 800e298:	46bd      	mov	sp, r7
 800e29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29e:	4770      	bx	lr

0800e2a0 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b086      	sub	sp, #24
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	60f8      	str	r0, [r7, #12]
 800e2a8:	60b9      	str	r1, [r7, #8]
 800e2aa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800e2b2:	4b35      	ldr	r3, [pc, #212]	; (800e388 <HAL_FLASH_Program+0xe8>)
 800e2b4:	781b      	ldrb	r3, [r3, #0]
 800e2b6:	2b01      	cmp	r3, #1
 800e2b8:	d101      	bne.n	800e2be <HAL_FLASH_Program+0x1e>
 800e2ba:	2302      	movs	r3, #2
 800e2bc:	e060      	b.n	800e380 <HAL_FLASH_Program+0xe0>
 800e2be:	4b32      	ldr	r3, [pc, #200]	; (800e388 <HAL_FLASH_Program+0xe8>)
 800e2c0:	2201      	movs	r2, #1
 800e2c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d009      	beq.n	800e2de <HAL_FLASH_Program+0x3e>
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	2b01      	cmp	r3, #1
 800e2ce:	d006      	beq.n	800e2de <HAL_FLASH_Program+0x3e>
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	2b02      	cmp	r3, #2
 800e2d4:	d003      	beq.n	800e2de <HAL_FLASH_Program+0x3e>
 800e2d6:	21b2      	movs	r1, #178	; 0xb2
 800e2d8:	482c      	ldr	r0, [pc, #176]	; (800e38c <HAL_FLASH_Program+0xec>)
 800e2da:	f7f6 f953 	bl	8004584 <assert_failed>

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e2de:	f24c 3050 	movw	r0, #50000	; 0xc350
 800e2e2:	f000 f889 	bl	800e3f8 <FLASH_WaitForLastOperation>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800e2ea:	7dfb      	ldrb	r3, [r7, #23]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d143      	bne.n	800e378 <HAL_FLASH_Program+0xd8>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800e2f0:	4b25      	ldr	r3, [pc, #148]	; (800e388 <HAL_FLASH_Program+0xe8>)
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800e2f6:	4b26      	ldr	r3, [pc, #152]	; (800e390 <HAL_FLASH_Program+0xf0>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d009      	beq.n	800e316 <HAL_FLASH_Program+0x76>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800e302:	4b23      	ldr	r3, [pc, #140]	; (800e390 <HAL_FLASH_Program+0xf0>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	4a22      	ldr	r2, [pc, #136]	; (800e390 <HAL_FLASH_Program+0xf0>)
 800e308:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e30c:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800e30e:	4b1e      	ldr	r3, [pc, #120]	; (800e388 <HAL_FLASH_Program+0xe8>)
 800e310:	2202      	movs	r2, #2
 800e312:	771a      	strb	r2, [r3, #28]
 800e314:	e002      	b.n	800e31c <HAL_FLASH_Program+0x7c>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800e316:	4b1c      	ldr	r3, [pc, #112]	; (800e388 <HAL_FLASH_Program+0xe8>)
 800e318:	2200      	movs	r2, #0
 800e31a:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d107      	bne.n	800e332 <HAL_FLASH_Program+0x92>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800e322:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e326:	68b8      	ldr	r0, [r7, #8]
 800e328:	f000 f8be 	bl	800e4a8 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800e32c:	2301      	movs	r3, #1
 800e32e:	613b      	str	r3, [r7, #16]
 800e330:	e010      	b.n	800e354 <HAL_FLASH_Program+0xb4>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	2b01      	cmp	r3, #1
 800e336:	d002      	beq.n	800e33e <HAL_FLASH_Program+0x9e>
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	2b02      	cmp	r3, #2
 800e33c:	d10a      	bne.n	800e354 <HAL_FLASH_Program+0xb4>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	4619      	mov	r1, r3
 800e342:	68b8      	ldr	r0, [r7, #8]
 800e344:	f000 f926 	bl	800e594 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	2b02      	cmp	r3, #2
 800e34c:	d102      	bne.n	800e354 <HAL_FLASH_Program+0xb4>
      {
        prog_bit = FLASH_CR_FSTPG;
 800e34e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e352:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e354:	f24c 3050 	movw	r0, #50000	; 0xc350
 800e358:	f000 f84e 	bl	800e3f8 <FLASH_WaitForLastOperation>
 800e35c:	4603      	mov	r3, r0
 800e35e:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800e360:	693b      	ldr	r3, [r7, #16]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d006      	beq.n	800e374 <HAL_FLASH_Program+0xd4>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800e366:	4b0a      	ldr	r3, [pc, #40]	; (800e390 <HAL_FLASH_Program+0xf0>)
 800e368:	695a      	ldr	r2, [r3, #20]
 800e36a:	693b      	ldr	r3, [r7, #16]
 800e36c:	43db      	mvns	r3, r3
 800e36e:	4908      	ldr	r1, [pc, #32]	; (800e390 <HAL_FLASH_Program+0xf0>)
 800e370:	4013      	ands	r3, r2
 800e372:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800e374:	f000 faa4 	bl	800e8c0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800e378:	4b03      	ldr	r3, [pc, #12]	; (800e388 <HAL_FLASH_Program+0xe8>)
 800e37a:	2200      	movs	r2, #0
 800e37c:	701a      	strb	r2, [r3, #0]

  return status;
 800e37e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e380:	4618      	mov	r0, r3
 800e382:	3718      	adds	r7, #24
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}
 800e388:	20001474 	.word	0x20001474
 800e38c:	0801b8e0 	.word	0x0801b8e0
 800e390:	40022000 	.word	0x40022000

0800e394 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800e394:	b480      	push	{r7}
 800e396:	b083      	sub	sp, #12
 800e398:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800e39a:	2300      	movs	r3, #0
 800e39c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800e39e:	4b0b      	ldr	r3, [pc, #44]	; (800e3cc <HAL_FLASH_Unlock+0x38>)
 800e3a0:	695b      	ldr	r3, [r3, #20]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	da0b      	bge.n	800e3be <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800e3a6:	4b09      	ldr	r3, [pc, #36]	; (800e3cc <HAL_FLASH_Unlock+0x38>)
 800e3a8:	4a09      	ldr	r2, [pc, #36]	; (800e3d0 <HAL_FLASH_Unlock+0x3c>)
 800e3aa:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800e3ac:	4b07      	ldr	r3, [pc, #28]	; (800e3cc <HAL_FLASH_Unlock+0x38>)
 800e3ae:	4a09      	ldr	r2, [pc, #36]	; (800e3d4 <HAL_FLASH_Unlock+0x40>)
 800e3b0:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800e3b2:	4b06      	ldr	r3, [pc, #24]	; (800e3cc <HAL_FLASH_Unlock+0x38>)
 800e3b4:	695b      	ldr	r3, [r3, #20]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	da01      	bge.n	800e3be <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800e3be:	79fb      	ldrb	r3, [r7, #7]
}
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	370c      	adds	r7, #12
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ca:	4770      	bx	lr
 800e3cc:	40022000 	.word	0x40022000
 800e3d0:	45670123 	.word	0x45670123
 800e3d4:	cdef89ab 	.word	0xcdef89ab

0800e3d8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800e3d8:	b480      	push	{r7}
 800e3da:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800e3dc:	4b05      	ldr	r3, [pc, #20]	; (800e3f4 <HAL_FLASH_Lock+0x1c>)
 800e3de:	695b      	ldr	r3, [r3, #20]
 800e3e0:	4a04      	ldr	r2, [pc, #16]	; (800e3f4 <HAL_FLASH_Lock+0x1c>)
 800e3e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e3e6:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800e3e8:	2300      	movs	r3, #0
}
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f2:	4770      	bx	lr
 800e3f4:	40022000 	.word	0x40022000

0800e3f8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b084      	sub	sp, #16
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800e400:	f7fc f890 	bl	800a524 <HAL_GetTick>
 800e404:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800e406:	e00d      	b.n	800e424 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e40e:	d009      	beq.n	800e424 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 800e410:	f7fc f888 	bl	800a524 <HAL_GetTick>
 800e414:	4602      	mov	r2, r0
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	1ad3      	subs	r3, r2, r3
 800e41a:	687a      	ldr	r2, [r7, #4]
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d801      	bhi.n	800e424 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 800e420:	2303      	movs	r3, #3
 800e422:	e036      	b.n	800e492 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800e424:	4b1d      	ldr	r3, [pc, #116]	; (800e49c <FLASH_WaitForLastOperation+0xa4>)
 800e426:	691b      	ldr	r3, [r3, #16]
 800e428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d1eb      	bne.n	800e408 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800e430:	4b1a      	ldr	r3, [pc, #104]	; (800e49c <FLASH_WaitForLastOperation+0xa4>)
 800e432:	691a      	ldr	r2, [r3, #16]
 800e434:	4b1a      	ldr	r3, [pc, #104]	; (800e4a0 <FLASH_WaitForLastOperation+0xa8>)
 800e436:	4013      	ands	r3, r2
 800e438:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800e43a:	68bb      	ldr	r3, [r7, #8]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d01e      	beq.n	800e47e <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800e440:	4b18      	ldr	r3, [pc, #96]	; (800e4a4 <FLASH_WaitForLastOperation+0xac>)
 800e442:	685a      	ldr	r2, [r3, #4]
 800e444:	68bb      	ldr	r3, [r7, #8]
 800e446:	4313      	orrs	r3, r2
 800e448:	4a16      	ldr	r2, [pc, #88]	; (800e4a4 <FLASH_WaitForLastOperation+0xac>)
 800e44a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800e44c:	68bb      	ldr	r3, [r7, #8]
 800e44e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800e452:	2b00      	cmp	r3, #0
 800e454:	d007      	beq.n	800e466 <FLASH_WaitForLastOperation+0x6e>
 800e456:	4b11      	ldr	r3, [pc, #68]	; (800e49c <FLASH_WaitForLastOperation+0xa4>)
 800e458:	699a      	ldr	r2, [r3, #24]
 800e45a:	68bb      	ldr	r3, [r7, #8]
 800e45c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800e460:	490e      	ldr	r1, [pc, #56]	; (800e49c <FLASH_WaitForLastOperation+0xa4>)
 800e462:	4313      	orrs	r3, r2
 800e464:	618b      	str	r3, [r1, #24]
 800e466:	68bb      	ldr	r3, [r7, #8]
 800e468:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d004      	beq.n	800e47a <FLASH_WaitForLastOperation+0x82>
 800e470:	4a0a      	ldr	r2, [pc, #40]	; (800e49c <FLASH_WaitForLastOperation+0xa4>)
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800e478:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800e47a:	2301      	movs	r3, #1
 800e47c:	e009      	b.n	800e492 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800e47e:	4b07      	ldr	r3, [pc, #28]	; (800e49c <FLASH_WaitForLastOperation+0xa4>)
 800e480:	691b      	ldr	r3, [r3, #16]
 800e482:	f003 0301 	and.w	r3, r3, #1
 800e486:	2b00      	cmp	r3, #0
 800e488:	d002      	beq.n	800e490 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800e48a:	4b04      	ldr	r3, [pc, #16]	; (800e49c <FLASH_WaitForLastOperation+0xa4>)
 800e48c:	2201      	movs	r2, #1
 800e48e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800e490:	2300      	movs	r3, #0
}
 800e492:	4618      	mov	r0, r3
 800e494:	3710      	adds	r7, #16
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}
 800e49a:	bf00      	nop
 800e49c:	40022000 	.word	0x40022000
 800e4a0:	0002c3fa 	.word	0x0002c3fa
 800e4a4:	20001474 	.word	0x20001474

0800e4a8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b084      	sub	sp, #16
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	60f8      	str	r0, [r7, #12]
 800e4b0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e4ba:	d332      	bcc.n	800e522 <FLASH_Program_DoubleWord+0x7a>
 800e4bc:	4b2d      	ldr	r3, [pc, #180]	; (800e574 <FLASH_Program_DoubleWord+0xcc>)
 800e4be:	881b      	ldrh	r3, [r3, #0]
 800e4c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e4c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e4c8:	d104      	bne.n	800e4d4 <FLASH_Program_DoubleWord+0x2c>
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800e4d0:	d227      	bcs.n	800e522 <FLASH_Program_DoubleWord+0x7a>
 800e4d2:	e033      	b.n	800e53c <FLASH_Program_DoubleWord+0x94>
 800e4d4:	4b27      	ldr	r3, [pc, #156]	; (800e574 <FLASH_Program_DoubleWord+0xcc>)
 800e4d6:	881b      	ldrh	r3, [r3, #0]
 800e4d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e4dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e4e0:	d104      	bne.n	800e4ec <FLASH_Program_DoubleWord+0x44>
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	4a24      	ldr	r2, [pc, #144]	; (800e578 <FLASH_Program_DoubleWord+0xd0>)
 800e4e6:	4293      	cmp	r3, r2
 800e4e8:	d81b      	bhi.n	800e522 <FLASH_Program_DoubleWord+0x7a>
 800e4ea:	e027      	b.n	800e53c <FLASH_Program_DoubleWord+0x94>
 800e4ec:	4b21      	ldr	r3, [pc, #132]	; (800e574 <FLASH_Program_DoubleWord+0xcc>)
 800e4ee:	881b      	ldrh	r3, [r3, #0]
 800e4f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e4f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e4f8:	d104      	bne.n	800e504 <FLASH_Program_DoubleWord+0x5c>
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	4a1f      	ldr	r2, [pc, #124]	; (800e57c <FLASH_Program_DoubleWord+0xd4>)
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d80f      	bhi.n	800e522 <FLASH_Program_DoubleWord+0x7a>
 800e502:	e01b      	b.n	800e53c <FLASH_Program_DoubleWord+0x94>
 800e504:	4b1b      	ldr	r3, [pc, #108]	; (800e574 <FLASH_Program_DoubleWord+0xcc>)
 800e506:	881b      	ldrh	r3, [r3, #0]
 800e508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e50c:	2b80      	cmp	r3, #128	; 0x80
 800e50e:	d104      	bne.n	800e51a <FLASH_Program_DoubleWord+0x72>
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	4a1b      	ldr	r2, [pc, #108]	; (800e580 <FLASH_Program_DoubleWord+0xd8>)
 800e514:	4293      	cmp	r3, r2
 800e516:	d804      	bhi.n	800e522 <FLASH_Program_DoubleWord+0x7a>
 800e518:	e010      	b.n	800e53c <FLASH_Program_DoubleWord+0x94>
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800e520:	d30c      	bcc.n	800e53c <FLASH_Program_DoubleWord+0x94>
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	4a17      	ldr	r2, [pc, #92]	; (800e584 <FLASH_Program_DoubleWord+0xdc>)
 800e526:	4293      	cmp	r3, r2
 800e528:	d903      	bls.n	800e532 <FLASH_Program_DoubleWord+0x8a>
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	4a16      	ldr	r2, [pc, #88]	; (800e588 <FLASH_Program_DoubleWord+0xe0>)
 800e52e:	4293      	cmp	r3, r2
 800e530:	d904      	bls.n	800e53c <FLASH_Program_DoubleWord+0x94>
 800e532:	f240 21bb 	movw	r1, #699	; 0x2bb
 800e536:	4815      	ldr	r0, [pc, #84]	; (800e58c <FLASH_Program_DoubleWord+0xe4>)
 800e538:	f7f6 f824 	bl	8004584 <assert_failed>

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800e53c:	4b14      	ldr	r3, [pc, #80]	; (800e590 <FLASH_Program_DoubleWord+0xe8>)
 800e53e:	695b      	ldr	r3, [r3, #20]
 800e540:	4a13      	ldr	r2, [pc, #76]	; (800e590 <FLASH_Program_DoubleWord+0xe8>)
 800e542:	f043 0301 	orr.w	r3, r3, #1
 800e546:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	683a      	ldr	r2, [r7, #0]
 800e54c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800e54e:	f3bf 8f6f 	isb	sy
}
 800e552:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800e554:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e558:	f04f 0200 	mov.w	r2, #0
 800e55c:	f04f 0300 	mov.w	r3, #0
 800e560:	000a      	movs	r2, r1
 800e562:	2300      	movs	r3, #0
 800e564:	68f9      	ldr	r1, [r7, #12]
 800e566:	3104      	adds	r1, #4
 800e568:	4613      	mov	r3, r2
 800e56a:	600b      	str	r3, [r1, #0]
}
 800e56c:	bf00      	nop
 800e56e:	3710      	adds	r7, #16
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}
 800e574:	1fff75e0 	.word	0x1fff75e0
 800e578:	0807ffff 	.word	0x0807ffff
 800e57c:	0803ffff 	.word	0x0803ffff
 800e580:	0801ffff 	.word	0x0801ffff
 800e584:	1fff6fff 	.word	0x1fff6fff
 800e588:	1fff73ff 	.word	0x1fff73ff
 800e58c:	0801b8e0 	.word	0x0801b8e0
 800e590:	40022000 	.word	0x40022000

0800e594 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b088      	sub	sp, #32
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
 800e59c:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800e59e:	2340      	movs	r3, #64	; 0x40
 800e5a0:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e5b0:	d332      	bcc.n	800e618 <FLASH_Program_Fast+0x84>
 800e5b2:	4b2f      	ldr	r3, [pc, #188]	; (800e670 <FLASH_Program_Fast+0xdc>)
 800e5b4:	881b      	ldrh	r3, [r3, #0]
 800e5b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e5ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e5be:	d104      	bne.n	800e5ca <FLASH_Program_Fast+0x36>
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800e5c6:	d227      	bcs.n	800e618 <FLASH_Program_Fast+0x84>
 800e5c8:	e02b      	b.n	800e622 <FLASH_Program_Fast+0x8e>
 800e5ca:	4b29      	ldr	r3, [pc, #164]	; (800e670 <FLASH_Program_Fast+0xdc>)
 800e5cc:	881b      	ldrh	r3, [r3, #0]
 800e5ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e5d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e5d6:	d104      	bne.n	800e5e2 <FLASH_Program_Fast+0x4e>
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	4a26      	ldr	r2, [pc, #152]	; (800e674 <FLASH_Program_Fast+0xe0>)
 800e5dc:	4293      	cmp	r3, r2
 800e5de:	d81b      	bhi.n	800e618 <FLASH_Program_Fast+0x84>
 800e5e0:	e01f      	b.n	800e622 <FLASH_Program_Fast+0x8e>
 800e5e2:	4b23      	ldr	r3, [pc, #140]	; (800e670 <FLASH_Program_Fast+0xdc>)
 800e5e4:	881b      	ldrh	r3, [r3, #0]
 800e5e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e5ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5ee:	d104      	bne.n	800e5fa <FLASH_Program_Fast+0x66>
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	4a21      	ldr	r2, [pc, #132]	; (800e678 <FLASH_Program_Fast+0xe4>)
 800e5f4:	4293      	cmp	r3, r2
 800e5f6:	d80f      	bhi.n	800e618 <FLASH_Program_Fast+0x84>
 800e5f8:	e013      	b.n	800e622 <FLASH_Program_Fast+0x8e>
 800e5fa:	4b1d      	ldr	r3, [pc, #116]	; (800e670 <FLASH_Program_Fast+0xdc>)
 800e5fc:	881b      	ldrh	r3, [r3, #0]
 800e5fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e602:	2b80      	cmp	r3, #128	; 0x80
 800e604:	d104      	bne.n	800e610 <FLASH_Program_Fast+0x7c>
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	4a1c      	ldr	r2, [pc, #112]	; (800e67c <FLASH_Program_Fast+0xe8>)
 800e60a:	4293      	cmp	r3, r2
 800e60c:	d804      	bhi.n	800e618 <FLASH_Program_Fast+0x84>
 800e60e:	e008      	b.n	800e622 <FLASH_Program_Fast+0x8e>
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800e616:	d304      	bcc.n	800e622 <FLASH_Program_Fast+0x8e>
 800e618:	f240 21d9 	movw	r1, #729	; 0x2d9
 800e61c:	4818      	ldr	r0, [pc, #96]	; (800e680 <FLASH_Program_Fast+0xec>)
 800e61e:	f7f5 ffb1 	bl	8004584 <assert_failed>

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800e622:	4b18      	ldr	r3, [pc, #96]	; (800e684 <FLASH_Program_Fast+0xf0>)
 800e624:	695b      	ldr	r3, [r3, #20]
 800e626:	4a17      	ldr	r2, [pc, #92]	; (800e684 <FLASH_Program_Fast+0xf0>)
 800e628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e62c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e62e:	f3ef 8310 	mrs	r3, PRIMASK
 800e632:	60fb      	str	r3, [r7, #12]
  return(result);
 800e634:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800e636:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800e638:	b672      	cpsid	i
}
 800e63a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800e63c:	697b      	ldr	r3, [r7, #20]
 800e63e:	681a      	ldr	r2, [r3, #0]
 800e640:	69bb      	ldr	r3, [r7, #24]
 800e642:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800e644:	69bb      	ldr	r3, [r7, #24]
 800e646:	3304      	adds	r3, #4
 800e648:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	3304      	adds	r3, #4
 800e64e:	617b      	str	r3, [r7, #20]
    row_index--;
 800e650:	7ffb      	ldrb	r3, [r7, #31]
 800e652:	3b01      	subs	r3, #1
 800e654:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800e656:	7ffb      	ldrb	r3, [r7, #31]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d1ef      	bne.n	800e63c <FLASH_Program_Fast+0xa8>
 800e65c:	693b      	ldr	r3, [r7, #16]
 800e65e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	f383 8810 	msr	PRIMASK, r3
}
 800e666:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800e668:	bf00      	nop
 800e66a:	3720      	adds	r7, #32
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}
 800e670:	1fff75e0 	.word	0x1fff75e0
 800e674:	0807ffff 	.word	0x0807ffff
 800e678:	0803ffff 	.word	0x0803ffff
 800e67c:	0801ffff 	.word	0x0801ffff
 800e680:	0801b8e0 	.word	0x0801b8e0
 800e684:	40022000 	.word	0x40022000

0800e688 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b084      	sub	sp, #16
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
 800e690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800e692:	4b4e      	ldr	r3, [pc, #312]	; (800e7cc <HAL_FLASHEx_Erase+0x144>)
 800e694:	781b      	ldrb	r3, [r3, #0]
 800e696:	2b01      	cmp	r3, #1
 800e698:	d101      	bne.n	800e69e <HAL_FLASHEx_Erase+0x16>
 800e69a:	2302      	movs	r3, #2
 800e69c:	e091      	b.n	800e7c2 <HAL_FLASHEx_Erase+0x13a>
 800e69e:	4b4b      	ldr	r3, [pc, #300]	; (800e7cc <HAL_FLASHEx_Erase+0x144>)
 800e6a0:	2201      	movs	r2, #1
 800e6a2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d007      	beq.n	800e6bc <HAL_FLASHEx_Erase+0x34>
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	2b01      	cmp	r3, #1
 800e6b2:	d003      	beq.n	800e6bc <HAL_FLASHEx_Erase+0x34>
 800e6b4:	2186      	movs	r1, #134	; 0x86
 800e6b6:	4846      	ldr	r0, [pc, #280]	; (800e7d0 <HAL_FLASHEx_Erase+0x148>)
 800e6b8:	f7f5 ff64 	bl	8004584 <assert_failed>

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e6bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 800e6c0:	f7ff fe9a 	bl	800e3f8 <FLASH_WaitForLastOperation>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800e6c8:	7bfb      	ldrb	r3, [r7, #15]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d175      	bne.n	800e7ba <HAL_FLASHEx_Erase+0x132>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800e6ce:	4b3f      	ldr	r3, [pc, #252]	; (800e7cc <HAL_FLASHEx_Erase+0x144>)
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800e6d4:	4b3f      	ldr	r3, [pc, #252]	; (800e7d4 <HAL_FLASHEx_Erase+0x14c>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d013      	beq.n	800e708 <HAL_FLASHEx_Erase+0x80>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800e6e0:	4b3c      	ldr	r3, [pc, #240]	; (800e7d4 <HAL_FLASHEx_Erase+0x14c>)
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d009      	beq.n	800e700 <HAL_FLASHEx_Erase+0x78>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800e6ec:	4b39      	ldr	r3, [pc, #228]	; (800e7d4 <HAL_FLASHEx_Erase+0x14c>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	4a38      	ldr	r2, [pc, #224]	; (800e7d4 <HAL_FLASHEx_Erase+0x14c>)
 800e6f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e6f6:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800e6f8:	4b34      	ldr	r3, [pc, #208]	; (800e7cc <HAL_FLASHEx_Erase+0x144>)
 800e6fa:	2203      	movs	r2, #3
 800e6fc:	771a      	strb	r2, [r3, #28]
 800e6fe:	e016      	b.n	800e72e <HAL_FLASHEx_Erase+0xa6>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800e700:	4b32      	ldr	r3, [pc, #200]	; (800e7cc <HAL_FLASHEx_Erase+0x144>)
 800e702:	2201      	movs	r2, #1
 800e704:	771a      	strb	r2, [r3, #28]
 800e706:	e012      	b.n	800e72e <HAL_FLASHEx_Erase+0xa6>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800e708:	4b32      	ldr	r3, [pc, #200]	; (800e7d4 <HAL_FLASHEx_Erase+0x14c>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e710:	2b00      	cmp	r3, #0
 800e712:	d009      	beq.n	800e728 <HAL_FLASHEx_Erase+0xa0>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800e714:	4b2f      	ldr	r3, [pc, #188]	; (800e7d4 <HAL_FLASHEx_Erase+0x14c>)
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	4a2e      	ldr	r2, [pc, #184]	; (800e7d4 <HAL_FLASHEx_Erase+0x14c>)
 800e71a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e71e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800e720:	4b2a      	ldr	r3, [pc, #168]	; (800e7cc <HAL_FLASHEx_Erase+0x144>)
 800e722:	2202      	movs	r2, #2
 800e724:	771a      	strb	r2, [r3, #28]
 800e726:	e002      	b.n	800e72e <HAL_FLASHEx_Erase+0xa6>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800e728:	4b28      	ldr	r3, [pc, #160]	; (800e7cc <HAL_FLASHEx_Erase+0x144>)
 800e72a:	2200      	movs	r2, #0
 800e72c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	2b01      	cmp	r3, #1
 800e734:	d111      	bne.n	800e75a <HAL_FLASHEx_Erase+0xd2>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	685b      	ldr	r3, [r3, #4]
 800e73a:	4618      	mov	r0, r3
 800e73c:	f000 f84c 	bl	800e7d8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e740:	f24c 3050 	movw	r0, #50000	; 0xc350
 800e744:	f7ff fe58 	bl	800e3f8 <FLASH_WaitForLastOperation>
 800e748:	4603      	mov	r3, r0
 800e74a:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 800e74c:	4b21      	ldr	r3, [pc, #132]	; (800e7d4 <HAL_FLASHEx_Erase+0x14c>)
 800e74e:	695b      	ldr	r3, [r3, #20]
 800e750:	4a20      	ldr	r2, [pc, #128]	; (800e7d4 <HAL_FLASHEx_Erase+0x14c>)
 800e752:	f023 0304 	bic.w	r3, r3, #4
 800e756:	6153      	str	r3, [r2, #20]
 800e758:	e02d      	b.n	800e7b6 <HAL_FLASHEx_Erase+0x12e>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800e75a:	683b      	ldr	r3, [r7, #0]
 800e75c:	f04f 32ff 	mov.w	r2, #4294967295
 800e760:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	689b      	ldr	r3, [r3, #8]
 800e766:	60bb      	str	r3, [r7, #8]
 800e768:	e01d      	b.n	800e7a6 <HAL_FLASHEx_Erase+0x11e>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	685b      	ldr	r3, [r3, #4]
 800e76e:	4619      	mov	r1, r3
 800e770:	68b8      	ldr	r0, [r7, #8]
 800e772:	f000 f857 	bl	800e824 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e776:	f24c 3050 	movw	r0, #50000	; 0xc350
 800e77a:	f7ff fe3d 	bl	800e3f8 <FLASH_WaitForLastOperation>
 800e77e:	4603      	mov	r3, r0
 800e780:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800e782:	4b14      	ldr	r3, [pc, #80]	; (800e7d4 <HAL_FLASHEx_Erase+0x14c>)
 800e784:	695b      	ldr	r3, [r3, #20]
 800e786:	4a13      	ldr	r2, [pc, #76]	; (800e7d4 <HAL_FLASHEx_Erase+0x14c>)
 800e788:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 800e78c:	f023 0302 	bic.w	r3, r3, #2
 800e790:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800e792:	7bfb      	ldrb	r3, [r7, #15]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d003      	beq.n	800e7a0 <HAL_FLASHEx_Erase+0x118>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	68ba      	ldr	r2, [r7, #8]
 800e79c:	601a      	str	r2, [r3, #0]
          break;
 800e79e:	e00a      	b.n	800e7b6 <HAL_FLASHEx_Erase+0x12e>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800e7a0:	68bb      	ldr	r3, [r7, #8]
 800e7a2:	3301      	adds	r3, #1
 800e7a4:	60bb      	str	r3, [r7, #8]
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	689a      	ldr	r2, [r3, #8]
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	68db      	ldr	r3, [r3, #12]
 800e7ae:	4413      	add	r3, r2
 800e7b0:	68ba      	ldr	r2, [r7, #8]
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	d3d9      	bcc.n	800e76a <HAL_FLASHEx_Erase+0xe2>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800e7b6:	f000 f883 	bl	800e8c0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800e7ba:	4b04      	ldr	r3, [pc, #16]	; (800e7cc <HAL_FLASHEx_Erase+0x144>)
 800e7bc:	2200      	movs	r2, #0
 800e7be:	701a      	strb	r2, [r3, #0]

  return status;
 800e7c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	3710      	adds	r7, #16
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}
 800e7ca:	bf00      	nop
 800e7cc:	20001474 	.word	0x20001474
 800e7d0:	0801b91c 	.word	0x0801b91c
 800e7d4:	40022000 	.word	0x40022000

0800e7d8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b082      	sub	sp, #8
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
#endif
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2b01      	cmp	r3, #1
 800e7e4:	d004      	beq.n	800e7f0 <FLASH_MassErase+0x18>
 800e7e6:	f240 11ff 	movw	r1, #511	; 0x1ff
 800e7ea:	480c      	ldr	r0, [pc, #48]	; (800e81c <FLASH_MassErase+0x44>)
 800e7ec:	f7f5 feca 	bl	8004584 <assert_failed>

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	f003 0301 	and.w	r3, r3, #1
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d005      	beq.n	800e806 <FLASH_MassErase+0x2e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800e7fa:	4b09      	ldr	r3, [pc, #36]	; (800e820 <FLASH_MassErase+0x48>)
 800e7fc:	695b      	ldr	r3, [r3, #20]
 800e7fe:	4a08      	ldr	r2, [pc, #32]	; (800e820 <FLASH_MassErase+0x48>)
 800e800:	f043 0304 	orr.w	r3, r3, #4
 800e804:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800e806:	4b06      	ldr	r3, [pc, #24]	; (800e820 <FLASH_MassErase+0x48>)
 800e808:	695b      	ldr	r3, [r3, #20]
 800e80a:	4a05      	ldr	r2, [pc, #20]	; (800e820 <FLASH_MassErase+0x48>)
 800e80c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e810:	6153      	str	r3, [r2, #20]
}
 800e812:	bf00      	nop
 800e814:	3708      	adds	r7, #8
 800e816:	46bd      	mov	sp, r7
 800e818:	bd80      	pop	{r7, pc}
 800e81a:	bf00      	nop
 800e81c:	0801b91c 	.word	0x0801b91c
 800e820:	40022000 	.word	0x40022000

0800e824 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b082      	sub	sp, #8
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
 800e82c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));
 800e82e:	4b21      	ldr	r3, [pc, #132]	; (800e8b4 <FLASH_PageErase+0x90>)
 800e830:	881b      	ldrh	r3, [r3, #0]
 800e832:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e83a:	d106      	bne.n	800e84a <FLASH_PageErase+0x26>
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2b7f      	cmp	r3, #127	; 0x7f
 800e840:	bf94      	ite	ls
 800e842:	2301      	movls	r3, #1
 800e844:	2300      	movhi	r3, #0
 800e846:	b2db      	uxtb	r3, r3
 800e848:	e012      	b.n	800e870 <FLASH_PageErase+0x4c>
 800e84a:	4b1a      	ldr	r3, [pc, #104]	; (800e8b4 <FLASH_PageErase+0x90>)
 800e84c:	881b      	ldrh	r3, [r3, #0]
 800e84e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e852:	2b80      	cmp	r3, #128	; 0x80
 800e854:	d106      	bne.n	800e864 <FLASH_PageErase+0x40>
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	2b3f      	cmp	r3, #63	; 0x3f
 800e85a:	bf94      	ite	ls
 800e85c:	2301      	movls	r3, #1
 800e85e:	2300      	movhi	r3, #0
 800e860:	b2db      	uxtb	r3, r3
 800e862:	e005      	b.n	800e870 <FLASH_PageErase+0x4c>
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2b7f      	cmp	r3, #127	; 0x7f
 800e868:	bf94      	ite	ls
 800e86a:	2301      	movls	r3, #1
 800e86c:	2300      	movhi	r3, #0
 800e86e:	b2db      	uxtb	r3, r3
 800e870:	2b00      	cmp	r3, #0
 800e872:	d104      	bne.n	800e87e <FLASH_PageErase+0x5a>
 800e874:	f240 212a 	movw	r1, #554	; 0x22a
 800e878:	480f      	ldr	r0, [pc, #60]	; (800e8b8 <FLASH_PageErase+0x94>)
 800e87a:	f7f5 fe83 	bl	8004584 <assert_failed>
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800e87e:	4b0f      	ldr	r3, [pc, #60]	; (800e8bc <FLASH_PageErase+0x98>)
 800e880:	695b      	ldr	r3, [r3, #20]
 800e882:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	00db      	lsls	r3, r3, #3
 800e88a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800e88e:	490b      	ldr	r1, [pc, #44]	; (800e8bc <FLASH_PageErase+0x98>)
 800e890:	4313      	orrs	r3, r2
 800e892:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800e894:	4b09      	ldr	r3, [pc, #36]	; (800e8bc <FLASH_PageErase+0x98>)
 800e896:	695b      	ldr	r3, [r3, #20]
 800e898:	4a08      	ldr	r2, [pc, #32]	; (800e8bc <FLASH_PageErase+0x98>)
 800e89a:	f043 0302 	orr.w	r3, r3, #2
 800e89e:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800e8a0:	4b06      	ldr	r3, [pc, #24]	; (800e8bc <FLASH_PageErase+0x98>)
 800e8a2:	695b      	ldr	r3, [r3, #20]
 800e8a4:	4a05      	ldr	r2, [pc, #20]	; (800e8bc <FLASH_PageErase+0x98>)
 800e8a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e8aa:	6153      	str	r3, [r2, #20]
}
 800e8ac:	bf00      	nop
 800e8ae:	3708      	adds	r7, #8
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bd80      	pop	{r7, pc}
 800e8b4:	1fff75e0 	.word	0x1fff75e0
 800e8b8:	0801b91c 	.word	0x0801b91c
 800e8bc:	40022000 	.word	0x40022000

0800e8c0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	b083      	sub	sp, #12
 800e8c4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800e8c6:	4b21      	ldr	r3, [pc, #132]	; (800e94c <FLASH_FlushCaches+0x8c>)
 800e8c8:	7f1b      	ldrb	r3, [r3, #28]
 800e8ca:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800e8cc:	79fb      	ldrb	r3, [r7, #7]
 800e8ce:	2b01      	cmp	r3, #1
 800e8d0:	d002      	beq.n	800e8d8 <FLASH_FlushCaches+0x18>
 800e8d2:	79fb      	ldrb	r3, [r7, #7]
 800e8d4:	2b03      	cmp	r3, #3
 800e8d6:	d117      	bne.n	800e908 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800e8d8:	4b1d      	ldr	r3, [pc, #116]	; (800e950 <FLASH_FlushCaches+0x90>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	4a1c      	ldr	r2, [pc, #112]	; (800e950 <FLASH_FlushCaches+0x90>)
 800e8de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e8e2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800e8e4:	4b1a      	ldr	r3, [pc, #104]	; (800e950 <FLASH_FlushCaches+0x90>)
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	4a19      	ldr	r2, [pc, #100]	; (800e950 <FLASH_FlushCaches+0x90>)
 800e8ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e8ee:	6013      	str	r3, [r2, #0]
 800e8f0:	4b17      	ldr	r3, [pc, #92]	; (800e950 <FLASH_FlushCaches+0x90>)
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	4a16      	ldr	r2, [pc, #88]	; (800e950 <FLASH_FlushCaches+0x90>)
 800e8f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e8fa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e8fc:	4b14      	ldr	r3, [pc, #80]	; (800e950 <FLASH_FlushCaches+0x90>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	4a13      	ldr	r2, [pc, #76]	; (800e950 <FLASH_FlushCaches+0x90>)
 800e902:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e906:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800e908:	79fb      	ldrb	r3, [r7, #7]
 800e90a:	2b02      	cmp	r3, #2
 800e90c:	d002      	beq.n	800e914 <FLASH_FlushCaches+0x54>
 800e90e:	79fb      	ldrb	r3, [r7, #7]
 800e910:	2b03      	cmp	r3, #3
 800e912:	d111      	bne.n	800e938 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800e914:	4b0e      	ldr	r3, [pc, #56]	; (800e950 <FLASH_FlushCaches+0x90>)
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	4a0d      	ldr	r2, [pc, #52]	; (800e950 <FLASH_FlushCaches+0x90>)
 800e91a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e91e:	6013      	str	r3, [r2, #0]
 800e920:	4b0b      	ldr	r3, [pc, #44]	; (800e950 <FLASH_FlushCaches+0x90>)
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	4a0a      	ldr	r2, [pc, #40]	; (800e950 <FLASH_FlushCaches+0x90>)
 800e926:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e92a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800e92c:	4b08      	ldr	r3, [pc, #32]	; (800e950 <FLASH_FlushCaches+0x90>)
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	4a07      	ldr	r2, [pc, #28]	; (800e950 <FLASH_FlushCaches+0x90>)
 800e932:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e936:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800e938:	4b04      	ldr	r3, [pc, #16]	; (800e94c <FLASH_FlushCaches+0x8c>)
 800e93a:	2200      	movs	r2, #0
 800e93c:	771a      	strb	r2, [r3, #28]
}
 800e93e:	bf00      	nop
 800e940:	370c      	adds	r7, #12
 800e942:	46bd      	mov	sp, r7
 800e944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e948:	4770      	bx	lr
 800e94a:	bf00      	nop
 800e94c:	20001474 	.word	0x20001474
 800e950:	40022000 	.word	0x40022000

0800e954 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b086      	sub	sp, #24
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
 800e95c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800e95e:	2300      	movs	r3, #0
 800e960:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800e968:	d017      	beq.n	800e99a <HAL_GPIO_Init+0x46>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	4a38      	ldr	r2, [pc, #224]	; (800ea50 <HAL_GPIO_Init+0xfc>)
 800e96e:	4293      	cmp	r3, r2
 800e970:	d013      	beq.n	800e99a <HAL_GPIO_Init+0x46>
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	4a37      	ldr	r2, [pc, #220]	; (800ea54 <HAL_GPIO_Init+0x100>)
 800e976:	4293      	cmp	r3, r2
 800e978:	d00f      	beq.n	800e99a <HAL_GPIO_Init+0x46>
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	4a36      	ldr	r2, [pc, #216]	; (800ea58 <HAL_GPIO_Init+0x104>)
 800e97e:	4293      	cmp	r3, r2
 800e980:	d00b      	beq.n	800e99a <HAL_GPIO_Init+0x46>
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	4a35      	ldr	r2, [pc, #212]	; (800ea5c <HAL_GPIO_Init+0x108>)
 800e986:	4293      	cmp	r3, r2
 800e988:	d007      	beq.n	800e99a <HAL_GPIO_Init+0x46>
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	4a34      	ldr	r2, [pc, #208]	; (800ea60 <HAL_GPIO_Init+0x10c>)
 800e98e:	4293      	cmp	r3, r2
 800e990:	d003      	beq.n	800e99a <HAL_GPIO_Init+0x46>
 800e992:	21aa      	movs	r1, #170	; 0xaa
 800e994:	4833      	ldr	r0, [pc, #204]	; (800ea64 <HAL_GPIO_Init+0x110>)
 800e996:	f7f5 fdf5 	bl	8004584 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	b29b      	uxth	r3, r3
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d005      	beq.n	800e9b0 <HAL_GPIO_Init+0x5c>
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	0c1b      	lsrs	r3, r3, #16
 800e9aa:	041b      	lsls	r3, r3, #16
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d003      	beq.n	800e9b8 <HAL_GPIO_Init+0x64>
 800e9b0:	21ab      	movs	r1, #171	; 0xab
 800e9b2:	482c      	ldr	r0, [pc, #176]	; (800ea64 <HAL_GPIO_Init+0x110>)
 800e9b4:	f7f5 fde6 	bl	8004584 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	685b      	ldr	r3, [r3, #4]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	f000 8200 	beq.w	800edc2 <HAL_GPIO_Init+0x46e>
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	685b      	ldr	r3, [r3, #4]
 800e9c6:	2b01      	cmp	r3, #1
 800e9c8:	f000 81fb 	beq.w	800edc2 <HAL_GPIO_Init+0x46e>
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	685b      	ldr	r3, [r3, #4]
 800e9d0:	2b11      	cmp	r3, #17
 800e9d2:	f000 81f6 	beq.w	800edc2 <HAL_GPIO_Init+0x46e>
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	685b      	ldr	r3, [r3, #4]
 800e9da:	2b02      	cmp	r3, #2
 800e9dc:	f000 81f1 	beq.w	800edc2 <HAL_GPIO_Init+0x46e>
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	685b      	ldr	r3, [r3, #4]
 800e9e4:	2b12      	cmp	r3, #18
 800e9e6:	f000 81ec 	beq.w	800edc2 <HAL_GPIO_Init+0x46e>
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	685b      	ldr	r3, [r3, #4]
 800e9ee:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800e9f2:	f000 81e6 	beq.w	800edc2 <HAL_GPIO_Init+0x46e>
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	685b      	ldr	r3, [r3, #4]
 800e9fa:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800e9fe:	f000 81e0 	beq.w	800edc2 <HAL_GPIO_Init+0x46e>
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	685b      	ldr	r3, [r3, #4]
 800ea06:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 800ea0a:	f000 81da 	beq.w	800edc2 <HAL_GPIO_Init+0x46e>
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	685b      	ldr	r3, [r3, #4]
 800ea12:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800ea16:	f000 81d4 	beq.w	800edc2 <HAL_GPIO_Init+0x46e>
 800ea1a:	683b      	ldr	r3, [r7, #0]
 800ea1c:	685b      	ldr	r3, [r3, #4]
 800ea1e:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 800ea22:	f000 81ce 	beq.w	800edc2 <HAL_GPIO_Init+0x46e>
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	685b      	ldr	r3, [r3, #4]
 800ea2a:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800ea2e:	f000 81c8 	beq.w	800edc2 <HAL_GPIO_Init+0x46e>
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	685b      	ldr	r3, [r3, #4]
 800ea36:	2b03      	cmp	r3, #3
 800ea38:	f000 81c3 	beq.w	800edc2 <HAL_GPIO_Init+0x46e>
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	685b      	ldr	r3, [r3, #4]
 800ea40:	2b0b      	cmp	r3, #11
 800ea42:	f000 81be 	beq.w	800edc2 <HAL_GPIO_Init+0x46e>
 800ea46:	21ac      	movs	r1, #172	; 0xac
 800ea48:	4806      	ldr	r0, [pc, #24]	; (800ea64 <HAL_GPIO_Init+0x110>)
 800ea4a:	f7f5 fd9b 	bl	8004584 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ea4e:	e1b8      	b.n	800edc2 <HAL_GPIO_Init+0x46e>
 800ea50:	48000400 	.word	0x48000400
 800ea54:	48000800 	.word	0x48000800
 800ea58:	48000c00 	.word	0x48000c00
 800ea5c:	48001000 	.word	0x48001000
 800ea60:	48001c00 	.word	0x48001c00
 800ea64:	0801b95c 	.word	0x0801b95c
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	681a      	ldr	r2, [r3, #0]
 800ea6c:	2101      	movs	r1, #1
 800ea6e:	697b      	ldr	r3, [r7, #20]
 800ea70:	fa01 f303 	lsl.w	r3, r1, r3
 800ea74:	4013      	ands	r3, r2
 800ea76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	f000 819e 	beq.w	800edbc <HAL_GPIO_Init+0x468>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	685b      	ldr	r3, [r3, #4]
 800ea84:	f003 0303 	and.w	r3, r3, #3
 800ea88:	2b01      	cmp	r3, #1
 800ea8a:	d005      	beq.n	800ea98 <HAL_GPIO_Init+0x144>
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	685b      	ldr	r3, [r3, #4]
 800ea90:	f003 0303 	and.w	r3, r3, #3
 800ea94:	2b02      	cmp	r3, #2
 800ea96:	d144      	bne.n	800eb22 <HAL_GPIO_Init+0x1ce>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	68db      	ldr	r3, [r3, #12]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d00f      	beq.n	800eac0 <HAL_GPIO_Init+0x16c>
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	68db      	ldr	r3, [r3, #12]
 800eaa4:	2b01      	cmp	r3, #1
 800eaa6:	d00b      	beq.n	800eac0 <HAL_GPIO_Init+0x16c>
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	68db      	ldr	r3, [r3, #12]
 800eaac:	2b02      	cmp	r3, #2
 800eaae:	d007      	beq.n	800eac0 <HAL_GPIO_Init+0x16c>
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	68db      	ldr	r3, [r3, #12]
 800eab4:	2b03      	cmp	r3, #3
 800eab6:	d003      	beq.n	800eac0 <HAL_GPIO_Init+0x16c>
 800eab8:	21bb      	movs	r1, #187	; 0xbb
 800eaba:	4886      	ldr	r0, [pc, #536]	; (800ecd4 <HAL_GPIO_Init+0x380>)
 800eabc:	f7f5 fd62 	bl	8004584 <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	689b      	ldr	r3, [r3, #8]
 800eac4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	005b      	lsls	r3, r3, #1
 800eaca:	2203      	movs	r2, #3
 800eacc:	fa02 f303 	lsl.w	r3, r2, r3
 800ead0:	43db      	mvns	r3, r3
 800ead2:	693a      	ldr	r2, [r7, #16]
 800ead4:	4013      	ands	r3, r2
 800ead6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	68da      	ldr	r2, [r3, #12]
 800eadc:	697b      	ldr	r3, [r7, #20]
 800eade:	005b      	lsls	r3, r3, #1
 800eae0:	fa02 f303 	lsl.w	r3, r2, r3
 800eae4:	693a      	ldr	r2, [r7, #16]
 800eae6:	4313      	orrs	r3, r2
 800eae8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	693a      	ldr	r2, [r7, #16]
 800eaee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	685b      	ldr	r3, [r3, #4]
 800eaf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800eaf6:	2201      	movs	r2, #1
 800eaf8:	697b      	ldr	r3, [r7, #20]
 800eafa:	fa02 f303 	lsl.w	r3, r2, r3
 800eafe:	43db      	mvns	r3, r3
 800eb00:	693a      	ldr	r2, [r7, #16]
 800eb02:	4013      	ands	r3, r2
 800eb04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800eb06:	683b      	ldr	r3, [r7, #0]
 800eb08:	685b      	ldr	r3, [r3, #4]
 800eb0a:	091b      	lsrs	r3, r3, #4
 800eb0c:	f003 0201 	and.w	r2, r3, #1
 800eb10:	697b      	ldr	r3, [r7, #20]
 800eb12:	fa02 f303 	lsl.w	r3, r2, r3
 800eb16:	693a      	ldr	r2, [r7, #16]
 800eb18:	4313      	orrs	r3, r2
 800eb1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	693a      	ldr	r2, [r7, #16]
 800eb20:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	685b      	ldr	r3, [r3, #4]
 800eb26:	f003 0303 	and.w	r3, r3, #3
 800eb2a:	2b03      	cmp	r3, #3
 800eb2c:	d027      	beq.n	800eb7e <HAL_GPIO_Init+0x22a>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	689b      	ldr	r3, [r3, #8]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d00b      	beq.n	800eb4e <HAL_GPIO_Init+0x1fa>
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	689b      	ldr	r3, [r3, #8]
 800eb3a:	2b01      	cmp	r3, #1
 800eb3c:	d007      	beq.n	800eb4e <HAL_GPIO_Init+0x1fa>
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	689b      	ldr	r3, [r3, #8]
 800eb42:	2b02      	cmp	r3, #2
 800eb44:	d003      	beq.n	800eb4e <HAL_GPIO_Init+0x1fa>
 800eb46:	21dc      	movs	r1, #220	; 0xdc
 800eb48:	4862      	ldr	r0, [pc, #392]	; (800ecd4 <HAL_GPIO_Init+0x380>)
 800eb4a:	f7f5 fd1b 	bl	8004584 <assert_failed>

        temp = GPIOx->PUPDR;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	68db      	ldr	r3, [r3, #12]
 800eb52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	005b      	lsls	r3, r3, #1
 800eb58:	2203      	movs	r2, #3
 800eb5a:	fa02 f303 	lsl.w	r3, r2, r3
 800eb5e:	43db      	mvns	r3, r3
 800eb60:	693a      	ldr	r2, [r7, #16]
 800eb62:	4013      	ands	r3, r2
 800eb64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	689a      	ldr	r2, [r3, #8]
 800eb6a:	697b      	ldr	r3, [r7, #20]
 800eb6c:	005b      	lsls	r3, r3, #1
 800eb6e:	fa02 f303 	lsl.w	r3, r2, r3
 800eb72:	693a      	ldr	r2, [r7, #16]
 800eb74:	4313      	orrs	r3, r2
 800eb76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	693a      	ldr	r2, [r7, #16]
 800eb7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	685b      	ldr	r3, [r3, #4]
 800eb82:	f003 0303 	and.w	r3, r3, #3
 800eb86:	2b02      	cmp	r3, #2
 800eb88:	d147      	bne.n	800ec1a <HAL_GPIO_Init+0x2c6>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800eb90:	d017      	beq.n	800ebc2 <HAL_GPIO_Init+0x26e>
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	4a50      	ldr	r2, [pc, #320]	; (800ecd8 <HAL_GPIO_Init+0x384>)
 800eb96:	4293      	cmp	r3, r2
 800eb98:	d013      	beq.n	800ebc2 <HAL_GPIO_Init+0x26e>
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	4a4f      	ldr	r2, [pc, #316]	; (800ecdc <HAL_GPIO_Init+0x388>)
 800eb9e:	4293      	cmp	r3, r2
 800eba0:	d00f      	beq.n	800ebc2 <HAL_GPIO_Init+0x26e>
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	4a4e      	ldr	r2, [pc, #312]	; (800ece0 <HAL_GPIO_Init+0x38c>)
 800eba6:	4293      	cmp	r3, r2
 800eba8:	d00b      	beq.n	800ebc2 <HAL_GPIO_Init+0x26e>
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	4a4d      	ldr	r2, [pc, #308]	; (800ece4 <HAL_GPIO_Init+0x390>)
 800ebae:	4293      	cmp	r3, r2
 800ebb0:	d007      	beq.n	800ebc2 <HAL_GPIO_Init+0x26e>
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	4a4c      	ldr	r2, [pc, #304]	; (800ece8 <HAL_GPIO_Init+0x394>)
 800ebb6:	4293      	cmp	r3, r2
 800ebb8:	d003      	beq.n	800ebc2 <HAL_GPIO_Init+0x26e>
 800ebba:	21e8      	movs	r1, #232	; 0xe8
 800ebbc:	4845      	ldr	r0, [pc, #276]	; (800ecd4 <HAL_GPIO_Init+0x380>)
 800ebbe:	f7f5 fce1 	bl	8004584 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	691b      	ldr	r3, [r3, #16]
 800ebc6:	2b0f      	cmp	r3, #15
 800ebc8:	d903      	bls.n	800ebd2 <HAL_GPIO_Init+0x27e>
 800ebca:	21e9      	movs	r1, #233	; 0xe9
 800ebcc:	4841      	ldr	r0, [pc, #260]	; (800ecd4 <HAL_GPIO_Init+0x380>)
 800ebce:	f7f5 fcd9 	bl	8004584 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800ebd2:	697b      	ldr	r3, [r7, #20]
 800ebd4:	08da      	lsrs	r2, r3, #3
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	3208      	adds	r2, #8
 800ebda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800ebe0:	697b      	ldr	r3, [r7, #20]
 800ebe2:	f003 0307 	and.w	r3, r3, #7
 800ebe6:	009b      	lsls	r3, r3, #2
 800ebe8:	220f      	movs	r2, #15
 800ebea:	fa02 f303 	lsl.w	r3, r2, r3
 800ebee:	43db      	mvns	r3, r3
 800ebf0:	693a      	ldr	r2, [r7, #16]
 800ebf2:	4013      	ands	r3, r2
 800ebf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	691a      	ldr	r2, [r3, #16]
 800ebfa:	697b      	ldr	r3, [r7, #20]
 800ebfc:	f003 0307 	and.w	r3, r3, #7
 800ec00:	009b      	lsls	r3, r3, #2
 800ec02:	fa02 f303 	lsl.w	r3, r2, r3
 800ec06:	693a      	ldr	r2, [r7, #16]
 800ec08:	4313      	orrs	r3, r2
 800ec0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	08da      	lsrs	r2, r3, #3
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	3208      	adds	r2, #8
 800ec14:	6939      	ldr	r1, [r7, #16]
 800ec16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	005b      	lsls	r3, r3, #1
 800ec24:	2203      	movs	r2, #3
 800ec26:	fa02 f303 	lsl.w	r3, r2, r3
 800ec2a:	43db      	mvns	r3, r3
 800ec2c:	693a      	ldr	r2, [r7, #16]
 800ec2e:	4013      	ands	r3, r2
 800ec30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	685b      	ldr	r3, [r3, #4]
 800ec36:	f003 0203 	and.w	r2, r3, #3
 800ec3a:	697b      	ldr	r3, [r7, #20]
 800ec3c:	005b      	lsls	r3, r3, #1
 800ec3e:	fa02 f303 	lsl.w	r3, r2, r3
 800ec42:	693a      	ldr	r2, [r7, #16]
 800ec44:	4313      	orrs	r3, r2
 800ec46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	693a      	ldr	r2, [r7, #16]
 800ec4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	685b      	ldr	r3, [r3, #4]
 800ec52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	f000 80b0 	beq.w	800edbc <HAL_GPIO_Init+0x468>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ec5c:	4b23      	ldr	r3, [pc, #140]	; (800ecec <HAL_GPIO_Init+0x398>)
 800ec5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec60:	4a22      	ldr	r2, [pc, #136]	; (800ecec <HAL_GPIO_Init+0x398>)
 800ec62:	f043 0301 	orr.w	r3, r3, #1
 800ec66:	6613      	str	r3, [r2, #96]	; 0x60
 800ec68:	4b20      	ldr	r3, [pc, #128]	; (800ecec <HAL_GPIO_Init+0x398>)
 800ec6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec6c:	f003 0301 	and.w	r3, r3, #1
 800ec70:	60bb      	str	r3, [r7, #8]
 800ec72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800ec74:	4a1e      	ldr	r2, [pc, #120]	; (800ecf0 <HAL_GPIO_Init+0x39c>)
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	089b      	lsrs	r3, r3, #2
 800ec7a:	3302      	adds	r3, #2
 800ec7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800ec82:	697b      	ldr	r3, [r7, #20]
 800ec84:	f003 0303 	and.w	r3, r3, #3
 800ec88:	009b      	lsls	r3, r3, #2
 800ec8a:	220f      	movs	r2, #15
 800ec8c:	fa02 f303 	lsl.w	r3, r2, r3
 800ec90:	43db      	mvns	r3, r3
 800ec92:	693a      	ldr	r2, [r7, #16]
 800ec94:	4013      	ands	r3, r2
 800ec96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800ec9e:	d029      	beq.n	800ecf4 <HAL_GPIO_Init+0x3a0>
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	4a0d      	ldr	r2, [pc, #52]	; (800ecd8 <HAL_GPIO_Init+0x384>)
 800eca4:	4293      	cmp	r3, r2
 800eca6:	d013      	beq.n	800ecd0 <HAL_GPIO_Init+0x37c>
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	4a0c      	ldr	r2, [pc, #48]	; (800ecdc <HAL_GPIO_Init+0x388>)
 800ecac:	4293      	cmp	r3, r2
 800ecae:	d00d      	beq.n	800eccc <HAL_GPIO_Init+0x378>
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	4a0b      	ldr	r2, [pc, #44]	; (800ece0 <HAL_GPIO_Init+0x38c>)
 800ecb4:	4293      	cmp	r3, r2
 800ecb6:	d007      	beq.n	800ecc8 <HAL_GPIO_Init+0x374>
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	4a0a      	ldr	r2, [pc, #40]	; (800ece4 <HAL_GPIO_Init+0x390>)
 800ecbc:	4293      	cmp	r3, r2
 800ecbe:	d101      	bne.n	800ecc4 <HAL_GPIO_Init+0x370>
 800ecc0:	2304      	movs	r3, #4
 800ecc2:	e018      	b.n	800ecf6 <HAL_GPIO_Init+0x3a2>
 800ecc4:	2307      	movs	r3, #7
 800ecc6:	e016      	b.n	800ecf6 <HAL_GPIO_Init+0x3a2>
 800ecc8:	2303      	movs	r3, #3
 800ecca:	e014      	b.n	800ecf6 <HAL_GPIO_Init+0x3a2>
 800eccc:	2302      	movs	r3, #2
 800ecce:	e012      	b.n	800ecf6 <HAL_GPIO_Init+0x3a2>
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	e010      	b.n	800ecf6 <HAL_GPIO_Init+0x3a2>
 800ecd4:	0801b95c 	.word	0x0801b95c
 800ecd8:	48000400 	.word	0x48000400
 800ecdc:	48000800 	.word	0x48000800
 800ece0:	48000c00 	.word	0x48000c00
 800ece4:	48001000 	.word	0x48001000
 800ece8:	48001c00 	.word	0x48001c00
 800ecec:	40021000 	.word	0x40021000
 800ecf0:	40010000 	.word	0x40010000
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	697a      	ldr	r2, [r7, #20]
 800ecf8:	f002 0203 	and.w	r2, r2, #3
 800ecfc:	0092      	lsls	r2, r2, #2
 800ecfe:	4093      	lsls	r3, r2
 800ed00:	693a      	ldr	r2, [r7, #16]
 800ed02:	4313      	orrs	r3, r2
 800ed04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800ed06:	4935      	ldr	r1, [pc, #212]	; (800eddc <HAL_GPIO_Init+0x488>)
 800ed08:	697b      	ldr	r3, [r7, #20]
 800ed0a:	089b      	lsrs	r3, r3, #2
 800ed0c:	3302      	adds	r3, #2
 800ed0e:	693a      	ldr	r2, [r7, #16]
 800ed10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ed14:	4b32      	ldr	r3, [pc, #200]	; (800ede0 <HAL_GPIO_Init+0x48c>)
 800ed16:	689b      	ldr	r3, [r3, #8]
 800ed18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	43db      	mvns	r3, r3
 800ed1e:	693a      	ldr	r2, [r7, #16]
 800ed20:	4013      	ands	r3, r2
 800ed22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	685b      	ldr	r3, [r3, #4]
 800ed28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d003      	beq.n	800ed38 <HAL_GPIO_Init+0x3e4>
        {
          temp |= iocurrent;
 800ed30:	693a      	ldr	r2, [r7, #16]
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	4313      	orrs	r3, r2
 800ed36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800ed38:	4a29      	ldr	r2, [pc, #164]	; (800ede0 <HAL_GPIO_Init+0x48c>)
 800ed3a:	693b      	ldr	r3, [r7, #16]
 800ed3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800ed3e:	4b28      	ldr	r3, [pc, #160]	; (800ede0 <HAL_GPIO_Init+0x48c>)
 800ed40:	68db      	ldr	r3, [r3, #12]
 800ed42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	43db      	mvns	r3, r3
 800ed48:	693a      	ldr	r2, [r7, #16]
 800ed4a:	4013      	ands	r3, r2
 800ed4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	685b      	ldr	r3, [r3, #4]
 800ed52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d003      	beq.n	800ed62 <HAL_GPIO_Init+0x40e>
        {
          temp |= iocurrent;
 800ed5a:	693a      	ldr	r2, [r7, #16]
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	4313      	orrs	r3, r2
 800ed60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800ed62:	4a1f      	ldr	r2, [pc, #124]	; (800ede0 <HAL_GPIO_Init+0x48c>)
 800ed64:	693b      	ldr	r3, [r7, #16]
 800ed66:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800ed68:	4b1d      	ldr	r3, [pc, #116]	; (800ede0 <HAL_GPIO_Init+0x48c>)
 800ed6a:	685b      	ldr	r3, [r3, #4]
 800ed6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	43db      	mvns	r3, r3
 800ed72:	693a      	ldr	r2, [r7, #16]
 800ed74:	4013      	ands	r3, r2
 800ed76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	685b      	ldr	r3, [r3, #4]
 800ed7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d003      	beq.n	800ed8c <HAL_GPIO_Init+0x438>
        {
          temp |= iocurrent;
 800ed84:	693a      	ldr	r2, [r7, #16]
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	4313      	orrs	r3, r2
 800ed8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800ed8c:	4a14      	ldr	r2, [pc, #80]	; (800ede0 <HAL_GPIO_Init+0x48c>)
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800ed92:	4b13      	ldr	r3, [pc, #76]	; (800ede0 <HAL_GPIO_Init+0x48c>)
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	43db      	mvns	r3, r3
 800ed9c:	693a      	ldr	r2, [r7, #16]
 800ed9e:	4013      	ands	r3, r2
 800eda0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	685b      	ldr	r3, [r3, #4]
 800eda6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d003      	beq.n	800edb6 <HAL_GPIO_Init+0x462>
        {
          temp |= iocurrent;
 800edae:	693a      	ldr	r2, [r7, #16]
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	4313      	orrs	r3, r2
 800edb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800edb6:	4a0a      	ldr	r2, [pc, #40]	; (800ede0 <HAL_GPIO_Init+0x48c>)
 800edb8:	693b      	ldr	r3, [r7, #16]
 800edba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800edbc:	697b      	ldr	r3, [r7, #20]
 800edbe:	3301      	adds	r3, #1
 800edc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	681a      	ldr	r2, [r3, #0]
 800edc6:	697b      	ldr	r3, [r7, #20]
 800edc8:	fa22 f303 	lsr.w	r3, r2, r3
 800edcc:	2b00      	cmp	r3, #0
 800edce:	f47f ae4b 	bne.w	800ea68 <HAL_GPIO_Init+0x114>
  }
}
 800edd2:	bf00      	nop
 800edd4:	bf00      	nop
 800edd6:	3718      	adds	r7, #24
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}
 800eddc:	40010000 	.word	0x40010000
 800ede0:	40010400 	.word	0x40010400

0800ede4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b086      	sub	sp, #24
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
 800edec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800edee:	2300      	movs	r3, #0
 800edf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800edf8:	d018      	beq.n	800ee2c <HAL_GPIO_DeInit+0x48>
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	4a75      	ldr	r2, [pc, #468]	; (800efd4 <HAL_GPIO_DeInit+0x1f0>)
 800edfe:	4293      	cmp	r3, r2
 800ee00:	d014      	beq.n	800ee2c <HAL_GPIO_DeInit+0x48>
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	4a74      	ldr	r2, [pc, #464]	; (800efd8 <HAL_GPIO_DeInit+0x1f4>)
 800ee06:	4293      	cmp	r3, r2
 800ee08:	d010      	beq.n	800ee2c <HAL_GPIO_DeInit+0x48>
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	4a73      	ldr	r2, [pc, #460]	; (800efdc <HAL_GPIO_DeInit+0x1f8>)
 800ee0e:	4293      	cmp	r3, r2
 800ee10:	d00c      	beq.n	800ee2c <HAL_GPIO_DeInit+0x48>
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	4a72      	ldr	r2, [pc, #456]	; (800efe0 <HAL_GPIO_DeInit+0x1fc>)
 800ee16:	4293      	cmp	r3, r2
 800ee18:	d008      	beq.n	800ee2c <HAL_GPIO_DeInit+0x48>
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	4a71      	ldr	r2, [pc, #452]	; (800efe4 <HAL_GPIO_DeInit+0x200>)
 800ee1e:	4293      	cmp	r3, r2
 800ee20:	d004      	beq.n	800ee2c <HAL_GPIO_DeInit+0x48>
 800ee22:	f44f 719d 	mov.w	r1, #314	; 0x13a
 800ee26:	4870      	ldr	r0, [pc, #448]	; (800efe8 <HAL_GPIO_DeInit+0x204>)
 800ee28:	f7f5 fbac 	bl	8004584 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	b29b      	uxth	r3, r3
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d005      	beq.n	800ee40 <HAL_GPIO_DeInit+0x5c>
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	0c1b      	lsrs	r3, r3, #16
 800ee38:	041b      	lsls	r3, r3, #16
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	f000 80be 	beq.w	800efbc <HAL_GPIO_DeInit+0x1d8>
 800ee40:	f240 113b 	movw	r1, #315	; 0x13b
 800ee44:	4868      	ldr	r0, [pc, #416]	; (800efe8 <HAL_GPIO_DeInit+0x204>)
 800ee46:	f7f5 fb9d 	bl	8004584 <assert_failed>

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800ee4a:	e0b7      	b.n	800efbc <HAL_GPIO_DeInit+0x1d8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800ee4c:	2201      	movs	r2, #1
 800ee4e:	697b      	ldr	r3, [r7, #20]
 800ee50:	fa02 f303 	lsl.w	r3, r2, r3
 800ee54:	683a      	ldr	r2, [r7, #0]
 800ee56:	4013      	ands	r3, r2
 800ee58:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800ee5a:	693b      	ldr	r3, [r7, #16]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	f000 80aa 	beq.w	800efb6 <HAL_GPIO_DeInit+0x1d2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800ee62:	4a62      	ldr	r2, [pc, #392]	; (800efec <HAL_GPIO_DeInit+0x208>)
 800ee64:	697b      	ldr	r3, [r7, #20]
 800ee66:	089b      	lsrs	r3, r3, #2
 800ee68:	3302      	adds	r3, #2
 800ee6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee6e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800ee70:	697b      	ldr	r3, [r7, #20]
 800ee72:	f003 0303 	and.w	r3, r3, #3
 800ee76:	009b      	lsls	r3, r3, #2
 800ee78:	220f      	movs	r2, #15
 800ee7a:	fa02 f303 	lsl.w	r3, r2, r3
 800ee7e:	68fa      	ldr	r2, [r7, #12]
 800ee80:	4013      	ands	r3, r2
 800ee82:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800ee8a:	d019      	beq.n	800eec0 <HAL_GPIO_DeInit+0xdc>
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	4a51      	ldr	r2, [pc, #324]	; (800efd4 <HAL_GPIO_DeInit+0x1f0>)
 800ee90:	4293      	cmp	r3, r2
 800ee92:	d013      	beq.n	800eebc <HAL_GPIO_DeInit+0xd8>
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	4a50      	ldr	r2, [pc, #320]	; (800efd8 <HAL_GPIO_DeInit+0x1f4>)
 800ee98:	4293      	cmp	r3, r2
 800ee9a:	d00d      	beq.n	800eeb8 <HAL_GPIO_DeInit+0xd4>
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	4a4f      	ldr	r2, [pc, #316]	; (800efdc <HAL_GPIO_DeInit+0x1f8>)
 800eea0:	4293      	cmp	r3, r2
 800eea2:	d007      	beq.n	800eeb4 <HAL_GPIO_DeInit+0xd0>
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	4a4e      	ldr	r2, [pc, #312]	; (800efe0 <HAL_GPIO_DeInit+0x1fc>)
 800eea8:	4293      	cmp	r3, r2
 800eeaa:	d101      	bne.n	800eeb0 <HAL_GPIO_DeInit+0xcc>
 800eeac:	2304      	movs	r3, #4
 800eeae:	e008      	b.n	800eec2 <HAL_GPIO_DeInit+0xde>
 800eeb0:	2307      	movs	r3, #7
 800eeb2:	e006      	b.n	800eec2 <HAL_GPIO_DeInit+0xde>
 800eeb4:	2303      	movs	r3, #3
 800eeb6:	e004      	b.n	800eec2 <HAL_GPIO_DeInit+0xde>
 800eeb8:	2302      	movs	r3, #2
 800eeba:	e002      	b.n	800eec2 <HAL_GPIO_DeInit+0xde>
 800eebc:	2301      	movs	r3, #1
 800eebe:	e000      	b.n	800eec2 <HAL_GPIO_DeInit+0xde>
 800eec0:	2300      	movs	r3, #0
 800eec2:	697a      	ldr	r2, [r7, #20]
 800eec4:	f002 0203 	and.w	r2, r2, #3
 800eec8:	0092      	lsls	r2, r2, #2
 800eeca:	4093      	lsls	r3, r2
 800eecc:	68fa      	ldr	r2, [r7, #12]
 800eece:	429a      	cmp	r2, r3
 800eed0:	d132      	bne.n	800ef38 <HAL_GPIO_DeInit+0x154>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800eed2:	4b47      	ldr	r3, [pc, #284]	; (800eff0 <HAL_GPIO_DeInit+0x20c>)
 800eed4:	681a      	ldr	r2, [r3, #0]
 800eed6:	693b      	ldr	r3, [r7, #16]
 800eed8:	43db      	mvns	r3, r3
 800eeda:	4945      	ldr	r1, [pc, #276]	; (800eff0 <HAL_GPIO_DeInit+0x20c>)
 800eedc:	4013      	ands	r3, r2
 800eede:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800eee0:	4b43      	ldr	r3, [pc, #268]	; (800eff0 <HAL_GPIO_DeInit+0x20c>)
 800eee2:	685a      	ldr	r2, [r3, #4]
 800eee4:	693b      	ldr	r3, [r7, #16]
 800eee6:	43db      	mvns	r3, r3
 800eee8:	4941      	ldr	r1, [pc, #260]	; (800eff0 <HAL_GPIO_DeInit+0x20c>)
 800eeea:	4013      	ands	r3, r2
 800eeec:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800eeee:	4b40      	ldr	r3, [pc, #256]	; (800eff0 <HAL_GPIO_DeInit+0x20c>)
 800eef0:	68da      	ldr	r2, [r3, #12]
 800eef2:	693b      	ldr	r3, [r7, #16]
 800eef4:	43db      	mvns	r3, r3
 800eef6:	493e      	ldr	r1, [pc, #248]	; (800eff0 <HAL_GPIO_DeInit+0x20c>)
 800eef8:	4013      	ands	r3, r2
 800eefa:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800eefc:	4b3c      	ldr	r3, [pc, #240]	; (800eff0 <HAL_GPIO_DeInit+0x20c>)
 800eefe:	689a      	ldr	r2, [r3, #8]
 800ef00:	693b      	ldr	r3, [r7, #16]
 800ef02:	43db      	mvns	r3, r3
 800ef04:	493a      	ldr	r1, [pc, #232]	; (800eff0 <HAL_GPIO_DeInit+0x20c>)
 800ef06:	4013      	ands	r3, r2
 800ef08:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800ef0a:	697b      	ldr	r3, [r7, #20]
 800ef0c:	f003 0303 	and.w	r3, r3, #3
 800ef10:	009b      	lsls	r3, r3, #2
 800ef12:	220f      	movs	r2, #15
 800ef14:	fa02 f303 	lsl.w	r3, r2, r3
 800ef18:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800ef1a:	4a34      	ldr	r2, [pc, #208]	; (800efec <HAL_GPIO_DeInit+0x208>)
 800ef1c:	697b      	ldr	r3, [r7, #20]
 800ef1e:	089b      	lsrs	r3, r3, #2
 800ef20:	3302      	adds	r3, #2
 800ef22:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	43da      	mvns	r2, r3
 800ef2a:	4830      	ldr	r0, [pc, #192]	; (800efec <HAL_GPIO_DeInit+0x208>)
 800ef2c:	697b      	ldr	r3, [r7, #20]
 800ef2e:	089b      	lsrs	r3, r3, #2
 800ef30:	400a      	ands	r2, r1
 800ef32:	3302      	adds	r3, #2
 800ef34:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681a      	ldr	r2, [r3, #0]
 800ef3c:	697b      	ldr	r3, [r7, #20]
 800ef3e:	005b      	lsls	r3, r3, #1
 800ef40:	2103      	movs	r1, #3
 800ef42:	fa01 f303 	lsl.w	r3, r1, r3
 800ef46:	431a      	orrs	r2, r3
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800ef4c:	697b      	ldr	r3, [r7, #20]
 800ef4e:	08da      	lsrs	r2, r3, #3
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	3208      	adds	r2, #8
 800ef54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ef58:	697b      	ldr	r3, [r7, #20]
 800ef5a:	f003 0307 	and.w	r3, r3, #7
 800ef5e:	009b      	lsls	r3, r3, #2
 800ef60:	220f      	movs	r2, #15
 800ef62:	fa02 f303 	lsl.w	r3, r2, r3
 800ef66:	43db      	mvns	r3, r3
 800ef68:	697a      	ldr	r2, [r7, #20]
 800ef6a:	08d2      	lsrs	r2, r2, #3
 800ef6c:	4019      	ands	r1, r3
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	3208      	adds	r2, #8
 800ef72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	689a      	ldr	r2, [r3, #8]
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	005b      	lsls	r3, r3, #1
 800ef7e:	2103      	movs	r1, #3
 800ef80:	fa01 f303 	lsl.w	r3, r1, r3
 800ef84:	43db      	mvns	r3, r3
 800ef86:	401a      	ands	r2, r3
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	685a      	ldr	r2, [r3, #4]
 800ef90:	2101      	movs	r1, #1
 800ef92:	697b      	ldr	r3, [r7, #20]
 800ef94:	fa01 f303 	lsl.w	r3, r1, r3
 800ef98:	43db      	mvns	r3, r3
 800ef9a:	401a      	ands	r2, r3
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	68da      	ldr	r2, [r3, #12]
 800efa4:	697b      	ldr	r3, [r7, #20]
 800efa6:	005b      	lsls	r3, r3, #1
 800efa8:	2103      	movs	r1, #3
 800efaa:	fa01 f303 	lsl.w	r3, r1, r3
 800efae:	43db      	mvns	r3, r3
 800efb0:	401a      	ands	r2, r3
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800efb6:	697b      	ldr	r3, [r7, #20]
 800efb8:	3301      	adds	r3, #1
 800efba:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800efbc:	683a      	ldr	r2, [r7, #0]
 800efbe:	697b      	ldr	r3, [r7, #20]
 800efc0:	fa22 f303 	lsr.w	r3, r2, r3
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	f47f af41 	bne.w	800ee4c <HAL_GPIO_DeInit+0x68>
  }
}
 800efca:	bf00      	nop
 800efcc:	bf00      	nop
 800efce:	3718      	adds	r7, #24
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}
 800efd4:	48000400 	.word	0x48000400
 800efd8:	48000800 	.word	0x48000800
 800efdc:	48000c00 	.word	0x48000c00
 800efe0:	48001000 	.word	0x48001000
 800efe4:	48001c00 	.word	0x48001c00
 800efe8:	0801b95c 	.word	0x0801b95c
 800efec:	40010000 	.word	0x40010000
 800eff0:	40010400 	.word	0x40010400

0800eff4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b084      	sub	sp, #16
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
 800effc:	460b      	mov	r3, r1
 800effe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800f000:	887b      	ldrh	r3, [r7, #2]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d004      	beq.n	800f010 <HAL_GPIO_ReadPin+0x1c>
 800f006:	887b      	ldrh	r3, [r7, #2]
 800f008:	0c1b      	lsrs	r3, r3, #16
 800f00a:	041b      	lsls	r3, r3, #16
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d004      	beq.n	800f01a <HAL_GPIO_ReadPin+0x26>
 800f010:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 800f014:	4809      	ldr	r0, [pc, #36]	; (800f03c <HAL_GPIO_ReadPin+0x48>)
 800f016:	f7f5 fab5 	bl	8004584 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	691a      	ldr	r2, [r3, #16]
 800f01e:	887b      	ldrh	r3, [r7, #2]
 800f020:	4013      	ands	r3, r2
 800f022:	2b00      	cmp	r3, #0
 800f024:	d002      	beq.n	800f02c <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 800f026:	2301      	movs	r3, #1
 800f028:	73fb      	strb	r3, [r7, #15]
 800f02a:	e001      	b.n	800f030 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800f02c:	2300      	movs	r3, #0
 800f02e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800f030:	7bfb      	ldrb	r3, [r7, #15]
}
 800f032:	4618      	mov	r0, r3
 800f034:	3710      	adds	r7, #16
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}
 800f03a:	bf00      	nop
 800f03c:	0801b95c 	.word	0x0801b95c

0800f040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b082      	sub	sp, #8
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
 800f048:	460b      	mov	r3, r1
 800f04a:	807b      	strh	r3, [r7, #2]
 800f04c:	4613      	mov	r3, r2
 800f04e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800f050:	887b      	ldrh	r3, [r7, #2]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d004      	beq.n	800f060 <HAL_GPIO_WritePin+0x20>
 800f056:	887b      	ldrh	r3, [r7, #2]
 800f058:	0c1b      	lsrs	r3, r3, #16
 800f05a:	041b      	lsls	r3, r3, #16
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d004      	beq.n	800f06a <HAL_GPIO_WritePin+0x2a>
 800f060:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f064:	480d      	ldr	r0, [pc, #52]	; (800f09c <HAL_GPIO_WritePin+0x5c>)
 800f066:	f7f5 fa8d 	bl	8004584 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800f06a:	787b      	ldrb	r3, [r7, #1]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d007      	beq.n	800f080 <HAL_GPIO_WritePin+0x40>
 800f070:	787b      	ldrb	r3, [r7, #1]
 800f072:	2b01      	cmp	r3, #1
 800f074:	d004      	beq.n	800f080 <HAL_GPIO_WritePin+0x40>
 800f076:	f240 11af 	movw	r1, #431	; 0x1af
 800f07a:	4808      	ldr	r0, [pc, #32]	; (800f09c <HAL_GPIO_WritePin+0x5c>)
 800f07c:	f7f5 fa82 	bl	8004584 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 800f080:	787b      	ldrb	r3, [r7, #1]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d003      	beq.n	800f08e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800f086:	887a      	ldrh	r2, [r7, #2]
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800f08c:	e002      	b.n	800f094 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800f08e:	887a      	ldrh	r2, [r7, #2]
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f094:	bf00      	nop
 800f096:	3708      	adds	r7, #8
 800f098:	46bd      	mov	sp, r7
 800f09a:	bd80      	pop	{r7, pc}
 800f09c:	0801b95c 	.word	0x0801b95c

0800f0a0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b084      	sub	sp, #16
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	6078      	str	r0, [r7, #4]
 800f0a8:	460b      	mov	r3, r1
 800f0aa:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800f0ac:	887b      	ldrh	r3, [r7, #2]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d004      	beq.n	800f0bc <HAL_GPIO_TogglePin+0x1c>
 800f0b2:	887b      	ldrh	r3, [r7, #2]
 800f0b4:	0c1b      	lsrs	r3, r3, #16
 800f0b6:	041b      	lsls	r3, r3, #16
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d004      	beq.n	800f0c6 <HAL_GPIO_TogglePin+0x26>
 800f0bc:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800f0c0:	480a      	ldr	r0, [pc, #40]	; (800f0ec <HAL_GPIO_TogglePin+0x4c>)
 800f0c2:	f7f5 fa5f 	bl	8004584 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	695b      	ldr	r3, [r3, #20]
 800f0ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800f0cc:	887a      	ldrh	r2, [r7, #2]
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	4013      	ands	r3, r2
 800f0d2:	041a      	lsls	r2, r3, #16
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	43d9      	mvns	r1, r3
 800f0d8:	887b      	ldrh	r3, [r7, #2]
 800f0da:	400b      	ands	r3, r1
 800f0dc:	431a      	orrs	r2, r3
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	619a      	str	r2, [r3, #24]
}
 800f0e2:	bf00      	nop
 800f0e4:	3710      	adds	r7, #16
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}
 800f0ea:	bf00      	nop
 800f0ec:	0801b95c 	.word	0x0801b95c

0800f0f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b082      	sub	sp, #8
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800f0fa:	4b08      	ldr	r3, [pc, #32]	; (800f11c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800f0fc:	695a      	ldr	r2, [r3, #20]
 800f0fe:	88fb      	ldrh	r3, [r7, #6]
 800f100:	4013      	ands	r3, r2
 800f102:	2b00      	cmp	r3, #0
 800f104:	d006      	beq.n	800f114 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800f106:	4a05      	ldr	r2, [pc, #20]	; (800f11c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800f108:	88fb      	ldrh	r3, [r7, #6]
 800f10a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800f10c:	88fb      	ldrh	r3, [r7, #6]
 800f10e:	4618      	mov	r0, r3
 800f110:	f7fa f930 	bl	8009374 <HAL_GPIO_EXTI_Callback>
  }
}
 800f114:	bf00      	nop
 800f116:	3708      	adds	r7, #8
 800f118:	46bd      	mov	sp, r7
 800f11a:	bd80      	pop	{r7, pc}
 800f11c:	40010400 	.word	0x40010400

0800f120 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b082      	sub	sp, #8
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d101      	bne.n	800f132 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800f12e:	2301      	movs	r3, #1
 800f130:	e104      	b.n	800f33c <HAL_I2C_Init+0x21c>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	4a83      	ldr	r2, [pc, #524]	; (800f344 <HAL_I2C_Init+0x224>)
 800f138:	4293      	cmp	r3, r2
 800f13a:	d00e      	beq.n	800f15a <HAL_I2C_Init+0x3a>
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	4a81      	ldr	r2, [pc, #516]	; (800f348 <HAL_I2C_Init+0x228>)
 800f142:	4293      	cmp	r3, r2
 800f144:	d009      	beq.n	800f15a <HAL_I2C_Init+0x3a>
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	4a80      	ldr	r2, [pc, #512]	; (800f34c <HAL_I2C_Init+0x22c>)
 800f14c:	4293      	cmp	r3, r2
 800f14e:	d004      	beq.n	800f15a <HAL_I2C_Init+0x3a>
 800f150:	f240 2119 	movw	r1, #537	; 0x219
 800f154:	487e      	ldr	r0, [pc, #504]	; (800f350 <HAL_I2C_Init+0x230>)
 800f156:	f7f5 fa15 	bl	8004584 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	689b      	ldr	r3, [r3, #8]
 800f15e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f162:	d304      	bcc.n	800f16e <HAL_I2C_Init+0x4e>
 800f164:	f240 211a 	movw	r1, #538	; 0x21a
 800f168:	4879      	ldr	r0, [pc, #484]	; (800f350 <HAL_I2C_Init+0x230>)
 800f16a:	f7f5 fa0b 	bl	8004584 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	68db      	ldr	r3, [r3, #12]
 800f172:	2b01      	cmp	r3, #1
 800f174:	d008      	beq.n	800f188 <HAL_I2C_Init+0x68>
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	68db      	ldr	r3, [r3, #12]
 800f17a:	2b02      	cmp	r3, #2
 800f17c:	d004      	beq.n	800f188 <HAL_I2C_Init+0x68>
 800f17e:	f240 211b 	movw	r1, #539	; 0x21b
 800f182:	4873      	ldr	r0, [pc, #460]	; (800f350 <HAL_I2C_Init+0x230>)
 800f184:	f7f5 f9fe 	bl	8004584 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	691b      	ldr	r3, [r3, #16]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d009      	beq.n	800f1a4 <HAL_I2C_Init+0x84>
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	691b      	ldr	r3, [r3, #16]
 800f194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f198:	d004      	beq.n	800f1a4 <HAL_I2C_Init+0x84>
 800f19a:	f44f 7107 	mov.w	r1, #540	; 0x21c
 800f19e:	486c      	ldr	r0, [pc, #432]	; (800f350 <HAL_I2C_Init+0x230>)
 800f1a0:	f7f5 f9f0 	bl	8004584 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	695b      	ldr	r3, [r3, #20]
 800f1a8:	2bff      	cmp	r3, #255	; 0xff
 800f1aa:	d904      	bls.n	800f1b6 <HAL_I2C_Init+0x96>
 800f1ac:	f240 211d 	movw	r1, #541	; 0x21d
 800f1b0:	4867      	ldr	r0, [pc, #412]	; (800f350 <HAL_I2C_Init+0x230>)
 800f1b2:	f7f5 f9e7 	bl	8004584 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	699b      	ldr	r3, [r3, #24]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d020      	beq.n	800f200 <HAL_I2C_Init+0xe0>
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	699b      	ldr	r3, [r3, #24]
 800f1c2:	2b01      	cmp	r3, #1
 800f1c4:	d01c      	beq.n	800f200 <HAL_I2C_Init+0xe0>
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	699b      	ldr	r3, [r3, #24]
 800f1ca:	2b02      	cmp	r3, #2
 800f1cc:	d018      	beq.n	800f200 <HAL_I2C_Init+0xe0>
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	699b      	ldr	r3, [r3, #24]
 800f1d2:	2b03      	cmp	r3, #3
 800f1d4:	d014      	beq.n	800f200 <HAL_I2C_Init+0xe0>
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	699b      	ldr	r3, [r3, #24]
 800f1da:	2b04      	cmp	r3, #4
 800f1dc:	d010      	beq.n	800f200 <HAL_I2C_Init+0xe0>
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	699b      	ldr	r3, [r3, #24]
 800f1e2:	2b05      	cmp	r3, #5
 800f1e4:	d00c      	beq.n	800f200 <HAL_I2C_Init+0xe0>
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	699b      	ldr	r3, [r3, #24]
 800f1ea:	2b06      	cmp	r3, #6
 800f1ec:	d008      	beq.n	800f200 <HAL_I2C_Init+0xe0>
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	699b      	ldr	r3, [r3, #24]
 800f1f2:	2b07      	cmp	r3, #7
 800f1f4:	d004      	beq.n	800f200 <HAL_I2C_Init+0xe0>
 800f1f6:	f240 211e 	movw	r1, #542	; 0x21e
 800f1fa:	4855      	ldr	r0, [pc, #340]	; (800f350 <HAL_I2C_Init+0x230>)
 800f1fc:	f7f5 f9c2 	bl	8004584 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	69db      	ldr	r3, [r3, #28]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d009      	beq.n	800f21c <HAL_I2C_Init+0xfc>
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	69db      	ldr	r3, [r3, #28]
 800f20c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800f210:	d004      	beq.n	800f21c <HAL_I2C_Init+0xfc>
 800f212:	f240 211f 	movw	r1, #543	; 0x21f
 800f216:	484e      	ldr	r0, [pc, #312]	; (800f350 <HAL_I2C_Init+0x230>)
 800f218:	f7f5 f9b4 	bl	8004584 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	6a1b      	ldr	r3, [r3, #32]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d009      	beq.n	800f238 <HAL_I2C_Init+0x118>
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	6a1b      	ldr	r3, [r3, #32]
 800f228:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f22c:	d004      	beq.n	800f238 <HAL_I2C_Init+0x118>
 800f22e:	f44f 7108 	mov.w	r1, #544	; 0x220
 800f232:	4847      	ldr	r0, [pc, #284]	; (800f350 <HAL_I2C_Init+0x230>)
 800f234:	f7f5 f9a6 	bl	8004584 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f23e:	b2db      	uxtb	r3, r3
 800f240:	2b00      	cmp	r3, #0
 800f242:	d106      	bne.n	800f252 <HAL_I2C_Init+0x132>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	2200      	movs	r2, #0
 800f248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800f24c:	6878      	ldr	r0, [r7, #4]
 800f24e:	f7f4 ff61 	bl	8004114 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	2224      	movs	r2, #36	; 0x24
 800f256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	681a      	ldr	r2, [r3, #0]
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	f022 0201 	bic.w	r2, r2, #1
 800f268:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	685a      	ldr	r2, [r3, #4]
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800f276:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	689a      	ldr	r2, [r3, #8]
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f286:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	68db      	ldr	r3, [r3, #12]
 800f28c:	2b01      	cmp	r3, #1
 800f28e:	d107      	bne.n	800f2a0 <HAL_I2C_Init+0x180>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	689a      	ldr	r2, [r3, #8]
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f29c:	609a      	str	r2, [r3, #8]
 800f29e:	e006      	b.n	800f2ae <HAL_I2C_Init+0x18e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	689a      	ldr	r2, [r3, #8]
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800f2ac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	68db      	ldr	r3, [r3, #12]
 800f2b2:	2b02      	cmp	r3, #2
 800f2b4:	d104      	bne.n	800f2c0 <HAL_I2C_Init+0x1a0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f2be:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	685b      	ldr	r3, [r3, #4]
 800f2c6:	687a      	ldr	r2, [r7, #4]
 800f2c8:	6812      	ldr	r2, [r2, #0]
 800f2ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f2ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f2d2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	68da      	ldr	r2, [r3, #12]
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f2e2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	691a      	ldr	r2, [r3, #16]
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	695b      	ldr	r3, [r3, #20]
 800f2ec:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	699b      	ldr	r3, [r3, #24]
 800f2f4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	430a      	orrs	r2, r1
 800f2fc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	69d9      	ldr	r1, [r3, #28]
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6a1a      	ldr	r2, [r3, #32]
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	430a      	orrs	r2, r1
 800f30c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	681a      	ldr	r2, [r3, #0]
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	f042 0201 	orr.w	r2, r2, #1
 800f31c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	2200      	movs	r2, #0
 800f322:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2220      	movs	r2, #32
 800f328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2200      	movs	r2, #0
 800f330:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	2200      	movs	r2, #0
 800f336:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800f33a:	2300      	movs	r3, #0
}
 800f33c:	4618      	mov	r0, r3
 800f33e:	3708      	adds	r7, #8
 800f340:	46bd      	mov	sp, r7
 800f342:	bd80      	pop	{r7, pc}
 800f344:	40005400 	.word	0x40005400
 800f348:	40005800 	.word	0x40005800
 800f34c:	40005c00 	.word	0x40005c00
 800f350:	0801b998 	.word	0x0801b998

0800f354 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b088      	sub	sp, #32
 800f358:	af02      	add	r7, sp, #8
 800f35a:	60f8      	str	r0, [r7, #12]
 800f35c:	4608      	mov	r0, r1
 800f35e:	4611      	mov	r1, r2
 800f360:	461a      	mov	r2, r3
 800f362:	4603      	mov	r3, r0
 800f364:	817b      	strh	r3, [r7, #10]
 800f366:	460b      	mov	r3, r1
 800f368:	813b      	strh	r3, [r7, #8]
 800f36a:	4613      	mov	r3, r2
 800f36c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800f36e:	88fb      	ldrh	r3, [r7, #6]
 800f370:	2b01      	cmp	r3, #1
 800f372:	d007      	beq.n	800f384 <HAL_I2C_Mem_Write+0x30>
 800f374:	88fb      	ldrh	r3, [r7, #6]
 800f376:	2b02      	cmp	r3, #2
 800f378:	d004      	beq.n	800f384 <HAL_I2C_Mem_Write+0x30>
 800f37a:	f640 114f 	movw	r1, #2383	; 0x94f
 800f37e:	4884      	ldr	r0, [pc, #528]	; (800f590 <HAL_I2C_Mem_Write+0x23c>)
 800f380:	f7f5 f900 	bl	8004584 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f38a:	b2db      	uxtb	r3, r3
 800f38c:	2b20      	cmp	r3, #32
 800f38e:	f040 80f9 	bne.w	800f584 <HAL_I2C_Mem_Write+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
 800f392:	6a3b      	ldr	r3, [r7, #32]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d002      	beq.n	800f39e <HAL_I2C_Mem_Write+0x4a>
 800f398:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d105      	bne.n	800f3aa <HAL_I2C_Mem_Write+0x56>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f3a4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800f3a6:	2301      	movs	r3, #1
 800f3a8:	e0ed      	b.n	800f586 <HAL_I2C_Mem_Write+0x232>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f3b0:	2b01      	cmp	r3, #1
 800f3b2:	d101      	bne.n	800f3b8 <HAL_I2C_Mem_Write+0x64>
 800f3b4:	2302      	movs	r3, #2
 800f3b6:	e0e6      	b.n	800f586 <HAL_I2C_Mem_Write+0x232>
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	2201      	movs	r2, #1
 800f3bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800f3c0:	f7fb f8b0 	bl	800a524 <HAL_GetTick>
 800f3c4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800f3c6:	697b      	ldr	r3, [r7, #20]
 800f3c8:	9300      	str	r3, [sp, #0]
 800f3ca:	2319      	movs	r3, #25
 800f3cc:	2201      	movs	r2, #1
 800f3ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f3d2:	68f8      	ldr	r0, [r7, #12]
 800f3d4:	f000 ffe9 	bl	80103aa <I2C_WaitOnFlagUntilTimeout>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d001      	beq.n	800f3e2 <HAL_I2C_Mem_Write+0x8e>
    {
      return HAL_ERROR;
 800f3de:	2301      	movs	r3, #1
 800f3e0:	e0d1      	b.n	800f586 <HAL_I2C_Mem_Write+0x232>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	2221      	movs	r2, #33	; 0x21
 800f3e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	2240      	movs	r2, #64	; 0x40
 800f3ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	6a3a      	ldr	r2, [r7, #32]
 800f3fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f402:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	2200      	movs	r2, #0
 800f408:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800f40a:	88f8      	ldrh	r0, [r7, #6]
 800f40c:	893a      	ldrh	r2, [r7, #8]
 800f40e:	8979      	ldrh	r1, [r7, #10]
 800f410:	697b      	ldr	r3, [r7, #20]
 800f412:	9301      	str	r3, [sp, #4]
 800f414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f416:	9300      	str	r3, [sp, #0]
 800f418:	4603      	mov	r3, r0
 800f41a:	68f8      	ldr	r0, [r7, #12]
 800f41c:	f000 fba2 	bl	800fb64 <I2C_RequestMemoryWrite>
 800f420:	4603      	mov	r3, r0
 800f422:	2b00      	cmp	r3, #0
 800f424:	d005      	beq.n	800f432 <HAL_I2C_Mem_Write+0xde>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	2200      	movs	r2, #0
 800f42a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800f42e:	2301      	movs	r3, #1
 800f430:	e0a9      	b.n	800f586 <HAL_I2C_Mem_Write+0x232>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f436:	b29b      	uxth	r3, r3
 800f438:	2bff      	cmp	r3, #255	; 0xff
 800f43a:	d90e      	bls.n	800f45a <HAL_I2C_Mem_Write+0x106>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	22ff      	movs	r2, #255	; 0xff
 800f440:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f446:	b2da      	uxtb	r2, r3
 800f448:	8979      	ldrh	r1, [r7, #10]
 800f44a:	2300      	movs	r3, #0
 800f44c:	9300      	str	r3, [sp, #0]
 800f44e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f452:	68f8      	ldr	r0, [r7, #12]
 800f454:	f001 f952 	bl	80106fc <I2C_TransferConfig>
 800f458:	e00f      	b.n	800f47a <HAL_I2C_Mem_Write+0x126>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f45e:	b29a      	uxth	r2, r3
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f468:	b2da      	uxtb	r2, r3
 800f46a:	8979      	ldrh	r1, [r7, #10]
 800f46c:	2300      	movs	r3, #0
 800f46e:	9300      	str	r3, [sp, #0]
 800f470:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f474:	68f8      	ldr	r0, [r7, #12]
 800f476:	f001 f941 	bl	80106fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f47a:	697a      	ldr	r2, [r7, #20]
 800f47c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f47e:	68f8      	ldr	r0, [r7, #12]
 800f480:	f000 ffd3 	bl	801042a <I2C_WaitOnTXISFlagUntilTimeout>
 800f484:	4603      	mov	r3, r0
 800f486:	2b00      	cmp	r3, #0
 800f488:	d001      	beq.n	800f48e <HAL_I2C_Mem_Write+0x13a>
      {
        return HAL_ERROR;
 800f48a:	2301      	movs	r3, #1
 800f48c:	e07b      	b.n	800f586 <HAL_I2C_Mem_Write+0x232>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f492:	781a      	ldrb	r2, [r3, #0]
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f49e:	1c5a      	adds	r2, r3, #1
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f4a8:	b29b      	uxth	r3, r3
 800f4aa:	3b01      	subs	r3, #1
 800f4ac:	b29a      	uxth	r2, r3
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f4b6:	3b01      	subs	r3, #1
 800f4b8:	b29a      	uxth	r2, r3
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f4c2:	b29b      	uxth	r3, r3
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d034      	beq.n	800f532 <HAL_I2C_Mem_Write+0x1de>
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d130      	bne.n	800f532 <HAL_I2C_Mem_Write+0x1de>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800f4d0:	697b      	ldr	r3, [r7, #20]
 800f4d2:	9300      	str	r3, [sp, #0]
 800f4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	2180      	movs	r1, #128	; 0x80
 800f4da:	68f8      	ldr	r0, [r7, #12]
 800f4dc:	f000 ff65 	bl	80103aa <I2C_WaitOnFlagUntilTimeout>
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d001      	beq.n	800f4ea <HAL_I2C_Mem_Write+0x196>
        {
          return HAL_ERROR;
 800f4e6:	2301      	movs	r3, #1
 800f4e8:	e04d      	b.n	800f586 <HAL_I2C_Mem_Write+0x232>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f4ee:	b29b      	uxth	r3, r3
 800f4f0:	2bff      	cmp	r3, #255	; 0xff
 800f4f2:	d90e      	bls.n	800f512 <HAL_I2C_Mem_Write+0x1be>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	22ff      	movs	r2, #255	; 0xff
 800f4f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f4fe:	b2da      	uxtb	r2, r3
 800f500:	8979      	ldrh	r1, [r7, #10]
 800f502:	2300      	movs	r3, #0
 800f504:	9300      	str	r3, [sp, #0]
 800f506:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f50a:	68f8      	ldr	r0, [r7, #12]
 800f50c:	f001 f8f6 	bl	80106fc <I2C_TransferConfig>
 800f510:	e00f      	b.n	800f532 <HAL_I2C_Mem_Write+0x1de>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f516:	b29a      	uxth	r2, r3
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f520:	b2da      	uxtb	r2, r3
 800f522:	8979      	ldrh	r1, [r7, #10]
 800f524:	2300      	movs	r3, #0
 800f526:	9300      	str	r3, [sp, #0]
 800f528:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f52c:	68f8      	ldr	r0, [r7, #12]
 800f52e:	f001 f8e5 	bl	80106fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f536:	b29b      	uxth	r3, r3
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d19e      	bne.n	800f47a <HAL_I2C_Mem_Write+0x126>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f53c:	697a      	ldr	r2, [r7, #20]
 800f53e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f540:	68f8      	ldr	r0, [r7, #12]
 800f542:	f000 ffb2 	bl	80104aa <I2C_WaitOnSTOPFlagUntilTimeout>
 800f546:	4603      	mov	r3, r0
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d001      	beq.n	800f550 <HAL_I2C_Mem_Write+0x1fc>
    {
      return HAL_ERROR;
 800f54c:	2301      	movs	r3, #1
 800f54e:	e01a      	b.n	800f586 <HAL_I2C_Mem_Write+0x232>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	2220      	movs	r2, #32
 800f556:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	6859      	ldr	r1, [r3, #4]
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	681a      	ldr	r2, [r3, #0]
 800f562:	4b0c      	ldr	r3, [pc, #48]	; (800f594 <HAL_I2C_Mem_Write+0x240>)
 800f564:	400b      	ands	r3, r1
 800f566:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	2220      	movs	r2, #32
 800f56c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	2200      	movs	r2, #0
 800f574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	2200      	movs	r2, #0
 800f57c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800f580:	2300      	movs	r3, #0
 800f582:	e000      	b.n	800f586 <HAL_I2C_Mem_Write+0x232>
  }
  else
  {
    return HAL_BUSY;
 800f584:	2302      	movs	r3, #2
  }
}
 800f586:	4618      	mov	r0, r3
 800f588:	3718      	adds	r7, #24
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd80      	pop	{r7, pc}
 800f58e:	bf00      	nop
 800f590:	0801b998 	.word	0x0801b998
 800f594:	fe00e800 	.word	0xfe00e800

0800f598 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b088      	sub	sp, #32
 800f59c:	af02      	add	r7, sp, #8
 800f59e:	60f8      	str	r0, [r7, #12]
 800f5a0:	4608      	mov	r0, r1
 800f5a2:	4611      	mov	r1, r2
 800f5a4:	461a      	mov	r2, r3
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	817b      	strh	r3, [r7, #10]
 800f5aa:	460b      	mov	r3, r1
 800f5ac:	813b      	strh	r3, [r7, #8]
 800f5ae:	4613      	mov	r3, r2
 800f5b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800f5b2:	88fb      	ldrh	r3, [r7, #6]
 800f5b4:	2b01      	cmp	r3, #1
 800f5b6:	d007      	beq.n	800f5c8 <HAL_I2C_Mem_Read+0x30>
 800f5b8:	88fb      	ldrh	r3, [r7, #6]
 800f5ba:	2b02      	cmp	r3, #2
 800f5bc:	d004      	beq.n	800f5c8 <HAL_I2C_Mem_Read+0x30>
 800f5be:	f640 11d8 	movw	r1, #2520	; 0x9d8
 800f5c2:	4886      	ldr	r0, [pc, #536]	; (800f7dc <HAL_I2C_Mem_Read+0x244>)
 800f5c4:	f7f4 ffde 	bl	8004584 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f5ce:	b2db      	uxtb	r3, r3
 800f5d0:	2b20      	cmp	r3, #32
 800f5d2:	f040 80fd 	bne.w	800f7d0 <HAL_I2C_Mem_Read+0x238>
  {
    if ((pData == NULL) || (Size == 0U))
 800f5d6:	6a3b      	ldr	r3, [r7, #32]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d002      	beq.n	800f5e2 <HAL_I2C_Mem_Read+0x4a>
 800f5dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d105      	bne.n	800f5ee <HAL_I2C_Mem_Read+0x56>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f5e8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800f5ea:	2301      	movs	r3, #1
 800f5ec:	e0f1      	b.n	800f7d2 <HAL_I2C_Mem_Read+0x23a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f5f4:	2b01      	cmp	r3, #1
 800f5f6:	d101      	bne.n	800f5fc <HAL_I2C_Mem_Read+0x64>
 800f5f8:	2302      	movs	r3, #2
 800f5fa:	e0ea      	b.n	800f7d2 <HAL_I2C_Mem_Read+0x23a>
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	2201      	movs	r2, #1
 800f600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800f604:	f7fa ff8e 	bl	800a524 <HAL_GetTick>
 800f608:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800f60a:	697b      	ldr	r3, [r7, #20]
 800f60c:	9300      	str	r3, [sp, #0]
 800f60e:	2319      	movs	r3, #25
 800f610:	2201      	movs	r2, #1
 800f612:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f616:	68f8      	ldr	r0, [r7, #12]
 800f618:	f000 fec7 	bl	80103aa <I2C_WaitOnFlagUntilTimeout>
 800f61c:	4603      	mov	r3, r0
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d001      	beq.n	800f626 <HAL_I2C_Mem_Read+0x8e>
    {
      return HAL_ERROR;
 800f622:	2301      	movs	r3, #1
 800f624:	e0d5      	b.n	800f7d2 <HAL_I2C_Mem_Read+0x23a>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	2222      	movs	r2, #34	; 0x22
 800f62a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	2240      	movs	r2, #64	; 0x40
 800f632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	2200      	movs	r2, #0
 800f63a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	6a3a      	ldr	r2, [r7, #32]
 800f640:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f646:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	2200      	movs	r2, #0
 800f64c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800f64e:	88f8      	ldrh	r0, [r7, #6]
 800f650:	893a      	ldrh	r2, [r7, #8]
 800f652:	8979      	ldrh	r1, [r7, #10]
 800f654:	697b      	ldr	r3, [r7, #20]
 800f656:	9301      	str	r3, [sp, #4]
 800f658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f65a:	9300      	str	r3, [sp, #0]
 800f65c:	4603      	mov	r3, r0
 800f65e:	68f8      	ldr	r0, [r7, #12]
 800f660:	f000 fad4 	bl	800fc0c <I2C_RequestMemoryRead>
 800f664:	4603      	mov	r3, r0
 800f666:	2b00      	cmp	r3, #0
 800f668:	d005      	beq.n	800f676 <HAL_I2C_Mem_Read+0xde>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	2200      	movs	r2, #0
 800f66e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800f672:	2301      	movs	r3, #1
 800f674:	e0ad      	b.n	800f7d2 <HAL_I2C_Mem_Read+0x23a>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f67a:	b29b      	uxth	r3, r3
 800f67c:	2bff      	cmp	r3, #255	; 0xff
 800f67e:	d90e      	bls.n	800f69e <HAL_I2C_Mem_Read+0x106>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	22ff      	movs	r2, #255	; 0xff
 800f684:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f68a:	b2da      	uxtb	r2, r3
 800f68c:	8979      	ldrh	r1, [r7, #10]
 800f68e:	4b54      	ldr	r3, [pc, #336]	; (800f7e0 <HAL_I2C_Mem_Read+0x248>)
 800f690:	9300      	str	r3, [sp, #0]
 800f692:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f696:	68f8      	ldr	r0, [r7, #12]
 800f698:	f001 f830 	bl	80106fc <I2C_TransferConfig>
 800f69c:	e00f      	b.n	800f6be <HAL_I2C_Mem_Read+0x126>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f6a2:	b29a      	uxth	r2, r3
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f6ac:	b2da      	uxtb	r2, r3
 800f6ae:	8979      	ldrh	r1, [r7, #10]
 800f6b0:	4b4b      	ldr	r3, [pc, #300]	; (800f7e0 <HAL_I2C_Mem_Read+0x248>)
 800f6b2:	9300      	str	r3, [sp, #0]
 800f6b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f6b8:	68f8      	ldr	r0, [r7, #12]
 800f6ba:	f001 f81f 	bl	80106fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800f6be:	697b      	ldr	r3, [r7, #20]
 800f6c0:	9300      	str	r3, [sp, #0]
 800f6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	2104      	movs	r1, #4
 800f6c8:	68f8      	ldr	r0, [r7, #12]
 800f6ca:	f000 fe6e 	bl	80103aa <I2C_WaitOnFlagUntilTimeout>
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d001      	beq.n	800f6d8 <HAL_I2C_Mem_Read+0x140>
      {
        return HAL_ERROR;
 800f6d4:	2301      	movs	r3, #1
 800f6d6:	e07c      	b.n	800f7d2 <HAL_I2C_Mem_Read+0x23a>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6e2:	b2d2      	uxtb	r2, r2
 800f6e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6ea:	1c5a      	adds	r2, r3, #1
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f6f4:	3b01      	subs	r3, #1
 800f6f6:	b29a      	uxth	r2, r3
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f700:	b29b      	uxth	r3, r3
 800f702:	3b01      	subs	r3, #1
 800f704:	b29a      	uxth	r2, r3
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f70e:	b29b      	uxth	r3, r3
 800f710:	2b00      	cmp	r3, #0
 800f712:	d034      	beq.n	800f77e <HAL_I2C_Mem_Read+0x1e6>
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d130      	bne.n	800f77e <HAL_I2C_Mem_Read+0x1e6>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800f71c:	697b      	ldr	r3, [r7, #20]
 800f71e:	9300      	str	r3, [sp, #0]
 800f720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f722:	2200      	movs	r2, #0
 800f724:	2180      	movs	r1, #128	; 0x80
 800f726:	68f8      	ldr	r0, [r7, #12]
 800f728:	f000 fe3f 	bl	80103aa <I2C_WaitOnFlagUntilTimeout>
 800f72c:	4603      	mov	r3, r0
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d001      	beq.n	800f736 <HAL_I2C_Mem_Read+0x19e>
        {
          return HAL_ERROR;
 800f732:	2301      	movs	r3, #1
 800f734:	e04d      	b.n	800f7d2 <HAL_I2C_Mem_Read+0x23a>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f73a:	b29b      	uxth	r3, r3
 800f73c:	2bff      	cmp	r3, #255	; 0xff
 800f73e:	d90e      	bls.n	800f75e <HAL_I2C_Mem_Read+0x1c6>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	22ff      	movs	r2, #255	; 0xff
 800f744:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f74a:	b2da      	uxtb	r2, r3
 800f74c:	8979      	ldrh	r1, [r7, #10]
 800f74e:	2300      	movs	r3, #0
 800f750:	9300      	str	r3, [sp, #0]
 800f752:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f756:	68f8      	ldr	r0, [r7, #12]
 800f758:	f000 ffd0 	bl	80106fc <I2C_TransferConfig>
 800f75c:	e00f      	b.n	800f77e <HAL_I2C_Mem_Read+0x1e6>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f762:	b29a      	uxth	r2, r3
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f76c:	b2da      	uxtb	r2, r3
 800f76e:	8979      	ldrh	r1, [r7, #10]
 800f770:	2300      	movs	r3, #0
 800f772:	9300      	str	r3, [sp, #0]
 800f774:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f778:	68f8      	ldr	r0, [r7, #12]
 800f77a:	f000 ffbf 	bl	80106fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f782:	b29b      	uxth	r3, r3
 800f784:	2b00      	cmp	r3, #0
 800f786:	d19a      	bne.n	800f6be <HAL_I2C_Mem_Read+0x126>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f788:	697a      	ldr	r2, [r7, #20]
 800f78a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f78c:	68f8      	ldr	r0, [r7, #12]
 800f78e:	f000 fe8c 	bl	80104aa <I2C_WaitOnSTOPFlagUntilTimeout>
 800f792:	4603      	mov	r3, r0
 800f794:	2b00      	cmp	r3, #0
 800f796:	d001      	beq.n	800f79c <HAL_I2C_Mem_Read+0x204>
    {
      return HAL_ERROR;
 800f798:	2301      	movs	r3, #1
 800f79a:	e01a      	b.n	800f7d2 <HAL_I2C_Mem_Read+0x23a>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	2220      	movs	r2, #32
 800f7a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	6859      	ldr	r1, [r3, #4]
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	681a      	ldr	r2, [r3, #0]
 800f7ae:	4b0d      	ldr	r3, [pc, #52]	; (800f7e4 <HAL_I2C_Mem_Read+0x24c>)
 800f7b0:	400b      	ands	r3, r1
 800f7b2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	2220      	movs	r2, #32
 800f7b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	2200      	movs	r2, #0
 800f7c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	e000      	b.n	800f7d2 <HAL_I2C_Mem_Read+0x23a>
  }
  else
  {
    return HAL_BUSY;
 800f7d0:	2302      	movs	r3, #2
  }
}
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	3718      	adds	r7, #24
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bd80      	pop	{r7, pc}
 800f7da:	bf00      	nop
 800f7dc:	0801b998 	.word	0x0801b998
 800f7e0:	80002400 	.word	0x80002400
 800f7e4:	fe00e800 	.word	0xfe00e800

0800f7e8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b084      	sub	sp, #16
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	699b      	ldr	r3, [r3, #24]
 800f7f6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f804:	2b00      	cmp	r3, #0
 800f806:	d005      	beq.n	800f814 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f80c:	68ba      	ldr	r2, [r7, #8]
 800f80e:	68f9      	ldr	r1, [r7, #12]
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	4798      	blx	r3
  }
}
 800f814:	bf00      	nop
 800f816:	3710      	adds	r7, #16
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd80      	pop	{r7, pc}

0800f81c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b086      	sub	sp, #24
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	699b      	ldr	r3, [r3, #24]
 800f82a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800f834:	697b      	ldr	r3, [r7, #20]
 800f836:	0a1b      	lsrs	r3, r3, #8
 800f838:	f003 0301 	and.w	r3, r3, #1
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d010      	beq.n	800f862 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800f840:	693b      	ldr	r3, [r7, #16]
 800f842:	09db      	lsrs	r3, r3, #7
 800f844:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d00a      	beq.n	800f862 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f850:	f043 0201 	orr.w	r2, r3, #1
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f860:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800f862:	697b      	ldr	r3, [r7, #20]
 800f864:	0a9b      	lsrs	r3, r3, #10
 800f866:	f003 0301 	and.w	r3, r3, #1
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d010      	beq.n	800f890 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800f86e:	693b      	ldr	r3, [r7, #16]
 800f870:	09db      	lsrs	r3, r3, #7
 800f872:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800f876:	2b00      	cmp	r3, #0
 800f878:	d00a      	beq.n	800f890 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f87e:	f043 0208 	orr.w	r2, r3, #8
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f88e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800f890:	697b      	ldr	r3, [r7, #20]
 800f892:	0a5b      	lsrs	r3, r3, #9
 800f894:	f003 0301 	and.w	r3, r3, #1
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d010      	beq.n	800f8be <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800f89c:	693b      	ldr	r3, [r7, #16]
 800f89e:	09db      	lsrs	r3, r3, #7
 800f8a0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d00a      	beq.n	800f8be <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8ac:	f043 0202 	orr.w	r2, r3, #2
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f8bc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8c2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	f003 030b 	and.w	r3, r3, #11
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d003      	beq.n	800f8d6 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800f8ce:	68f9      	ldr	r1, [r7, #12]
 800f8d0:	6878      	ldr	r0, [r7, #4]
 800f8d2:	f000 fc31 	bl	8010138 <I2C_ITError>
  }
}
 800f8d6:	bf00      	nop
 800f8d8:	3718      	adds	r7, #24
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	bd80      	pop	{r7, pc}

0800f8de <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f8de:	b480      	push	{r7}
 800f8e0:	b083      	sub	sp, #12
 800f8e2:	af00      	add	r7, sp, #0
 800f8e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800f8e6:	bf00      	nop
 800f8e8:	370c      	adds	r7, #12
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f0:	4770      	bx	lr

0800f8f2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f8f2:	b480      	push	{r7}
 800f8f4:	b083      	sub	sp, #12
 800f8f6:	af00      	add	r7, sp, #0
 800f8f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800f8fa:	bf00      	nop
 800f8fc:	370c      	adds	r7, #12
 800f8fe:	46bd      	mov	sp, r7
 800f900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f904:	4770      	bx	lr

0800f906 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800f906:	b480      	push	{r7}
 800f908:	b083      	sub	sp, #12
 800f90a:	af00      	add	r7, sp, #0
 800f90c:	6078      	str	r0, [r7, #4]
 800f90e:	460b      	mov	r3, r1
 800f910:	70fb      	strb	r3, [r7, #3]
 800f912:	4613      	mov	r3, r2
 800f914:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800f916:	bf00      	nop
 800f918:	370c      	adds	r7, #12
 800f91a:	46bd      	mov	sp, r7
 800f91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f920:	4770      	bx	lr

0800f922 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f922:	b480      	push	{r7}
 800f924:	b083      	sub	sp, #12
 800f926:	af00      	add	r7, sp, #0
 800f928:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800f92a:	bf00      	nop
 800f92c:	370c      	adds	r7, #12
 800f92e:	46bd      	mov	sp, r7
 800f930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f934:	4770      	bx	lr

0800f936 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800f936:	b480      	push	{r7}
 800f938:	b083      	sub	sp, #12
 800f93a:	af00      	add	r7, sp, #0
 800f93c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800f93e:	bf00      	nop
 800f940:	370c      	adds	r7, #12
 800f942:	46bd      	mov	sp, r7
 800f944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f948:	4770      	bx	lr

0800f94a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f94a:	b480      	push	{r7}
 800f94c:	b083      	sub	sp, #12
 800f94e:	af00      	add	r7, sp, #0
 800f950:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800f952:	bf00      	nop
 800f954:	370c      	adds	r7, #12
 800f956:	46bd      	mov	sp, r7
 800f958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95c:	4770      	bx	lr

0800f95e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800f95e:	b580      	push	{r7, lr}
 800f960:	b086      	sub	sp, #24
 800f962:	af00      	add	r7, sp, #0
 800f964:	60f8      	str	r0, [r7, #12]
 800f966:	60b9      	str	r1, [r7, #8]
 800f968:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f96e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800f970:	68bb      	ldr	r3, [r7, #8]
 800f972:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f97a:	2b01      	cmp	r3, #1
 800f97c:	d101      	bne.n	800f982 <I2C_Slave_ISR_IT+0x24>
 800f97e:	2302      	movs	r3, #2
 800f980:	e0ec      	b.n	800fb5c <I2C_Slave_ISR_IT+0x1fe>
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	2201      	movs	r2, #1
 800f986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f98a:	693b      	ldr	r3, [r7, #16]
 800f98c:	095b      	lsrs	r3, r3, #5
 800f98e:	f003 0301 	and.w	r3, r3, #1
 800f992:	2b00      	cmp	r3, #0
 800f994:	d009      	beq.n	800f9aa <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	095b      	lsrs	r3, r3, #5
 800f99a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d003      	beq.n	800f9aa <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800f9a2:	6939      	ldr	r1, [r7, #16]
 800f9a4:	68f8      	ldr	r0, [r7, #12]
 800f9a6:	f000 fa67 	bl	800fe78 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f9aa:	693b      	ldr	r3, [r7, #16]
 800f9ac:	091b      	lsrs	r3, r3, #4
 800f9ae:	f003 0301 	and.w	r3, r3, #1
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d04d      	beq.n	800fa52 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	091b      	lsrs	r3, r3, #4
 800f9ba:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d047      	beq.n	800fa52 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f9c6:	b29b      	uxth	r3, r3
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d128      	bne.n	800fa1e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f9d2:	b2db      	uxtb	r3, r3
 800f9d4:	2b28      	cmp	r3, #40	; 0x28
 800f9d6:	d108      	bne.n	800f9ea <I2C_Slave_ISR_IT+0x8c>
 800f9d8:	697b      	ldr	r3, [r7, #20]
 800f9da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f9de:	d104      	bne.n	800f9ea <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800f9e0:	6939      	ldr	r1, [r7, #16]
 800f9e2:	68f8      	ldr	r0, [r7, #12]
 800f9e4:	f000 fb52 	bl	801008c <I2C_ITListenCplt>
 800f9e8:	e032      	b.n	800fa50 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f9f0:	b2db      	uxtb	r3, r3
 800f9f2:	2b29      	cmp	r3, #41	; 0x29
 800f9f4:	d10e      	bne.n	800fa14 <I2C_Slave_ISR_IT+0xb6>
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f9fc:	d00a      	beq.n	800fa14 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	2210      	movs	r2, #16
 800fa04:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800fa06:	68f8      	ldr	r0, [r7, #12]
 800fa08:	f000 fc8d 	bl	8010326 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800fa0c:	68f8      	ldr	r0, [r7, #12]
 800fa0e:	f000 f9d5 	bl	800fdbc <I2C_ITSlaveSeqCplt>
 800fa12:	e01d      	b.n	800fa50 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	2210      	movs	r2, #16
 800fa1a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800fa1c:	e096      	b.n	800fb4c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	2210      	movs	r2, #16
 800fa24:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa2a:	f043 0204 	orr.w	r2, r3, #4
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800fa32:	697b      	ldr	r3, [r7, #20]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d004      	beq.n	800fa42 <I2C_Slave_ISR_IT+0xe4>
 800fa38:	697b      	ldr	r3, [r7, #20]
 800fa3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fa3e:	f040 8085 	bne.w	800fb4c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa46:	4619      	mov	r1, r3
 800fa48:	68f8      	ldr	r0, [r7, #12]
 800fa4a:	f000 fb75 	bl	8010138 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800fa4e:	e07d      	b.n	800fb4c <I2C_Slave_ISR_IT+0x1ee>
 800fa50:	e07c      	b.n	800fb4c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800fa52:	693b      	ldr	r3, [r7, #16]
 800fa54:	089b      	lsrs	r3, r3, #2
 800fa56:	f003 0301 	and.w	r3, r3, #1
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d030      	beq.n	800fac0 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	089b      	lsrs	r3, r3, #2
 800fa62:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d02a      	beq.n	800fac0 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa6e:	b29b      	uxth	r3, r3
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d018      	beq.n	800faa6 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa7e:	b2d2      	uxtb	r2, r2
 800fa80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa86:	1c5a      	adds	r2, r3, #1
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa90:	3b01      	subs	r3, #1
 800fa92:	b29a      	uxth	r2, r3
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa9c:	b29b      	uxth	r3, r3
 800fa9e:	3b01      	subs	r3, #1
 800faa0:	b29a      	uxth	r2, r3
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800faaa:	b29b      	uxth	r3, r3
 800faac:	2b00      	cmp	r3, #0
 800faae:	d14f      	bne.n	800fb50 <I2C_Slave_ISR_IT+0x1f2>
 800fab0:	697b      	ldr	r3, [r7, #20]
 800fab2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800fab6:	d04b      	beq.n	800fb50 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800fab8:	68f8      	ldr	r0, [r7, #12]
 800faba:	f000 f97f 	bl	800fdbc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800fabe:	e047      	b.n	800fb50 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800fac0:	693b      	ldr	r3, [r7, #16]
 800fac2:	08db      	lsrs	r3, r3, #3
 800fac4:	f003 0301 	and.w	r3, r3, #1
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d00a      	beq.n	800fae2 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	08db      	lsrs	r3, r3, #3
 800fad0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d004      	beq.n	800fae2 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800fad8:	6939      	ldr	r1, [r7, #16]
 800fada:	68f8      	ldr	r0, [r7, #12]
 800fadc:	f000 f8ea 	bl	800fcb4 <I2C_ITAddrCplt>
 800fae0:	e037      	b.n	800fb52 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800fae2:	693b      	ldr	r3, [r7, #16]
 800fae4:	085b      	lsrs	r3, r3, #1
 800fae6:	f003 0301 	and.w	r3, r3, #1
 800faea:	2b00      	cmp	r3, #0
 800faec:	d031      	beq.n	800fb52 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	085b      	lsrs	r3, r3, #1
 800faf2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d02b      	beq.n	800fb52 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fafe:	b29b      	uxth	r3, r3
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d018      	beq.n	800fb36 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb08:	781a      	ldrb	r2, [r3, #0]
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb14:	1c5a      	adds	r2, r3, #1
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fb1e:	b29b      	uxth	r3, r3
 800fb20:	3b01      	subs	r3, #1
 800fb22:	b29a      	uxth	r2, r3
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fb2c:	3b01      	subs	r3, #1
 800fb2e:	b29a      	uxth	r2, r3
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	851a      	strh	r2, [r3, #40]	; 0x28
 800fb34:	e00d      	b.n	800fb52 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800fb36:	697b      	ldr	r3, [r7, #20]
 800fb38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fb3c:	d002      	beq.n	800fb44 <I2C_Slave_ISR_IT+0x1e6>
 800fb3e:	697b      	ldr	r3, [r7, #20]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d106      	bne.n	800fb52 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800fb44:	68f8      	ldr	r0, [r7, #12]
 800fb46:	f000 f939 	bl	800fdbc <I2C_ITSlaveSeqCplt>
 800fb4a:	e002      	b.n	800fb52 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800fb4c:	bf00      	nop
 800fb4e:	e000      	b.n	800fb52 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800fb50:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	2200      	movs	r2, #0
 800fb56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800fb5a:	2300      	movs	r3, #0
}
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	3718      	adds	r7, #24
 800fb60:	46bd      	mov	sp, r7
 800fb62:	bd80      	pop	{r7, pc}

0800fb64 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b086      	sub	sp, #24
 800fb68:	af02      	add	r7, sp, #8
 800fb6a:	60f8      	str	r0, [r7, #12]
 800fb6c:	4608      	mov	r0, r1
 800fb6e:	4611      	mov	r1, r2
 800fb70:	461a      	mov	r2, r3
 800fb72:	4603      	mov	r3, r0
 800fb74:	817b      	strh	r3, [r7, #10]
 800fb76:	460b      	mov	r3, r1
 800fb78:	813b      	strh	r3, [r7, #8]
 800fb7a:	4613      	mov	r3, r2
 800fb7c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800fb7e:	88fb      	ldrh	r3, [r7, #6]
 800fb80:	b2da      	uxtb	r2, r3
 800fb82:	8979      	ldrh	r1, [r7, #10]
 800fb84:	4b20      	ldr	r3, [pc, #128]	; (800fc08 <I2C_RequestMemoryWrite+0xa4>)
 800fb86:	9300      	str	r3, [sp, #0]
 800fb88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800fb8c:	68f8      	ldr	r0, [r7, #12]
 800fb8e:	f000 fdb5 	bl	80106fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fb92:	69fa      	ldr	r2, [r7, #28]
 800fb94:	69b9      	ldr	r1, [r7, #24]
 800fb96:	68f8      	ldr	r0, [r7, #12]
 800fb98:	f000 fc47 	bl	801042a <I2C_WaitOnTXISFlagUntilTimeout>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d001      	beq.n	800fba6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800fba2:	2301      	movs	r3, #1
 800fba4:	e02c      	b.n	800fc00 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800fba6:	88fb      	ldrh	r3, [r7, #6]
 800fba8:	2b01      	cmp	r3, #1
 800fbaa:	d105      	bne.n	800fbb8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fbac:	893b      	ldrh	r3, [r7, #8]
 800fbae:	b2da      	uxtb	r2, r3
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	629a      	str	r2, [r3, #40]	; 0x28
 800fbb6:	e015      	b.n	800fbe4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800fbb8:	893b      	ldrh	r3, [r7, #8]
 800fbba:	0a1b      	lsrs	r3, r3, #8
 800fbbc:	b29b      	uxth	r3, r3
 800fbbe:	b2da      	uxtb	r2, r3
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fbc6:	69fa      	ldr	r2, [r7, #28]
 800fbc8:	69b9      	ldr	r1, [r7, #24]
 800fbca:	68f8      	ldr	r0, [r7, #12]
 800fbcc:	f000 fc2d 	bl	801042a <I2C_WaitOnTXISFlagUntilTimeout>
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d001      	beq.n	800fbda <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800fbd6:	2301      	movs	r3, #1
 800fbd8:	e012      	b.n	800fc00 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fbda:	893b      	ldrh	r3, [r7, #8]
 800fbdc:	b2da      	uxtb	r2, r3
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800fbe4:	69fb      	ldr	r3, [r7, #28]
 800fbe6:	9300      	str	r3, [sp, #0]
 800fbe8:	69bb      	ldr	r3, [r7, #24]
 800fbea:	2200      	movs	r2, #0
 800fbec:	2180      	movs	r1, #128	; 0x80
 800fbee:	68f8      	ldr	r0, [r7, #12]
 800fbf0:	f000 fbdb 	bl	80103aa <I2C_WaitOnFlagUntilTimeout>
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d001      	beq.n	800fbfe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800fbfa:	2301      	movs	r3, #1
 800fbfc:	e000      	b.n	800fc00 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800fbfe:	2300      	movs	r3, #0
}
 800fc00:	4618      	mov	r0, r3
 800fc02:	3710      	adds	r7, #16
 800fc04:	46bd      	mov	sp, r7
 800fc06:	bd80      	pop	{r7, pc}
 800fc08:	80002000 	.word	0x80002000

0800fc0c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b086      	sub	sp, #24
 800fc10:	af02      	add	r7, sp, #8
 800fc12:	60f8      	str	r0, [r7, #12]
 800fc14:	4608      	mov	r0, r1
 800fc16:	4611      	mov	r1, r2
 800fc18:	461a      	mov	r2, r3
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	817b      	strh	r3, [r7, #10]
 800fc1e:	460b      	mov	r3, r1
 800fc20:	813b      	strh	r3, [r7, #8]
 800fc22:	4613      	mov	r3, r2
 800fc24:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800fc26:	88fb      	ldrh	r3, [r7, #6]
 800fc28:	b2da      	uxtb	r2, r3
 800fc2a:	8979      	ldrh	r1, [r7, #10]
 800fc2c:	4b20      	ldr	r3, [pc, #128]	; (800fcb0 <I2C_RequestMemoryRead+0xa4>)
 800fc2e:	9300      	str	r3, [sp, #0]
 800fc30:	2300      	movs	r3, #0
 800fc32:	68f8      	ldr	r0, [r7, #12]
 800fc34:	f000 fd62 	bl	80106fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fc38:	69fa      	ldr	r2, [r7, #28]
 800fc3a:	69b9      	ldr	r1, [r7, #24]
 800fc3c:	68f8      	ldr	r0, [r7, #12]
 800fc3e:	f000 fbf4 	bl	801042a <I2C_WaitOnTXISFlagUntilTimeout>
 800fc42:	4603      	mov	r3, r0
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d001      	beq.n	800fc4c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800fc48:	2301      	movs	r3, #1
 800fc4a:	e02c      	b.n	800fca6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800fc4c:	88fb      	ldrh	r3, [r7, #6]
 800fc4e:	2b01      	cmp	r3, #1
 800fc50:	d105      	bne.n	800fc5e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fc52:	893b      	ldrh	r3, [r7, #8]
 800fc54:	b2da      	uxtb	r2, r3
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	629a      	str	r2, [r3, #40]	; 0x28
 800fc5c:	e015      	b.n	800fc8a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800fc5e:	893b      	ldrh	r3, [r7, #8]
 800fc60:	0a1b      	lsrs	r3, r3, #8
 800fc62:	b29b      	uxth	r3, r3
 800fc64:	b2da      	uxtb	r2, r3
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fc6c:	69fa      	ldr	r2, [r7, #28]
 800fc6e:	69b9      	ldr	r1, [r7, #24]
 800fc70:	68f8      	ldr	r0, [r7, #12]
 800fc72:	f000 fbda 	bl	801042a <I2C_WaitOnTXISFlagUntilTimeout>
 800fc76:	4603      	mov	r3, r0
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d001      	beq.n	800fc80 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800fc7c:	2301      	movs	r3, #1
 800fc7e:	e012      	b.n	800fca6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fc80:	893b      	ldrh	r3, [r7, #8]
 800fc82:	b2da      	uxtb	r2, r3
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800fc8a:	69fb      	ldr	r3, [r7, #28]
 800fc8c:	9300      	str	r3, [sp, #0]
 800fc8e:	69bb      	ldr	r3, [r7, #24]
 800fc90:	2200      	movs	r2, #0
 800fc92:	2140      	movs	r1, #64	; 0x40
 800fc94:	68f8      	ldr	r0, [r7, #12]
 800fc96:	f000 fb88 	bl	80103aa <I2C_WaitOnFlagUntilTimeout>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d001      	beq.n	800fca4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800fca0:	2301      	movs	r3, #1
 800fca2:	e000      	b.n	800fca6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800fca4:	2300      	movs	r3, #0
}
 800fca6:	4618      	mov	r0, r3
 800fca8:	3710      	adds	r7, #16
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	bd80      	pop	{r7, pc}
 800fcae:	bf00      	nop
 800fcb0:	80002000 	.word	0x80002000

0800fcb4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b084      	sub	sp, #16
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
 800fcbc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fcc4:	b2db      	uxtb	r3, r3
 800fcc6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800fcca:	2b28      	cmp	r3, #40	; 0x28
 800fccc:	d16a      	bne.n	800fda4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	699b      	ldr	r3, [r3, #24]
 800fcd4:	0c1b      	lsrs	r3, r3, #16
 800fcd6:	b2db      	uxtb	r3, r3
 800fcd8:	f003 0301 	and.w	r3, r3, #1
 800fcdc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	699b      	ldr	r3, [r3, #24]
 800fce4:	0c1b      	lsrs	r3, r3, #16
 800fce6:	b29b      	uxth	r3, r3
 800fce8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800fcec:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	689b      	ldr	r3, [r3, #8]
 800fcf4:	b29b      	uxth	r3, r3
 800fcf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fcfa:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	68db      	ldr	r3, [r3, #12]
 800fd02:	b29b      	uxth	r3, r3
 800fd04:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800fd08:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	68db      	ldr	r3, [r3, #12]
 800fd0e:	2b02      	cmp	r3, #2
 800fd10:	d138      	bne.n	800fd84 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800fd12:	897b      	ldrh	r3, [r7, #10]
 800fd14:	09db      	lsrs	r3, r3, #7
 800fd16:	b29a      	uxth	r2, r3
 800fd18:	89bb      	ldrh	r3, [r7, #12]
 800fd1a:	4053      	eors	r3, r2
 800fd1c:	b29b      	uxth	r3, r3
 800fd1e:	f003 0306 	and.w	r3, r3, #6
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d11c      	bne.n	800fd60 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800fd26:	897b      	ldrh	r3, [r7, #10]
 800fd28:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fd2e:	1c5a      	adds	r2, r3, #1
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fd38:	2b02      	cmp	r3, #2
 800fd3a:	d13b      	bne.n	800fdb4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	2200      	movs	r2, #0
 800fd40:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	2208      	movs	r2, #8
 800fd48:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fd52:	89ba      	ldrh	r2, [r7, #12]
 800fd54:	7bfb      	ldrb	r3, [r7, #15]
 800fd56:	4619      	mov	r1, r3
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	f7ff fdd4 	bl	800f906 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800fd5e:	e029      	b.n	800fdb4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800fd60:	893b      	ldrh	r3, [r7, #8]
 800fd62:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800fd64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fd68:	6878      	ldr	r0, [r7, #4]
 800fd6a:	f000 fd3d 	bl	80107e8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	2200      	movs	r2, #0
 800fd72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fd76:	89ba      	ldrh	r2, [r7, #12]
 800fd78:	7bfb      	ldrb	r3, [r7, #15]
 800fd7a:	4619      	mov	r1, r3
 800fd7c:	6878      	ldr	r0, [r7, #4]
 800fd7e:	f7ff fdc2 	bl	800f906 <HAL_I2C_AddrCallback>
}
 800fd82:	e017      	b.n	800fdb4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800fd84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fd88:	6878      	ldr	r0, [r7, #4]
 800fd8a:	f000 fd2d 	bl	80107e8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	2200      	movs	r2, #0
 800fd92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fd96:	89ba      	ldrh	r2, [r7, #12]
 800fd98:	7bfb      	ldrb	r3, [r7, #15]
 800fd9a:	4619      	mov	r1, r3
 800fd9c:	6878      	ldr	r0, [r7, #4]
 800fd9e:	f7ff fdb2 	bl	800f906 <HAL_I2C_AddrCallback>
}
 800fda2:	e007      	b.n	800fdb4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	2208      	movs	r2, #8
 800fdaa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	2200      	movs	r2, #0
 800fdb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800fdb4:	bf00      	nop
 800fdb6:	3710      	adds	r7, #16
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}

0800fdbc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b084      	sub	sp, #16
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	2200      	movs	r2, #0
 800fdd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	0b9b      	lsrs	r3, r3, #14
 800fdd8:	f003 0301 	and.w	r3, r3, #1
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d008      	beq.n	800fdf2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	681a      	ldr	r2, [r3, #0]
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800fdee:	601a      	str	r2, [r3, #0]
 800fdf0:	e00d      	b.n	800fe0e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	0bdb      	lsrs	r3, r3, #15
 800fdf6:	f003 0301 	and.w	r3, r3, #1
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d007      	beq.n	800fe0e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	681a      	ldr	r2, [r3, #0]
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800fe0c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fe14:	b2db      	uxtb	r3, r3
 800fe16:	2b29      	cmp	r3, #41	; 0x29
 800fe18:	d112      	bne.n	800fe40 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	2228      	movs	r2, #40	; 0x28
 800fe1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	2221      	movs	r2, #33	; 0x21
 800fe26:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800fe28:	2101      	movs	r1, #1
 800fe2a:	6878      	ldr	r0, [r7, #4]
 800fe2c:	f000 fcdc 	bl	80107e8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	2200      	movs	r2, #0
 800fe34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800fe38:	6878      	ldr	r0, [r7, #4]
 800fe3a:	f7ff fd50 	bl	800f8de <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800fe3e:	e017      	b.n	800fe70 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fe46:	b2db      	uxtb	r3, r3
 800fe48:	2b2a      	cmp	r3, #42	; 0x2a
 800fe4a:	d111      	bne.n	800fe70 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2228      	movs	r2, #40	; 0x28
 800fe50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	2222      	movs	r2, #34	; 0x22
 800fe58:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800fe5a:	2102      	movs	r1, #2
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f000 fcc3 	bl	80107e8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	2200      	movs	r2, #0
 800fe66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800fe6a:	6878      	ldr	r0, [r7, #4]
 800fe6c:	f7ff fd41 	bl	800f8f2 <HAL_I2C_SlaveRxCpltCallback>
}
 800fe70:	bf00      	nop
 800fe72:	3710      	adds	r7, #16
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}

0800fe78 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b086      	sub	sp, #24
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
 800fe80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800fe8a:	683b      	ldr	r3, [r7, #0]
 800fe8c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fe94:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	2220      	movs	r2, #32
 800fe9c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800fe9e:	7bfb      	ldrb	r3, [r7, #15]
 800fea0:	2b21      	cmp	r3, #33	; 0x21
 800fea2:	d002      	beq.n	800feaa <I2C_ITSlaveCplt+0x32>
 800fea4:	7bfb      	ldrb	r3, [r7, #15]
 800fea6:	2b29      	cmp	r3, #41	; 0x29
 800fea8:	d108      	bne.n	800febc <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800feaa:	f248 0101 	movw	r1, #32769	; 0x8001
 800feae:	6878      	ldr	r0, [r7, #4]
 800feb0:	f000 fc9a 	bl	80107e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2221      	movs	r2, #33	; 0x21
 800feb8:	631a      	str	r2, [r3, #48]	; 0x30
 800feba:	e00d      	b.n	800fed8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800febc:	7bfb      	ldrb	r3, [r7, #15]
 800febe:	2b22      	cmp	r3, #34	; 0x22
 800fec0:	d002      	beq.n	800fec8 <I2C_ITSlaveCplt+0x50>
 800fec2:	7bfb      	ldrb	r3, [r7, #15]
 800fec4:	2b2a      	cmp	r3, #42	; 0x2a
 800fec6:	d107      	bne.n	800fed8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800fec8:	f248 0102 	movw	r1, #32770	; 0x8002
 800fecc:	6878      	ldr	r0, [r7, #4]
 800fece:	f000 fc8b 	bl	80107e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	2222      	movs	r2, #34	; 0x22
 800fed6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	685a      	ldr	r2, [r3, #4]
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fee6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	6859      	ldr	r1, [r3, #4]
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	681a      	ldr	r2, [r3, #0]
 800fef2:	4b64      	ldr	r3, [pc, #400]	; (8010084 <I2C_ITSlaveCplt+0x20c>)
 800fef4:	400b      	ands	r3, r1
 800fef6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800fef8:	6878      	ldr	r0, [r7, #4]
 800fefa:	f000 fa14 	bl	8010326 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800fefe:	693b      	ldr	r3, [r7, #16]
 800ff00:	0b9b      	lsrs	r3, r3, #14
 800ff02:	f003 0301 	and.w	r3, r3, #1
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d013      	beq.n	800ff32 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	681a      	ldr	r2, [r3, #0]
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ff18:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d020      	beq.n	800ff64 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	685b      	ldr	r3, [r3, #4]
 800ff2a:	b29a      	uxth	r2, r3
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ff30:	e018      	b.n	800ff64 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800ff32:	693b      	ldr	r3, [r7, #16]
 800ff34:	0bdb      	lsrs	r3, r3, #15
 800ff36:	f003 0301 	and.w	r3, r3, #1
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d012      	beq.n	800ff64 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	681a      	ldr	r2, [r3, #0]
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ff4c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d006      	beq.n	800ff64 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	685b      	ldr	r3, [r3, #4]
 800ff5e:	b29a      	uxth	r2, r3
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800ff64:	697b      	ldr	r3, [r7, #20]
 800ff66:	089b      	lsrs	r3, r3, #2
 800ff68:	f003 0301 	and.w	r3, r3, #1
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d020      	beq.n	800ffb2 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800ff70:	697b      	ldr	r3, [r7, #20]
 800ff72:	f023 0304 	bic.w	r3, r3, #4
 800ff76:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff82:	b2d2      	uxtb	r2, r2
 800ff84:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff8a:	1c5a      	adds	r2, r3, #1
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d00c      	beq.n	800ffb2 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ff9c:	3b01      	subs	r3, #1
 800ff9e:	b29a      	uxth	r2, r3
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ffa8:	b29b      	uxth	r3, r3
 800ffaa:	3b01      	subs	r3, #1
 800ffac:	b29a      	uxth	r2, r3
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ffb6:	b29b      	uxth	r3, r3
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d005      	beq.n	800ffc8 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffc0:	f043 0204 	orr.w	r2, r3, #4
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	2200      	movs	r2, #0
 800ffcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	2200      	movs	r2, #0
 800ffd4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d010      	beq.n	8010000 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffe2:	4619      	mov	r1, r3
 800ffe4:	6878      	ldr	r0, [r7, #4]
 800ffe6:	f000 f8a7 	bl	8010138 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fff0:	b2db      	uxtb	r3, r3
 800fff2:	2b28      	cmp	r3, #40	; 0x28
 800fff4:	d141      	bne.n	801007a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800fff6:	6979      	ldr	r1, [r7, #20]
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	f000 f847 	bl	801008c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800fffe:	e03c      	b.n	801007a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010004:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8010008:	d014      	beq.n	8010034 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 801000a:	6878      	ldr	r0, [r7, #4]
 801000c:	f7ff fed6 	bl	800fdbc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	4a1d      	ldr	r2, [pc, #116]	; (8010088 <I2C_ITSlaveCplt+0x210>)
 8010014:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	2220      	movs	r2, #32
 801001a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	2200      	movs	r2, #0
 8010022:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	2200      	movs	r2, #0
 8010028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 801002c:	6878      	ldr	r0, [r7, #4]
 801002e:	f7ff fc78 	bl	800f922 <HAL_I2C_ListenCpltCallback>
}
 8010032:	e022      	b.n	801007a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801003a:	b2db      	uxtb	r3, r3
 801003c:	2b22      	cmp	r3, #34	; 0x22
 801003e:	d10e      	bne.n	801005e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	2220      	movs	r2, #32
 8010044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	2200      	movs	r2, #0
 801004c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	2200      	movs	r2, #0
 8010052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8010056:	6878      	ldr	r0, [r7, #4]
 8010058:	f7ff fc4b 	bl	800f8f2 <HAL_I2C_SlaveRxCpltCallback>
}
 801005c:	e00d      	b.n	801007a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	2220      	movs	r2, #32
 8010062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	2200      	movs	r2, #0
 801006a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2200      	movs	r2, #0
 8010070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8010074:	6878      	ldr	r0, [r7, #4]
 8010076:	f7ff fc32 	bl	800f8de <HAL_I2C_SlaveTxCpltCallback>
}
 801007a:	bf00      	nop
 801007c:	3718      	adds	r7, #24
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}
 8010082:	bf00      	nop
 8010084:	fe00e800 	.word	0xfe00e800
 8010088:	ffff0000 	.word	0xffff0000

0801008c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b082      	sub	sp, #8
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
 8010094:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	4a26      	ldr	r2, [pc, #152]	; (8010134 <I2C_ITListenCplt+0xa8>)
 801009a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2200      	movs	r2, #0
 80100a0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	2220      	movs	r2, #32
 80100a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	2200      	movs	r2, #0
 80100ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	2200      	movs	r2, #0
 80100b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	089b      	lsrs	r3, r3, #2
 80100bc:	f003 0301 	and.w	r3, r3, #1
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d022      	beq.n	801010a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100ce:	b2d2      	uxtb	r2, r2
 80100d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100d6:	1c5a      	adds	r2, r3, #1
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d012      	beq.n	801010a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80100e8:	3b01      	subs	r3, #1
 80100ea:	b29a      	uxth	r2, r3
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80100f4:	b29b      	uxth	r3, r3
 80100f6:	3b01      	subs	r3, #1
 80100f8:	b29a      	uxth	r2, r3
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010102:	f043 0204 	orr.w	r2, r3, #4
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801010a:	f248 0103 	movw	r1, #32771	; 0x8003
 801010e:	6878      	ldr	r0, [r7, #4]
 8010110:	f000 fb6a 	bl	80107e8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	2210      	movs	r2, #16
 801011a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	2200      	movs	r2, #0
 8010120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8010124:	6878      	ldr	r0, [r7, #4]
 8010126:	f7ff fbfc 	bl	800f922 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 801012a:	bf00      	nop
 801012c:	3708      	adds	r7, #8
 801012e:	46bd      	mov	sp, r7
 8010130:	bd80      	pop	{r7, pc}
 8010132:	bf00      	nop
 8010134:	ffff0000 	.word	0xffff0000

08010138 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b084      	sub	sp, #16
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
 8010140:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010148:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	2200      	movs	r2, #0
 801014e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	4a5d      	ldr	r2, [pc, #372]	; (80102cc <I2C_ITError+0x194>)
 8010156:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	2200      	movs	r2, #0
 801015c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010162:	683b      	ldr	r3, [r7, #0]
 8010164:	431a      	orrs	r2, r3
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 801016a:	7bfb      	ldrb	r3, [r7, #15]
 801016c:	2b28      	cmp	r3, #40	; 0x28
 801016e:	d005      	beq.n	801017c <I2C_ITError+0x44>
 8010170:	7bfb      	ldrb	r3, [r7, #15]
 8010172:	2b29      	cmp	r3, #41	; 0x29
 8010174:	d002      	beq.n	801017c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8010176:	7bfb      	ldrb	r3, [r7, #15]
 8010178:	2b2a      	cmp	r3, #42	; 0x2a
 801017a:	d10b      	bne.n	8010194 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801017c:	2103      	movs	r1, #3
 801017e:	6878      	ldr	r0, [r7, #4]
 8010180:	f000 fb32 	bl	80107e8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	2228      	movs	r2, #40	; 0x28
 8010188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	4a50      	ldr	r2, [pc, #320]	; (80102d0 <I2C_ITError+0x198>)
 8010190:	635a      	str	r2, [r3, #52]	; 0x34
 8010192:	e011      	b.n	80101b8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010194:	f248 0103 	movw	r1, #32771	; 0x8003
 8010198:	6878      	ldr	r0, [r7, #4]
 801019a:	f000 fb25 	bl	80107e8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80101a4:	b2db      	uxtb	r3, r3
 80101a6:	2b60      	cmp	r3, #96	; 0x60
 80101a8:	d003      	beq.n	80101b2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	2220      	movs	r2, #32
 80101ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	2200      	movs	r2, #0
 80101b6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101bc:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d039      	beq.n	801023a <I2C_ITError+0x102>
 80101c6:	68bb      	ldr	r3, [r7, #8]
 80101c8:	2b11      	cmp	r3, #17
 80101ca:	d002      	beq.n	80101d2 <I2C_ITError+0x9a>
 80101cc:	68bb      	ldr	r3, [r7, #8]
 80101ce:	2b21      	cmp	r3, #33	; 0x21
 80101d0:	d133      	bne.n	801023a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80101dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80101e0:	d107      	bne.n	80101f2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	681a      	ldr	r2, [r3, #0]
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80101f0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101f6:	4618      	mov	r0, r3
 80101f8:	f7fe f814 	bl	800e224 <HAL_DMA_GetState>
 80101fc:	4603      	mov	r3, r0
 80101fe:	2b01      	cmp	r3, #1
 8010200:	d017      	beq.n	8010232 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010206:	4a33      	ldr	r2, [pc, #204]	; (80102d4 <I2C_ITError+0x19c>)
 8010208:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	2200      	movs	r2, #0
 801020e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010216:	4618      	mov	r0, r3
 8010218:	f7fd ff14 	bl	800e044 <HAL_DMA_Abort_IT>
 801021c:	4603      	mov	r3, r0
 801021e:	2b00      	cmp	r3, #0
 8010220:	d04d      	beq.n	80102be <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010228:	687a      	ldr	r2, [r7, #4]
 801022a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801022c:	4610      	mov	r0, r2
 801022e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010230:	e045      	b.n	80102be <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8010232:	6878      	ldr	r0, [r7, #4]
 8010234:	f000 f850 	bl	80102d8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010238:	e041      	b.n	80102be <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801023e:	2b00      	cmp	r3, #0
 8010240:	d039      	beq.n	80102b6 <I2C_ITError+0x17e>
 8010242:	68bb      	ldr	r3, [r7, #8]
 8010244:	2b12      	cmp	r3, #18
 8010246:	d002      	beq.n	801024e <I2C_ITError+0x116>
 8010248:	68bb      	ldr	r3, [r7, #8]
 801024a:	2b22      	cmp	r3, #34	; 0x22
 801024c:	d133      	bne.n	80102b6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801025c:	d107      	bne.n	801026e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	681a      	ldr	r2, [r3, #0]
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801026c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010272:	4618      	mov	r0, r3
 8010274:	f7fd ffd6 	bl	800e224 <HAL_DMA_GetState>
 8010278:	4603      	mov	r3, r0
 801027a:	2b01      	cmp	r3, #1
 801027c:	d017      	beq.n	80102ae <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010282:	4a14      	ldr	r2, [pc, #80]	; (80102d4 <I2C_ITError+0x19c>)
 8010284:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	2200      	movs	r2, #0
 801028a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010292:	4618      	mov	r0, r3
 8010294:	f7fd fed6 	bl	800e044 <HAL_DMA_Abort_IT>
 8010298:	4603      	mov	r3, r0
 801029a:	2b00      	cmp	r3, #0
 801029c:	d011      	beq.n	80102c2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102a4:	687a      	ldr	r2, [r7, #4]
 80102a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80102a8:	4610      	mov	r0, r2
 80102aa:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80102ac:	e009      	b.n	80102c2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80102ae:	6878      	ldr	r0, [r7, #4]
 80102b0:	f000 f812 	bl	80102d8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80102b4:	e005      	b.n	80102c2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80102b6:	6878      	ldr	r0, [r7, #4]
 80102b8:	f000 f80e 	bl	80102d8 <I2C_TreatErrorCallback>
  }
}
 80102bc:	e002      	b.n	80102c4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80102be:	bf00      	nop
 80102c0:	e000      	b.n	80102c4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80102c2:	bf00      	nop
}
 80102c4:	bf00      	nop
 80102c6:	3710      	adds	r7, #16
 80102c8:	46bd      	mov	sp, r7
 80102ca:	bd80      	pop	{r7, pc}
 80102cc:	ffff0000 	.word	0xffff0000
 80102d0:	0800f95f 	.word	0x0800f95f
 80102d4:	0801036f 	.word	0x0801036f

080102d8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b082      	sub	sp, #8
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80102e6:	b2db      	uxtb	r3, r3
 80102e8:	2b60      	cmp	r3, #96	; 0x60
 80102ea:	d10e      	bne.n	801030a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	2220      	movs	r2, #32
 80102f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2200      	movs	r2, #0
 80102f8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	2200      	movs	r2, #0
 80102fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8010302:	6878      	ldr	r0, [r7, #4]
 8010304:	f7ff fb21 	bl	800f94a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010308:	e009      	b.n	801031e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	2200      	movs	r2, #0
 801030e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	2200      	movs	r2, #0
 8010314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8010318:	6878      	ldr	r0, [r7, #4]
 801031a:	f7ff fb0c 	bl	800f936 <HAL_I2C_ErrorCallback>
}
 801031e:	bf00      	nop
 8010320:	3708      	adds	r7, #8
 8010322:	46bd      	mov	sp, r7
 8010324:	bd80      	pop	{r7, pc}

08010326 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8010326:	b480      	push	{r7}
 8010328:	b083      	sub	sp, #12
 801032a:	af00      	add	r7, sp, #0
 801032c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	699b      	ldr	r3, [r3, #24]
 8010334:	f003 0302 	and.w	r3, r3, #2
 8010338:	2b02      	cmp	r3, #2
 801033a:	d103      	bne.n	8010344 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	2200      	movs	r2, #0
 8010342:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	699b      	ldr	r3, [r3, #24]
 801034a:	f003 0301 	and.w	r3, r3, #1
 801034e:	2b01      	cmp	r3, #1
 8010350:	d007      	beq.n	8010362 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	699a      	ldr	r2, [r3, #24]
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	f042 0201 	orr.w	r2, r2, #1
 8010360:	619a      	str	r2, [r3, #24]
  }
}
 8010362:	bf00      	nop
 8010364:	370c      	adds	r7, #12
 8010366:	46bd      	mov	sp, r7
 8010368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036c:	4770      	bx	lr

0801036e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 801036e:	b580      	push	{r7, lr}
 8010370:	b084      	sub	sp, #16
 8010372:	af00      	add	r7, sp, #0
 8010374:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801037a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010380:	2b00      	cmp	r3, #0
 8010382:	d003      	beq.n	801038c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010388:	2200      	movs	r2, #0
 801038a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010390:	2b00      	cmp	r3, #0
 8010392:	d003      	beq.n	801039c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010398:	2200      	movs	r2, #0
 801039a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 801039c:	68f8      	ldr	r0, [r7, #12]
 801039e:	f7ff ff9b 	bl	80102d8 <I2C_TreatErrorCallback>
}
 80103a2:	bf00      	nop
 80103a4:	3710      	adds	r7, #16
 80103a6:	46bd      	mov	sp, r7
 80103a8:	bd80      	pop	{r7, pc}

080103aa <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80103aa:	b580      	push	{r7, lr}
 80103ac:	b084      	sub	sp, #16
 80103ae:	af00      	add	r7, sp, #0
 80103b0:	60f8      	str	r0, [r7, #12]
 80103b2:	60b9      	str	r1, [r7, #8]
 80103b4:	603b      	str	r3, [r7, #0]
 80103b6:	4613      	mov	r3, r2
 80103b8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80103ba:	e022      	b.n	8010402 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80103bc:	683b      	ldr	r3, [r7, #0]
 80103be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103c2:	d01e      	beq.n	8010402 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80103c4:	f7fa f8ae 	bl	800a524 <HAL_GetTick>
 80103c8:	4602      	mov	r2, r0
 80103ca:	69bb      	ldr	r3, [r7, #24]
 80103cc:	1ad3      	subs	r3, r2, r3
 80103ce:	683a      	ldr	r2, [r7, #0]
 80103d0:	429a      	cmp	r2, r3
 80103d2:	d302      	bcc.n	80103da <I2C_WaitOnFlagUntilTimeout+0x30>
 80103d4:	683b      	ldr	r3, [r7, #0]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d113      	bne.n	8010402 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103de:	f043 0220 	orr.w	r2, r3, #32
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	2220      	movs	r2, #32
 80103ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	2200      	movs	r2, #0
 80103f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	2200      	movs	r2, #0
 80103fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80103fe:	2301      	movs	r3, #1
 8010400:	e00f      	b.n	8010422 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	699a      	ldr	r2, [r3, #24]
 8010408:	68bb      	ldr	r3, [r7, #8]
 801040a:	4013      	ands	r3, r2
 801040c:	68ba      	ldr	r2, [r7, #8]
 801040e:	429a      	cmp	r2, r3
 8010410:	bf0c      	ite	eq
 8010412:	2301      	moveq	r3, #1
 8010414:	2300      	movne	r3, #0
 8010416:	b2db      	uxtb	r3, r3
 8010418:	461a      	mov	r2, r3
 801041a:	79fb      	ldrb	r3, [r7, #7]
 801041c:	429a      	cmp	r2, r3
 801041e:	d0cd      	beq.n	80103bc <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010420:	2300      	movs	r3, #0
}
 8010422:	4618      	mov	r0, r3
 8010424:	3710      	adds	r7, #16
 8010426:	46bd      	mov	sp, r7
 8010428:	bd80      	pop	{r7, pc}

0801042a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801042a:	b580      	push	{r7, lr}
 801042c:	b084      	sub	sp, #16
 801042e:	af00      	add	r7, sp, #0
 8010430:	60f8      	str	r0, [r7, #12]
 8010432:	60b9      	str	r1, [r7, #8]
 8010434:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010436:	e02c      	b.n	8010492 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010438:	687a      	ldr	r2, [r7, #4]
 801043a:	68b9      	ldr	r1, [r7, #8]
 801043c:	68f8      	ldr	r0, [r7, #12]
 801043e:	f000 f871 	bl	8010524 <I2C_IsErrorOccurred>
 8010442:	4603      	mov	r3, r0
 8010444:	2b00      	cmp	r3, #0
 8010446:	d001      	beq.n	801044c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8010448:	2301      	movs	r3, #1
 801044a:	e02a      	b.n	80104a2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801044c:	68bb      	ldr	r3, [r7, #8]
 801044e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010452:	d01e      	beq.n	8010492 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010454:	f7fa f866 	bl	800a524 <HAL_GetTick>
 8010458:	4602      	mov	r2, r0
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	1ad3      	subs	r3, r2, r3
 801045e:	68ba      	ldr	r2, [r7, #8]
 8010460:	429a      	cmp	r2, r3
 8010462:	d302      	bcc.n	801046a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8010464:	68bb      	ldr	r3, [r7, #8]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d113      	bne.n	8010492 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801046e:	f043 0220 	orr.w	r2, r3, #32
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	2220      	movs	r2, #32
 801047a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	2200      	movs	r2, #0
 8010482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	2200      	movs	r2, #0
 801048a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801048e:	2301      	movs	r3, #1
 8010490:	e007      	b.n	80104a2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	699b      	ldr	r3, [r3, #24]
 8010498:	f003 0302 	and.w	r3, r3, #2
 801049c:	2b02      	cmp	r3, #2
 801049e:	d1cb      	bne.n	8010438 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80104a0:	2300      	movs	r3, #0
}
 80104a2:	4618      	mov	r0, r3
 80104a4:	3710      	adds	r7, #16
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bd80      	pop	{r7, pc}

080104aa <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80104aa:	b580      	push	{r7, lr}
 80104ac:	b084      	sub	sp, #16
 80104ae:	af00      	add	r7, sp, #0
 80104b0:	60f8      	str	r0, [r7, #12]
 80104b2:	60b9      	str	r1, [r7, #8]
 80104b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80104b6:	e028      	b.n	801050a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80104b8:	687a      	ldr	r2, [r7, #4]
 80104ba:	68b9      	ldr	r1, [r7, #8]
 80104bc:	68f8      	ldr	r0, [r7, #12]
 80104be:	f000 f831 	bl	8010524 <I2C_IsErrorOccurred>
 80104c2:	4603      	mov	r3, r0
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d001      	beq.n	80104cc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80104c8:	2301      	movs	r3, #1
 80104ca:	e026      	b.n	801051a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80104cc:	f7fa f82a 	bl	800a524 <HAL_GetTick>
 80104d0:	4602      	mov	r2, r0
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	1ad3      	subs	r3, r2, r3
 80104d6:	68ba      	ldr	r2, [r7, #8]
 80104d8:	429a      	cmp	r2, r3
 80104da:	d302      	bcc.n	80104e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80104dc:	68bb      	ldr	r3, [r7, #8]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d113      	bne.n	801050a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104e6:	f043 0220 	orr.w	r2, r3, #32
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	2220      	movs	r2, #32
 80104f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	2200      	movs	r2, #0
 80104fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	2200      	movs	r2, #0
 8010502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8010506:	2301      	movs	r3, #1
 8010508:	e007      	b.n	801051a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	699b      	ldr	r3, [r3, #24]
 8010510:	f003 0320 	and.w	r3, r3, #32
 8010514:	2b20      	cmp	r3, #32
 8010516:	d1cf      	bne.n	80104b8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8010518:	2300      	movs	r3, #0
}
 801051a:	4618      	mov	r0, r3
 801051c:	3710      	adds	r7, #16
 801051e:	46bd      	mov	sp, r7
 8010520:	bd80      	pop	{r7, pc}
	...

08010524 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b08a      	sub	sp, #40	; 0x28
 8010528:	af00      	add	r7, sp, #0
 801052a:	60f8      	str	r0, [r7, #12]
 801052c:	60b9      	str	r1, [r7, #8]
 801052e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010530:	2300      	movs	r3, #0
 8010532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	699b      	ldr	r3, [r3, #24]
 801053c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 801053e:	2300      	movs	r3, #0
 8010540:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8010546:	69bb      	ldr	r3, [r7, #24]
 8010548:	f003 0310 	and.w	r3, r3, #16
 801054c:	2b00      	cmp	r3, #0
 801054e:	d075      	beq.n	801063c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	2210      	movs	r2, #16
 8010556:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8010558:	e056      	b.n	8010608 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801055a:	68bb      	ldr	r3, [r7, #8]
 801055c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010560:	d052      	beq.n	8010608 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8010562:	f7f9 ffdf 	bl	800a524 <HAL_GetTick>
 8010566:	4602      	mov	r2, r0
 8010568:	69fb      	ldr	r3, [r7, #28]
 801056a:	1ad3      	subs	r3, r2, r3
 801056c:	68ba      	ldr	r2, [r7, #8]
 801056e:	429a      	cmp	r2, r3
 8010570:	d302      	bcc.n	8010578 <I2C_IsErrorOccurred+0x54>
 8010572:	68bb      	ldr	r3, [r7, #8]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d147      	bne.n	8010608 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	685b      	ldr	r3, [r3, #4]
 801057e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010582:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801058a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	699b      	ldr	r3, [r3, #24]
 8010592:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010596:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801059a:	d12e      	bne.n	80105fa <I2C_IsErrorOccurred+0xd6>
 801059c:	697b      	ldr	r3, [r7, #20]
 801059e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80105a2:	d02a      	beq.n	80105fa <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80105a4:	7cfb      	ldrb	r3, [r7, #19]
 80105a6:	2b20      	cmp	r3, #32
 80105a8:	d027      	beq.n	80105fa <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	685a      	ldr	r2, [r3, #4]
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80105b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80105ba:	f7f9 ffb3 	bl	800a524 <HAL_GetTick>
 80105be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80105c0:	e01b      	b.n	80105fa <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80105c2:	f7f9 ffaf 	bl	800a524 <HAL_GetTick>
 80105c6:	4602      	mov	r2, r0
 80105c8:	69fb      	ldr	r3, [r7, #28]
 80105ca:	1ad3      	subs	r3, r2, r3
 80105cc:	2b19      	cmp	r3, #25
 80105ce:	d914      	bls.n	80105fa <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105d4:	f043 0220 	orr.w	r2, r3, #32
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	2220      	movs	r2, #32
 80105e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	2200      	movs	r2, #0
 80105e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	2200      	movs	r2, #0
 80105f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80105f4:	2301      	movs	r3, #1
 80105f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	699b      	ldr	r3, [r3, #24]
 8010600:	f003 0320 	and.w	r3, r3, #32
 8010604:	2b20      	cmp	r3, #32
 8010606:	d1dc      	bne.n	80105c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	699b      	ldr	r3, [r3, #24]
 801060e:	f003 0320 	and.w	r3, r3, #32
 8010612:	2b20      	cmp	r3, #32
 8010614:	d003      	beq.n	801061e <I2C_IsErrorOccurred+0xfa>
 8010616:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801061a:	2b00      	cmp	r3, #0
 801061c:	d09d      	beq.n	801055a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 801061e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010622:	2b00      	cmp	r3, #0
 8010624:	d103      	bne.n	801062e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	2220      	movs	r2, #32
 801062c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 801062e:	6a3b      	ldr	r3, [r7, #32]
 8010630:	f043 0304 	orr.w	r3, r3, #4
 8010634:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8010636:	2301      	movs	r3, #1
 8010638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	699b      	ldr	r3, [r3, #24]
 8010642:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8010644:	69bb      	ldr	r3, [r7, #24]
 8010646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801064a:	2b00      	cmp	r3, #0
 801064c:	d00b      	beq.n	8010666 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 801064e:	6a3b      	ldr	r3, [r7, #32]
 8010650:	f043 0301 	orr.w	r3, r3, #1
 8010654:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801065e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010660:	2301      	movs	r3, #1
 8010662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8010666:	69bb      	ldr	r3, [r7, #24]
 8010668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801066c:	2b00      	cmp	r3, #0
 801066e:	d00b      	beq.n	8010688 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8010670:	6a3b      	ldr	r3, [r7, #32]
 8010672:	f043 0308 	orr.w	r3, r3, #8
 8010676:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010680:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010682:	2301      	movs	r3, #1
 8010684:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8010688:	69bb      	ldr	r3, [r7, #24]
 801068a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801068e:	2b00      	cmp	r3, #0
 8010690:	d00b      	beq.n	80106aa <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8010692:	6a3b      	ldr	r3, [r7, #32]
 8010694:	f043 0302 	orr.w	r3, r3, #2
 8010698:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80106a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80106a4:	2301      	movs	r3, #1
 80106a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80106aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d01c      	beq.n	80106ec <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80106b2:	68f8      	ldr	r0, [r7, #12]
 80106b4:	f7ff fe37 	bl	8010326 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	6859      	ldr	r1, [r3, #4]
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	681a      	ldr	r2, [r3, #0]
 80106c2:	4b0d      	ldr	r3, [pc, #52]	; (80106f8 <I2C_IsErrorOccurred+0x1d4>)
 80106c4:	400b      	ands	r3, r1
 80106c6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80106cc:	6a3b      	ldr	r3, [r7, #32]
 80106ce:	431a      	orrs	r2, r3
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	2220      	movs	r2, #32
 80106d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	2200      	movs	r2, #0
 80106e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	2200      	movs	r2, #0
 80106e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80106ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80106f0:	4618      	mov	r0, r3
 80106f2:	3728      	adds	r7, #40	; 0x28
 80106f4:	46bd      	mov	sp, r7
 80106f6:	bd80      	pop	{r7, pc}
 80106f8:	fe00e800 	.word	0xfe00e800

080106fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b086      	sub	sp, #24
 8010700:	af00      	add	r7, sp, #0
 8010702:	60f8      	str	r0, [r7, #12]
 8010704:	607b      	str	r3, [r7, #4]
 8010706:	460b      	mov	r3, r1
 8010708:	817b      	strh	r3, [r7, #10]
 801070a:	4613      	mov	r3, r2
 801070c:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	4a2d      	ldr	r2, [pc, #180]	; (80107c8 <I2C_TransferConfig+0xcc>)
 8010714:	4293      	cmp	r3, r2
 8010716:	d00e      	beq.n	8010736 <I2C_TransferConfig+0x3a>
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	4a2b      	ldr	r2, [pc, #172]	; (80107cc <I2C_TransferConfig+0xd0>)
 801071e:	4293      	cmp	r3, r2
 8010720:	d009      	beq.n	8010736 <I2C_TransferConfig+0x3a>
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	4a2a      	ldr	r2, [pc, #168]	; (80107d0 <I2C_TransferConfig+0xd4>)
 8010728:	4293      	cmp	r3, r2
 801072a:	d004      	beq.n	8010736 <I2C_TransferConfig+0x3a>
 801072c:	f641 3135 	movw	r1, #6965	; 0x1b35
 8010730:	4828      	ldr	r0, [pc, #160]	; (80107d4 <I2C_TransferConfig+0xd8>)
 8010732:	f7f3 ff27 	bl	8004584 <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801073c:	d00b      	beq.n	8010756 <I2C_TransferConfig+0x5a>
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010744:	d007      	beq.n	8010756 <I2C_TransferConfig+0x5a>
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d004      	beq.n	8010756 <I2C_TransferConfig+0x5a>
 801074c:	f641 3136 	movw	r1, #6966	; 0x1b36
 8010750:	4820      	ldr	r0, [pc, #128]	; (80107d4 <I2C_TransferConfig+0xd8>)
 8010752:	f7f3 ff17 	bl	8004584 <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8010756:	6a3b      	ldr	r3, [r7, #32]
 8010758:	4a1f      	ldr	r2, [pc, #124]	; (80107d8 <I2C_TransferConfig+0xdc>)
 801075a:	4293      	cmp	r3, r2
 801075c:	d00f      	beq.n	801077e <I2C_TransferConfig+0x82>
 801075e:	6a3b      	ldr	r3, [r7, #32]
 8010760:	4a1e      	ldr	r2, [pc, #120]	; (80107dc <I2C_TransferConfig+0xe0>)
 8010762:	4293      	cmp	r3, r2
 8010764:	d00b      	beq.n	801077e <I2C_TransferConfig+0x82>
 8010766:	6a3b      	ldr	r3, [r7, #32]
 8010768:	4a1d      	ldr	r2, [pc, #116]	; (80107e0 <I2C_TransferConfig+0xe4>)
 801076a:	4293      	cmp	r3, r2
 801076c:	d007      	beq.n	801077e <I2C_TransferConfig+0x82>
 801076e:	6a3b      	ldr	r3, [r7, #32]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d004      	beq.n	801077e <I2C_TransferConfig+0x82>
 8010774:	f641 3137 	movw	r1, #6967	; 0x1b37
 8010778:	4816      	ldr	r0, [pc, #88]	; (80107d4 <I2C_TransferConfig+0xd8>)
 801077a:	f7f3 ff03 	bl	8004584 <assert_failed>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801077e:	897b      	ldrh	r3, [r7, #10]
 8010780:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010784:	7a7b      	ldrb	r3, [r7, #9]
 8010786:	041b      	lsls	r3, r3, #16
 8010788:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801078c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010792:	6a3b      	ldr	r3, [r7, #32]
 8010794:	4313      	orrs	r3, r2
 8010796:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801079a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	685a      	ldr	r2, [r3, #4]
 80107a2:	6a3b      	ldr	r3, [r7, #32]
 80107a4:	0d5b      	lsrs	r3, r3, #21
 80107a6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80107aa:	4b0e      	ldr	r3, [pc, #56]	; (80107e4 <I2C_TransferConfig+0xe8>)
 80107ac:	430b      	orrs	r3, r1
 80107ae:	43db      	mvns	r3, r3
 80107b0:	ea02 0103 	and.w	r1, r2, r3
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	697a      	ldr	r2, [r7, #20]
 80107ba:	430a      	orrs	r2, r1
 80107bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80107be:	bf00      	nop
 80107c0:	3718      	adds	r7, #24
 80107c2:	46bd      	mov	sp, r7
 80107c4:	bd80      	pop	{r7, pc}
 80107c6:	bf00      	nop
 80107c8:	40005400 	.word	0x40005400
 80107cc:	40005800 	.word	0x40005800
 80107d0:	40005c00 	.word	0x40005c00
 80107d4:	0801b998 	.word	0x0801b998
 80107d8:	80004000 	.word	0x80004000
 80107dc:	80002400 	.word	0x80002400
 80107e0:	80002000 	.word	0x80002000
 80107e4:	03ff63ff 	.word	0x03ff63ff

080107e8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80107e8:	b480      	push	{r7}
 80107ea:	b085      	sub	sp, #20
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
 80107f0:	460b      	mov	r3, r1
 80107f2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80107f4:	2300      	movs	r3, #0
 80107f6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80107f8:	887b      	ldrh	r3, [r7, #2]
 80107fa:	f003 0301 	and.w	r3, r3, #1
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d00f      	beq.n	8010822 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8010808:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010810:	b2db      	uxtb	r3, r3
 8010812:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8010816:	2b28      	cmp	r3, #40	; 0x28
 8010818:	d003      	beq.n	8010822 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8010820:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010822:	887b      	ldrh	r3, [r7, #2]
 8010824:	f003 0302 	and.w	r3, r3, #2
 8010828:	2b00      	cmp	r3, #0
 801082a:	d00f      	beq.n	801084c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8010832:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801083a:	b2db      	uxtb	r3, r3
 801083c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8010840:	2b28      	cmp	r3, #40	; 0x28
 8010842:	d003      	beq.n	801084c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 801084a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801084c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010850:	2b00      	cmp	r3, #0
 8010852:	da03      	bge.n	801085c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 801085a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 801085c:	887b      	ldrh	r3, [r7, #2]
 801085e:	2b10      	cmp	r3, #16
 8010860:	d103      	bne.n	801086a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8010868:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 801086a:	887b      	ldrh	r3, [r7, #2]
 801086c:	2b20      	cmp	r3, #32
 801086e:	d103      	bne.n	8010878 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	f043 0320 	orr.w	r3, r3, #32
 8010876:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8010878:	887b      	ldrh	r3, [r7, #2]
 801087a:	2b40      	cmp	r3, #64	; 0x40
 801087c:	d103      	bne.n	8010886 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010884:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	6819      	ldr	r1, [r3, #0]
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	43da      	mvns	r2, r3
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	400a      	ands	r2, r1
 8010896:	601a      	str	r2, [r3, #0]
}
 8010898:	bf00      	nop
 801089a:	3714      	adds	r7, #20
 801089c:	46bd      	mov	sp, r7
 801089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a2:	4770      	bx	lr

080108a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b082      	sub	sp, #8
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
 80108ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	4a30      	ldr	r2, [pc, #192]	; (8010974 <HAL_I2CEx_ConfigAnalogFilter+0xd0>)
 80108b4:	4293      	cmp	r3, r2
 80108b6:	d00d      	beq.n	80108d4 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	4a2e      	ldr	r2, [pc, #184]	; (8010978 <HAL_I2CEx_ConfigAnalogFilter+0xd4>)
 80108be:	4293      	cmp	r3, r2
 80108c0:	d008      	beq.n	80108d4 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	4a2d      	ldr	r2, [pc, #180]	; (801097c <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 80108c8:	4293      	cmp	r3, r2
 80108ca:	d003      	beq.n	80108d4 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 80108cc:	2163      	movs	r1, #99	; 0x63
 80108ce:	482c      	ldr	r0, [pc, #176]	; (8010980 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 80108d0:	f7f3 fe58 	bl	8004584 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80108d4:	683b      	ldr	r3, [r7, #0]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d007      	beq.n	80108ea <HAL_I2CEx_ConfigAnalogFilter+0x46>
 80108da:	683b      	ldr	r3, [r7, #0]
 80108dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80108e0:	d003      	beq.n	80108ea <HAL_I2CEx_ConfigAnalogFilter+0x46>
 80108e2:	2164      	movs	r1, #100	; 0x64
 80108e4:	4826      	ldr	r0, [pc, #152]	; (8010980 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 80108e6:	f7f3 fe4d 	bl	8004584 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80108f0:	b2db      	uxtb	r3, r3
 80108f2:	2b20      	cmp	r3, #32
 80108f4:	d138      	bne.n	8010968 <HAL_I2CEx_ConfigAnalogFilter+0xc4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80108fc:	2b01      	cmp	r3, #1
 80108fe:	d101      	bne.n	8010904 <HAL_I2CEx_ConfigAnalogFilter+0x60>
 8010900:	2302      	movs	r3, #2
 8010902:	e032      	b.n	801096a <HAL_I2CEx_ConfigAnalogFilter+0xc6>
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	2201      	movs	r2, #1
 8010908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	2224      	movs	r2, #36	; 0x24
 8010910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	681a      	ldr	r2, [r3, #0]
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	f022 0201 	bic.w	r2, r2, #1
 8010922:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	681a      	ldr	r2, [r3, #0]
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010932:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	6819      	ldr	r1, [r3, #0]
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	683a      	ldr	r2, [r7, #0]
 8010940:	430a      	orrs	r2, r1
 8010942:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	681a      	ldr	r2, [r3, #0]
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	f042 0201 	orr.w	r2, r2, #1
 8010952:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	2220      	movs	r2, #32
 8010958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	2200      	movs	r2, #0
 8010960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8010964:	2300      	movs	r3, #0
 8010966:	e000      	b.n	801096a <HAL_I2CEx_ConfigAnalogFilter+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8010968:	2302      	movs	r3, #2
  }
}
 801096a:	4618      	mov	r0, r3
 801096c:	3708      	adds	r7, #8
 801096e:	46bd      	mov	sp, r7
 8010970:	bd80      	pop	{r7, pc}
 8010972:	bf00      	nop
 8010974:	40005400 	.word	0x40005400
 8010978:	40005800 	.word	0x40005800
 801097c:	40005c00 	.word	0x40005c00
 8010980:	0801b9d0 	.word	0x0801b9d0

08010984 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8010984:	b580      	push	{r7, lr}
 8010986:	b084      	sub	sp, #16
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
 801098c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	4a2e      	ldr	r2, [pc, #184]	; (8010a4c <HAL_I2CEx_ConfigDigitalFilter+0xc8>)
 8010994:	4293      	cmp	r3, r2
 8010996:	d00d      	beq.n	80109b4 <HAL_I2CEx_ConfigDigitalFilter+0x30>
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	4a2c      	ldr	r2, [pc, #176]	; (8010a50 <HAL_I2CEx_ConfigDigitalFilter+0xcc>)
 801099e:	4293      	cmp	r3, r2
 80109a0:	d008      	beq.n	80109b4 <HAL_I2CEx_ConfigDigitalFilter+0x30>
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	4a2b      	ldr	r2, [pc, #172]	; (8010a54 <HAL_I2CEx_ConfigDigitalFilter+0xd0>)
 80109a8:	4293      	cmp	r3, r2
 80109aa:	d003      	beq.n	80109b4 <HAL_I2CEx_ConfigDigitalFilter+0x30>
 80109ac:	2191      	movs	r1, #145	; 0x91
 80109ae:	482a      	ldr	r0, [pc, #168]	; (8010a58 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 80109b0:	f7f3 fde8 	bl	8004584 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 80109b4:	683b      	ldr	r3, [r7, #0]
 80109b6:	2b0f      	cmp	r3, #15
 80109b8:	d903      	bls.n	80109c2 <HAL_I2CEx_ConfigDigitalFilter+0x3e>
 80109ba:	2192      	movs	r1, #146	; 0x92
 80109bc:	4826      	ldr	r0, [pc, #152]	; (8010a58 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 80109be:	f7f3 fde1 	bl	8004584 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80109c8:	b2db      	uxtb	r3, r3
 80109ca:	2b20      	cmp	r3, #32
 80109cc:	d139      	bne.n	8010a42 <HAL_I2CEx_ConfigDigitalFilter+0xbe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80109d4:	2b01      	cmp	r3, #1
 80109d6:	d101      	bne.n	80109dc <HAL_I2CEx_ConfigDigitalFilter+0x58>
 80109d8:	2302      	movs	r3, #2
 80109da:	e033      	b.n	8010a44 <HAL_I2CEx_ConfigDigitalFilter+0xc0>
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	2201      	movs	r2, #1
 80109e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	2224      	movs	r2, #36	; 0x24
 80109e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	681a      	ldr	r2, [r3, #0]
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	f022 0201 	bic.w	r2, r2, #1
 80109fa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8010a0a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8010a0c:	683b      	ldr	r3, [r7, #0]
 8010a0e:	021b      	lsls	r3, r3, #8
 8010a10:	68fa      	ldr	r2, [r7, #12]
 8010a12:	4313      	orrs	r3, r2
 8010a14:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	68fa      	ldr	r2, [r7, #12]
 8010a1c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	681a      	ldr	r2, [r3, #0]
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	f042 0201 	orr.w	r2, r2, #1
 8010a2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	2220      	movs	r2, #32
 8010a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	2200      	movs	r2, #0
 8010a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8010a3e:	2300      	movs	r3, #0
 8010a40:	e000      	b.n	8010a44 <HAL_I2CEx_ConfigDigitalFilter+0xc0>
  }
  else
  {
    return HAL_BUSY;
 8010a42:	2302      	movs	r3, #2
  }
}
 8010a44:	4618      	mov	r0, r3
 8010a46:	3710      	adds	r7, #16
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	bd80      	pop	{r7, pc}
 8010a4c:	40005400 	.word	0x40005400
 8010a50:	40005800 	.word	0x40005800
 8010a54:	40005c00 	.word	0x40005c00
 8010a58:	0801b9d0 	.word	0x0801b9d0

08010a5c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b084      	sub	sp, #16
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d101      	bne.n	8010a6e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8010a6a:	2301      	movs	r3, #1
 8010a6c:	e07c      	b.n	8010b68 <HAL_IWDG_Init+0x10c>
  }

  /* Check the parameters */
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	4a3f      	ldr	r2, [pc, #252]	; (8010b70 <HAL_IWDG_Init+0x114>)
 8010a74:	4293      	cmp	r3, r2
 8010a76:	d003      	beq.n	8010a80 <HAL_IWDG_Init+0x24>
 8010a78:	21b5      	movs	r1, #181	; 0xb5
 8010a7a:	483e      	ldr	r0, [pc, #248]	; (8010b74 <HAL_IWDG_Init+0x118>)
 8010a7c:	f7f3 fd82 	bl	8004584 <assert_failed>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	685b      	ldr	r3, [r3, #4]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d01b      	beq.n	8010ac0 <HAL_IWDG_Init+0x64>
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	685b      	ldr	r3, [r3, #4]
 8010a8c:	2b01      	cmp	r3, #1
 8010a8e:	d017      	beq.n	8010ac0 <HAL_IWDG_Init+0x64>
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	685b      	ldr	r3, [r3, #4]
 8010a94:	2b02      	cmp	r3, #2
 8010a96:	d013      	beq.n	8010ac0 <HAL_IWDG_Init+0x64>
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	685b      	ldr	r3, [r3, #4]
 8010a9c:	2b03      	cmp	r3, #3
 8010a9e:	d00f      	beq.n	8010ac0 <HAL_IWDG_Init+0x64>
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	685b      	ldr	r3, [r3, #4]
 8010aa4:	2b04      	cmp	r3, #4
 8010aa6:	d00b      	beq.n	8010ac0 <HAL_IWDG_Init+0x64>
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	685b      	ldr	r3, [r3, #4]
 8010aac:	2b05      	cmp	r3, #5
 8010aae:	d007      	beq.n	8010ac0 <HAL_IWDG_Init+0x64>
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	685b      	ldr	r3, [r3, #4]
 8010ab4:	2b06      	cmp	r3, #6
 8010ab6:	d003      	beq.n	8010ac0 <HAL_IWDG_Init+0x64>
 8010ab8:	21b6      	movs	r1, #182	; 0xb6
 8010aba:	482e      	ldr	r0, [pc, #184]	; (8010b74 <HAL_IWDG_Init+0x118>)
 8010abc:	f7f3 fd62 	bl	8004584 <assert_failed>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	689b      	ldr	r3, [r3, #8]
 8010ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010ac8:	d303      	bcc.n	8010ad2 <HAL_IWDG_Init+0x76>
 8010aca:	21b7      	movs	r1, #183	; 0xb7
 8010acc:	4829      	ldr	r0, [pc, #164]	; (8010b74 <HAL_IWDG_Init+0x118>)
 8010ace:	f7f3 fd59 	bl	8004584 <assert_failed>
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	68db      	ldr	r3, [r3, #12]
 8010ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010ada:	d303      	bcc.n	8010ae4 <HAL_IWDG_Init+0x88>
 8010adc:	21b8      	movs	r1, #184	; 0xb8
 8010ade:	4825      	ldr	r0, [pc, #148]	; (8010b74 <HAL_IWDG_Init+0x118>)
 8010ae0:	f7f3 fd50 	bl	8004584 <assert_failed>

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8010aec:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	f245 5255 	movw	r2, #21845	; 0x5555
 8010af6:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	687a      	ldr	r2, [r7, #4]
 8010afe:	6852      	ldr	r2, [r2, #4]
 8010b00:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	687a      	ldr	r2, [r7, #4]
 8010b08:	6892      	ldr	r2, [r2, #8]
 8010b0a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8010b0c:	f7f9 fd0a 	bl	800a524 <HAL_GetTick>
 8010b10:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8010b12:	e00f      	b.n	8010b34 <HAL_IWDG_Init+0xd8>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8010b14:	f7f9 fd06 	bl	800a524 <HAL_GetTick>
 8010b18:	4602      	mov	r2, r0
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	1ad3      	subs	r3, r2, r3
 8010b1e:	2b31      	cmp	r3, #49	; 0x31
 8010b20:	d908      	bls.n	8010b34 <HAL_IWDG_Init+0xd8>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	68db      	ldr	r3, [r3, #12]
 8010b28:	f003 0307 	and.w	r3, r3, #7
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d001      	beq.n	8010b34 <HAL_IWDG_Init+0xd8>
      {
        return HAL_TIMEOUT;
 8010b30:	2303      	movs	r3, #3
 8010b32:	e019      	b.n	8010b68 <HAL_IWDG_Init+0x10c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	68db      	ldr	r3, [r3, #12]
 8010b3a:	f003 0307 	and.w	r3, r3, #7
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d1e8      	bne.n	8010b14 <HAL_IWDG_Init+0xb8>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	691a      	ldr	r2, [r3, #16]
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	68db      	ldr	r3, [r3, #12]
 8010b4c:	429a      	cmp	r2, r3
 8010b4e:	d005      	beq.n	8010b5c <HAL_IWDG_Init+0x100>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	687a      	ldr	r2, [r7, #4]
 8010b56:	68d2      	ldr	r2, [r2, #12]
 8010b58:	611a      	str	r2, [r3, #16]
 8010b5a:	e004      	b.n	8010b66 <HAL_IWDG_Init+0x10a>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8010b64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010b66:	2300      	movs	r3, #0
}
 8010b68:	4618      	mov	r0, r3
 8010b6a:	3710      	adds	r7, #16
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bd80      	pop	{r7, pc}
 8010b70:	40003000 	.word	0x40003000
 8010b74:	0801ba0c 	.word	0x0801ba0c

08010b78 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8010b78:	b480      	push	{r7}
 8010b7a:	b083      	sub	sp, #12
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8010b88:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8010b8a:	2300      	movs	r3, #0
}
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	370c      	adds	r7, #12
 8010b90:	46bd      	mov	sp, r7
 8010b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b96:	4770      	bx	lr

08010b98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8010b98:	b480      	push	{r7}
 8010b9a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8010b9c:	4b04      	ldr	r3, [pc, #16]	; (8010bb0 <HAL_PWREx_GetVoltageRange+0x18>)
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bac:	4770      	bx	lr
 8010bae:	bf00      	nop
 8010bb0:	40007000 	.word	0x40007000

08010bb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b084      	sub	sp, #16
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010bc2:	d007      	beq.n	8010bd4 <HAL_PWREx_ControlVoltageScaling+0x20>
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010bca:	d003      	beq.n	8010bd4 <HAL_PWREx_ControlVoltageScaling+0x20>
 8010bcc:	21a7      	movs	r1, #167	; 0xa7
 8010bce:	4826      	ldr	r0, [pc, #152]	; (8010c68 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8010bd0:	f7f3 fcd8 	bl	8004584 <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010bda:	d130      	bne.n	8010c3e <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8010bdc:	4b23      	ldr	r3, [pc, #140]	; (8010c6c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010be8:	d038      	beq.n	8010c5c <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8010bea:	4b20      	ldr	r3, [pc, #128]	; (8010c6c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8010bf2:	4a1e      	ldr	r2, [pc, #120]	; (8010c6c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8010bf4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010bf8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8010bfa:	4b1d      	ldr	r3, [pc, #116]	; (8010c70 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	2232      	movs	r2, #50	; 0x32
 8010c00:	fb02 f303 	mul.w	r3, r2, r3
 8010c04:	4a1b      	ldr	r2, [pc, #108]	; (8010c74 <HAL_PWREx_ControlVoltageScaling+0xc0>)
 8010c06:	fba2 2303 	umull	r2, r3, r2, r3
 8010c0a:	0c9b      	lsrs	r3, r3, #18
 8010c0c:	3301      	adds	r3, #1
 8010c0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8010c10:	e002      	b.n	8010c18 <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	3b01      	subs	r3, #1
 8010c16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8010c18:	4b14      	ldr	r3, [pc, #80]	; (8010c6c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8010c1a:	695b      	ldr	r3, [r3, #20]
 8010c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010c24:	d102      	bne.n	8010c2c <HAL_PWREx_ControlVoltageScaling+0x78>
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d1f2      	bne.n	8010c12 <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8010c2c:	4b0f      	ldr	r3, [pc, #60]	; (8010c6c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8010c2e:	695b      	ldr	r3, [r3, #20]
 8010c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010c38:	d110      	bne.n	8010c5c <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 8010c3a:	2303      	movs	r3, #3
 8010c3c:	e00f      	b.n	8010c5e <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8010c3e:	4b0b      	ldr	r3, [pc, #44]	; (8010c6c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010c4a:	d007      	beq.n	8010c5c <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8010c4c:	4b07      	ldr	r3, [pc, #28]	; (8010c6c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8010c54:	4a05      	ldr	r2, [pc, #20]	; (8010c6c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8010c56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010c5a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8010c5c:	2300      	movs	r3, #0
}
 8010c5e:	4618      	mov	r0, r3
 8010c60:	3710      	adds	r7, #16
 8010c62:	46bd      	mov	sp, r7
 8010c64:	bd80      	pop	{r7, pc}
 8010c66:	bf00      	nop
 8010c68:	0801ba48 	.word	0x0801ba48
 8010c6c:	40007000 	.word	0x40007000
 8010c70:	20000ff8 	.word	0x20000ff8
 8010c74:	431bde83 	.word	0x431bde83

08010c78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b088      	sub	sp, #32
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d102      	bne.n	8010c8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8010c86:	2301      	movs	r3, #1
 8010c88:	f000 bd39 	b.w	80116fe <HAL_RCC_OscConfig+0xa86>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d00a      	beq.n	8010caa <HAL_RCC_OscConfig+0x32>
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d004      	beq.n	8010caa <HAL_RCC_OscConfig+0x32>
 8010ca0:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8010ca4:	48a3      	ldr	r0, [pc, #652]	; (8010f34 <HAL_RCC_OscConfig+0x2bc>)
 8010ca6:	f7f3 fc6d 	bl	8004584 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010caa:	4ba3      	ldr	r3, [pc, #652]	; (8010f38 <HAL_RCC_OscConfig+0x2c0>)
 8010cac:	689b      	ldr	r3, [r3, #8]
 8010cae:	f003 030c 	and.w	r3, r3, #12
 8010cb2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8010cb4:	4ba0      	ldr	r3, [pc, #640]	; (8010f38 <HAL_RCC_OscConfig+0x2c0>)
 8010cb6:	68db      	ldr	r3, [r3, #12]
 8010cb8:	f003 0303 	and.w	r3, r3, #3
 8010cbc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	f003 0310 	and.w	r3, r3, #16
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	f000 813f 	beq.w	8010f4a <HAL_RCC_OscConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	699b      	ldr	r3, [r3, #24]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d008      	beq.n	8010ce6 <HAL_RCC_OscConfig+0x6e>
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	699b      	ldr	r3, [r3, #24]
 8010cd8:	2b01      	cmp	r3, #1
 8010cda:	d004      	beq.n	8010ce6 <HAL_RCC_OscConfig+0x6e>
 8010cdc:	f240 11a9 	movw	r1, #425	; 0x1a9
 8010ce0:	4894      	ldr	r0, [pc, #592]	; (8010f34 <HAL_RCC_OscConfig+0x2bc>)
 8010ce2:	f7f3 fc4f 	bl	8004584 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	69db      	ldr	r3, [r3, #28]
 8010cea:	2bff      	cmp	r3, #255	; 0xff
 8010cec:	d904      	bls.n	8010cf8 <HAL_RCC_OscConfig+0x80>
 8010cee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010cf2:	4890      	ldr	r0, [pc, #576]	; (8010f34 <HAL_RCC_OscConfig+0x2bc>)
 8010cf4:	f7f3 fc46 	bl	8004584 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	6a1b      	ldr	r3, [r3, #32]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d030      	beq.n	8010d62 <HAL_RCC_OscConfig+0xea>
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	6a1b      	ldr	r3, [r3, #32]
 8010d04:	2b10      	cmp	r3, #16
 8010d06:	d02c      	beq.n	8010d62 <HAL_RCC_OscConfig+0xea>
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	6a1b      	ldr	r3, [r3, #32]
 8010d0c:	2b20      	cmp	r3, #32
 8010d0e:	d028      	beq.n	8010d62 <HAL_RCC_OscConfig+0xea>
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	6a1b      	ldr	r3, [r3, #32]
 8010d14:	2b30      	cmp	r3, #48	; 0x30
 8010d16:	d024      	beq.n	8010d62 <HAL_RCC_OscConfig+0xea>
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	6a1b      	ldr	r3, [r3, #32]
 8010d1c:	2b40      	cmp	r3, #64	; 0x40
 8010d1e:	d020      	beq.n	8010d62 <HAL_RCC_OscConfig+0xea>
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	6a1b      	ldr	r3, [r3, #32]
 8010d24:	2b50      	cmp	r3, #80	; 0x50
 8010d26:	d01c      	beq.n	8010d62 <HAL_RCC_OscConfig+0xea>
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	6a1b      	ldr	r3, [r3, #32]
 8010d2c:	2b60      	cmp	r3, #96	; 0x60
 8010d2e:	d018      	beq.n	8010d62 <HAL_RCC_OscConfig+0xea>
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	6a1b      	ldr	r3, [r3, #32]
 8010d34:	2b70      	cmp	r3, #112	; 0x70
 8010d36:	d014      	beq.n	8010d62 <HAL_RCC_OscConfig+0xea>
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	6a1b      	ldr	r3, [r3, #32]
 8010d3c:	2b80      	cmp	r3, #128	; 0x80
 8010d3e:	d010      	beq.n	8010d62 <HAL_RCC_OscConfig+0xea>
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	6a1b      	ldr	r3, [r3, #32]
 8010d44:	2b90      	cmp	r3, #144	; 0x90
 8010d46:	d00c      	beq.n	8010d62 <HAL_RCC_OscConfig+0xea>
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	6a1b      	ldr	r3, [r3, #32]
 8010d4c:	2ba0      	cmp	r3, #160	; 0xa0
 8010d4e:	d008      	beq.n	8010d62 <HAL_RCC_OscConfig+0xea>
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	6a1b      	ldr	r3, [r3, #32]
 8010d54:	2bb0      	cmp	r3, #176	; 0xb0
 8010d56:	d004      	beq.n	8010d62 <HAL_RCC_OscConfig+0xea>
 8010d58:	f240 11ab 	movw	r1, #427	; 0x1ab
 8010d5c:	4875      	ldr	r0, [pc, #468]	; (8010f34 <HAL_RCC_OscConfig+0x2bc>)
 8010d5e:	f7f3 fc11 	bl	8004584 <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8010d62:	69bb      	ldr	r3, [r7, #24]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d007      	beq.n	8010d78 <HAL_RCC_OscConfig+0x100>
 8010d68:	69bb      	ldr	r3, [r7, #24]
 8010d6a:	2b0c      	cmp	r3, #12
 8010d6c:	f040 808f 	bne.w	8010e8e <HAL_RCC_OscConfig+0x216>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8010d70:	697b      	ldr	r3, [r7, #20]
 8010d72:	2b01      	cmp	r3, #1
 8010d74:	f040 808b 	bne.w	8010e8e <HAL_RCC_OscConfig+0x216>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8010d78:	4b6f      	ldr	r3, [pc, #444]	; (8010f38 <HAL_RCC_OscConfig+0x2c0>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	f003 0302 	and.w	r3, r3, #2
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d006      	beq.n	8010d92 <HAL_RCC_OscConfig+0x11a>
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	699b      	ldr	r3, [r3, #24]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d102      	bne.n	8010d92 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8010d8c:	2301      	movs	r3, #1
 8010d8e:	f000 bcb6 	b.w	80116fe <HAL_RCC_OscConfig+0xa86>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	6a1a      	ldr	r2, [r3, #32]
 8010d96:	4b68      	ldr	r3, [pc, #416]	; (8010f38 <HAL_RCC_OscConfig+0x2c0>)
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	f003 0308 	and.w	r3, r3, #8
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d004      	beq.n	8010dac <HAL_RCC_OscConfig+0x134>
 8010da2:	4b65      	ldr	r3, [pc, #404]	; (8010f38 <HAL_RCC_OscConfig+0x2c0>)
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010daa:	e005      	b.n	8010db8 <HAL_RCC_OscConfig+0x140>
 8010dac:	4b62      	ldr	r3, [pc, #392]	; (8010f38 <HAL_RCC_OscConfig+0x2c0>)
 8010dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010db2:	091b      	lsrs	r3, r3, #4
 8010db4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010db8:	4293      	cmp	r3, r2
 8010dba:	d224      	bcs.n	8010e06 <HAL_RCC_OscConfig+0x18e>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	6a1b      	ldr	r3, [r3, #32]
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	f000 fed1 	bl	8011b68 <RCC_SetFlashLatencyFromMSIRange>
 8010dc6:	4603      	mov	r3, r0
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d002      	beq.n	8010dd2 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_ERROR;
 8010dcc:	2301      	movs	r3, #1
 8010dce:	f000 bc96 	b.w	80116fe <HAL_RCC_OscConfig+0xa86>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010dd2:	4b59      	ldr	r3, [pc, #356]	; (8010f38 <HAL_RCC_OscConfig+0x2c0>)
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	4a58      	ldr	r2, [pc, #352]	; (8010f38 <HAL_RCC_OscConfig+0x2c0>)
 8010dd8:	f043 0308 	orr.w	r3, r3, #8
 8010ddc:	6013      	str	r3, [r2, #0]
 8010dde:	4b56      	ldr	r3, [pc, #344]	; (8010f38 <HAL_RCC_OscConfig+0x2c0>)
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	6a1b      	ldr	r3, [r3, #32]
 8010dea:	4953      	ldr	r1, [pc, #332]	; (8010f38 <HAL_RCC_OscConfig+0x2c0>)
 8010dec:	4313      	orrs	r3, r2
 8010dee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010df0:	4b51      	ldr	r3, [pc, #324]	; (8010f38 <HAL_RCC_OscConfig+0x2c0>)
 8010df2:	685b      	ldr	r3, [r3, #4]
 8010df4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	69db      	ldr	r3, [r3, #28]
 8010dfc:	021b      	lsls	r3, r3, #8
 8010dfe:	494e      	ldr	r1, [pc, #312]	; (8010f38 <HAL_RCC_OscConfig+0x2c0>)
 8010e00:	4313      	orrs	r3, r2
 8010e02:	604b      	str	r3, [r1, #4]
 8010e04:	e026      	b.n	8010e54 <HAL_RCC_OscConfig+0x1dc>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010e06:	4b4c      	ldr	r3, [pc, #304]	; (8010f38 <HAL_RCC_OscConfig+0x2c0>)
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	4a4b      	ldr	r2, [pc, #300]	; (8010f38 <HAL_RCC_OscConfig+0x2c0>)
 8010e0c:	f043 0308 	orr.w	r3, r3, #8
 8010e10:	6013      	str	r3, [r2, #0]
 8010e12:	4b49      	ldr	r3, [pc, #292]	; (8010f38 <HAL_RCC_OscConfig+0x2c0>)
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	6a1b      	ldr	r3, [r3, #32]
 8010e1e:	4946      	ldr	r1, [pc, #280]	; (8010f38 <HAL_RCC_OscConfig+0x2c0>)
 8010e20:	4313      	orrs	r3, r2
 8010e22:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010e24:	4b44      	ldr	r3, [pc, #272]	; (8010f38 <HAL_RCC_OscConfig+0x2c0>)
 8010e26:	685b      	ldr	r3, [r3, #4]
 8010e28:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	69db      	ldr	r3, [r3, #28]
 8010e30:	021b      	lsls	r3, r3, #8
 8010e32:	4941      	ldr	r1, [pc, #260]	; (8010f38 <HAL_RCC_OscConfig+0x2c0>)
 8010e34:	4313      	orrs	r3, r2
 8010e36:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8010e38:	69bb      	ldr	r3, [r7, #24]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d10a      	bne.n	8010e54 <HAL_RCC_OscConfig+0x1dc>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	6a1b      	ldr	r3, [r3, #32]
 8010e42:	4618      	mov	r0, r3
 8010e44:	f000 fe90 	bl	8011b68 <RCC_SetFlashLatencyFromMSIRange>
 8010e48:	4603      	mov	r3, r0
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d002      	beq.n	8010e54 <HAL_RCC_OscConfig+0x1dc>
            {
              return HAL_ERROR;
 8010e4e:	2301      	movs	r3, #1
 8010e50:	f000 bc55 	b.w	80116fe <HAL_RCC_OscConfig+0xa86>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8010e54:	f000 fdfc 	bl	8011a50 <HAL_RCC_GetSysClockFreq>
 8010e58:	4602      	mov	r2, r0
 8010e5a:	4b37      	ldr	r3, [pc, #220]	; (8010f38 <HAL_RCC_OscConfig+0x2c0>)
 8010e5c:	689b      	ldr	r3, [r3, #8]
 8010e5e:	091b      	lsrs	r3, r3, #4
 8010e60:	f003 030f 	and.w	r3, r3, #15
 8010e64:	4935      	ldr	r1, [pc, #212]	; (8010f3c <HAL_RCC_OscConfig+0x2c4>)
 8010e66:	5ccb      	ldrb	r3, [r1, r3]
 8010e68:	f003 031f 	and.w	r3, r3, #31
 8010e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8010e70:	4a33      	ldr	r2, [pc, #204]	; (8010f40 <HAL_RCC_OscConfig+0x2c8>)
 8010e72:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8010e74:	4b33      	ldr	r3, [pc, #204]	; (8010f44 <HAL_RCC_OscConfig+0x2cc>)
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	4618      	mov	r0, r3
 8010e7a:	f7f9 fb03 	bl	800a484 <HAL_InitTick>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8010e82:	7bfb      	ldrb	r3, [r7, #15]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d05f      	beq.n	8010f48 <HAL_RCC_OscConfig+0x2d0>
        {
          return status;
 8010e88:	7bfb      	ldrb	r3, [r7, #15]
 8010e8a:	f000 bc38 	b.w	80116fe <HAL_RCC_OscConfig+0xa86>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	699b      	ldr	r3, [r3, #24]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d033      	beq.n	8010efe <HAL_RCC_OscConfig+0x286>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8010e96:	4b28      	ldr	r3, [pc, #160]	; (8010f38 <HAL_RCC_OscConfig+0x2c0>)
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	4a27      	ldr	r2, [pc, #156]	; (8010f38 <HAL_RCC_OscConfig+0x2c0>)
 8010e9c:	f043 0301 	orr.w	r3, r3, #1
 8010ea0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8010ea2:	f7f9 fb3f 	bl	800a524 <HAL_GetTick>
 8010ea6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8010ea8:	e009      	b.n	8010ebe <HAL_RCC_OscConfig+0x246>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8010eaa:	f7f9 fb3b 	bl	800a524 <HAL_GetTick>
 8010eae:	4602      	mov	r2, r0
 8010eb0:	693b      	ldr	r3, [r7, #16]
 8010eb2:	1ad3      	subs	r3, r2, r3
 8010eb4:	2b02      	cmp	r3, #2
 8010eb6:	d902      	bls.n	8010ebe <HAL_RCC_OscConfig+0x246>
          {
            return HAL_TIMEOUT;
 8010eb8:	2303      	movs	r3, #3
 8010eba:	f000 bc20 	b.w	80116fe <HAL_RCC_OscConfig+0xa86>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8010ebe:	4b1e      	ldr	r3, [pc, #120]	; (8010f38 <HAL_RCC_OscConfig+0x2c0>)
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	f003 0302 	and.w	r3, r3, #2
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d0ef      	beq.n	8010eaa <HAL_RCC_OscConfig+0x232>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010eca:	4b1b      	ldr	r3, [pc, #108]	; (8010f38 <HAL_RCC_OscConfig+0x2c0>)
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	4a1a      	ldr	r2, [pc, #104]	; (8010f38 <HAL_RCC_OscConfig+0x2c0>)
 8010ed0:	f043 0308 	orr.w	r3, r3, #8
 8010ed4:	6013      	str	r3, [r2, #0]
 8010ed6:	4b18      	ldr	r3, [pc, #96]	; (8010f38 <HAL_RCC_OscConfig+0x2c0>)
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	6a1b      	ldr	r3, [r3, #32]
 8010ee2:	4915      	ldr	r1, [pc, #84]	; (8010f38 <HAL_RCC_OscConfig+0x2c0>)
 8010ee4:	4313      	orrs	r3, r2
 8010ee6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010ee8:	4b13      	ldr	r3, [pc, #76]	; (8010f38 <HAL_RCC_OscConfig+0x2c0>)
 8010eea:	685b      	ldr	r3, [r3, #4]
 8010eec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	69db      	ldr	r3, [r3, #28]
 8010ef4:	021b      	lsls	r3, r3, #8
 8010ef6:	4910      	ldr	r1, [pc, #64]	; (8010f38 <HAL_RCC_OscConfig+0x2c0>)
 8010ef8:	4313      	orrs	r3, r2
 8010efa:	604b      	str	r3, [r1, #4]
 8010efc:	e025      	b.n	8010f4a <HAL_RCC_OscConfig+0x2d2>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8010efe:	4b0e      	ldr	r3, [pc, #56]	; (8010f38 <HAL_RCC_OscConfig+0x2c0>)
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	4a0d      	ldr	r2, [pc, #52]	; (8010f38 <HAL_RCC_OscConfig+0x2c0>)
 8010f04:	f023 0301 	bic.w	r3, r3, #1
 8010f08:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8010f0a:	f7f9 fb0b 	bl	800a524 <HAL_GetTick>
 8010f0e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8010f10:	e008      	b.n	8010f24 <HAL_RCC_OscConfig+0x2ac>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8010f12:	f7f9 fb07 	bl	800a524 <HAL_GetTick>
 8010f16:	4602      	mov	r2, r0
 8010f18:	693b      	ldr	r3, [r7, #16]
 8010f1a:	1ad3      	subs	r3, r2, r3
 8010f1c:	2b02      	cmp	r3, #2
 8010f1e:	d901      	bls.n	8010f24 <HAL_RCC_OscConfig+0x2ac>
          {
            return HAL_TIMEOUT;
 8010f20:	2303      	movs	r3, #3
 8010f22:	e3ec      	b.n	80116fe <HAL_RCC_OscConfig+0xa86>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8010f24:	4b04      	ldr	r3, [pc, #16]	; (8010f38 <HAL_RCC_OscConfig+0x2c0>)
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	f003 0302 	and.w	r3, r3, #2
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d1f0      	bne.n	8010f12 <HAL_RCC_OscConfig+0x29a>
 8010f30:	e00b      	b.n	8010f4a <HAL_RCC_OscConfig+0x2d2>
 8010f32:	bf00      	nop
 8010f34:	0801ba84 	.word	0x0801ba84
 8010f38:	40021000 	.word	0x40021000
 8010f3c:	0801c00c 	.word	0x0801c00c
 8010f40:	20000ff8 	.word	0x20000ff8
 8010f44:	2000146c 	.word	0x2000146c
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8010f48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	f003 0301 	and.w	r3, r3, #1
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d07e      	beq.n	8011054 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	685b      	ldr	r3, [r3, #4]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d00e      	beq.n	8010f7c <HAL_RCC_OscConfig+0x304>
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	685b      	ldr	r3, [r3, #4]
 8010f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010f66:	d009      	beq.n	8010f7c <HAL_RCC_OscConfig+0x304>
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	685b      	ldr	r3, [r3, #4]
 8010f6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010f70:	d004      	beq.n	8010f7c <HAL_RCC_OscConfig+0x304>
 8010f72:	f240 2117 	movw	r1, #535	; 0x217
 8010f76:	489b      	ldr	r0, [pc, #620]	; (80111e4 <HAL_RCC_OscConfig+0x56c>)
 8010f78:	f7f3 fb04 	bl	8004584 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8010f7c:	69bb      	ldr	r3, [r7, #24]
 8010f7e:	2b08      	cmp	r3, #8
 8010f80:	d005      	beq.n	8010f8e <HAL_RCC_OscConfig+0x316>
 8010f82:	69bb      	ldr	r3, [r7, #24]
 8010f84:	2b0c      	cmp	r3, #12
 8010f86:	d10e      	bne.n	8010fa6 <HAL_RCC_OscConfig+0x32e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8010f88:	697b      	ldr	r3, [r7, #20]
 8010f8a:	2b03      	cmp	r3, #3
 8010f8c:	d10b      	bne.n	8010fa6 <HAL_RCC_OscConfig+0x32e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010f8e:	4b96      	ldr	r3, [pc, #600]	; (80111e8 <HAL_RCC_OscConfig+0x570>)
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d05b      	beq.n	8011052 <HAL_RCC_OscConfig+0x3da>
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	685b      	ldr	r3, [r3, #4]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d157      	bne.n	8011052 <HAL_RCC_OscConfig+0x3da>
      {
        return HAL_ERROR;
 8010fa2:	2301      	movs	r3, #1
 8010fa4:	e3ab      	b.n	80116fe <HAL_RCC_OscConfig+0xa86>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	685b      	ldr	r3, [r3, #4]
 8010faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010fae:	d106      	bne.n	8010fbe <HAL_RCC_OscConfig+0x346>
 8010fb0:	4b8d      	ldr	r3, [pc, #564]	; (80111e8 <HAL_RCC_OscConfig+0x570>)
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	4a8c      	ldr	r2, [pc, #560]	; (80111e8 <HAL_RCC_OscConfig+0x570>)
 8010fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010fba:	6013      	str	r3, [r2, #0]
 8010fbc:	e01d      	b.n	8010ffa <HAL_RCC_OscConfig+0x382>
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	685b      	ldr	r3, [r3, #4]
 8010fc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010fc6:	d10c      	bne.n	8010fe2 <HAL_RCC_OscConfig+0x36a>
 8010fc8:	4b87      	ldr	r3, [pc, #540]	; (80111e8 <HAL_RCC_OscConfig+0x570>)
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	4a86      	ldr	r2, [pc, #536]	; (80111e8 <HAL_RCC_OscConfig+0x570>)
 8010fce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010fd2:	6013      	str	r3, [r2, #0]
 8010fd4:	4b84      	ldr	r3, [pc, #528]	; (80111e8 <HAL_RCC_OscConfig+0x570>)
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	4a83      	ldr	r2, [pc, #524]	; (80111e8 <HAL_RCC_OscConfig+0x570>)
 8010fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010fde:	6013      	str	r3, [r2, #0]
 8010fe0:	e00b      	b.n	8010ffa <HAL_RCC_OscConfig+0x382>
 8010fe2:	4b81      	ldr	r3, [pc, #516]	; (80111e8 <HAL_RCC_OscConfig+0x570>)
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	4a80      	ldr	r2, [pc, #512]	; (80111e8 <HAL_RCC_OscConfig+0x570>)
 8010fe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010fec:	6013      	str	r3, [r2, #0]
 8010fee:	4b7e      	ldr	r3, [pc, #504]	; (80111e8 <HAL_RCC_OscConfig+0x570>)
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	4a7d      	ldr	r2, [pc, #500]	; (80111e8 <HAL_RCC_OscConfig+0x570>)
 8010ff4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010ff8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	685b      	ldr	r3, [r3, #4]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d013      	beq.n	801102a <HAL_RCC_OscConfig+0x3b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011002:	f7f9 fa8f 	bl	800a524 <HAL_GetTick>
 8011006:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8011008:	e008      	b.n	801101c <HAL_RCC_OscConfig+0x3a4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801100a:	f7f9 fa8b 	bl	800a524 <HAL_GetTick>
 801100e:	4602      	mov	r2, r0
 8011010:	693b      	ldr	r3, [r7, #16]
 8011012:	1ad3      	subs	r3, r2, r3
 8011014:	2b64      	cmp	r3, #100	; 0x64
 8011016:	d901      	bls.n	801101c <HAL_RCC_OscConfig+0x3a4>
          {
            return HAL_TIMEOUT;
 8011018:	2303      	movs	r3, #3
 801101a:	e370      	b.n	80116fe <HAL_RCC_OscConfig+0xa86>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801101c:	4b72      	ldr	r3, [pc, #456]	; (80111e8 <HAL_RCC_OscConfig+0x570>)
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011024:	2b00      	cmp	r3, #0
 8011026:	d0f0      	beq.n	801100a <HAL_RCC_OscConfig+0x392>
 8011028:	e014      	b.n	8011054 <HAL_RCC_OscConfig+0x3dc>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801102a:	f7f9 fa7b 	bl	800a524 <HAL_GetTick>
 801102e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8011030:	e008      	b.n	8011044 <HAL_RCC_OscConfig+0x3cc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8011032:	f7f9 fa77 	bl	800a524 <HAL_GetTick>
 8011036:	4602      	mov	r2, r0
 8011038:	693b      	ldr	r3, [r7, #16]
 801103a:	1ad3      	subs	r3, r2, r3
 801103c:	2b64      	cmp	r3, #100	; 0x64
 801103e:	d901      	bls.n	8011044 <HAL_RCC_OscConfig+0x3cc>
          {
            return HAL_TIMEOUT;
 8011040:	2303      	movs	r3, #3
 8011042:	e35c      	b.n	80116fe <HAL_RCC_OscConfig+0xa86>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8011044:	4b68      	ldr	r3, [pc, #416]	; (80111e8 <HAL_RCC_OscConfig+0x570>)
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801104c:	2b00      	cmp	r3, #0
 801104e:	d1f0      	bne.n	8011032 <HAL_RCC_OscConfig+0x3ba>
 8011050:	e000      	b.n	8011054 <HAL_RCC_OscConfig+0x3dc>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011052:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	f003 0302 	and.w	r3, r3, #2
 801105c:	2b00      	cmp	r3, #0
 801105e:	d077      	beq.n	8011150 <HAL_RCC_OscConfig+0x4d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	68db      	ldr	r3, [r3, #12]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d009      	beq.n	801107c <HAL_RCC_OscConfig+0x404>
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	68db      	ldr	r3, [r3, #12]
 801106c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011070:	d004      	beq.n	801107c <HAL_RCC_OscConfig+0x404>
 8011072:	f240 214a 	movw	r1, #586	; 0x24a
 8011076:	485b      	ldr	r0, [pc, #364]	; (80111e4 <HAL_RCC_OscConfig+0x56c>)
 8011078:	f7f3 fa84 	bl	8004584 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	691b      	ldr	r3, [r3, #16]
 8011080:	2b1f      	cmp	r3, #31
 8011082:	d904      	bls.n	801108e <HAL_RCC_OscConfig+0x416>
 8011084:	f240 214b 	movw	r1, #587	; 0x24b
 8011088:	4856      	ldr	r0, [pc, #344]	; (80111e4 <HAL_RCC_OscConfig+0x56c>)
 801108a:	f7f3 fa7b 	bl	8004584 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 801108e:	69bb      	ldr	r3, [r7, #24]
 8011090:	2b04      	cmp	r3, #4
 8011092:	d005      	beq.n	80110a0 <HAL_RCC_OscConfig+0x428>
 8011094:	69bb      	ldr	r3, [r7, #24]
 8011096:	2b0c      	cmp	r3, #12
 8011098:	d119      	bne.n	80110ce <HAL_RCC_OscConfig+0x456>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 801109a:	697b      	ldr	r3, [r7, #20]
 801109c:	2b02      	cmp	r3, #2
 801109e:	d116      	bne.n	80110ce <HAL_RCC_OscConfig+0x456>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80110a0:	4b51      	ldr	r3, [pc, #324]	; (80111e8 <HAL_RCC_OscConfig+0x570>)
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d005      	beq.n	80110b8 <HAL_RCC_OscConfig+0x440>
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	68db      	ldr	r3, [r3, #12]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d101      	bne.n	80110b8 <HAL_RCC_OscConfig+0x440>
      {
        return HAL_ERROR;
 80110b4:	2301      	movs	r3, #1
 80110b6:	e322      	b.n	80116fe <HAL_RCC_OscConfig+0xa86>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80110b8:	4b4b      	ldr	r3, [pc, #300]	; (80111e8 <HAL_RCC_OscConfig+0x570>)
 80110ba:	685b      	ldr	r3, [r3, #4]
 80110bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	691b      	ldr	r3, [r3, #16]
 80110c4:	061b      	lsls	r3, r3, #24
 80110c6:	4948      	ldr	r1, [pc, #288]	; (80111e8 <HAL_RCC_OscConfig+0x570>)
 80110c8:	4313      	orrs	r3, r2
 80110ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80110cc:	e040      	b.n	8011150 <HAL_RCC_OscConfig+0x4d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	68db      	ldr	r3, [r3, #12]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d023      	beq.n	801111e <HAL_RCC_OscConfig+0x4a6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80110d6:	4b44      	ldr	r3, [pc, #272]	; (80111e8 <HAL_RCC_OscConfig+0x570>)
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	4a43      	ldr	r2, [pc, #268]	; (80111e8 <HAL_RCC_OscConfig+0x570>)
 80110dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80110e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80110e2:	f7f9 fa1f 	bl	800a524 <HAL_GetTick>
 80110e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80110e8:	e008      	b.n	80110fc <HAL_RCC_OscConfig+0x484>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80110ea:	f7f9 fa1b 	bl	800a524 <HAL_GetTick>
 80110ee:	4602      	mov	r2, r0
 80110f0:	693b      	ldr	r3, [r7, #16]
 80110f2:	1ad3      	subs	r3, r2, r3
 80110f4:	2b02      	cmp	r3, #2
 80110f6:	d901      	bls.n	80110fc <HAL_RCC_OscConfig+0x484>
          {
            return HAL_TIMEOUT;
 80110f8:	2303      	movs	r3, #3
 80110fa:	e300      	b.n	80116fe <HAL_RCC_OscConfig+0xa86>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80110fc:	4b3a      	ldr	r3, [pc, #232]	; (80111e8 <HAL_RCC_OscConfig+0x570>)
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011104:	2b00      	cmp	r3, #0
 8011106:	d0f0      	beq.n	80110ea <HAL_RCC_OscConfig+0x472>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011108:	4b37      	ldr	r3, [pc, #220]	; (80111e8 <HAL_RCC_OscConfig+0x570>)
 801110a:	685b      	ldr	r3, [r3, #4]
 801110c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	691b      	ldr	r3, [r3, #16]
 8011114:	061b      	lsls	r3, r3, #24
 8011116:	4934      	ldr	r1, [pc, #208]	; (80111e8 <HAL_RCC_OscConfig+0x570>)
 8011118:	4313      	orrs	r3, r2
 801111a:	604b      	str	r3, [r1, #4]
 801111c:	e018      	b.n	8011150 <HAL_RCC_OscConfig+0x4d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801111e:	4b32      	ldr	r3, [pc, #200]	; (80111e8 <HAL_RCC_OscConfig+0x570>)
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	4a31      	ldr	r2, [pc, #196]	; (80111e8 <HAL_RCC_OscConfig+0x570>)
 8011124:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011128:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801112a:	f7f9 f9fb 	bl	800a524 <HAL_GetTick>
 801112e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8011130:	e008      	b.n	8011144 <HAL_RCC_OscConfig+0x4cc>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011132:	f7f9 f9f7 	bl	800a524 <HAL_GetTick>
 8011136:	4602      	mov	r2, r0
 8011138:	693b      	ldr	r3, [r7, #16]
 801113a:	1ad3      	subs	r3, r2, r3
 801113c:	2b02      	cmp	r3, #2
 801113e:	d901      	bls.n	8011144 <HAL_RCC_OscConfig+0x4cc>
          {
            return HAL_TIMEOUT;
 8011140:	2303      	movs	r3, #3
 8011142:	e2dc      	b.n	80116fe <HAL_RCC_OscConfig+0xa86>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8011144:	4b28      	ldr	r3, [pc, #160]	; (80111e8 <HAL_RCC_OscConfig+0x570>)
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801114c:	2b00      	cmp	r3, #0
 801114e:	d1f0      	bne.n	8011132 <HAL_RCC_OscConfig+0x4ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	f003 0308 	and.w	r3, r3, #8
 8011158:	2b00      	cmp	r3, #0
 801115a:	d04e      	beq.n	80111fa <HAL_RCC_OscConfig+0x582>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	695b      	ldr	r3, [r3, #20]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d008      	beq.n	8011176 <HAL_RCC_OscConfig+0x4fe>
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	695b      	ldr	r3, [r3, #20]
 8011168:	2b01      	cmp	r3, #1
 801116a:	d004      	beq.n	8011176 <HAL_RCC_OscConfig+0x4fe>
 801116c:	f240 218b 	movw	r1, #651	; 0x28b
 8011170:	481c      	ldr	r0, [pc, #112]	; (80111e4 <HAL_RCC_OscConfig+0x56c>)
 8011172:	f7f3 fa07 	bl	8004584 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	695b      	ldr	r3, [r3, #20]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d01c      	beq.n	80111b8 <HAL_RCC_OscConfig+0x540>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801117e:	4b1a      	ldr	r3, [pc, #104]	; (80111e8 <HAL_RCC_OscConfig+0x570>)
 8011180:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011184:	4a18      	ldr	r2, [pc, #96]	; (80111e8 <HAL_RCC_OscConfig+0x570>)
 8011186:	f043 0301 	orr.w	r3, r3, #1
 801118a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801118e:	f7f9 f9c9 	bl	800a524 <HAL_GetTick>
 8011192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8011194:	e008      	b.n	80111a8 <HAL_RCC_OscConfig+0x530>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8011196:	f7f9 f9c5 	bl	800a524 <HAL_GetTick>
 801119a:	4602      	mov	r2, r0
 801119c:	693b      	ldr	r3, [r7, #16]
 801119e:	1ad3      	subs	r3, r2, r3
 80111a0:	2b02      	cmp	r3, #2
 80111a2:	d901      	bls.n	80111a8 <HAL_RCC_OscConfig+0x530>
        {
          return HAL_TIMEOUT;
 80111a4:	2303      	movs	r3, #3
 80111a6:	e2aa      	b.n	80116fe <HAL_RCC_OscConfig+0xa86>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80111a8:	4b0f      	ldr	r3, [pc, #60]	; (80111e8 <HAL_RCC_OscConfig+0x570>)
 80111aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80111ae:	f003 0302 	and.w	r3, r3, #2
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d0ef      	beq.n	8011196 <HAL_RCC_OscConfig+0x51e>
 80111b6:	e020      	b.n	80111fa <HAL_RCC_OscConfig+0x582>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80111b8:	4b0b      	ldr	r3, [pc, #44]	; (80111e8 <HAL_RCC_OscConfig+0x570>)
 80111ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80111be:	4a0a      	ldr	r2, [pc, #40]	; (80111e8 <HAL_RCC_OscConfig+0x570>)
 80111c0:	f023 0301 	bic.w	r3, r3, #1
 80111c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80111c8:	f7f9 f9ac 	bl	800a524 <HAL_GetTick>
 80111cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80111ce:	e00d      	b.n	80111ec <HAL_RCC_OscConfig+0x574>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80111d0:	f7f9 f9a8 	bl	800a524 <HAL_GetTick>
 80111d4:	4602      	mov	r2, r0
 80111d6:	693b      	ldr	r3, [r7, #16]
 80111d8:	1ad3      	subs	r3, r2, r3
 80111da:	2b02      	cmp	r3, #2
 80111dc:	d906      	bls.n	80111ec <HAL_RCC_OscConfig+0x574>
        {
          return HAL_TIMEOUT;
 80111de:	2303      	movs	r3, #3
 80111e0:	e28d      	b.n	80116fe <HAL_RCC_OscConfig+0xa86>
 80111e2:	bf00      	nop
 80111e4:	0801ba84 	.word	0x0801ba84
 80111e8:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80111ec:	4b84      	ldr	r3, [pc, #528]	; (8011400 <HAL_RCC_OscConfig+0x788>)
 80111ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80111f2:	f003 0302 	and.w	r3, r3, #2
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d1ea      	bne.n	80111d0 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	f003 0304 	and.w	r3, r3, #4
 8011202:	2b00      	cmp	r3, #0
 8011204:	f000 80b2 	beq.w	801136c <HAL_RCC_OscConfig+0x6f4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8011208:	2300      	movs	r3, #0
 801120a:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	689b      	ldr	r3, [r3, #8]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d00c      	beq.n	801122e <HAL_RCC_OscConfig+0x5b6>
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	689b      	ldr	r3, [r3, #8]
 8011218:	2b01      	cmp	r3, #1
 801121a:	d008      	beq.n	801122e <HAL_RCC_OscConfig+0x5b6>
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	689b      	ldr	r3, [r3, #8]
 8011220:	2b05      	cmp	r3, #5
 8011222:	d004      	beq.n	801122e <HAL_RCC_OscConfig+0x5b6>
 8011224:	f240 21de 	movw	r1, #734	; 0x2de
 8011228:	4876      	ldr	r0, [pc, #472]	; (8011404 <HAL_RCC_OscConfig+0x78c>)
 801122a:	f7f3 f9ab 	bl	8004584 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 801122e:	4b74      	ldr	r3, [pc, #464]	; (8011400 <HAL_RCC_OscConfig+0x788>)
 8011230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011236:	2b00      	cmp	r3, #0
 8011238:	d10d      	bne.n	8011256 <HAL_RCC_OscConfig+0x5de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801123a:	4b71      	ldr	r3, [pc, #452]	; (8011400 <HAL_RCC_OscConfig+0x788>)
 801123c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801123e:	4a70      	ldr	r2, [pc, #448]	; (8011400 <HAL_RCC_OscConfig+0x788>)
 8011240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011244:	6593      	str	r3, [r2, #88]	; 0x58
 8011246:	4b6e      	ldr	r3, [pc, #440]	; (8011400 <HAL_RCC_OscConfig+0x788>)
 8011248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801124a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801124e:	60bb      	str	r3, [r7, #8]
 8011250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011252:	2301      	movs	r3, #1
 8011254:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011256:	4b6c      	ldr	r3, [pc, #432]	; (8011408 <HAL_RCC_OscConfig+0x790>)
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801125e:	2b00      	cmp	r3, #0
 8011260:	d118      	bne.n	8011294 <HAL_RCC_OscConfig+0x61c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011262:	4b69      	ldr	r3, [pc, #420]	; (8011408 <HAL_RCC_OscConfig+0x790>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	4a68      	ldr	r2, [pc, #416]	; (8011408 <HAL_RCC_OscConfig+0x790>)
 8011268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801126c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801126e:	f7f9 f959 	bl	800a524 <HAL_GetTick>
 8011272:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011274:	e008      	b.n	8011288 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011276:	f7f9 f955 	bl	800a524 <HAL_GetTick>
 801127a:	4602      	mov	r2, r0
 801127c:	693b      	ldr	r3, [r7, #16]
 801127e:	1ad3      	subs	r3, r2, r3
 8011280:	2b02      	cmp	r3, #2
 8011282:	d901      	bls.n	8011288 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8011284:	2303      	movs	r3, #3
 8011286:	e23a      	b.n	80116fe <HAL_RCC_OscConfig+0xa86>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011288:	4b5f      	ldr	r3, [pc, #380]	; (8011408 <HAL_RCC_OscConfig+0x790>)
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011290:	2b00      	cmp	r3, #0
 8011292:	d0f0      	beq.n	8011276 <HAL_RCC_OscConfig+0x5fe>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	689b      	ldr	r3, [r3, #8]
 8011298:	2b01      	cmp	r3, #1
 801129a:	d108      	bne.n	80112ae <HAL_RCC_OscConfig+0x636>
 801129c:	4b58      	ldr	r3, [pc, #352]	; (8011400 <HAL_RCC_OscConfig+0x788>)
 801129e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80112a2:	4a57      	ldr	r2, [pc, #348]	; (8011400 <HAL_RCC_OscConfig+0x788>)
 80112a4:	f043 0301 	orr.w	r3, r3, #1
 80112a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80112ac:	e024      	b.n	80112f8 <HAL_RCC_OscConfig+0x680>
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	689b      	ldr	r3, [r3, #8]
 80112b2:	2b05      	cmp	r3, #5
 80112b4:	d110      	bne.n	80112d8 <HAL_RCC_OscConfig+0x660>
 80112b6:	4b52      	ldr	r3, [pc, #328]	; (8011400 <HAL_RCC_OscConfig+0x788>)
 80112b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80112bc:	4a50      	ldr	r2, [pc, #320]	; (8011400 <HAL_RCC_OscConfig+0x788>)
 80112be:	f043 0304 	orr.w	r3, r3, #4
 80112c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80112c6:	4b4e      	ldr	r3, [pc, #312]	; (8011400 <HAL_RCC_OscConfig+0x788>)
 80112c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80112cc:	4a4c      	ldr	r2, [pc, #304]	; (8011400 <HAL_RCC_OscConfig+0x788>)
 80112ce:	f043 0301 	orr.w	r3, r3, #1
 80112d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80112d6:	e00f      	b.n	80112f8 <HAL_RCC_OscConfig+0x680>
 80112d8:	4b49      	ldr	r3, [pc, #292]	; (8011400 <HAL_RCC_OscConfig+0x788>)
 80112da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80112de:	4a48      	ldr	r2, [pc, #288]	; (8011400 <HAL_RCC_OscConfig+0x788>)
 80112e0:	f023 0301 	bic.w	r3, r3, #1
 80112e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80112e8:	4b45      	ldr	r3, [pc, #276]	; (8011400 <HAL_RCC_OscConfig+0x788>)
 80112ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80112ee:	4a44      	ldr	r2, [pc, #272]	; (8011400 <HAL_RCC_OscConfig+0x788>)
 80112f0:	f023 0304 	bic.w	r3, r3, #4
 80112f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	689b      	ldr	r3, [r3, #8]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d016      	beq.n	801132e <HAL_RCC_OscConfig+0x6b6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011300:	f7f9 f910 	bl	800a524 <HAL_GetTick>
 8011304:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8011306:	e00a      	b.n	801131e <HAL_RCC_OscConfig+0x6a6>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011308:	f7f9 f90c 	bl	800a524 <HAL_GetTick>
 801130c:	4602      	mov	r2, r0
 801130e:	693b      	ldr	r3, [r7, #16]
 8011310:	1ad3      	subs	r3, r2, r3
 8011312:	f241 3288 	movw	r2, #5000	; 0x1388
 8011316:	4293      	cmp	r3, r2
 8011318:	d901      	bls.n	801131e <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 801131a:	2303      	movs	r3, #3
 801131c:	e1ef      	b.n	80116fe <HAL_RCC_OscConfig+0xa86>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801131e:	4b38      	ldr	r3, [pc, #224]	; (8011400 <HAL_RCC_OscConfig+0x788>)
 8011320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011324:	f003 0302 	and.w	r3, r3, #2
 8011328:	2b00      	cmp	r3, #0
 801132a:	d0ed      	beq.n	8011308 <HAL_RCC_OscConfig+0x690>
 801132c:	e015      	b.n	801135a <HAL_RCC_OscConfig+0x6e2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801132e:	f7f9 f8f9 	bl	800a524 <HAL_GetTick>
 8011332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8011334:	e00a      	b.n	801134c <HAL_RCC_OscConfig+0x6d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011336:	f7f9 f8f5 	bl	800a524 <HAL_GetTick>
 801133a:	4602      	mov	r2, r0
 801133c:	693b      	ldr	r3, [r7, #16]
 801133e:	1ad3      	subs	r3, r2, r3
 8011340:	f241 3288 	movw	r2, #5000	; 0x1388
 8011344:	4293      	cmp	r3, r2
 8011346:	d901      	bls.n	801134c <HAL_RCC_OscConfig+0x6d4>
        {
          return HAL_TIMEOUT;
 8011348:	2303      	movs	r3, #3
 801134a:	e1d8      	b.n	80116fe <HAL_RCC_OscConfig+0xa86>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801134c:	4b2c      	ldr	r3, [pc, #176]	; (8011400 <HAL_RCC_OscConfig+0x788>)
 801134e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011352:	f003 0302 	and.w	r3, r3, #2
 8011356:	2b00      	cmp	r3, #0
 8011358:	d1ed      	bne.n	8011336 <HAL_RCC_OscConfig+0x6be>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801135a:	7ffb      	ldrb	r3, [r7, #31]
 801135c:	2b01      	cmp	r3, #1
 801135e:	d105      	bne.n	801136c <HAL_RCC_OscConfig+0x6f4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011360:	4b27      	ldr	r3, [pc, #156]	; (8011400 <HAL_RCC_OscConfig+0x788>)
 8011362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011364:	4a26      	ldr	r2, [pc, #152]	; (8011400 <HAL_RCC_OscConfig+0x788>)
 8011366:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801136a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	f003 0320 	and.w	r3, r3, #32
 8011374:	2b00      	cmp	r3, #0
 8011376:	d050      	beq.n	801141a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801137c:	2b00      	cmp	r3, #0
 801137e:	d008      	beq.n	8011392 <HAL_RCC_OscConfig+0x71a>
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011384:	2b01      	cmp	r3, #1
 8011386:	d004      	beq.n	8011392 <HAL_RCC_OscConfig+0x71a>
 8011388:	f240 3143 	movw	r1, #835	; 0x343
 801138c:	481d      	ldr	r0, [pc, #116]	; (8011404 <HAL_RCC_OscConfig+0x78c>)
 801138e:	f7f3 f8f9 	bl	8004584 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011396:	2b00      	cmp	r3, #0
 8011398:	d01c      	beq.n	80113d4 <HAL_RCC_OscConfig+0x75c>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801139a:	4b19      	ldr	r3, [pc, #100]	; (8011400 <HAL_RCC_OscConfig+0x788>)
 801139c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80113a0:	4a17      	ldr	r2, [pc, #92]	; (8011400 <HAL_RCC_OscConfig+0x788>)
 80113a2:	f043 0301 	orr.w	r3, r3, #1
 80113a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80113aa:	f7f9 f8bb 	bl	800a524 <HAL_GetTick>
 80113ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80113b0:	e008      	b.n	80113c4 <HAL_RCC_OscConfig+0x74c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80113b2:	f7f9 f8b7 	bl	800a524 <HAL_GetTick>
 80113b6:	4602      	mov	r2, r0
 80113b8:	693b      	ldr	r3, [r7, #16]
 80113ba:	1ad3      	subs	r3, r2, r3
 80113bc:	2b02      	cmp	r3, #2
 80113be:	d901      	bls.n	80113c4 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_TIMEOUT;
 80113c0:	2303      	movs	r3, #3
 80113c2:	e19c      	b.n	80116fe <HAL_RCC_OscConfig+0xa86>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80113c4:	4b0e      	ldr	r3, [pc, #56]	; (8011400 <HAL_RCC_OscConfig+0x788>)
 80113c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80113ca:	f003 0302 	and.w	r3, r3, #2
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d0ef      	beq.n	80113b2 <HAL_RCC_OscConfig+0x73a>
 80113d2:	e022      	b.n	801141a <HAL_RCC_OscConfig+0x7a2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80113d4:	4b0a      	ldr	r3, [pc, #40]	; (8011400 <HAL_RCC_OscConfig+0x788>)
 80113d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80113da:	4a09      	ldr	r2, [pc, #36]	; (8011400 <HAL_RCC_OscConfig+0x788>)
 80113dc:	f023 0301 	bic.w	r3, r3, #1
 80113e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80113e4:	f7f9 f89e 	bl	800a524 <HAL_GetTick>
 80113e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80113ea:	e00f      	b.n	801140c <HAL_RCC_OscConfig+0x794>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80113ec:	f7f9 f89a 	bl	800a524 <HAL_GetTick>
 80113f0:	4602      	mov	r2, r0
 80113f2:	693b      	ldr	r3, [r7, #16]
 80113f4:	1ad3      	subs	r3, r2, r3
 80113f6:	2b02      	cmp	r3, #2
 80113f8:	d908      	bls.n	801140c <HAL_RCC_OscConfig+0x794>
        {
          return HAL_TIMEOUT;
 80113fa:	2303      	movs	r3, #3
 80113fc:	e17f      	b.n	80116fe <HAL_RCC_OscConfig+0xa86>
 80113fe:	bf00      	nop
 8011400:	40021000 	.word	0x40021000
 8011404:	0801ba84 	.word	0x0801ba84
 8011408:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801140c:	4ba2      	ldr	r3, [pc, #648]	; (8011698 <HAL_RCC_OscConfig+0xa20>)
 801140e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011412:	f003 0302 	and.w	r3, r3, #2
 8011416:	2b00      	cmp	r3, #0
 8011418:	d1e8      	bne.n	80113ec <HAL_RCC_OscConfig+0x774>
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801141e:	2b00      	cmp	r3, #0
 8011420:	d00c      	beq.n	801143c <HAL_RCC_OscConfig+0x7c4>
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011426:	2b01      	cmp	r3, #1
 8011428:	d008      	beq.n	801143c <HAL_RCC_OscConfig+0x7c4>
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801142e:	2b02      	cmp	r3, #2
 8011430:	d004      	beq.n	801143c <HAL_RCC_OscConfig+0x7c4>
 8011432:	f44f 715b 	mov.w	r1, #876	; 0x36c
 8011436:	4899      	ldr	r0, [pc, #612]	; (801169c <HAL_RCC_OscConfig+0xa24>)
 8011438:	f7f3 f8a4 	bl	8004584 <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011440:	2b00      	cmp	r3, #0
 8011442:	f000 815b 	beq.w	80116fc <HAL_RCC_OscConfig+0xa84>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801144a:	2b02      	cmp	r3, #2
 801144c:	f040 8131 	bne.w	80116b2 <HAL_RCC_OscConfig+0xa3a>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011454:	2b00      	cmp	r3, #0
 8011456:	d010      	beq.n	801147a <HAL_RCC_OscConfig+0x802>
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801145c:	2b01      	cmp	r3, #1
 801145e:	d00c      	beq.n	801147a <HAL_RCC_OscConfig+0x802>
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011464:	2b02      	cmp	r3, #2
 8011466:	d008      	beq.n	801147a <HAL_RCC_OscConfig+0x802>
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801146c:	2b03      	cmp	r3, #3
 801146e:	d004      	beq.n	801147a <HAL_RCC_OscConfig+0x802>
 8011470:	f44f 715d 	mov.w	r1, #884	; 0x374
 8011474:	4889      	ldr	r0, [pc, #548]	; (801169c <HAL_RCC_OscConfig+0xa24>)
 8011476:	f7f3 f885 	bl	8004584 <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801147e:	2b00      	cmp	r3, #0
 8011480:	d003      	beq.n	801148a <HAL_RCC_OscConfig+0x812>
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011486:	2b08      	cmp	r3, #8
 8011488:	d904      	bls.n	8011494 <HAL_RCC_OscConfig+0x81c>
 801148a:	f240 3175 	movw	r1, #885	; 0x375
 801148e:	4883      	ldr	r0, [pc, #524]	; (801169c <HAL_RCC_OscConfig+0xa24>)
 8011490:	f7f3 f878 	bl	8004584 <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011498:	2b07      	cmp	r3, #7
 801149a:	d903      	bls.n	80114a4 <HAL_RCC_OscConfig+0x82c>
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114a0:	2b56      	cmp	r3, #86	; 0x56
 80114a2:	d904      	bls.n	80114ae <HAL_RCC_OscConfig+0x836>
 80114a4:	f240 3176 	movw	r1, #886	; 0x376
 80114a8:	487c      	ldr	r0, [pc, #496]	; (801169c <HAL_RCC_OscConfig+0xa24>)
 80114aa:	f7f3 f86b 	bl	8004584 <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114b2:	2b01      	cmp	r3, #1
 80114b4:	d903      	bls.n	80114be <HAL_RCC_OscConfig+0x846>
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114ba:	2b1f      	cmp	r3, #31
 80114bc:	d904      	bls.n	80114c8 <HAL_RCC_OscConfig+0x850>
 80114be:	f44f 715e 	mov.w	r1, #888	; 0x378
 80114c2:	4876      	ldr	r0, [pc, #472]	; (801169c <HAL_RCC_OscConfig+0xa24>)
 80114c4:	f7f3 f85e 	bl	8004584 <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114cc:	2b02      	cmp	r3, #2
 80114ce:	d010      	beq.n	80114f2 <HAL_RCC_OscConfig+0x87a>
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114d4:	2b04      	cmp	r3, #4
 80114d6:	d00c      	beq.n	80114f2 <HAL_RCC_OscConfig+0x87a>
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114dc:	2b06      	cmp	r3, #6
 80114de:	d008      	beq.n	80114f2 <HAL_RCC_OscConfig+0x87a>
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114e4:	2b08      	cmp	r3, #8
 80114e6:	d004      	beq.n	80114f2 <HAL_RCC_OscConfig+0x87a>
 80114e8:	f240 317a 	movw	r1, #890	; 0x37a
 80114ec:	486b      	ldr	r0, [pc, #428]	; (801169c <HAL_RCC_OscConfig+0xa24>)
 80114ee:	f7f3 f849 	bl	8004584 <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114f6:	2b02      	cmp	r3, #2
 80114f8:	d010      	beq.n	801151c <HAL_RCC_OscConfig+0x8a4>
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114fe:	2b04      	cmp	r3, #4
 8011500:	d00c      	beq.n	801151c <HAL_RCC_OscConfig+0x8a4>
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011506:	2b06      	cmp	r3, #6
 8011508:	d008      	beq.n	801151c <HAL_RCC_OscConfig+0x8a4>
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801150e:	2b08      	cmp	r3, #8
 8011510:	d004      	beq.n	801151c <HAL_RCC_OscConfig+0x8a4>
 8011512:	f240 317b 	movw	r1, #891	; 0x37b
 8011516:	4861      	ldr	r0, [pc, #388]	; (801169c <HAL_RCC_OscConfig+0xa24>)
 8011518:	f7f3 f834 	bl	8004584 <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 801151c:	4b5e      	ldr	r3, [pc, #376]	; (8011698 <HAL_RCC_OscConfig+0xa20>)
 801151e:	68db      	ldr	r3, [r3, #12]
 8011520:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8011522:	697b      	ldr	r3, [r7, #20]
 8011524:	f003 0203 	and.w	r2, r3, #3
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801152c:	429a      	cmp	r2, r3
 801152e:	d12c      	bne.n	801158a <HAL_RCC_OscConfig+0x912>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8011530:	697b      	ldr	r3, [r7, #20]
 8011532:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801153a:	3b01      	subs	r3, #1
 801153c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 801153e:	429a      	cmp	r2, r3
 8011540:	d123      	bne.n	801158a <HAL_RCC_OscConfig+0x912>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8011542:	697b      	ldr	r3, [r7, #20]
 8011544:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801154c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801154e:	429a      	cmp	r2, r3
 8011550:	d11b      	bne.n	801158a <HAL_RCC_OscConfig+0x912>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8011552:	697b      	ldr	r3, [r7, #20]
 8011554:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801155c:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801155e:	429a      	cmp	r2, r3
 8011560:	d113      	bne.n	801158a <HAL_RCC_OscConfig+0x912>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8011562:	697b      	ldr	r3, [r7, #20]
 8011564:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801156c:	085b      	lsrs	r3, r3, #1
 801156e:	3b01      	subs	r3, #1
 8011570:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8011572:	429a      	cmp	r2, r3
 8011574:	d109      	bne.n	801158a <HAL_RCC_OscConfig+0x912>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8011576:	697b      	ldr	r3, [r7, #20]
 8011578:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011580:	085b      	lsrs	r3, r3, #1
 8011582:	3b01      	subs	r3, #1
 8011584:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8011586:	429a      	cmp	r2, r3
 8011588:	d067      	beq.n	801165a <HAL_RCC_OscConfig+0x9e2>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 801158a:	69bb      	ldr	r3, [r7, #24]
 801158c:	2b0c      	cmp	r3, #12
 801158e:	d062      	beq.n	8011656 <HAL_RCC_OscConfig+0x9de>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8011590:	4b41      	ldr	r3, [pc, #260]	; (8011698 <HAL_RCC_OscConfig+0xa20>)
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011598:	2b00      	cmp	r3, #0
 801159a:	d001      	beq.n	80115a0 <HAL_RCC_OscConfig+0x928>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 801159c:	2301      	movs	r3, #1
 801159e:	e0ae      	b.n	80116fe <HAL_RCC_OscConfig+0xa86>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80115a0:	4b3d      	ldr	r3, [pc, #244]	; (8011698 <HAL_RCC_OscConfig+0xa20>)
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	4a3c      	ldr	r2, [pc, #240]	; (8011698 <HAL_RCC_OscConfig+0xa20>)
 80115a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80115aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80115ac:	f7f8 ffba 	bl	800a524 <HAL_GetTick>
 80115b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80115b2:	e008      	b.n	80115c6 <HAL_RCC_OscConfig+0x94e>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80115b4:	f7f8 ffb6 	bl	800a524 <HAL_GetTick>
 80115b8:	4602      	mov	r2, r0
 80115ba:	693b      	ldr	r3, [r7, #16]
 80115bc:	1ad3      	subs	r3, r2, r3
 80115be:	2b02      	cmp	r3, #2
 80115c0:	d901      	bls.n	80115c6 <HAL_RCC_OscConfig+0x94e>
              {
                return HAL_TIMEOUT;
 80115c2:	2303      	movs	r3, #3
 80115c4:	e09b      	b.n	80116fe <HAL_RCC_OscConfig+0xa86>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80115c6:	4b34      	ldr	r3, [pc, #208]	; (8011698 <HAL_RCC_OscConfig+0xa20>)
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d1f0      	bne.n	80115b4 <HAL_RCC_OscConfig+0x93c>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80115d2:	4b31      	ldr	r3, [pc, #196]	; (8011698 <HAL_RCC_OscConfig+0xa20>)
 80115d4:	68da      	ldr	r2, [r3, #12]
 80115d6:	4b32      	ldr	r3, [pc, #200]	; (80116a0 <HAL_RCC_OscConfig+0xa28>)
 80115d8:	4013      	ands	r3, r2
 80115da:	687a      	ldr	r2, [r7, #4]
 80115dc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80115de:	687a      	ldr	r2, [r7, #4]
 80115e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80115e2:	3a01      	subs	r2, #1
 80115e4:	0112      	lsls	r2, r2, #4
 80115e6:	4311      	orrs	r1, r2
 80115e8:	687a      	ldr	r2, [r7, #4]
 80115ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80115ec:	0212      	lsls	r2, r2, #8
 80115ee:	4311      	orrs	r1, r2
 80115f0:	687a      	ldr	r2, [r7, #4]
 80115f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80115f4:	0852      	lsrs	r2, r2, #1
 80115f6:	3a01      	subs	r2, #1
 80115f8:	0552      	lsls	r2, r2, #21
 80115fa:	4311      	orrs	r1, r2
 80115fc:	687a      	ldr	r2, [r7, #4]
 80115fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8011600:	0852      	lsrs	r2, r2, #1
 8011602:	3a01      	subs	r2, #1
 8011604:	0652      	lsls	r2, r2, #25
 8011606:	4311      	orrs	r1, r2
 8011608:	687a      	ldr	r2, [r7, #4]
 801160a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801160c:	06d2      	lsls	r2, r2, #27
 801160e:	430a      	orrs	r2, r1
 8011610:	4921      	ldr	r1, [pc, #132]	; (8011698 <HAL_RCC_OscConfig+0xa20>)
 8011612:	4313      	orrs	r3, r2
 8011614:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8011616:	4b20      	ldr	r3, [pc, #128]	; (8011698 <HAL_RCC_OscConfig+0xa20>)
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	4a1f      	ldr	r2, [pc, #124]	; (8011698 <HAL_RCC_OscConfig+0xa20>)
 801161c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011620:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8011622:	4b1d      	ldr	r3, [pc, #116]	; (8011698 <HAL_RCC_OscConfig+0xa20>)
 8011624:	68db      	ldr	r3, [r3, #12]
 8011626:	4a1c      	ldr	r2, [pc, #112]	; (8011698 <HAL_RCC_OscConfig+0xa20>)
 8011628:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801162c:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 801162e:	f7f8 ff79 	bl	800a524 <HAL_GetTick>
 8011632:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8011634:	e008      	b.n	8011648 <HAL_RCC_OscConfig+0x9d0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011636:	f7f8 ff75 	bl	800a524 <HAL_GetTick>
 801163a:	4602      	mov	r2, r0
 801163c:	693b      	ldr	r3, [r7, #16]
 801163e:	1ad3      	subs	r3, r2, r3
 8011640:	2b02      	cmp	r3, #2
 8011642:	d901      	bls.n	8011648 <HAL_RCC_OscConfig+0x9d0>
              {
                return HAL_TIMEOUT;
 8011644:	2303      	movs	r3, #3
 8011646:	e05a      	b.n	80116fe <HAL_RCC_OscConfig+0xa86>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8011648:	4b13      	ldr	r3, [pc, #76]	; (8011698 <HAL_RCC_OscConfig+0xa20>)
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011650:	2b00      	cmp	r3, #0
 8011652:	d0f0      	beq.n	8011636 <HAL_RCC_OscConfig+0x9be>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8011654:	e052      	b.n	80116fc <HAL_RCC_OscConfig+0xa84>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8011656:	2301      	movs	r3, #1
 8011658:	e051      	b.n	80116fe <HAL_RCC_OscConfig+0xa86>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801165a:	4b0f      	ldr	r3, [pc, #60]	; (8011698 <HAL_RCC_OscConfig+0xa20>)
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011662:	2b00      	cmp	r3, #0
 8011664:	d14a      	bne.n	80116fc <HAL_RCC_OscConfig+0xa84>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8011666:	4b0c      	ldr	r3, [pc, #48]	; (8011698 <HAL_RCC_OscConfig+0xa20>)
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	4a0b      	ldr	r2, [pc, #44]	; (8011698 <HAL_RCC_OscConfig+0xa20>)
 801166c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011670:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8011672:	4b09      	ldr	r3, [pc, #36]	; (8011698 <HAL_RCC_OscConfig+0xa20>)
 8011674:	68db      	ldr	r3, [r3, #12]
 8011676:	4a08      	ldr	r2, [pc, #32]	; (8011698 <HAL_RCC_OscConfig+0xa20>)
 8011678:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801167c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801167e:	f7f8 ff51 	bl	800a524 <HAL_GetTick>
 8011682:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8011684:	e00e      	b.n	80116a4 <HAL_RCC_OscConfig+0xa2c>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011686:	f7f8 ff4d 	bl	800a524 <HAL_GetTick>
 801168a:	4602      	mov	r2, r0
 801168c:	693b      	ldr	r3, [r7, #16]
 801168e:	1ad3      	subs	r3, r2, r3
 8011690:	2b02      	cmp	r3, #2
 8011692:	d907      	bls.n	80116a4 <HAL_RCC_OscConfig+0xa2c>
            {
              return HAL_TIMEOUT;
 8011694:	2303      	movs	r3, #3
 8011696:	e032      	b.n	80116fe <HAL_RCC_OscConfig+0xa86>
 8011698:	40021000 	.word	0x40021000
 801169c:	0801ba84 	.word	0x0801ba84
 80116a0:	019d808c 	.word	0x019d808c
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80116a4:	4b18      	ldr	r3, [pc, #96]	; (8011708 <HAL_RCC_OscConfig+0xa90>)
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d0ea      	beq.n	8011686 <HAL_RCC_OscConfig+0xa0e>
 80116b0:	e024      	b.n	80116fc <HAL_RCC_OscConfig+0xa84>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80116b2:	69bb      	ldr	r3, [r7, #24]
 80116b4:	2b0c      	cmp	r3, #12
 80116b6:	d01f      	beq.n	80116f8 <HAL_RCC_OscConfig+0xa80>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80116b8:	4b13      	ldr	r3, [pc, #76]	; (8011708 <HAL_RCC_OscConfig+0xa90>)
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	4a12      	ldr	r2, [pc, #72]	; (8011708 <HAL_RCC_OscConfig+0xa90>)
 80116be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80116c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80116c4:	f7f8 ff2e 	bl	800a524 <HAL_GetTick>
 80116c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80116ca:	e008      	b.n	80116de <HAL_RCC_OscConfig+0xa66>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80116cc:	f7f8 ff2a 	bl	800a524 <HAL_GetTick>
 80116d0:	4602      	mov	r2, r0
 80116d2:	693b      	ldr	r3, [r7, #16]
 80116d4:	1ad3      	subs	r3, r2, r3
 80116d6:	2b02      	cmp	r3, #2
 80116d8:	d901      	bls.n	80116de <HAL_RCC_OscConfig+0xa66>
          {
            return HAL_TIMEOUT;
 80116da:	2303      	movs	r3, #3
 80116dc:	e00f      	b.n	80116fe <HAL_RCC_OscConfig+0xa86>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80116de:	4b0a      	ldr	r3, [pc, #40]	; (8011708 <HAL_RCC_OscConfig+0xa90>)
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d1f0      	bne.n	80116cc <HAL_RCC_OscConfig+0xa54>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80116ea:	4b07      	ldr	r3, [pc, #28]	; (8011708 <HAL_RCC_OscConfig+0xa90>)
 80116ec:	68da      	ldr	r2, [r3, #12]
 80116ee:	4906      	ldr	r1, [pc, #24]	; (8011708 <HAL_RCC_OscConfig+0xa90>)
 80116f0:	4b06      	ldr	r3, [pc, #24]	; (801170c <HAL_RCC_OscConfig+0xa94>)
 80116f2:	4013      	ands	r3, r2
 80116f4:	60cb      	str	r3, [r1, #12]
 80116f6:	e001      	b.n	80116fc <HAL_RCC_OscConfig+0xa84>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80116f8:	2301      	movs	r3, #1
 80116fa:	e000      	b.n	80116fe <HAL_RCC_OscConfig+0xa86>
      }
    }
  }
  return HAL_OK;
 80116fc:	2300      	movs	r3, #0
}
 80116fe:	4618      	mov	r0, r3
 8011700:	3720      	adds	r7, #32
 8011702:	46bd      	mov	sp, r7
 8011704:	bd80      	pop	{r7, pc}
 8011706:	bf00      	nop
 8011708:	40021000 	.word	0x40021000
 801170c:	feeefffc 	.word	0xfeeefffc

08011710 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011710:	b580      	push	{r7, lr}
 8011712:	b084      	sub	sp, #16
 8011714:	af00      	add	r7, sp, #0
 8011716:	6078      	str	r0, [r7, #4]
 8011718:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d101      	bne.n	8011724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011720:	2301      	movs	r3, #1
 8011722:	e186      	b.n	8011a32 <HAL_RCC_ClockConfig+0x322>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	2b00      	cmp	r3, #0
 801172a:	d003      	beq.n	8011734 <HAL_RCC_ClockConfig+0x24>
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	2b0f      	cmp	r3, #15
 8011732:	d904      	bls.n	801173e <HAL_RCC_ClockConfig+0x2e>
 8011734:	f240 4157 	movw	r1, #1111	; 0x457
 8011738:	4882      	ldr	r0, [pc, #520]	; (8011944 <HAL_RCC_ClockConfig+0x234>)
 801173a:	f7f2 ff23 	bl	8004584 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 801173e:	683b      	ldr	r3, [r7, #0]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d010      	beq.n	8011766 <HAL_RCC_ClockConfig+0x56>
 8011744:	683b      	ldr	r3, [r7, #0]
 8011746:	2b01      	cmp	r3, #1
 8011748:	d00d      	beq.n	8011766 <HAL_RCC_ClockConfig+0x56>
 801174a:	683b      	ldr	r3, [r7, #0]
 801174c:	2b02      	cmp	r3, #2
 801174e:	d00a      	beq.n	8011766 <HAL_RCC_ClockConfig+0x56>
 8011750:	683b      	ldr	r3, [r7, #0]
 8011752:	2b03      	cmp	r3, #3
 8011754:	d007      	beq.n	8011766 <HAL_RCC_ClockConfig+0x56>
 8011756:	683b      	ldr	r3, [r7, #0]
 8011758:	2b04      	cmp	r3, #4
 801175a:	d004      	beq.n	8011766 <HAL_RCC_ClockConfig+0x56>
 801175c:	f44f 618b 	mov.w	r1, #1112	; 0x458
 8011760:	4878      	ldr	r0, [pc, #480]	; (8011944 <HAL_RCC_ClockConfig+0x234>)
 8011762:	f7f2 ff0f 	bl	8004584 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8011766:	4b78      	ldr	r3, [pc, #480]	; (8011948 <HAL_RCC_ClockConfig+0x238>)
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	f003 0307 	and.w	r3, r3, #7
 801176e:	683a      	ldr	r2, [r7, #0]
 8011770:	429a      	cmp	r2, r3
 8011772:	d910      	bls.n	8011796 <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011774:	4b74      	ldr	r3, [pc, #464]	; (8011948 <HAL_RCC_ClockConfig+0x238>)
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	f023 0207 	bic.w	r2, r3, #7
 801177c:	4972      	ldr	r1, [pc, #456]	; (8011948 <HAL_RCC_ClockConfig+0x238>)
 801177e:	683b      	ldr	r3, [r7, #0]
 8011780:	4313      	orrs	r3, r2
 8011782:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011784:	4b70      	ldr	r3, [pc, #448]	; (8011948 <HAL_RCC_ClockConfig+0x238>)
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	f003 0307 	and.w	r3, r3, #7
 801178c:	683a      	ldr	r2, [r7, #0]
 801178e:	429a      	cmp	r2, r3
 8011790:	d001      	beq.n	8011796 <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 8011792:	2301      	movs	r3, #1
 8011794:	e14d      	b.n	8011a32 <HAL_RCC_ClockConfig+0x322>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	f003 0302 	and.w	r3, r3, #2
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d039      	beq.n	8011816 <HAL_RCC_ClockConfig+0x106>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	689b      	ldr	r3, [r3, #8]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d024      	beq.n	80117f4 <HAL_RCC_ClockConfig+0xe4>
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	689b      	ldr	r3, [r3, #8]
 80117ae:	2b80      	cmp	r3, #128	; 0x80
 80117b0:	d020      	beq.n	80117f4 <HAL_RCC_ClockConfig+0xe4>
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	689b      	ldr	r3, [r3, #8]
 80117b6:	2b90      	cmp	r3, #144	; 0x90
 80117b8:	d01c      	beq.n	80117f4 <HAL_RCC_ClockConfig+0xe4>
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	689b      	ldr	r3, [r3, #8]
 80117be:	2ba0      	cmp	r3, #160	; 0xa0
 80117c0:	d018      	beq.n	80117f4 <HAL_RCC_ClockConfig+0xe4>
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	689b      	ldr	r3, [r3, #8]
 80117c6:	2bb0      	cmp	r3, #176	; 0xb0
 80117c8:	d014      	beq.n	80117f4 <HAL_RCC_ClockConfig+0xe4>
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	689b      	ldr	r3, [r3, #8]
 80117ce:	2bc0      	cmp	r3, #192	; 0xc0
 80117d0:	d010      	beq.n	80117f4 <HAL_RCC_ClockConfig+0xe4>
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	689b      	ldr	r3, [r3, #8]
 80117d6:	2bd0      	cmp	r3, #208	; 0xd0
 80117d8:	d00c      	beq.n	80117f4 <HAL_RCC_ClockConfig+0xe4>
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	689b      	ldr	r3, [r3, #8]
 80117de:	2be0      	cmp	r3, #224	; 0xe0
 80117e0:	d008      	beq.n	80117f4 <HAL_RCC_ClockConfig+0xe4>
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	689b      	ldr	r3, [r3, #8]
 80117e6:	2bf0      	cmp	r3, #240	; 0xf0
 80117e8:	d004      	beq.n	80117f4 <HAL_RCC_ClockConfig+0xe4>
 80117ea:	f44f 618e 	mov.w	r1, #1136	; 0x470
 80117ee:	4855      	ldr	r0, [pc, #340]	; (8011944 <HAL_RCC_ClockConfig+0x234>)
 80117f0:	f7f2 fec8 	bl	8004584 <assert_failed>

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	689a      	ldr	r2, [r3, #8]
 80117f8:	4b54      	ldr	r3, [pc, #336]	; (801194c <HAL_RCC_ClockConfig+0x23c>)
 80117fa:	689b      	ldr	r3, [r3, #8]
 80117fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011800:	429a      	cmp	r2, r3
 8011802:	d908      	bls.n	8011816 <HAL_RCC_ClockConfig+0x106>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011804:	4b51      	ldr	r3, [pc, #324]	; (801194c <HAL_RCC_ClockConfig+0x23c>)
 8011806:	689b      	ldr	r3, [r3, #8]
 8011808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	689b      	ldr	r3, [r3, #8]
 8011810:	494e      	ldr	r1, [pc, #312]	; (801194c <HAL_RCC_ClockConfig+0x23c>)
 8011812:	4313      	orrs	r3, r2
 8011814:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	f003 0301 	and.w	r3, r3, #1
 801181e:	2b00      	cmp	r3, #0
 8011820:	d061      	beq.n	80118e6 <HAL_RCC_ClockConfig+0x1d6>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	685b      	ldr	r3, [r3, #4]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d010      	beq.n	801184c <HAL_RCC_ClockConfig+0x13c>
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	685b      	ldr	r3, [r3, #4]
 801182e:	2b01      	cmp	r3, #1
 8011830:	d00c      	beq.n	801184c <HAL_RCC_ClockConfig+0x13c>
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	685b      	ldr	r3, [r3, #4]
 8011836:	2b02      	cmp	r3, #2
 8011838:	d008      	beq.n	801184c <HAL_RCC_ClockConfig+0x13c>
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	685b      	ldr	r3, [r3, #4]
 801183e:	2b03      	cmp	r3, #3
 8011840:	d004      	beq.n	801184c <HAL_RCC_ClockConfig+0x13c>
 8011842:	f240 417b 	movw	r1, #1147	; 0x47b
 8011846:	483f      	ldr	r0, [pc, #252]	; (8011944 <HAL_RCC_ClockConfig+0x234>)
 8011848:	f7f2 fe9c 	bl	8004584 <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	685b      	ldr	r3, [r3, #4]
 8011850:	2b03      	cmp	r3, #3
 8011852:	d107      	bne.n	8011864 <HAL_RCC_ClockConfig+0x154>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8011854:	4b3d      	ldr	r3, [pc, #244]	; (801194c <HAL_RCC_ClockConfig+0x23c>)
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801185c:	2b00      	cmp	r3, #0
 801185e:	d121      	bne.n	80118a4 <HAL_RCC_ClockConfig+0x194>
      {
        return HAL_ERROR;
 8011860:	2301      	movs	r3, #1
 8011862:	e0e6      	b.n	8011a32 <HAL_RCC_ClockConfig+0x322>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	685b      	ldr	r3, [r3, #4]
 8011868:	2b02      	cmp	r3, #2
 801186a:	d107      	bne.n	801187c <HAL_RCC_ClockConfig+0x16c>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801186c:	4b37      	ldr	r3, [pc, #220]	; (801194c <HAL_RCC_ClockConfig+0x23c>)
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011874:	2b00      	cmp	r3, #0
 8011876:	d115      	bne.n	80118a4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8011878:	2301      	movs	r3, #1
 801187a:	e0da      	b.n	8011a32 <HAL_RCC_ClockConfig+0x322>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	685b      	ldr	r3, [r3, #4]
 8011880:	2b00      	cmp	r3, #0
 8011882:	d107      	bne.n	8011894 <HAL_RCC_ClockConfig+0x184>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8011884:	4b31      	ldr	r3, [pc, #196]	; (801194c <HAL_RCC_ClockConfig+0x23c>)
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	f003 0302 	and.w	r3, r3, #2
 801188c:	2b00      	cmp	r3, #0
 801188e:	d109      	bne.n	80118a4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8011890:	2301      	movs	r3, #1
 8011892:	e0ce      	b.n	8011a32 <HAL_RCC_ClockConfig+0x322>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8011894:	4b2d      	ldr	r3, [pc, #180]	; (801194c <HAL_RCC_ClockConfig+0x23c>)
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801189c:	2b00      	cmp	r3, #0
 801189e:	d101      	bne.n	80118a4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 80118a0:	2301      	movs	r3, #1
 80118a2:	e0c6      	b.n	8011a32 <HAL_RCC_ClockConfig+0x322>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80118a4:	4b29      	ldr	r3, [pc, #164]	; (801194c <HAL_RCC_ClockConfig+0x23c>)
 80118a6:	689b      	ldr	r3, [r3, #8]
 80118a8:	f023 0203 	bic.w	r2, r3, #3
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	685b      	ldr	r3, [r3, #4]
 80118b0:	4926      	ldr	r1, [pc, #152]	; (801194c <HAL_RCC_ClockConfig+0x23c>)
 80118b2:	4313      	orrs	r3, r2
 80118b4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80118b6:	f7f8 fe35 	bl	800a524 <HAL_GetTick>
 80118ba:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80118bc:	e00a      	b.n	80118d4 <HAL_RCC_ClockConfig+0x1c4>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80118be:	f7f8 fe31 	bl	800a524 <HAL_GetTick>
 80118c2:	4602      	mov	r2, r0
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	1ad3      	subs	r3, r2, r3
 80118c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80118cc:	4293      	cmp	r3, r2
 80118ce:	d901      	bls.n	80118d4 <HAL_RCC_ClockConfig+0x1c4>
      {
        return HAL_TIMEOUT;
 80118d0:	2303      	movs	r3, #3
 80118d2:	e0ae      	b.n	8011a32 <HAL_RCC_ClockConfig+0x322>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80118d4:	4b1d      	ldr	r3, [pc, #116]	; (801194c <HAL_RCC_ClockConfig+0x23c>)
 80118d6:	689b      	ldr	r3, [r3, #8]
 80118d8:	f003 020c 	and.w	r2, r3, #12
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	685b      	ldr	r3, [r3, #4]
 80118e0:	009b      	lsls	r3, r3, #2
 80118e2:	429a      	cmp	r2, r3
 80118e4:	d1eb      	bne.n	80118be <HAL_RCC_ClockConfig+0x1ae>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	f003 0302 	and.w	r3, r3, #2
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d010      	beq.n	8011914 <HAL_RCC_ClockConfig+0x204>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	689a      	ldr	r2, [r3, #8]
 80118f6:	4b15      	ldr	r3, [pc, #84]	; (801194c <HAL_RCC_ClockConfig+0x23c>)
 80118f8:	689b      	ldr	r3, [r3, #8]
 80118fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80118fe:	429a      	cmp	r2, r3
 8011900:	d208      	bcs.n	8011914 <HAL_RCC_ClockConfig+0x204>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011902:	4b12      	ldr	r3, [pc, #72]	; (801194c <HAL_RCC_ClockConfig+0x23c>)
 8011904:	689b      	ldr	r3, [r3, #8]
 8011906:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	689b      	ldr	r3, [r3, #8]
 801190e:	490f      	ldr	r1, [pc, #60]	; (801194c <HAL_RCC_ClockConfig+0x23c>)
 8011910:	4313      	orrs	r3, r2
 8011912:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8011914:	4b0c      	ldr	r3, [pc, #48]	; (8011948 <HAL_RCC_ClockConfig+0x238>)
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	f003 0307 	and.w	r3, r3, #7
 801191c:	683a      	ldr	r2, [r7, #0]
 801191e:	429a      	cmp	r2, r3
 8011920:	d216      	bcs.n	8011950 <HAL_RCC_ClockConfig+0x240>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011922:	4b09      	ldr	r3, [pc, #36]	; (8011948 <HAL_RCC_ClockConfig+0x238>)
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	f023 0207 	bic.w	r2, r3, #7
 801192a:	4907      	ldr	r1, [pc, #28]	; (8011948 <HAL_RCC_ClockConfig+0x238>)
 801192c:	683b      	ldr	r3, [r7, #0]
 801192e:	4313      	orrs	r3, r2
 8011930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011932:	4b05      	ldr	r3, [pc, #20]	; (8011948 <HAL_RCC_ClockConfig+0x238>)
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	f003 0307 	and.w	r3, r3, #7
 801193a:	683a      	ldr	r2, [r7, #0]
 801193c:	429a      	cmp	r2, r3
 801193e:	d007      	beq.n	8011950 <HAL_RCC_ClockConfig+0x240>
    {
      return HAL_ERROR;
 8011940:	2301      	movs	r3, #1
 8011942:	e076      	b.n	8011a32 <HAL_RCC_ClockConfig+0x322>
 8011944:	0801ba84 	.word	0x0801ba84
 8011948:	40022000 	.word	0x40022000
 801194c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	f003 0304 	and.w	r3, r3, #4
 8011958:	2b00      	cmp	r3, #0
 801195a:	d025      	beq.n	80119a8 <HAL_RCC_ClockConfig+0x298>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	68db      	ldr	r3, [r3, #12]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d018      	beq.n	8011996 <HAL_RCC_ClockConfig+0x286>
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	68db      	ldr	r3, [r3, #12]
 8011968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801196c:	d013      	beq.n	8011996 <HAL_RCC_ClockConfig+0x286>
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	68db      	ldr	r3, [r3, #12]
 8011972:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8011976:	d00e      	beq.n	8011996 <HAL_RCC_ClockConfig+0x286>
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	68db      	ldr	r3, [r3, #12]
 801197c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8011980:	d009      	beq.n	8011996 <HAL_RCC_ClockConfig+0x286>
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	68db      	ldr	r3, [r3, #12]
 8011986:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801198a:	d004      	beq.n	8011996 <HAL_RCC_ClockConfig+0x286>
 801198c:	f240 41f3 	movw	r1, #1267	; 0x4f3
 8011990:	482a      	ldr	r0, [pc, #168]	; (8011a3c <HAL_RCC_ClockConfig+0x32c>)
 8011992:	f7f2 fdf7 	bl	8004584 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8011996:	4b2a      	ldr	r3, [pc, #168]	; (8011a40 <HAL_RCC_ClockConfig+0x330>)
 8011998:	689b      	ldr	r3, [r3, #8]
 801199a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	68db      	ldr	r3, [r3, #12]
 80119a2:	4927      	ldr	r1, [pc, #156]	; (8011a40 <HAL_RCC_ClockConfig+0x330>)
 80119a4:	4313      	orrs	r3, r2
 80119a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	f003 0308 	and.w	r3, r3, #8
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d026      	beq.n	8011a02 <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	691b      	ldr	r3, [r3, #16]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d018      	beq.n	80119ee <HAL_RCC_ClockConfig+0x2de>
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	691b      	ldr	r3, [r3, #16]
 80119c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80119c4:	d013      	beq.n	80119ee <HAL_RCC_ClockConfig+0x2de>
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	691b      	ldr	r3, [r3, #16]
 80119ca:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80119ce:	d00e      	beq.n	80119ee <HAL_RCC_ClockConfig+0x2de>
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	691b      	ldr	r3, [r3, #16]
 80119d4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80119d8:	d009      	beq.n	80119ee <HAL_RCC_ClockConfig+0x2de>
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	691b      	ldr	r3, [r3, #16]
 80119de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80119e2:	d004      	beq.n	80119ee <HAL_RCC_ClockConfig+0x2de>
 80119e4:	f240 41fa 	movw	r1, #1274	; 0x4fa
 80119e8:	4814      	ldr	r0, [pc, #80]	; (8011a3c <HAL_RCC_ClockConfig+0x32c>)
 80119ea:	f7f2 fdcb 	bl	8004584 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80119ee:	4b14      	ldr	r3, [pc, #80]	; (8011a40 <HAL_RCC_ClockConfig+0x330>)
 80119f0:	689b      	ldr	r3, [r3, #8]
 80119f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	691b      	ldr	r3, [r3, #16]
 80119fa:	00db      	lsls	r3, r3, #3
 80119fc:	4910      	ldr	r1, [pc, #64]	; (8011a40 <HAL_RCC_ClockConfig+0x330>)
 80119fe:	4313      	orrs	r3, r2
 8011a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8011a02:	f000 f825 	bl	8011a50 <HAL_RCC_GetSysClockFreq>
 8011a06:	4602      	mov	r2, r0
 8011a08:	4b0d      	ldr	r3, [pc, #52]	; (8011a40 <HAL_RCC_ClockConfig+0x330>)
 8011a0a:	689b      	ldr	r3, [r3, #8]
 8011a0c:	091b      	lsrs	r3, r3, #4
 8011a0e:	f003 030f 	and.w	r3, r3, #15
 8011a12:	490c      	ldr	r1, [pc, #48]	; (8011a44 <HAL_RCC_ClockConfig+0x334>)
 8011a14:	5ccb      	ldrb	r3, [r1, r3]
 8011a16:	f003 031f 	and.w	r3, r3, #31
 8011a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8011a1e:	4a0a      	ldr	r2, [pc, #40]	; (8011a48 <HAL_RCC_ClockConfig+0x338>)
 8011a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8011a22:	4b0a      	ldr	r3, [pc, #40]	; (8011a4c <HAL_RCC_ClockConfig+0x33c>)
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	4618      	mov	r0, r3
 8011a28:	f7f8 fd2c 	bl	800a484 <HAL_InitTick>
 8011a2c:	4603      	mov	r3, r0
 8011a2e:	72fb      	strb	r3, [r7, #11]

  return status;
 8011a30:	7afb      	ldrb	r3, [r7, #11]
}
 8011a32:	4618      	mov	r0, r3
 8011a34:	3710      	adds	r7, #16
 8011a36:	46bd      	mov	sp, r7
 8011a38:	bd80      	pop	{r7, pc}
 8011a3a:	bf00      	nop
 8011a3c:	0801ba84 	.word	0x0801ba84
 8011a40:	40021000 	.word	0x40021000
 8011a44:	0801c00c 	.word	0x0801c00c
 8011a48:	20000ff8 	.word	0x20000ff8
 8011a4c:	2000146c 	.word	0x2000146c

08011a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011a50:	b480      	push	{r7}
 8011a52:	b089      	sub	sp, #36	; 0x24
 8011a54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8011a56:	2300      	movs	r3, #0
 8011a58:	61fb      	str	r3, [r7, #28]
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011a5e:	4b3e      	ldr	r3, [pc, #248]	; (8011b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8011a60:	689b      	ldr	r3, [r3, #8]
 8011a62:	f003 030c 	and.w	r3, r3, #12
 8011a66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8011a68:	4b3b      	ldr	r3, [pc, #236]	; (8011b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8011a6a:	68db      	ldr	r3, [r3, #12]
 8011a6c:	f003 0303 	and.w	r3, r3, #3
 8011a70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8011a72:	693b      	ldr	r3, [r7, #16]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d005      	beq.n	8011a84 <HAL_RCC_GetSysClockFreq+0x34>
 8011a78:	693b      	ldr	r3, [r7, #16]
 8011a7a:	2b0c      	cmp	r3, #12
 8011a7c:	d121      	bne.n	8011ac2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	2b01      	cmp	r3, #1
 8011a82:	d11e      	bne.n	8011ac2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8011a84:	4b34      	ldr	r3, [pc, #208]	; (8011b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	f003 0308 	and.w	r3, r3, #8
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d107      	bne.n	8011aa0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8011a90:	4b31      	ldr	r3, [pc, #196]	; (8011b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8011a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011a96:	0a1b      	lsrs	r3, r3, #8
 8011a98:	f003 030f 	and.w	r3, r3, #15
 8011a9c:	61fb      	str	r3, [r7, #28]
 8011a9e:	e005      	b.n	8011aac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8011aa0:	4b2d      	ldr	r3, [pc, #180]	; (8011b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	091b      	lsrs	r3, r3, #4
 8011aa6:	f003 030f 	and.w	r3, r3, #15
 8011aaa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8011aac:	4a2b      	ldr	r2, [pc, #172]	; (8011b5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8011aae:	69fb      	ldr	r3, [r7, #28]
 8011ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011ab4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8011ab6:	693b      	ldr	r3, [r7, #16]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d10d      	bne.n	8011ad8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8011abc:	69fb      	ldr	r3, [r7, #28]
 8011abe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8011ac0:	e00a      	b.n	8011ad8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8011ac2:	693b      	ldr	r3, [r7, #16]
 8011ac4:	2b04      	cmp	r3, #4
 8011ac6:	d102      	bne.n	8011ace <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8011ac8:	4b25      	ldr	r3, [pc, #148]	; (8011b60 <HAL_RCC_GetSysClockFreq+0x110>)
 8011aca:	61bb      	str	r3, [r7, #24]
 8011acc:	e004      	b.n	8011ad8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8011ace:	693b      	ldr	r3, [r7, #16]
 8011ad0:	2b08      	cmp	r3, #8
 8011ad2:	d101      	bne.n	8011ad8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8011ad4:	4b23      	ldr	r3, [pc, #140]	; (8011b64 <HAL_RCC_GetSysClockFreq+0x114>)
 8011ad6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8011ad8:	693b      	ldr	r3, [r7, #16]
 8011ada:	2b0c      	cmp	r3, #12
 8011adc:	d134      	bne.n	8011b48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8011ade:	4b1e      	ldr	r3, [pc, #120]	; (8011b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8011ae0:	68db      	ldr	r3, [r3, #12]
 8011ae2:	f003 0303 	and.w	r3, r3, #3
 8011ae6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8011ae8:	68bb      	ldr	r3, [r7, #8]
 8011aea:	2b02      	cmp	r3, #2
 8011aec:	d003      	beq.n	8011af6 <HAL_RCC_GetSysClockFreq+0xa6>
 8011aee:	68bb      	ldr	r3, [r7, #8]
 8011af0:	2b03      	cmp	r3, #3
 8011af2:	d003      	beq.n	8011afc <HAL_RCC_GetSysClockFreq+0xac>
 8011af4:	e005      	b.n	8011b02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8011af6:	4b1a      	ldr	r3, [pc, #104]	; (8011b60 <HAL_RCC_GetSysClockFreq+0x110>)
 8011af8:	617b      	str	r3, [r7, #20]
      break;
 8011afa:	e005      	b.n	8011b08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8011afc:	4b19      	ldr	r3, [pc, #100]	; (8011b64 <HAL_RCC_GetSysClockFreq+0x114>)
 8011afe:	617b      	str	r3, [r7, #20]
      break;
 8011b00:	e002      	b.n	8011b08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8011b02:	69fb      	ldr	r3, [r7, #28]
 8011b04:	617b      	str	r3, [r7, #20]
      break;
 8011b06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8011b08:	4b13      	ldr	r3, [pc, #76]	; (8011b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8011b0a:	68db      	ldr	r3, [r3, #12]
 8011b0c:	091b      	lsrs	r3, r3, #4
 8011b0e:	f003 0307 	and.w	r3, r3, #7
 8011b12:	3301      	adds	r3, #1
 8011b14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8011b16:	4b10      	ldr	r3, [pc, #64]	; (8011b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8011b18:	68db      	ldr	r3, [r3, #12]
 8011b1a:	0a1b      	lsrs	r3, r3, #8
 8011b1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011b20:	697a      	ldr	r2, [r7, #20]
 8011b22:	fb02 f203 	mul.w	r2, r2, r3
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8011b2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8011b2e:	4b0a      	ldr	r3, [pc, #40]	; (8011b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8011b30:	68db      	ldr	r3, [r3, #12]
 8011b32:	0e5b      	lsrs	r3, r3, #25
 8011b34:	f003 0303 	and.w	r3, r3, #3
 8011b38:	3301      	adds	r3, #1
 8011b3a:	005b      	lsls	r3, r3, #1
 8011b3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8011b3e:	697a      	ldr	r2, [r7, #20]
 8011b40:	683b      	ldr	r3, [r7, #0]
 8011b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8011b46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8011b48:	69bb      	ldr	r3, [r7, #24]
}
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	3724      	adds	r7, #36	; 0x24
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b54:	4770      	bx	lr
 8011b56:	bf00      	nop
 8011b58:	40021000 	.word	0x40021000
 8011b5c:	0801c024 	.word	0x0801c024
 8011b60:	00f42400 	.word	0x00f42400
 8011b64:	017d7840 	.word	0x017d7840

08011b68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b086      	sub	sp, #24
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8011b70:	2300      	movs	r3, #0
 8011b72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8011b74:	4b2a      	ldr	r3, [pc, #168]	; (8011c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8011b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d003      	beq.n	8011b88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8011b80:	f7ff f80a 	bl	8010b98 <HAL_PWREx_GetVoltageRange>
 8011b84:	6178      	str	r0, [r7, #20]
 8011b86:	e014      	b.n	8011bb2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8011b88:	4b25      	ldr	r3, [pc, #148]	; (8011c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8011b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b8c:	4a24      	ldr	r2, [pc, #144]	; (8011c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8011b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011b92:	6593      	str	r3, [r2, #88]	; 0x58
 8011b94:	4b22      	ldr	r3, [pc, #136]	; (8011c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8011b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011b9c:	60fb      	str	r3, [r7, #12]
 8011b9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8011ba0:	f7fe fffa 	bl	8010b98 <HAL_PWREx_GetVoltageRange>
 8011ba4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8011ba6:	4b1e      	ldr	r3, [pc, #120]	; (8011c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8011ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011baa:	4a1d      	ldr	r2, [pc, #116]	; (8011c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8011bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011bb0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8011bb2:	697b      	ldr	r3, [r7, #20]
 8011bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011bb8:	d10b      	bne.n	8011bd2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	2b80      	cmp	r3, #128	; 0x80
 8011bbe:	d919      	bls.n	8011bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	2ba0      	cmp	r3, #160	; 0xa0
 8011bc4:	d902      	bls.n	8011bcc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8011bc6:	2302      	movs	r3, #2
 8011bc8:	613b      	str	r3, [r7, #16]
 8011bca:	e013      	b.n	8011bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8011bcc:	2301      	movs	r3, #1
 8011bce:	613b      	str	r3, [r7, #16]
 8011bd0:	e010      	b.n	8011bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	2b80      	cmp	r3, #128	; 0x80
 8011bd6:	d902      	bls.n	8011bde <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8011bd8:	2303      	movs	r3, #3
 8011bda:	613b      	str	r3, [r7, #16]
 8011bdc:	e00a      	b.n	8011bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	2b80      	cmp	r3, #128	; 0x80
 8011be2:	d102      	bne.n	8011bea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8011be4:	2302      	movs	r3, #2
 8011be6:	613b      	str	r3, [r7, #16]
 8011be8:	e004      	b.n	8011bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	2b70      	cmp	r3, #112	; 0x70
 8011bee:	d101      	bne.n	8011bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8011bf0:	2301      	movs	r3, #1
 8011bf2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8011bf4:	4b0b      	ldr	r3, [pc, #44]	; (8011c24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	f023 0207 	bic.w	r2, r3, #7
 8011bfc:	4909      	ldr	r1, [pc, #36]	; (8011c24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8011bfe:	693b      	ldr	r3, [r7, #16]
 8011c00:	4313      	orrs	r3, r2
 8011c02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8011c04:	4b07      	ldr	r3, [pc, #28]	; (8011c24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	f003 0307 	and.w	r3, r3, #7
 8011c0c:	693a      	ldr	r2, [r7, #16]
 8011c0e:	429a      	cmp	r2, r3
 8011c10:	d001      	beq.n	8011c16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8011c12:	2301      	movs	r3, #1
 8011c14:	e000      	b.n	8011c18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8011c16:	2300      	movs	r3, #0
}
 8011c18:	4618      	mov	r0, r3
 8011c1a:	3718      	adds	r7, #24
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	bd80      	pop	{r7, pc}
 8011c20:	40021000 	.word	0x40021000
 8011c24:	40022000 	.word	0x40022000

08011c28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	b086      	sub	sp, #24
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8011c30:	2300      	movs	r3, #0
 8011c32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8011c34:	2300      	movs	r3, #0
 8011c36:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	681a      	ldr	r2, [r3, #0]
 8011c3c:	4b82      	ldr	r3, [pc, #520]	; (8011e48 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8011c3e:	4013      	ands	r3, r2
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d005      	beq.n	8011c50 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	681a      	ldr	r2, [r3, #0]
 8011c48:	4b80      	ldr	r3, [pc, #512]	; (8011e4c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8011c4a:	4013      	ands	r3, r2
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d003      	beq.n	8011c58 <HAL_RCCEx_PeriphCLKConfig+0x30>
 8011c50:	21c9      	movs	r1, #201	; 0xc9
 8011c52:	487f      	ldr	r0, [pc, #508]	; (8011e50 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8011c54:	f7f2 fc96 	bl	8004584 <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d043      	beq.n	8011cec <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d00d      	beq.n	8011c88 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011c74:	d008      	beq.n	8011c88 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c7a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8011c7e:	d003      	beq.n	8011c88 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8011c80:	21d1      	movs	r1, #209	; 0xd1
 8011c82:	4873      	ldr	r0, [pc, #460]	; (8011e50 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8011c84:	f7f2 fc7e 	bl	8004584 <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c8c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8011c90:	d01a      	beq.n	8011cc8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8011c92:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8011c96:	d814      	bhi.n	8011cc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d009      	beq.n	8011cb0 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8011c9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011ca0:	d10f      	bne.n	8011cc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8011ca2:	4b6c      	ldr	r3, [pc, #432]	; (8011e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8011ca4:	68db      	ldr	r3, [r3, #12]
 8011ca6:	4a6b      	ldr	r2, [pc, #428]	; (8011e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8011ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011cac:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8011cae:	e00c      	b.n	8011cca <HAL_RCCEx_PeriphCLKConfig+0xa2>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	3304      	adds	r3, #4
 8011cb4:	2100      	movs	r1, #0
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	f000 fb6e 	bl	8012398 <RCCEx_PLLSAI1_Config>
 8011cbc:	4603      	mov	r3, r0
 8011cbe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8011cc0:	e003      	b.n	8011cca <HAL_RCCEx_PeriphCLKConfig+0xa2>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011cc2:	2301      	movs	r3, #1
 8011cc4:	74fb      	strb	r3, [r7, #19]
      break;
 8011cc6:	e000      	b.n	8011cca <HAL_RCCEx_PeriphCLKConfig+0xa2>
      break;
 8011cc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011cca:	7cfb      	ldrb	r3, [r7, #19]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d10b      	bne.n	8011ce8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8011cd0:	4b60      	ldr	r3, [pc, #384]	; (8011e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8011cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011cd6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011cde:	495d      	ldr	r1, [pc, #372]	; (8011e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8011ce0:	4313      	orrs	r3, r2
 8011ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8011ce6:	e001      	b.n	8011cec <HAL_RCCEx_PeriphCLKConfig+0xc4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011ce8:	7cfb      	ldrb	r3, [r7, #19]
 8011cea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	f000 80bc 	beq.w	8011e72 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d013      	beq.n	8011d2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011d0e:	d00e      	beq.n	8011d2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011d18:	d009      	beq.n	8011d2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011d1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011d22:	d004      	beq.n	8011d2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8011d24:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8011d28:	4849      	ldr	r0, [pc, #292]	; (8011e50 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8011d2a:	f7f2 fc2b 	bl	8004584 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8011d2e:	4b49      	ldr	r3, [pc, #292]	; (8011e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8011d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d101      	bne.n	8011d3e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8011d3a:	2301      	movs	r3, #1
 8011d3c:	e000      	b.n	8011d40 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8011d3e:	2300      	movs	r3, #0
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d00d      	beq.n	8011d60 <HAL_RCCEx_PeriphCLKConfig+0x138>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011d44:	4b43      	ldr	r3, [pc, #268]	; (8011e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8011d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d48:	4a42      	ldr	r2, [pc, #264]	; (8011e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8011d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011d4e:	6593      	str	r3, [r2, #88]	; 0x58
 8011d50:	4b40      	ldr	r3, [pc, #256]	; (8011e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8011d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011d58:	60bb      	str	r3, [r7, #8]
 8011d5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011d5c:	2301      	movs	r3, #1
 8011d5e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011d60:	4b3d      	ldr	r3, [pc, #244]	; (8011e58 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	4a3c      	ldr	r2, [pc, #240]	; (8011e58 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8011d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011d6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8011d6c:	f7f8 fbda 	bl	800a524 <HAL_GetTick>
 8011d70:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8011d72:	e009      	b.n	8011d88 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011d74:	f7f8 fbd6 	bl	800a524 <HAL_GetTick>
 8011d78:	4602      	mov	r2, r0
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	1ad3      	subs	r3, r2, r3
 8011d7e:	2b02      	cmp	r3, #2
 8011d80:	d902      	bls.n	8011d88 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        ret = HAL_TIMEOUT;
 8011d82:	2303      	movs	r3, #3
 8011d84:	74fb      	strb	r3, [r7, #19]
        break;
 8011d86:	e005      	b.n	8011d94 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8011d88:	4b33      	ldr	r3, [pc, #204]	; (8011e58 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d0ef      	beq.n	8011d74 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      }
    }

    if(ret == HAL_OK)
 8011d94:	7cfb      	ldrb	r3, [r7, #19]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d160      	bne.n	8011e5c <HAL_RCCEx_PeriphCLKConfig+0x234>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8011d9a:	4b2e      	ldr	r3, [pc, #184]	; (8011e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8011d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011da0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011da4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8011da6:	697b      	ldr	r3, [r7, #20]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d01e      	beq.n	8011dea <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011db0:	697a      	ldr	r2, [r7, #20]
 8011db2:	429a      	cmp	r2, r3
 8011db4:	d019      	beq.n	8011dea <HAL_RCCEx_PeriphCLKConfig+0x1c2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8011db6:	4b27      	ldr	r3, [pc, #156]	; (8011e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8011db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011dc0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8011dc2:	4b24      	ldr	r3, [pc, #144]	; (8011e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8011dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011dc8:	4a22      	ldr	r2, [pc, #136]	; (8011e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8011dca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011dce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8011dd2:	4b20      	ldr	r3, [pc, #128]	; (8011e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8011dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011dd8:	4a1e      	ldr	r2, [pc, #120]	; (8011e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8011dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011dde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8011de2:	4a1c      	ldr	r2, [pc, #112]	; (8011e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8011de4:	697b      	ldr	r3, [r7, #20]
 8011de6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8011dea:	697b      	ldr	r3, [r7, #20]
 8011dec:	f003 0301 	and.w	r3, r3, #1
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d016      	beq.n	8011e22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011df4:	f7f8 fb96 	bl	800a524 <HAL_GetTick>
 8011df8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8011dfa:	e00b      	b.n	8011e14 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011dfc:	f7f8 fb92 	bl	800a524 <HAL_GetTick>
 8011e00:	4602      	mov	r2, r0
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	1ad3      	subs	r3, r2, r3
 8011e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8011e0a:	4293      	cmp	r3, r2
 8011e0c:	d902      	bls.n	8011e14 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
          {
            ret = HAL_TIMEOUT;
 8011e0e:	2303      	movs	r3, #3
 8011e10:	74fb      	strb	r3, [r7, #19]
            break;
 8011e12:	e006      	b.n	8011e22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8011e14:	4b0f      	ldr	r3, [pc, #60]	; (8011e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8011e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011e1a:	f003 0302 	and.w	r3, r3, #2
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d0ec      	beq.n	8011dfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
          }
        }
      }

      if(ret == HAL_OK)
 8011e22:	7cfb      	ldrb	r3, [r7, #19]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d10b      	bne.n	8011e40 <HAL_RCCEx_PeriphCLKConfig+0x218>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8011e28:	4b0a      	ldr	r3, [pc, #40]	; (8011e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8011e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011e2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e36:	4907      	ldr	r1, [pc, #28]	; (8011e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8011e38:	4313      	orrs	r3, r2
 8011e3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8011e3e:	e00f      	b.n	8011e60 <HAL_RCCEx_PeriphCLKConfig+0x238>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8011e40:	7cfb      	ldrb	r3, [r7, #19]
 8011e42:	74bb      	strb	r3, [r7, #18]
 8011e44:	e00c      	b.n	8011e60 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8011e46:	bf00      	nop
 8011e48:	000eefe7 	.word	0x000eefe7
 8011e4c:	fff11018 	.word	0xfff11018
 8011e50:	0801babc 	.word	0x0801babc
 8011e54:	40021000 	.word	0x40021000
 8011e58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011e5c:	7cfb      	ldrb	r3, [r7, #19]
 8011e5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011e60:	7c7b      	ldrb	r3, [r7, #17]
 8011e62:	2b01      	cmp	r3, #1
 8011e64:	d105      	bne.n	8011e72 <HAL_RCCEx_PeriphCLKConfig+0x24a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011e66:	4b9e      	ldr	r3, [pc, #632]	; (80120e0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8011e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e6a:	4a9d      	ldr	r2, [pc, #628]	; (80120e0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8011e6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011e70:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	f003 0301 	and.w	r3, r3, #1
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d01f      	beq.n	8011ebe <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	6a1b      	ldr	r3, [r3, #32]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d010      	beq.n	8011ea8 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	6a1b      	ldr	r3, [r3, #32]
 8011e8a:	2b01      	cmp	r3, #1
 8011e8c:	d00c      	beq.n	8011ea8 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	6a1b      	ldr	r3, [r3, #32]
 8011e92:	2b03      	cmp	r3, #3
 8011e94:	d008      	beq.n	8011ea8 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	6a1b      	ldr	r3, [r3, #32]
 8011e9a:	2b02      	cmp	r3, #2
 8011e9c:	d004      	beq.n	8011ea8 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8011e9e:	f240 1199 	movw	r1, #409	; 0x199
 8011ea2:	4890      	ldr	r0, [pc, #576]	; (80120e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8011ea4:	f7f2 fb6e 	bl	8004584 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011ea8:	4b8d      	ldr	r3, [pc, #564]	; (80120e0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8011eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011eae:	f023 0203 	bic.w	r2, r3, #3
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	6a1b      	ldr	r3, [r3, #32]
 8011eb6:	498a      	ldr	r1, [pc, #552]	; (80120e0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8011eb8:	4313      	orrs	r3, r2
 8011eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	f003 0302 	and.w	r3, r3, #2
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d01f      	beq.n	8011f0a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d010      	beq.n	8011ef4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ed6:	2b04      	cmp	r3, #4
 8011ed8:	d00c      	beq.n	8011ef4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ede:	2b0c      	cmp	r3, #12
 8011ee0:	d008      	beq.n	8011ef4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ee6:	2b08      	cmp	r3, #8
 8011ee8:	d004      	beq.n	8011ef4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8011eea:	f240 11a3 	movw	r1, #419	; 0x1a3
 8011eee:	487d      	ldr	r0, [pc, #500]	; (80120e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8011ef0:	f7f2 fb48 	bl	8004584 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8011ef4:	4b7a      	ldr	r3, [pc, #488]	; (80120e0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8011ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011efa:	f023 020c 	bic.w	r2, r3, #12
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f02:	4977      	ldr	r1, [pc, #476]	; (80120e0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8011f04:	4313      	orrs	r3, r2
 8011f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	f003 0304 	and.w	r3, r3, #4
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d01f      	beq.n	8011f56 <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d010      	beq.n	8011f40 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f22:	2b10      	cmp	r3, #16
 8011f24:	d00c      	beq.n	8011f40 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f2a:	2b30      	cmp	r3, #48	; 0x30
 8011f2c:	d008      	beq.n	8011f40 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f32:	2b20      	cmp	r3, #32
 8011f34:	d004      	beq.n	8011f40 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8011f36:	f240 11af 	movw	r1, #431	; 0x1af
 8011f3a:	486a      	ldr	r0, [pc, #424]	; (80120e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8011f3c:	f7f2 fb22 	bl	8004584 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8011f40:	4b67      	ldr	r3, [pc, #412]	; (80120e0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8011f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011f46:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f4e:	4964      	ldr	r1, [pc, #400]	; (80120e0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8011f50:	4313      	orrs	r3, r2
 8011f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	f003 0320 	and.w	r3, r3, #32
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d022      	beq.n	8011fa8 <HAL_RCCEx_PeriphCLKConfig+0x380>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d013      	beq.n	8011f92 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011f72:	d00e      	beq.n	8011f92 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011f7c:	d009      	beq.n	8011f92 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011f86:	d004      	beq.n	8011f92 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8011f88:	f240 11d7 	movw	r1, #471	; 0x1d7
 8011f8c:	4855      	ldr	r0, [pc, #340]	; (80120e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8011f8e:	f7f2 faf9 	bl	8004584 <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8011f92:	4b53      	ldr	r3, [pc, #332]	; (80120e0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8011f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011f98:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fa0:	494f      	ldr	r1, [pc, #316]	; (80120e0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8011fa2:	4313      	orrs	r3, r2
 8011fa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d022      	beq.n	8011ffa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d013      	beq.n	8011fe4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011fc0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011fc4:	d00e      	beq.n	8011fe4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011fca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8011fce:	d009      	beq.n	8011fe4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011fd4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8011fd8:	d004      	beq.n	8011fe4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8011fda:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8011fde:	4841      	ldr	r0, [pc, #260]	; (80120e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8011fe0:	f7f2 fad0 	bl	8004584 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8011fe4:	4b3e      	ldr	r3, [pc, #248]	; (80120e0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8011fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011fea:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ff2:	493b      	ldr	r1, [pc, #236]	; (80120e0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8011ff4:	4313      	orrs	r3, r2
 8011ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012002:	2b00      	cmp	r3, #0
 8012004:	d022      	beq.n	801204c <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801200a:	2b00      	cmp	r3, #0
 801200c:	d013      	beq.n	8012036 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012012:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012016:	d00e      	beq.n	8012036 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801201c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012020:	d009      	beq.n	8012036 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012026:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801202a:	d004      	beq.n	8012036 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801202c:	f240 11e7 	movw	r1, #487	; 0x1e7
 8012030:	482c      	ldr	r0, [pc, #176]	; (80120e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8012032:	f7f2 faa7 	bl	8004584 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8012036:	4b2a      	ldr	r3, [pc, #168]	; (80120e0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8012038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801203c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012044:	4926      	ldr	r1, [pc, #152]	; (80120e0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8012046:	4313      	orrs	r3, r2
 8012048:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012054:	2b00      	cmp	r3, #0
 8012056:	d01d      	beq.n	8012094 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801205c:	2b00      	cmp	r3, #0
 801205e:	d00e      	beq.n	801207e <HAL_RCCEx_PeriphCLKConfig+0x456>
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012068:	d009      	beq.n	801207e <HAL_RCCEx_PeriphCLKConfig+0x456>
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801206e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012072:	d004      	beq.n	801207e <HAL_RCCEx_PeriphCLKConfig+0x456>
 8012074:	f240 11ef 	movw	r1, #495	; 0x1ef
 8012078:	481a      	ldr	r0, [pc, #104]	; (80120e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 801207a:	f7f2 fa83 	bl	8004584 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801207e:	4b18      	ldr	r3, [pc, #96]	; (80120e0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8012080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012084:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801208c:	4914      	ldr	r1, [pc, #80]	; (80120e0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 801208e:	4313      	orrs	r3, r2
 8012090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801209c:	2b00      	cmp	r3, #0
 801209e:	d023      	beq.n	80120e8 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d00e      	beq.n	80120c6 <HAL_RCCEx_PeriphCLKConfig+0x49e>
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80120ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80120b0:	d009      	beq.n	80120c6 <HAL_RCCEx_PeriphCLKConfig+0x49e>
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80120b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80120ba:	d004      	beq.n	80120c6 <HAL_RCCEx_PeriphCLKConfig+0x49e>
 80120bc:	f240 11fb 	movw	r1, #507	; 0x1fb
 80120c0:	4808      	ldr	r0, [pc, #32]	; (80120e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80120c2:	f7f2 fa5f 	bl	8004584 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80120c6:	4b06      	ldr	r3, [pc, #24]	; (80120e0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 80120c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80120cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80120d4:	4902      	ldr	r1, [pc, #8]	; (80120e0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 80120d6:	4313      	orrs	r3, r2
 80120d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80120dc:	e004      	b.n	80120e8 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 80120de:	bf00      	nop
 80120e0:	40021000 	.word	0x40021000
 80120e4:	0801babc 	.word	0x0801babc
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d01d      	beq.n	8012130 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d00e      	beq.n	801211a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012104:	d009      	beq.n	801211a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801210a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801210e:	d004      	beq.n	801211a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8012110:	f240 2107 	movw	r1, #519	; 0x207
 8012114:	489e      	ldr	r0, [pc, #632]	; (8012390 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8012116:	f7f2 fa35 	bl	8004584 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801211a:	4b9e      	ldr	r3, [pc, #632]	; (8012394 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 801211c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012120:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012128:	499a      	ldr	r1, [pc, #616]	; (8012394 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 801212a:	4313      	orrs	r3, r2
 801212c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012138:	2b00      	cmp	r3, #0
 801213a:	d040      	beq.n	80121be <HAL_RCCEx_PeriphCLKConfig+0x596>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012140:	2b00      	cmp	r3, #0
 8012142:	d013      	beq.n	801216c <HAL_RCCEx_PeriphCLKConfig+0x544>
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012148:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801214c:	d00e      	beq.n	801216c <HAL_RCCEx_PeriphCLKConfig+0x544>
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012152:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012156:	d009      	beq.n	801216c <HAL_RCCEx_PeriphCLKConfig+0x544>
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801215c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8012160:	d004      	beq.n	801216c <HAL_RCCEx_PeriphCLKConfig+0x544>
 8012162:	f44f 7108 	mov.w	r1, #544	; 0x220
 8012166:	488a      	ldr	r0, [pc, #552]	; (8012390 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8012168:	f7f2 fa0c 	bl	8004584 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801216c:	4b89      	ldr	r3, [pc, #548]	; (8012394 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 801216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012172:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801217a:	4986      	ldr	r1, [pc, #536]	; (8012394 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 801217c:	4313      	orrs	r3, r2
 801217e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012186:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801218a:	d106      	bne.n	801219a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801218c:	4b81      	ldr	r3, [pc, #516]	; (8012394 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 801218e:	68db      	ldr	r3, [r3, #12]
 8012190:	4a80      	ldr	r2, [pc, #512]	; (8012394 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 8012192:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012196:	60d3      	str	r3, [r2, #12]
 8012198:	e011      	b.n	80121be <HAL_RCCEx_PeriphCLKConfig+0x596>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801219e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80121a2:	d10c      	bne.n	80121be <HAL_RCCEx_PeriphCLKConfig+0x596>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	3304      	adds	r3, #4
 80121a8:	2101      	movs	r1, #1
 80121aa:	4618      	mov	r0, r3
 80121ac:	f000 f8f4 	bl	8012398 <RCCEx_PLLSAI1_Config>
 80121b0:	4603      	mov	r3, r0
 80121b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80121b4:	7cfb      	ldrb	r3, [r7, #19]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d001      	beq.n	80121be <HAL_RCCEx_PeriphCLKConfig+0x596>
        {
          /* set overall return value */
          status = ret;
 80121ba:	7cfb      	ldrb	r3, [r7, #19]
 80121bc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d040      	beq.n	801224c <HAL_RCCEx_PeriphCLKConfig+0x624>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d013      	beq.n	80121fa <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80121d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80121da:	d00e      	beq.n	80121fa <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80121e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80121e4:	d009      	beq.n	80121fa <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80121ea:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80121ee:	d004      	beq.n	80121fa <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 80121f0:	f240 2141 	movw	r1, #577	; 0x241
 80121f4:	4866      	ldr	r0, [pc, #408]	; (8012390 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 80121f6:	f7f2 f9c5 	bl	8004584 <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80121fa:	4b66      	ldr	r3, [pc, #408]	; (8012394 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 80121fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012200:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012208:	4962      	ldr	r1, [pc, #392]	; (8012394 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 801220a:	4313      	orrs	r3, r2
 801220c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012214:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012218:	d106      	bne.n	8012228 <HAL_RCCEx_PeriphCLKConfig+0x600>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801221a:	4b5e      	ldr	r3, [pc, #376]	; (8012394 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 801221c:	68db      	ldr	r3, [r3, #12]
 801221e:	4a5d      	ldr	r2, [pc, #372]	; (8012394 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 8012220:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012224:	60d3      	str	r3, [r2, #12]
 8012226:	e011      	b.n	801224c <HAL_RCCEx_PeriphCLKConfig+0x624>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801222c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8012230:	d10c      	bne.n	801224c <HAL_RCCEx_PeriphCLKConfig+0x624>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	3304      	adds	r3, #4
 8012236:	2101      	movs	r1, #1
 8012238:	4618      	mov	r0, r3
 801223a:	f000 f8ad 	bl	8012398 <RCCEx_PLLSAI1_Config>
 801223e:	4603      	mov	r3, r0
 8012240:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8012242:	7cfb      	ldrb	r3, [r7, #19]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d001      	beq.n	801224c <HAL_RCCEx_PeriphCLKConfig+0x624>
      {
        /* set overall return value */
        status = ret;
 8012248:	7cfb      	ldrb	r3, [r7, #19]
 801224a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012254:	2b00      	cmp	r3, #0
 8012256:	d040      	beq.n	80122da <HAL_RCCEx_PeriphCLKConfig+0x6b2>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801225c:	2b00      	cmp	r3, #0
 801225e:	d013      	beq.n	8012288 <HAL_RCCEx_PeriphCLKConfig+0x660>
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012264:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8012268:	d00e      	beq.n	8012288 <HAL_RCCEx_PeriphCLKConfig+0x660>
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801226e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012272:	d009      	beq.n	8012288 <HAL_RCCEx_PeriphCLKConfig+0x660>
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012278:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 801227c:	d004      	beq.n	8012288 <HAL_RCCEx_PeriphCLKConfig+0x660>
 801227e:	f240 2166 	movw	r1, #614	; 0x266
 8012282:	4843      	ldr	r0, [pc, #268]	; (8012390 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8012284:	f7f2 f97e 	bl	8004584 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8012288:	4b42      	ldr	r3, [pc, #264]	; (8012394 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 801228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801228e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012296:	493f      	ldr	r1, [pc, #252]	; (8012394 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 8012298:	4313      	orrs	r3, r2
 801229a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80122a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80122a6:	d106      	bne.n	80122b6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80122a8:	4b3a      	ldr	r3, [pc, #232]	; (8012394 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 80122aa:	68db      	ldr	r3, [r3, #12]
 80122ac:	4a39      	ldr	r2, [pc, #228]	; (8012394 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 80122ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80122b2:	60d3      	str	r3, [r2, #12]
 80122b4:	e011      	b.n	80122da <HAL_RCCEx_PeriphCLKConfig+0x6b2>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80122ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80122be:	d10c      	bne.n	80122da <HAL_RCCEx_PeriphCLKConfig+0x6b2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	3304      	adds	r3, #4
 80122c4:	2101      	movs	r1, #1
 80122c6:	4618      	mov	r0, r3
 80122c8:	f000 f866 	bl	8012398 <RCCEx_PLLSAI1_Config>
 80122cc:	4603      	mov	r3, r0
 80122ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80122d0:	7cfb      	ldrb	r3, [r7, #19]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d001      	beq.n	80122da <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* set overall return value */
        status = ret;
 80122d6:	7cfb      	ldrb	r3, [r7, #19]
 80122d8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d02f      	beq.n	8012346 <HAL_RCCEx_PeriphCLKConfig+0x71e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d00e      	beq.n	801230c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80122f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80122f6:	d009      	beq.n	801230c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80122fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8012300:	d004      	beq.n	801230c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8012302:	f240 2186 	movw	r1, #646	; 0x286
 8012306:	4822      	ldr	r0, [pc, #136]	; (8012390 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8012308:	f7f2 f93c 	bl	8004584 <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801230c:	4b21      	ldr	r3, [pc, #132]	; (8012394 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 801230e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012312:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801231a:	491e      	ldr	r1, [pc, #120]	; (8012394 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 801231c:	4313      	orrs	r3, r2
 801231e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012326:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801232a:	d10c      	bne.n	8012346 <HAL_RCCEx_PeriphCLKConfig+0x71e>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	3304      	adds	r3, #4
 8012330:	2102      	movs	r1, #2
 8012332:	4618      	mov	r0, r3
 8012334:	f000 f830 	bl	8012398 <RCCEx_PLLSAI1_Config>
 8012338:	4603      	mov	r3, r0
 801233a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801233c:	7cfb      	ldrb	r3, [r7, #19]
 801233e:	2b00      	cmp	r3, #0
 8012340:	d001      	beq.n	8012346 <HAL_RCCEx_PeriphCLKConfig+0x71e>
      {
        /* set overall return value */
        status = ret;
 8012342:	7cfb      	ldrb	r3, [r7, #19]
 8012344:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801234e:	2b00      	cmp	r3, #0
 8012350:	d018      	beq.n	8012384 <HAL_RCCEx_PeriphCLKConfig+0x75c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012356:	2b00      	cmp	r3, #0
 8012358:	d009      	beq.n	801236e <HAL_RCCEx_PeriphCLKConfig+0x746>
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801235e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012362:	d004      	beq.n	801236e <HAL_RCCEx_PeriphCLKConfig+0x746>
 8012364:	f240 21b2 	movw	r1, #690	; 0x2b2
 8012368:	4809      	ldr	r0, [pc, #36]	; (8012390 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 801236a:	f7f2 f90b 	bl	8004584 <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801236e:	4b09      	ldr	r3, [pc, #36]	; (8012394 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 8012370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012374:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801237c:	4905      	ldr	r1, [pc, #20]	; (8012394 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 801237e:	4313      	orrs	r3, r2
 8012380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8012384:	7cbb      	ldrb	r3, [r7, #18]
}
 8012386:	4618      	mov	r0, r3
 8012388:	3718      	adds	r7, #24
 801238a:	46bd      	mov	sp, r7
 801238c:	bd80      	pop	{r7, pc}
 801238e:	bf00      	nop
 8012390:	0801babc 	.word	0x0801babc
 8012394:	40021000 	.word	0x40021000

08012398 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8012398:	b580      	push	{r7, lr}
 801239a:	b084      	sub	sp, #16
 801239c:	af00      	add	r7, sp, #0
 801239e:	6078      	str	r0, [r7, #4]
 80123a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80123a2:	2300      	movs	r3, #0
 80123a4:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d010      	beq.n	80123d0 <RCCEx_PLLSAI1_Config+0x38>
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	2b01      	cmp	r3, #1
 80123b4:	d00c      	beq.n	80123d0 <RCCEx_PLLSAI1_Config+0x38>
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	2b02      	cmp	r3, #2
 80123bc:	d008      	beq.n	80123d0 <RCCEx_PLLSAI1_Config+0x38>
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	2b03      	cmp	r3, #3
 80123c4:	d004      	beq.n	80123d0 <RCCEx_PLLSAI1_Config+0x38>
 80123c6:	f640 315e 	movw	r1, #2910	; 0xb5e
 80123ca:	48a4      	ldr	r0, [pc, #656]	; (801265c <RCCEx_PLLSAI1_Config+0x2c4>)
 80123cc:	f7f2 f8da 	bl	8004584 <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	685b      	ldr	r3, [r3, #4]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d003      	beq.n	80123e0 <RCCEx_PLLSAI1_Config+0x48>
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	685b      	ldr	r3, [r3, #4]
 80123dc:	2b08      	cmp	r3, #8
 80123de:	d904      	bls.n	80123ea <RCCEx_PLLSAI1_Config+0x52>
 80123e0:	f640 315f 	movw	r1, #2911	; 0xb5f
 80123e4:	489d      	ldr	r0, [pc, #628]	; (801265c <RCCEx_PLLSAI1_Config+0x2c4>)
 80123e6:	f7f2 f8cd 	bl	8004584 <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	689b      	ldr	r3, [r3, #8]
 80123ee:	2b07      	cmp	r3, #7
 80123f0:	d903      	bls.n	80123fa <RCCEx_PLLSAI1_Config+0x62>
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	689b      	ldr	r3, [r3, #8]
 80123f6:	2b56      	cmp	r3, #86	; 0x56
 80123f8:	d904      	bls.n	8012404 <RCCEx_PLLSAI1_Config+0x6c>
 80123fa:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 80123fe:	4897      	ldr	r0, [pc, #604]	; (801265c <RCCEx_PLLSAI1_Config+0x2c4>)
 8012400:	f7f2 f8c0 	bl	8004584 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	699b      	ldr	r3, [r3, #24]
 8012408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801240c:	2b00      	cmp	r3, #0
 801240e:	d10b      	bne.n	8012428 <RCCEx_PLLSAI1_Config+0x90>
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	699b      	ldr	r3, [r3, #24]
 8012414:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012418:	2b00      	cmp	r3, #0
 801241a:	d105      	bne.n	8012428 <RCCEx_PLLSAI1_Config+0x90>
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	699b      	ldr	r3, [r3, #24]
 8012420:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012424:	2b00      	cmp	r3, #0
 8012426:	d007      	beq.n	8012438 <RCCEx_PLLSAI1_Config+0xa0>
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	699b      	ldr	r3, [r3, #24]
 801242c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8012430:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012434:	2b00      	cmp	r3, #0
 8012436:	d004      	beq.n	8012442 <RCCEx_PLLSAI1_Config+0xaa>
 8012438:	f640 3161 	movw	r1, #2913	; 0xb61
 801243c:	4887      	ldr	r0, [pc, #540]	; (801265c <RCCEx_PLLSAI1_Config+0x2c4>)
 801243e:	f7f2 f8a1 	bl	8004584 <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8012442:	4b87      	ldr	r3, [pc, #540]	; (8012660 <RCCEx_PLLSAI1_Config+0x2c8>)
 8012444:	68db      	ldr	r3, [r3, #12]
 8012446:	f003 0303 	and.w	r3, r3, #3
 801244a:	2b00      	cmp	r3, #0
 801244c:	d018      	beq.n	8012480 <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 801244e:	4b84      	ldr	r3, [pc, #528]	; (8012660 <RCCEx_PLLSAI1_Config+0x2c8>)
 8012450:	68db      	ldr	r3, [r3, #12]
 8012452:	f003 0203 	and.w	r2, r3, #3
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	429a      	cmp	r2, r3
 801245c:	d10d      	bne.n	801247a <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	681b      	ldr	r3, [r3, #0]
       ||
 8012462:	2b00      	cmp	r3, #0
 8012464:	d009      	beq.n	801247a <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8012466:	4b7e      	ldr	r3, [pc, #504]	; (8012660 <RCCEx_PLLSAI1_Config+0x2c8>)
 8012468:	68db      	ldr	r3, [r3, #12]
 801246a:	091b      	lsrs	r3, r3, #4
 801246c:	f003 0307 	and.w	r3, r3, #7
 8012470:	1c5a      	adds	r2, r3, #1
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	685b      	ldr	r3, [r3, #4]
       ||
 8012476:	429a      	cmp	r2, r3
 8012478:	d047      	beq.n	801250a <RCCEx_PLLSAI1_Config+0x172>
#endif
      )
    {
      status = HAL_ERROR;
 801247a:	2301      	movs	r3, #1
 801247c:	73fb      	strb	r3, [r7, #15]
 801247e:	e044      	b.n	801250a <RCCEx_PLLSAI1_Config+0x172>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	2b03      	cmp	r3, #3
 8012486:	d018      	beq.n	80124ba <RCCEx_PLLSAI1_Config+0x122>
 8012488:	2b03      	cmp	r3, #3
 801248a:	d825      	bhi.n	80124d8 <RCCEx_PLLSAI1_Config+0x140>
 801248c:	2b01      	cmp	r3, #1
 801248e:	d002      	beq.n	8012496 <RCCEx_PLLSAI1_Config+0xfe>
 8012490:	2b02      	cmp	r3, #2
 8012492:	d009      	beq.n	80124a8 <RCCEx_PLLSAI1_Config+0x110>
 8012494:	e020      	b.n	80124d8 <RCCEx_PLLSAI1_Config+0x140>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8012496:	4b72      	ldr	r3, [pc, #456]	; (8012660 <RCCEx_PLLSAI1_Config+0x2c8>)
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	f003 0302 	and.w	r3, r3, #2
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d11d      	bne.n	80124de <RCCEx_PLLSAI1_Config+0x146>
      {
        status = HAL_ERROR;
 80124a2:	2301      	movs	r3, #1
 80124a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80124a6:	e01a      	b.n	80124de <RCCEx_PLLSAI1_Config+0x146>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80124a8:	4b6d      	ldr	r3, [pc, #436]	; (8012660 <RCCEx_PLLSAI1_Config+0x2c8>)
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d116      	bne.n	80124e2 <RCCEx_PLLSAI1_Config+0x14a>
      {
        status = HAL_ERROR;
 80124b4:	2301      	movs	r3, #1
 80124b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80124b8:	e013      	b.n	80124e2 <RCCEx_PLLSAI1_Config+0x14a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80124ba:	4b69      	ldr	r3, [pc, #420]	; (8012660 <RCCEx_PLLSAI1_Config+0x2c8>)
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d10f      	bne.n	80124e6 <RCCEx_PLLSAI1_Config+0x14e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80124c6:	4b66      	ldr	r3, [pc, #408]	; (8012660 <RCCEx_PLLSAI1_Config+0x2c8>)
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d109      	bne.n	80124e6 <RCCEx_PLLSAI1_Config+0x14e>
        {
          status = HAL_ERROR;
 80124d2:	2301      	movs	r3, #1
 80124d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80124d6:	e006      	b.n	80124e6 <RCCEx_PLLSAI1_Config+0x14e>
    default:
      status = HAL_ERROR;
 80124d8:	2301      	movs	r3, #1
 80124da:	73fb      	strb	r3, [r7, #15]
      break;
 80124dc:	e004      	b.n	80124e8 <RCCEx_PLLSAI1_Config+0x150>
      break;
 80124de:	bf00      	nop
 80124e0:	e002      	b.n	80124e8 <RCCEx_PLLSAI1_Config+0x150>
      break;
 80124e2:	bf00      	nop
 80124e4:	e000      	b.n	80124e8 <RCCEx_PLLSAI1_Config+0x150>
      break;
 80124e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80124e8:	7bfb      	ldrb	r3, [r7, #15]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d10d      	bne.n	801250a <RCCEx_PLLSAI1_Config+0x172>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80124ee:	4b5c      	ldr	r3, [pc, #368]	; (8012660 <RCCEx_PLLSAI1_Config+0x2c8>)
 80124f0:	68db      	ldr	r3, [r3, #12]
 80124f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	6819      	ldr	r1, [r3, #0]
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	685b      	ldr	r3, [r3, #4]
 80124fe:	3b01      	subs	r3, #1
 8012500:	011b      	lsls	r3, r3, #4
 8012502:	430b      	orrs	r3, r1
 8012504:	4956      	ldr	r1, [pc, #344]	; (8012660 <RCCEx_PLLSAI1_Config+0x2c8>)
 8012506:	4313      	orrs	r3, r2
 8012508:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 801250a:	7bfb      	ldrb	r3, [r7, #15]
 801250c:	2b00      	cmp	r3, #0
 801250e:	f040 80b9 	bne.w	8012684 <RCCEx_PLLSAI1_Config+0x2ec>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8012512:	4b53      	ldr	r3, [pc, #332]	; (8012660 <RCCEx_PLLSAI1_Config+0x2c8>)
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	4a52      	ldr	r2, [pc, #328]	; (8012660 <RCCEx_PLLSAI1_Config+0x2c8>)
 8012518:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801251c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801251e:	f7f8 f801 	bl	800a524 <HAL_GetTick>
 8012522:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8012524:	e009      	b.n	801253a <RCCEx_PLLSAI1_Config+0x1a2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8012526:	f7f7 fffd 	bl	800a524 <HAL_GetTick>
 801252a:	4602      	mov	r2, r0
 801252c:	68bb      	ldr	r3, [r7, #8]
 801252e:	1ad3      	subs	r3, r2, r3
 8012530:	2b02      	cmp	r3, #2
 8012532:	d902      	bls.n	801253a <RCCEx_PLLSAI1_Config+0x1a2>
      {
        status = HAL_TIMEOUT;
 8012534:	2303      	movs	r3, #3
 8012536:	73fb      	strb	r3, [r7, #15]
        break;
 8012538:	e005      	b.n	8012546 <RCCEx_PLLSAI1_Config+0x1ae>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 801253a:	4b49      	ldr	r3, [pc, #292]	; (8012660 <RCCEx_PLLSAI1_Config+0x2c8>)
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012542:	2b00      	cmp	r3, #0
 8012544:	d1ef      	bne.n	8012526 <RCCEx_PLLSAI1_Config+0x18e>
      }
    }

    if(status == HAL_OK)
 8012546:	7bfb      	ldrb	r3, [r7, #15]
 8012548:	2b00      	cmp	r3, #0
 801254a:	f040 809b 	bne.w	8012684 <RCCEx_PLLSAI1_Config+0x2ec>
    {
      if(Divider == DIVIDER_P_UPDATE)
 801254e:	683b      	ldr	r3, [r7, #0]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d11d      	bne.n	8012590 <RCCEx_PLLSAI1_Config+0x1f8>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	68db      	ldr	r3, [r3, #12]
 8012558:	2b01      	cmp	r3, #1
 801255a:	d903      	bls.n	8012564 <RCCEx_PLLSAI1_Config+0x1cc>
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	68db      	ldr	r3, [r3, #12]
 8012560:	2b1f      	cmp	r3, #31
 8012562:	d904      	bls.n	801256e <RCCEx_PLLSAI1_Config+0x1d6>
 8012564:	f640 31b4 	movw	r1, #2996	; 0xbb4
 8012568:	483c      	ldr	r0, [pc, #240]	; (801265c <RCCEx_PLLSAI1_Config+0x2c4>)
 801256a:	f7f2 f80b 	bl	8004584 <assert_failed>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801256e:	4b3c      	ldr	r3, [pc, #240]	; (8012660 <RCCEx_PLLSAI1_Config+0x2c8>)
 8012570:	691b      	ldr	r3, [r3, #16]
 8012572:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8012576:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 801257a:	687a      	ldr	r2, [r7, #4]
 801257c:	6892      	ldr	r2, [r2, #8]
 801257e:	0211      	lsls	r1, r2, #8
 8012580:	687a      	ldr	r2, [r7, #4]
 8012582:	68d2      	ldr	r2, [r2, #12]
 8012584:	06d2      	lsls	r2, r2, #27
 8012586:	430a      	orrs	r2, r1
 8012588:	4935      	ldr	r1, [pc, #212]	; (8012660 <RCCEx_PLLSAI1_Config+0x2c8>)
 801258a:	4313      	orrs	r3, r2
 801258c:	610b      	str	r3, [r1, #16]
 801258e:	e051      	b.n	8012634 <RCCEx_PLLSAI1_Config+0x29c>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8012590:	683b      	ldr	r3, [r7, #0]
 8012592:	2b01      	cmp	r3, #1
 8012594:	d127      	bne.n	80125e6 <RCCEx_PLLSAI1_Config+0x24e>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	691b      	ldr	r3, [r3, #16]
 801259a:	2b02      	cmp	r3, #2
 801259c:	d010      	beq.n	80125c0 <RCCEx_PLLSAI1_Config+0x228>
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	691b      	ldr	r3, [r3, #16]
 80125a2:	2b04      	cmp	r3, #4
 80125a4:	d00c      	beq.n	80125c0 <RCCEx_PLLSAI1_Config+0x228>
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	691b      	ldr	r3, [r3, #16]
 80125aa:	2b06      	cmp	r3, #6
 80125ac:	d008      	beq.n	80125c0 <RCCEx_PLLSAI1_Config+0x228>
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	691b      	ldr	r3, [r3, #16]
 80125b2:	2b08      	cmp	r3, #8
 80125b4:	d004      	beq.n	80125c0 <RCCEx_PLLSAI1_Config+0x228>
 80125b6:	f640 31d8 	movw	r1, #3032	; 0xbd8
 80125ba:	4828      	ldr	r0, [pc, #160]	; (801265c <RCCEx_PLLSAI1_Config+0x2c4>)
 80125bc:	f7f1 ffe2 	bl	8004584 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80125c0:	4b27      	ldr	r3, [pc, #156]	; (8012660 <RCCEx_PLLSAI1_Config+0x2c8>)
 80125c2:	691b      	ldr	r3, [r3, #16]
 80125c4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80125c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80125cc:	687a      	ldr	r2, [r7, #4]
 80125ce:	6892      	ldr	r2, [r2, #8]
 80125d0:	0211      	lsls	r1, r2, #8
 80125d2:	687a      	ldr	r2, [r7, #4]
 80125d4:	6912      	ldr	r2, [r2, #16]
 80125d6:	0852      	lsrs	r2, r2, #1
 80125d8:	3a01      	subs	r2, #1
 80125da:	0552      	lsls	r2, r2, #21
 80125dc:	430a      	orrs	r2, r1
 80125de:	4920      	ldr	r1, [pc, #128]	; (8012660 <RCCEx_PLLSAI1_Config+0x2c8>)
 80125e0:	4313      	orrs	r3, r2
 80125e2:	610b      	str	r3, [r1, #16]
 80125e4:	e026      	b.n	8012634 <RCCEx_PLLSAI1_Config+0x29c>
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	695b      	ldr	r3, [r3, #20]
 80125ea:	2b02      	cmp	r3, #2
 80125ec:	d010      	beq.n	8012610 <RCCEx_PLLSAI1_Config+0x278>
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	695b      	ldr	r3, [r3, #20]
 80125f2:	2b04      	cmp	r3, #4
 80125f4:	d00c      	beq.n	8012610 <RCCEx_PLLSAI1_Config+0x278>
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	695b      	ldr	r3, [r3, #20]
 80125fa:	2b06      	cmp	r3, #6
 80125fc:	d008      	beq.n	8012610 <RCCEx_PLLSAI1_Config+0x278>
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	695b      	ldr	r3, [r3, #20]
 8012602:	2b08      	cmp	r3, #8
 8012604:	d004      	beq.n	8012610 <RCCEx_PLLSAI1_Config+0x278>
 8012606:	f640 31ea 	movw	r1, #3050	; 0xbea
 801260a:	4814      	ldr	r0, [pc, #80]	; (801265c <RCCEx_PLLSAI1_Config+0x2c4>)
 801260c:	f7f1 ffba 	bl	8004584 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8012610:	4b13      	ldr	r3, [pc, #76]	; (8012660 <RCCEx_PLLSAI1_Config+0x2c8>)
 8012612:	691b      	ldr	r3, [r3, #16]
 8012614:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8012618:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 801261c:	687a      	ldr	r2, [r7, #4]
 801261e:	6892      	ldr	r2, [r2, #8]
 8012620:	0211      	lsls	r1, r2, #8
 8012622:	687a      	ldr	r2, [r7, #4]
 8012624:	6952      	ldr	r2, [r2, #20]
 8012626:	0852      	lsrs	r2, r2, #1
 8012628:	3a01      	subs	r2, #1
 801262a:	0652      	lsls	r2, r2, #25
 801262c:	430a      	orrs	r2, r1
 801262e:	490c      	ldr	r1, [pc, #48]	; (8012660 <RCCEx_PLLSAI1_Config+0x2c8>)
 8012630:	4313      	orrs	r3, r2
 8012632:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8012634:	4b0a      	ldr	r3, [pc, #40]	; (8012660 <RCCEx_PLLSAI1_Config+0x2c8>)
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	4a09      	ldr	r2, [pc, #36]	; (8012660 <RCCEx_PLLSAI1_Config+0x2c8>)
 801263a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801263e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012640:	f7f7 ff70 	bl	800a524 <HAL_GetTick>
 8012644:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8012646:	e00d      	b.n	8012664 <RCCEx_PLLSAI1_Config+0x2cc>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8012648:	f7f7 ff6c 	bl	800a524 <HAL_GetTick>
 801264c:	4602      	mov	r2, r0
 801264e:	68bb      	ldr	r3, [r7, #8]
 8012650:	1ad3      	subs	r3, r2, r3
 8012652:	2b02      	cmp	r3, #2
 8012654:	d906      	bls.n	8012664 <RCCEx_PLLSAI1_Config+0x2cc>
        {
          status = HAL_TIMEOUT;
 8012656:	2303      	movs	r3, #3
 8012658:	73fb      	strb	r3, [r7, #15]
          break;
 801265a:	e009      	b.n	8012670 <RCCEx_PLLSAI1_Config+0x2d8>
 801265c:	0801babc 	.word	0x0801babc
 8012660:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8012664:	4b0a      	ldr	r3, [pc, #40]	; (8012690 <RCCEx_PLLSAI1_Config+0x2f8>)
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801266c:	2b00      	cmp	r3, #0
 801266e:	d0eb      	beq.n	8012648 <RCCEx_PLLSAI1_Config+0x2b0>
        }
      }

      if(status == HAL_OK)
 8012670:	7bfb      	ldrb	r3, [r7, #15]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d106      	bne.n	8012684 <RCCEx_PLLSAI1_Config+0x2ec>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8012676:	4b06      	ldr	r3, [pc, #24]	; (8012690 <RCCEx_PLLSAI1_Config+0x2f8>)
 8012678:	691a      	ldr	r2, [r3, #16]
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	699b      	ldr	r3, [r3, #24]
 801267e:	4904      	ldr	r1, [pc, #16]	; (8012690 <RCCEx_PLLSAI1_Config+0x2f8>)
 8012680:	4313      	orrs	r3, r2
 8012682:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8012684:	7bfb      	ldrb	r3, [r7, #15]
}
 8012686:	4618      	mov	r0, r3
 8012688:	3710      	adds	r7, #16
 801268a:	46bd      	mov	sp, r7
 801268c:	bd80      	pop	{r7, pc}
 801268e:	bf00      	nop
 8012690:	40021000 	.word	0x40021000

08012694 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8012694:	b580      	push	{r7, lr}
 8012696:	b084      	sub	sp, #16
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801269c:	2301      	movs	r3, #1
 801269e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	f000 80d5 	beq.w	8012852 <HAL_RTC_Init+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	4a6b      	ldr	r2, [pc, #428]	; (801285c <HAL_RTC_Init+0x1c8>)
 80126ae:	4293      	cmp	r3, r2
 80126b0:	d003      	beq.n	80126ba <HAL_RTC_Init+0x26>
 80126b2:	21fe      	movs	r1, #254	; 0xfe
 80126b4:	486a      	ldr	r0, [pc, #424]	; (8012860 <HAL_RTC_Init+0x1cc>)
 80126b6:	f7f1 ff65 	bl	8004584 <assert_failed>
    assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	685b      	ldr	r3, [r3, #4]
 80126be:	2b40      	cmp	r3, #64	; 0x40
 80126c0:	d007      	beq.n	80126d2 <HAL_RTC_Init+0x3e>
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	685b      	ldr	r3, [r3, #4]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d003      	beq.n	80126d2 <HAL_RTC_Init+0x3e>
 80126ca:	21ff      	movs	r1, #255	; 0xff
 80126cc:	4864      	ldr	r0, [pc, #400]	; (8012860 <HAL_RTC_Init+0x1cc>)
 80126ce:	f7f1 ff59 	bl	8004584 <assert_failed>
    assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	689b      	ldr	r3, [r3, #8]
 80126d6:	2b7f      	cmp	r3, #127	; 0x7f
 80126d8:	d904      	bls.n	80126e4 <HAL_RTC_Init+0x50>
 80126da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80126de:	4860      	ldr	r0, [pc, #384]	; (8012860 <HAL_RTC_Init+0x1cc>)
 80126e0:	f7f1 ff50 	bl	8004584 <assert_failed>
    assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	68db      	ldr	r3, [r3, #12]
 80126e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80126ec:	d304      	bcc.n	80126f8 <HAL_RTC_Init+0x64>
 80126ee:	f240 1101 	movw	r1, #257	; 0x101
 80126f2:	485b      	ldr	r0, [pc, #364]	; (8012860 <HAL_RTC_Init+0x1cc>)
 80126f4:	f7f1 ff46 	bl	8004584 <assert_failed>
    assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	691b      	ldr	r3, [r3, #16]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d013      	beq.n	8012728 <HAL_RTC_Init+0x94>
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	691b      	ldr	r3, [r3, #16]
 8012704:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012708:	d00e      	beq.n	8012728 <HAL_RTC_Init+0x94>
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	691b      	ldr	r3, [r3, #16]
 801270e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012712:	d009      	beq.n	8012728 <HAL_RTC_Init+0x94>
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	691b      	ldr	r3, [r3, #16]
 8012718:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801271c:	d004      	beq.n	8012728 <HAL_RTC_Init+0x94>
 801271e:	f44f 7181 	mov.w	r1, #258	; 0x102
 8012722:	484f      	ldr	r0, [pc, #316]	; (8012860 <HAL_RTC_Init+0x1cc>)
 8012724:	f7f1 ff2e 	bl	8004584 <assert_failed>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	695b      	ldr	r3, [r3, #20]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d008      	beq.n	8012742 <HAL_RTC_Init+0xae>
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	695b      	ldr	r3, [r3, #20]
 8012734:	2b02      	cmp	r3, #2
 8012736:	d004      	beq.n	8012742 <HAL_RTC_Init+0xae>
 8012738:	f240 1103 	movw	r1, #259	; 0x103
 801273c:	4848      	ldr	r0, [pc, #288]	; (8012860 <HAL_RTC_Init+0x1cc>)
 801273e:	f7f1 ff21 	bl	8004584 <assert_failed>
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	699b      	ldr	r3, [r3, #24]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d009      	beq.n	801275e <HAL_RTC_Init+0xca>
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	699b      	ldr	r3, [r3, #24]
 801274e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012752:	d004      	beq.n	801275e <HAL_RTC_Init+0xca>
 8012754:	f44f 7182 	mov.w	r1, #260	; 0x104
 8012758:	4841      	ldr	r0, [pc, #260]	; (8012860 <HAL_RTC_Init+0x1cc>)
 801275a:	f7f1 ff13 	bl	8004584 <assert_failed>
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	69db      	ldr	r3, [r3, #28]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d008      	beq.n	8012778 <HAL_RTC_Init+0xe4>
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	69db      	ldr	r3, [r3, #28]
 801276a:	2b01      	cmp	r3, #1
 801276c:	d004      	beq.n	8012778 <HAL_RTC_Init+0xe4>
 801276e:	f240 1105 	movw	r1, #261	; 0x105
 8012772:	483b      	ldr	r0, [pc, #236]	; (8012860 <HAL_RTC_Init+0x1cc>)
 8012774:	f7f1 ff06 	bl	8004584 <assert_failed>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801277e:	b2db      	uxtb	r3, r3
 8012780:	2b00      	cmp	r3, #0
 8012782:	d106      	bne.n	8012792 <HAL_RTC_Init+0xfe>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	2200      	movs	r2, #0
 8012788:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 801278c:	6878      	ldr	r0, [r7, #4]
 801278e:	f7f3 fd71 	bl	8006274 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	2202      	movs	r2, #2
 8012796:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	22ca      	movs	r2, #202	; 0xca
 80127a0:	625a      	str	r2, [r3, #36]	; 0x24
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	2253      	movs	r2, #83	; 0x53
 80127a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80127aa:	6878      	ldr	r0, [r7, #4]
 80127ac:	f000 fba0 	bl	8012ef0 <RTC_EnterInitMode>
 80127b0:	4603      	mov	r3, r0
 80127b2:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80127b4:	7bfb      	ldrb	r3, [r7, #15]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d14b      	bne.n	8012852 <HAL_RTC_Init+0x1be>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	689b      	ldr	r3, [r3, #8]
 80127c0:	687a      	ldr	r2, [r7, #4]
 80127c2:	6812      	ldr	r2, [r2, #0]
 80127c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80127c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80127cc:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	6899      	ldr	r1, [r3, #8]
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	685a      	ldr	r2, [r3, #4]
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	691b      	ldr	r3, [r3, #16]
 80127dc:	431a      	orrs	r2, r3
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	699b      	ldr	r3, [r3, #24]
 80127e2:	431a      	orrs	r2, r3
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	430a      	orrs	r2, r1
 80127ea:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	687a      	ldr	r2, [r7, #4]
 80127f2:	68d2      	ldr	r2, [r2, #12]
 80127f4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	6919      	ldr	r1, [r3, #16]
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	689b      	ldr	r3, [r3, #8]
 8012800:	041a      	lsls	r2, r3, #16
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	430a      	orrs	r2, r1
 8012808:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 801280a:	6878      	ldr	r0, [r7, #4]
 801280c:	f000 fba4 	bl	8012f58 <RTC_ExitInitMode>
 8012810:	4603      	mov	r3, r0
 8012812:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8012814:	7bfb      	ldrb	r3, [r7, #15]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d11b      	bne.n	8012852 <HAL_RTC_Init+0x1be>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	f022 0203 	bic.w	r2, r2, #3
 8012828:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	69da      	ldr	r2, [r3, #28]
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	695b      	ldr	r3, [r3, #20]
 8012838:	431a      	orrs	r2, r3
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	430a      	orrs	r2, r1
 8012840:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	22ff      	movs	r2, #255	; 0xff
 8012848:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	2201      	movs	r2, #1
 801284e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8012852:	7bfb      	ldrb	r3, [r7, #15]
}
 8012854:	4618      	mov	r0, r3
 8012856:	3710      	adds	r7, #16
 8012858:	46bd      	mov	sp, r7
 801285a:	bd80      	pop	{r7, pc}
 801285c:	40002800 	.word	0x40002800
 8012860:	0801baf8 	.word	0x0801baf8

08012864 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8012864:	b590      	push	{r4, r7, lr}
 8012866:	b087      	sub	sp, #28
 8012868:	af00      	add	r7, sp, #0
 801286a:	60f8      	str	r0, [r7, #12]
 801286c:	60b9      	str	r1, [r7, #8]
 801286e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d007      	beq.n	8012886 <HAL_RTC_SetTime+0x22>
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	2b01      	cmp	r3, #1
 801287a:	d004      	beq.n	8012886 <HAL_RTC_SetTime+0x22>
 801287c:	f44f 61b5 	mov.w	r1, #1448	; 0x5a8
 8012880:	489d      	ldr	r0, [pc, #628]	; (8012af8 <HAL_RTC_SetTime+0x294>)
 8012882:	f7f1 fe7f 	bl	8004584 <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 8012886:	68bb      	ldr	r3, [r7, #8]
 8012888:	68db      	ldr	r3, [r3, #12]
 801288a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801288e:	d00d      	beq.n	80128ac <HAL_RTC_SetTime+0x48>
 8012890:	68bb      	ldr	r3, [r7, #8]
 8012892:	68db      	ldr	r3, [r3, #12]
 8012894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012898:	d008      	beq.n	80128ac <HAL_RTC_SetTime+0x48>
 801289a:	68bb      	ldr	r3, [r7, #8]
 801289c:	68db      	ldr	r3, [r3, #12]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d004      	beq.n	80128ac <HAL_RTC_SetTime+0x48>
 80128a2:	f240 51a9 	movw	r1, #1449	; 0x5a9
 80128a6:	4894      	ldr	r0, [pc, #592]	; (8012af8 <HAL_RTC_SetTime+0x294>)
 80128a8:	f7f1 fe6c 	bl	8004584 <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 80128ac:	68bb      	ldr	r3, [r7, #8]
 80128ae:	691b      	ldr	r3, [r3, #16]
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d009      	beq.n	80128c8 <HAL_RTC_SetTime+0x64>
 80128b4:	68bb      	ldr	r3, [r7, #8]
 80128b6:	691b      	ldr	r3, [r3, #16]
 80128b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80128bc:	d004      	beq.n	80128c8 <HAL_RTC_SetTime+0x64>
 80128be:	f240 51aa 	movw	r1, #1450	; 0x5aa
 80128c2:	488d      	ldr	r0, [pc, #564]	; (8012af8 <HAL_RTC_SetTime+0x294>)
 80128c4:	f7f1 fe5e 	bl	8004584 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80128ce:	2b01      	cmp	r3, #1
 80128d0:	d101      	bne.n	80128d6 <HAL_RTC_SetTime+0x72>
 80128d2:	2302      	movs	r3, #2
 80128d4:	e10c      	b.n	8012af0 <HAL_RTC_SetTime+0x28c>
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	2201      	movs	r2, #1
 80128da:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	2202      	movs	r2, #2
 80128e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	22ca      	movs	r2, #202	; 0xca
 80128ec:	625a      	str	r2, [r3, #36]	; 0x24
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	2253      	movs	r2, #83	; 0x53
 80128f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80128f6:	68f8      	ldr	r0, [r7, #12]
 80128f8:	f000 fafa 	bl	8012ef0 <RTC_EnterInitMode>
 80128fc:	4603      	mov	r3, r0
 80128fe:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8012900:	7cfb      	ldrb	r3, [r7, #19]
 8012902:	2b00      	cmp	r3, #0
 8012904:	f040 80e4 	bne.w	8012ad0 <HAL_RTC_SetTime+0x26c>
  {
    if (Format == RTC_FORMAT_BIN)
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	2b00      	cmp	r3, #0
 801290c:	d15c      	bne.n	80129c8 <HAL_RTC_SetTime+0x164>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	689b      	ldr	r3, [r3, #8]
 8012914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012918:	2b00      	cmp	r3, #0
 801291a:	d01a      	beq.n	8012952 <HAL_RTC_SetTime+0xee>
      {
        assert_param(IS_RTC_HOUR12(sTime->Hours));
 801291c:	68bb      	ldr	r3, [r7, #8]
 801291e:	781b      	ldrb	r3, [r3, #0]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d003      	beq.n	801292c <HAL_RTC_SetTime+0xc8>
 8012924:	68bb      	ldr	r3, [r7, #8]
 8012926:	781b      	ldrb	r3, [r3, #0]
 8012928:	2b0c      	cmp	r3, #12
 801292a:	d904      	bls.n	8012936 <HAL_RTC_SetTime+0xd2>
 801292c:	f240 51bc 	movw	r1, #1468	; 0x5bc
 8012930:	4871      	ldr	r0, [pc, #452]	; (8012af8 <HAL_RTC_SetTime+0x294>)
 8012932:	f7f1 fe27 	bl	8004584 <assert_failed>
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8012936:	68bb      	ldr	r3, [r7, #8]
 8012938:	78db      	ldrb	r3, [r3, #3]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d015      	beq.n	801296a <HAL_RTC_SetTime+0x106>
 801293e:	68bb      	ldr	r3, [r7, #8]
 8012940:	78db      	ldrb	r3, [r3, #3]
 8012942:	2b01      	cmp	r3, #1
 8012944:	d011      	beq.n	801296a <HAL_RTC_SetTime+0x106>
 8012946:	f240 51bd 	movw	r1, #1469	; 0x5bd
 801294a:	486b      	ldr	r0, [pc, #428]	; (8012af8 <HAL_RTC_SetTime+0x294>)
 801294c:	f7f1 fe1a 	bl	8004584 <assert_failed>
 8012950:	e00b      	b.n	801296a <HAL_RTC_SetTime+0x106>
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8012952:	68bb      	ldr	r3, [r7, #8]
 8012954:	2200      	movs	r2, #0
 8012956:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
 8012958:	68bb      	ldr	r3, [r7, #8]
 801295a:	781b      	ldrb	r3, [r3, #0]
 801295c:	2b17      	cmp	r3, #23
 801295e:	d904      	bls.n	801296a <HAL_RTC_SetTime+0x106>
 8012960:	f240 51c2 	movw	r1, #1474	; 0x5c2
 8012964:	4864      	ldr	r0, [pc, #400]	; (8012af8 <HAL_RTC_SetTime+0x294>)
 8012966:	f7f1 fe0d 	bl	8004584 <assert_failed>
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
 801296a:	68bb      	ldr	r3, [r7, #8]
 801296c:	785b      	ldrb	r3, [r3, #1]
 801296e:	2b3b      	cmp	r3, #59	; 0x3b
 8012970:	d904      	bls.n	801297c <HAL_RTC_SetTime+0x118>
 8012972:	f240 51c4 	movw	r1, #1476	; 0x5c4
 8012976:	4860      	ldr	r0, [pc, #384]	; (8012af8 <HAL_RTC_SetTime+0x294>)
 8012978:	f7f1 fe04 	bl	8004584 <assert_failed>
      assert_param(IS_RTC_SECONDS(sTime->Seconds));
 801297c:	68bb      	ldr	r3, [r7, #8]
 801297e:	789b      	ldrb	r3, [r3, #2]
 8012980:	2b3b      	cmp	r3, #59	; 0x3b
 8012982:	d904      	bls.n	801298e <HAL_RTC_SetTime+0x12a>
 8012984:	f240 51c5 	movw	r1, #1477	; 0x5c5
 8012988:	485b      	ldr	r0, [pc, #364]	; (8012af8 <HAL_RTC_SetTime+0x294>)
 801298a:	f7f1 fdfb 	bl	8004584 <assert_failed>

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 801298e:	68bb      	ldr	r3, [r7, #8]
 8012990:	781b      	ldrb	r3, [r3, #0]
 8012992:	4618      	mov	r0, r3
 8012994:	f000 fb1e 	bl	8012fd4 <RTC_ByteToBcd2>
 8012998:	4603      	mov	r3, r0
 801299a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801299c:	68bb      	ldr	r3, [r7, #8]
 801299e:	785b      	ldrb	r3, [r3, #1]
 80129a0:	4618      	mov	r0, r3
 80129a2:	f000 fb17 	bl	8012fd4 <RTC_ByteToBcd2>
 80129a6:	4603      	mov	r3, r0
 80129a8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80129aa:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80129ac:	68bb      	ldr	r3, [r7, #8]
 80129ae:	789b      	ldrb	r3, [r3, #2]
 80129b0:	4618      	mov	r0, r3
 80129b2:	f000 fb0f 	bl	8012fd4 <RTC_ByteToBcd2>
 80129b6:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80129b8:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80129bc:	68bb      	ldr	r3, [r7, #8]
 80129be:	78db      	ldrb	r3, [r3, #3]
 80129c0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80129c2:	4313      	orrs	r3, r2
 80129c4:	617b      	str	r3, [r7, #20]
 80129c6:	e062      	b.n	8012a8e <HAL_RTC_SetTime+0x22a>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	689b      	ldr	r3, [r3, #8]
 80129ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d022      	beq.n	8012a1c <HAL_RTC_SetTime+0x1b8>
      {
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 80129d6:	68bb      	ldr	r3, [r7, #8]
 80129d8:	781b      	ldrb	r3, [r3, #0]
 80129da:	4618      	mov	r0, r3
 80129dc:	f000 fb1a 	bl	8013014 <RTC_Bcd2ToByte>
 80129e0:	4603      	mov	r3, r0
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d007      	beq.n	80129f6 <HAL_RTC_SetTime+0x192>
 80129e6:	68bb      	ldr	r3, [r7, #8]
 80129e8:	781b      	ldrb	r3, [r3, #0]
 80129ea:	4618      	mov	r0, r3
 80129ec:	f000 fb12 	bl	8013014 <RTC_Bcd2ToByte>
 80129f0:	4603      	mov	r3, r0
 80129f2:	2b0c      	cmp	r3, #12
 80129f4:	d904      	bls.n	8012a00 <HAL_RTC_SetTime+0x19c>
 80129f6:	f44f 61ba 	mov.w	r1, #1488	; 0x5d0
 80129fa:	483f      	ldr	r0, [pc, #252]	; (8012af8 <HAL_RTC_SetTime+0x294>)
 80129fc:	f7f1 fdc2 	bl	8004584 <assert_failed>
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8012a00:	68bb      	ldr	r3, [r7, #8]
 8012a02:	78db      	ldrb	r3, [r3, #3]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d019      	beq.n	8012a3c <HAL_RTC_SetTime+0x1d8>
 8012a08:	68bb      	ldr	r3, [r7, #8]
 8012a0a:	78db      	ldrb	r3, [r3, #3]
 8012a0c:	2b01      	cmp	r3, #1
 8012a0e:	d015      	beq.n	8012a3c <HAL_RTC_SetTime+0x1d8>
 8012a10:	f240 51d1 	movw	r1, #1489	; 0x5d1
 8012a14:	4838      	ldr	r0, [pc, #224]	; (8012af8 <HAL_RTC_SetTime+0x294>)
 8012a16:	f7f1 fdb5 	bl	8004584 <assert_failed>
 8012a1a:	e00f      	b.n	8012a3c <HAL_RTC_SetTime+0x1d8>
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8012a1c:	68bb      	ldr	r3, [r7, #8]
 8012a1e:	2200      	movs	r2, #0
 8012a20:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8012a22:	68bb      	ldr	r3, [r7, #8]
 8012a24:	781b      	ldrb	r3, [r3, #0]
 8012a26:	4618      	mov	r0, r3
 8012a28:	f000 faf4 	bl	8013014 <RTC_Bcd2ToByte>
 8012a2c:	4603      	mov	r3, r0
 8012a2e:	2b17      	cmp	r3, #23
 8012a30:	d904      	bls.n	8012a3c <HAL_RTC_SetTime+0x1d8>
 8012a32:	f240 51d6 	movw	r1, #1494	; 0x5d6
 8012a36:	4830      	ldr	r0, [pc, #192]	; (8012af8 <HAL_RTC_SetTime+0x294>)
 8012a38:	f7f1 fda4 	bl	8004584 <assert_failed>
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8012a3c:	68bb      	ldr	r3, [r7, #8]
 8012a3e:	785b      	ldrb	r3, [r3, #1]
 8012a40:	4618      	mov	r0, r3
 8012a42:	f000 fae7 	bl	8013014 <RTC_Bcd2ToByte>
 8012a46:	4603      	mov	r3, r0
 8012a48:	2b3b      	cmp	r3, #59	; 0x3b
 8012a4a:	d904      	bls.n	8012a56 <HAL_RTC_SetTime+0x1f2>
 8012a4c:	f44f 61bb 	mov.w	r1, #1496	; 0x5d8
 8012a50:	4829      	ldr	r0, [pc, #164]	; (8012af8 <HAL_RTC_SetTime+0x294>)
 8012a52:	f7f1 fd97 	bl	8004584 <assert_failed>
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8012a56:	68bb      	ldr	r3, [r7, #8]
 8012a58:	789b      	ldrb	r3, [r3, #2]
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	f000 fada 	bl	8013014 <RTC_Bcd2ToByte>
 8012a60:	4603      	mov	r3, r0
 8012a62:	2b3b      	cmp	r3, #59	; 0x3b
 8012a64:	d904      	bls.n	8012a70 <HAL_RTC_SetTime+0x20c>
 8012a66:	f240 51d9 	movw	r1, #1497	; 0x5d9
 8012a6a:	4823      	ldr	r0, [pc, #140]	; (8012af8 <HAL_RTC_SetTime+0x294>)
 8012a6c:	f7f1 fd8a 	bl	8004584 <assert_failed>
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8012a70:	68bb      	ldr	r3, [r7, #8]
 8012a72:	781b      	ldrb	r3, [r3, #0]
 8012a74:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8012a76:	68bb      	ldr	r3, [r7, #8]
 8012a78:	785b      	ldrb	r3, [r3, #1]
 8012a7a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8012a7c:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8012a7e:	68ba      	ldr	r2, [r7, #8]
 8012a80:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8012a82:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8012a84:	68bb      	ldr	r3, [r7, #8]
 8012a86:	78db      	ldrb	r3, [r3, #3]
 8012a88:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8012a8a:	4313      	orrs	r3, r2
 8012a8c:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	681a      	ldr	r2, [r3, #0]
 8012a92:	697b      	ldr	r3, [r7, #20]
 8012a94:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8012a98:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8012a9c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	689a      	ldr	r2, [r3, #8]
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8012aac:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	6899      	ldr	r1, [r3, #8]
 8012ab4:	68bb      	ldr	r3, [r7, #8]
 8012ab6:	68da      	ldr	r2, [r3, #12]
 8012ab8:	68bb      	ldr	r3, [r7, #8]
 8012aba:	691b      	ldr	r3, [r3, #16]
 8012abc:	431a      	orrs	r2, r3
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	430a      	orrs	r2, r1
 8012ac4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8012ac6:	68f8      	ldr	r0, [r7, #12]
 8012ac8:	f000 fa46 	bl	8012f58 <RTC_ExitInitMode>
 8012acc:	4603      	mov	r3, r0
 8012ace:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	22ff      	movs	r2, #255	; 0xff
 8012ad6:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8012ad8:	7cfb      	ldrb	r3, [r7, #19]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d103      	bne.n	8012ae6 <HAL_RTC_SetTime+0x282>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	2201      	movs	r2, #1
 8012ae2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	2200      	movs	r2, #0
 8012aea:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8012aee:	7cfb      	ldrb	r3, [r7, #19]
}
 8012af0:	4618      	mov	r0, r3
 8012af2:	371c      	adds	r7, #28
 8012af4:	46bd      	mov	sp, r7
 8012af6:	bd90      	pop	{r4, r7, pc}
 8012af8:	0801baf8 	.word	0x0801baf8

08012afc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b086      	sub	sp, #24
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	60f8      	str	r0, [r7, #12]
 8012b04:	60b9      	str	r1, [r7, #8]
 8012b06:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d007      	beq.n	8012b1e <HAL_RTC_GetTime+0x22>
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	2b01      	cmp	r3, #1
 8012b12:	d004      	beq.n	8012b1e <HAL_RTC_GetTime+0x22>
 8012b14:	f240 6115 	movw	r1, #1557	; 0x615
 8012b18:	482c      	ldr	r0, [pc, #176]	; (8012bcc <HAL_RTC_GetTime+0xd0>)
 8012b1a:	f7f1 fd33 	bl	8004584 <assert_failed>

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012b24:	68bb      	ldr	r3, [r7, #8]
 8012b26:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	691b      	ldr	r3, [r3, #16]
 8012b2e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8012b32:	68bb      	ldr	r3, [r7, #8]
 8012b34:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8012b40:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8012b44:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8012b46:	697b      	ldr	r3, [r7, #20]
 8012b48:	0c1b      	lsrs	r3, r3, #16
 8012b4a:	b2db      	uxtb	r3, r3
 8012b4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012b50:	b2da      	uxtb	r2, r3
 8012b52:	68bb      	ldr	r3, [r7, #8]
 8012b54:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8012b56:	697b      	ldr	r3, [r7, #20]
 8012b58:	0a1b      	lsrs	r3, r3, #8
 8012b5a:	b2db      	uxtb	r3, r3
 8012b5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012b60:	b2da      	uxtb	r2, r3
 8012b62:	68bb      	ldr	r3, [r7, #8]
 8012b64:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8012b66:	697b      	ldr	r3, [r7, #20]
 8012b68:	b2db      	uxtb	r3, r3
 8012b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012b6e:	b2da      	uxtb	r2, r3
 8012b70:	68bb      	ldr	r3, [r7, #8]
 8012b72:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8012b74:	697b      	ldr	r3, [r7, #20]
 8012b76:	0d9b      	lsrs	r3, r3, #22
 8012b78:	b2db      	uxtb	r3, r3
 8012b7a:	f003 0301 	and.w	r3, r3, #1
 8012b7e:	b2da      	uxtb	r2, r3
 8012b80:	68bb      	ldr	r3, [r7, #8]
 8012b82:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d11a      	bne.n	8012bc0 <HAL_RTC_GetTime+0xc4>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8012b8a:	68bb      	ldr	r3, [r7, #8]
 8012b8c:	781b      	ldrb	r3, [r3, #0]
 8012b8e:	4618      	mov	r0, r3
 8012b90:	f000 fa40 	bl	8013014 <RTC_Bcd2ToByte>
 8012b94:	4603      	mov	r3, r0
 8012b96:	461a      	mov	r2, r3
 8012b98:	68bb      	ldr	r3, [r7, #8]
 8012b9a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8012b9c:	68bb      	ldr	r3, [r7, #8]
 8012b9e:	785b      	ldrb	r3, [r3, #1]
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	f000 fa37 	bl	8013014 <RTC_Bcd2ToByte>
 8012ba6:	4603      	mov	r3, r0
 8012ba8:	461a      	mov	r2, r3
 8012baa:	68bb      	ldr	r3, [r7, #8]
 8012bac:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8012bae:	68bb      	ldr	r3, [r7, #8]
 8012bb0:	789b      	ldrb	r3, [r3, #2]
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	f000 fa2e 	bl	8013014 <RTC_Bcd2ToByte>
 8012bb8:	4603      	mov	r3, r0
 8012bba:	461a      	mov	r2, r3
 8012bbc:	68bb      	ldr	r3, [r7, #8]
 8012bbe:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8012bc0:	2300      	movs	r3, #0
}
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	3718      	adds	r7, #24
 8012bc6:	46bd      	mov	sp, r7
 8012bc8:	bd80      	pop	{r7, pc}
 8012bca:	bf00      	nop
 8012bcc:	0801baf8 	.word	0x0801baf8

08012bd0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8012bd0:	b590      	push	{r4, r7, lr}
 8012bd2:	b087      	sub	sp, #28
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	60f8      	str	r0, [r7, #12]
 8012bd8:	60b9      	str	r1, [r7, #8]
 8012bda:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d007      	beq.n	8012bf2 <HAL_RTC_SetDate+0x22>
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	2b01      	cmp	r3, #1
 8012be6:	d004      	beq.n	8012bf2 <HAL_RTC_SetDate+0x22>
 8012be8:	f240 6142 	movw	r1, #1602	; 0x642
 8012bec:	487f      	ldr	r0, [pc, #508]	; (8012dec <HAL_RTC_SetDate+0x21c>)
 8012bee:	f7f1 fcc9 	bl	8004584 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012bf8:	2b01      	cmp	r3, #1
 8012bfa:	d101      	bne.n	8012c00 <HAL_RTC_SetDate+0x30>
 8012bfc:	2302      	movs	r3, #2
 8012bfe:	e0f0      	b.n	8012de2 <HAL_RTC_SetDate+0x212>
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	2201      	movs	r2, #1
 8012c04:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	2202      	movs	r2, #2
 8012c0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d10e      	bne.n	8012c34 <HAL_RTC_SetDate+0x64>
 8012c16:	68bb      	ldr	r3, [r7, #8]
 8012c18:	785b      	ldrb	r3, [r3, #1]
 8012c1a:	f003 0310 	and.w	r3, r3, #16
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d008      	beq.n	8012c34 <HAL_RTC_SetDate+0x64>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8012c22:	68bb      	ldr	r3, [r7, #8]
 8012c24:	785b      	ldrb	r3, [r3, #1]
 8012c26:	f023 0310 	bic.w	r3, r3, #16
 8012c2a:	b2db      	uxtb	r3, r3
 8012c2c:	330a      	adds	r3, #10
 8012c2e:	b2da      	uxtb	r2, r3
 8012c30:	68bb      	ldr	r3, [r7, #8]
 8012c32:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8012c34:	68bb      	ldr	r3, [r7, #8]
 8012c36:	781b      	ldrb	r3, [r3, #0]
 8012c38:	2b01      	cmp	r3, #1
 8012c3a:	d01c      	beq.n	8012c76 <HAL_RTC_SetDate+0xa6>
 8012c3c:	68bb      	ldr	r3, [r7, #8]
 8012c3e:	781b      	ldrb	r3, [r3, #0]
 8012c40:	2b02      	cmp	r3, #2
 8012c42:	d018      	beq.n	8012c76 <HAL_RTC_SetDate+0xa6>
 8012c44:	68bb      	ldr	r3, [r7, #8]
 8012c46:	781b      	ldrb	r3, [r3, #0]
 8012c48:	2b03      	cmp	r3, #3
 8012c4a:	d014      	beq.n	8012c76 <HAL_RTC_SetDate+0xa6>
 8012c4c:	68bb      	ldr	r3, [r7, #8]
 8012c4e:	781b      	ldrb	r3, [r3, #0]
 8012c50:	2b04      	cmp	r3, #4
 8012c52:	d010      	beq.n	8012c76 <HAL_RTC_SetDate+0xa6>
 8012c54:	68bb      	ldr	r3, [r7, #8]
 8012c56:	781b      	ldrb	r3, [r3, #0]
 8012c58:	2b05      	cmp	r3, #5
 8012c5a:	d00c      	beq.n	8012c76 <HAL_RTC_SetDate+0xa6>
 8012c5c:	68bb      	ldr	r3, [r7, #8]
 8012c5e:	781b      	ldrb	r3, [r3, #0]
 8012c60:	2b06      	cmp	r3, #6
 8012c62:	d008      	beq.n	8012c76 <HAL_RTC_SetDate+0xa6>
 8012c64:	68bb      	ldr	r3, [r7, #8]
 8012c66:	781b      	ldrb	r3, [r3, #0]
 8012c68:	2b07      	cmp	r3, #7
 8012c6a:	d004      	beq.n	8012c76 <HAL_RTC_SetDate+0xa6>
 8012c6c:	f240 614e 	movw	r1, #1614	; 0x64e
 8012c70:	485e      	ldr	r0, [pc, #376]	; (8012dec <HAL_RTC_SetDate+0x21c>)
 8012c72:	f7f1 fc87 	bl	8004584 <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d13f      	bne.n	8012cfc <HAL_RTC_SetDate+0x12c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8012c7c:	68bb      	ldr	r3, [r7, #8]
 8012c7e:	78db      	ldrb	r3, [r3, #3]
 8012c80:	2b63      	cmp	r3, #99	; 0x63
 8012c82:	d904      	bls.n	8012c8e <HAL_RTC_SetDate+0xbe>
 8012c84:	f240 6152 	movw	r1, #1618	; 0x652
 8012c88:	4858      	ldr	r0, [pc, #352]	; (8012dec <HAL_RTC_SetDate+0x21c>)
 8012c8a:	f7f1 fc7b 	bl	8004584 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8012c8e:	68bb      	ldr	r3, [r7, #8]
 8012c90:	785b      	ldrb	r3, [r3, #1]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d003      	beq.n	8012c9e <HAL_RTC_SetDate+0xce>
 8012c96:	68bb      	ldr	r3, [r7, #8]
 8012c98:	785b      	ldrb	r3, [r3, #1]
 8012c9a:	2b0c      	cmp	r3, #12
 8012c9c:	d904      	bls.n	8012ca8 <HAL_RTC_SetDate+0xd8>
 8012c9e:	f240 6153 	movw	r1, #1619	; 0x653
 8012ca2:	4852      	ldr	r0, [pc, #328]	; (8012dec <HAL_RTC_SetDate+0x21c>)
 8012ca4:	f7f1 fc6e 	bl	8004584 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8012ca8:	68bb      	ldr	r3, [r7, #8]
 8012caa:	789b      	ldrb	r3, [r3, #2]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d003      	beq.n	8012cb8 <HAL_RTC_SetDate+0xe8>
 8012cb0:	68bb      	ldr	r3, [r7, #8]
 8012cb2:	789b      	ldrb	r3, [r3, #2]
 8012cb4:	2b1f      	cmp	r3, #31
 8012cb6:	d904      	bls.n	8012cc2 <HAL_RTC_SetDate+0xf2>
 8012cb8:	f240 6154 	movw	r1, #1620	; 0x654
 8012cbc:	484b      	ldr	r0, [pc, #300]	; (8012dec <HAL_RTC_SetDate+0x21c>)
 8012cbe:	f7f1 fc61 	bl	8004584 <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8012cc2:	68bb      	ldr	r3, [r7, #8]
 8012cc4:	78db      	ldrb	r3, [r3, #3]
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	f000 f984 	bl	8012fd4 <RTC_ByteToBcd2>
 8012ccc:	4603      	mov	r3, r0
 8012cce:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8012cd0:	68bb      	ldr	r3, [r7, #8]
 8012cd2:	785b      	ldrb	r3, [r3, #1]
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	f000 f97d 	bl	8012fd4 <RTC_ByteToBcd2>
 8012cda:	4603      	mov	r3, r0
 8012cdc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8012cde:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8012ce0:	68bb      	ldr	r3, [r7, #8]
 8012ce2:	789b      	ldrb	r3, [r3, #2]
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	f000 f975 	bl	8012fd4 <RTC_ByteToBcd2>
 8012cea:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8012cec:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8012cf0:	68bb      	ldr	r3, [r7, #8]
 8012cf2:	781b      	ldrb	r3, [r3, #0]
 8012cf4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8012cf6:	4313      	orrs	r3, r2
 8012cf8:	617b      	str	r3, [r7, #20]
 8012cfa:	e045      	b.n	8012d88 <HAL_RTC_SetDate+0x1b8>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8012cfc:	68bb      	ldr	r3, [r7, #8]
 8012cfe:	78db      	ldrb	r3, [r3, #3]
 8012d00:	4618      	mov	r0, r3
 8012d02:	f000 f987 	bl	8013014 <RTC_Bcd2ToByte>
 8012d06:	4603      	mov	r3, r0
 8012d08:	2b63      	cmp	r3, #99	; 0x63
 8012d0a:	d904      	bls.n	8012d16 <HAL_RTC_SetDate+0x146>
 8012d0c:	f240 615d 	movw	r1, #1629	; 0x65d
 8012d10:	4836      	ldr	r0, [pc, #216]	; (8012dec <HAL_RTC_SetDate+0x21c>)
 8012d12:	f7f1 fc37 	bl	8004584 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8012d16:	68bb      	ldr	r3, [r7, #8]
 8012d18:	785b      	ldrb	r3, [r3, #1]
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	f000 f97a 	bl	8013014 <RTC_Bcd2ToByte>
 8012d20:	4603      	mov	r3, r0
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d007      	beq.n	8012d36 <HAL_RTC_SetDate+0x166>
 8012d26:	68bb      	ldr	r3, [r7, #8]
 8012d28:	785b      	ldrb	r3, [r3, #1]
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	f000 f972 	bl	8013014 <RTC_Bcd2ToByte>
 8012d30:	4603      	mov	r3, r0
 8012d32:	2b0c      	cmp	r3, #12
 8012d34:	d904      	bls.n	8012d40 <HAL_RTC_SetDate+0x170>
 8012d36:	f240 615e 	movw	r1, #1630	; 0x65e
 8012d3a:	482c      	ldr	r0, [pc, #176]	; (8012dec <HAL_RTC_SetDate+0x21c>)
 8012d3c:	f7f1 fc22 	bl	8004584 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8012d40:	68bb      	ldr	r3, [r7, #8]
 8012d42:	789b      	ldrb	r3, [r3, #2]
 8012d44:	4618      	mov	r0, r3
 8012d46:	f000 f965 	bl	8013014 <RTC_Bcd2ToByte>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d007      	beq.n	8012d60 <HAL_RTC_SetDate+0x190>
 8012d50:	68bb      	ldr	r3, [r7, #8]
 8012d52:	789b      	ldrb	r3, [r3, #2]
 8012d54:	4618      	mov	r0, r3
 8012d56:	f000 f95d 	bl	8013014 <RTC_Bcd2ToByte>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	2b1f      	cmp	r3, #31
 8012d5e:	d904      	bls.n	8012d6a <HAL_RTC_SetDate+0x19a>
 8012d60:	f240 615f 	movw	r1, #1631	; 0x65f
 8012d64:	4821      	ldr	r0, [pc, #132]	; (8012dec <HAL_RTC_SetDate+0x21c>)
 8012d66:	f7f1 fc0d 	bl	8004584 <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8012d6a:	68bb      	ldr	r3, [r7, #8]
 8012d6c:	78db      	ldrb	r3, [r3, #3]
 8012d6e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8012d70:	68bb      	ldr	r3, [r7, #8]
 8012d72:	785b      	ldrb	r3, [r3, #1]
 8012d74:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8012d76:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8012d78:	68ba      	ldr	r2, [r7, #8]
 8012d7a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8012d7c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8012d7e:	68bb      	ldr	r3, [r7, #8]
 8012d80:	781b      	ldrb	r3, [r3, #0]
 8012d82:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8012d84:	4313      	orrs	r3, r2
 8012d86:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	22ca      	movs	r2, #202	; 0xca
 8012d8e:	625a      	str	r2, [r3, #36]	; 0x24
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	2253      	movs	r2, #83	; 0x53
 8012d96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8012d98:	68f8      	ldr	r0, [r7, #12]
 8012d9a:	f000 f8a9 	bl	8012ef0 <RTC_EnterInitMode>
 8012d9e:	4603      	mov	r3, r0
 8012da0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8012da2:	7cfb      	ldrb	r3, [r7, #19]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d10c      	bne.n	8012dc2 <HAL_RTC_SetDate+0x1f2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	681a      	ldr	r2, [r3, #0]
 8012dac:	697b      	ldr	r3, [r7, #20]
 8012dae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012db2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8012db6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8012db8:	68f8      	ldr	r0, [r7, #12]
 8012dba:	f000 f8cd 	bl	8012f58 <RTC_ExitInitMode>
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	22ff      	movs	r2, #255	; 0xff
 8012dc8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8012dca:	7cfb      	ldrb	r3, [r7, #19]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d103      	bne.n	8012dd8 <HAL_RTC_SetDate+0x208>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	2201      	movs	r2, #1
 8012dd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	2200      	movs	r2, #0
 8012ddc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8012de0:	7cfb      	ldrb	r3, [r7, #19]
}
 8012de2:	4618      	mov	r0, r3
 8012de4:	371c      	adds	r7, #28
 8012de6:	46bd      	mov	sp, r7
 8012de8:	bd90      	pop	{r4, r7, pc}
 8012dea:	bf00      	nop
 8012dec:	0801baf8 	.word	0x0801baf8

08012df0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b086      	sub	sp, #24
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	60f8      	str	r0, [r7, #12]
 8012df8:	60b9      	str	r1, [r7, #8]
 8012dfa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d007      	beq.n	8012e12 <HAL_RTC_GetDate+0x22>
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	2b01      	cmp	r3, #1
 8012e06:	d004      	beq.n	8012e12 <HAL_RTC_GetDate+0x22>
 8012e08:	f240 6195 	movw	r1, #1685	; 0x695
 8012e0c:	4824      	ldr	r0, [pc, #144]	; (8012ea0 <HAL_RTC_GetDate+0xb0>)
 8012e0e:	f7f1 fbb9 	bl	8004584 <assert_failed>

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	685b      	ldr	r3, [r3, #4]
 8012e18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012e1c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8012e20:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8012e22:	697b      	ldr	r3, [r7, #20]
 8012e24:	0c1b      	lsrs	r3, r3, #16
 8012e26:	b2da      	uxtb	r2, r3
 8012e28:	68bb      	ldr	r3, [r7, #8]
 8012e2a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8012e2c:	697b      	ldr	r3, [r7, #20]
 8012e2e:	0a1b      	lsrs	r3, r3, #8
 8012e30:	b2db      	uxtb	r3, r3
 8012e32:	f003 031f 	and.w	r3, r3, #31
 8012e36:	b2da      	uxtb	r2, r3
 8012e38:	68bb      	ldr	r3, [r7, #8]
 8012e3a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8012e3c:	697b      	ldr	r3, [r7, #20]
 8012e3e:	b2db      	uxtb	r3, r3
 8012e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012e44:	b2da      	uxtb	r2, r3
 8012e46:	68bb      	ldr	r3, [r7, #8]
 8012e48:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8012e4a:	697b      	ldr	r3, [r7, #20]
 8012e4c:	0b5b      	lsrs	r3, r3, #13
 8012e4e:	b2db      	uxtb	r3, r3
 8012e50:	f003 0307 	and.w	r3, r3, #7
 8012e54:	b2da      	uxtb	r2, r3
 8012e56:	68bb      	ldr	r3, [r7, #8]
 8012e58:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d11a      	bne.n	8012e96 <HAL_RTC_GetDate+0xa6>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8012e60:	68bb      	ldr	r3, [r7, #8]
 8012e62:	78db      	ldrb	r3, [r3, #3]
 8012e64:	4618      	mov	r0, r3
 8012e66:	f000 f8d5 	bl	8013014 <RTC_Bcd2ToByte>
 8012e6a:	4603      	mov	r3, r0
 8012e6c:	461a      	mov	r2, r3
 8012e6e:	68bb      	ldr	r3, [r7, #8]
 8012e70:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8012e72:	68bb      	ldr	r3, [r7, #8]
 8012e74:	785b      	ldrb	r3, [r3, #1]
 8012e76:	4618      	mov	r0, r3
 8012e78:	f000 f8cc 	bl	8013014 <RTC_Bcd2ToByte>
 8012e7c:	4603      	mov	r3, r0
 8012e7e:	461a      	mov	r2, r3
 8012e80:	68bb      	ldr	r3, [r7, #8]
 8012e82:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8012e84:	68bb      	ldr	r3, [r7, #8]
 8012e86:	789b      	ldrb	r3, [r3, #2]
 8012e88:	4618      	mov	r0, r3
 8012e8a:	f000 f8c3 	bl	8013014 <RTC_Bcd2ToByte>
 8012e8e:	4603      	mov	r3, r0
 8012e90:	461a      	mov	r2, r3
 8012e92:	68bb      	ldr	r3, [r7, #8]
 8012e94:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8012e96:	2300      	movs	r3, #0
}
 8012e98:	4618      	mov	r0, r3
 8012e9a:	3718      	adds	r7, #24
 8012e9c:	46bd      	mov	sp, r7
 8012e9e:	bd80      	pop	{r7, pc}
 8012ea0:	0801baf8 	.word	0x0801baf8

08012ea4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b084      	sub	sp, #16
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	68da      	ldr	r2, [r3, #12]
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8012eba:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8012ebc:	f7f7 fb32 	bl	800a524 <HAL_GetTick>
 8012ec0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8012ec2:	e009      	b.n	8012ed8 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8012ec4:	f7f7 fb2e 	bl	800a524 <HAL_GetTick>
 8012ec8:	4602      	mov	r2, r0
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	1ad3      	subs	r3, r2, r3
 8012ece:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012ed2:	d901      	bls.n	8012ed8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8012ed4:	2303      	movs	r3, #3
 8012ed6:	e007      	b.n	8012ee8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	68db      	ldr	r3, [r3, #12]
 8012ede:	f003 0320 	and.w	r3, r3, #32
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d0ee      	beq.n	8012ec4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8012ee6:	2300      	movs	r3, #0
}
 8012ee8:	4618      	mov	r0, r3
 8012eea:	3710      	adds	r7, #16
 8012eec:	46bd      	mov	sp, r7
 8012eee:	bd80      	pop	{r7, pc}

08012ef0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8012ef0:	b580      	push	{r7, lr}
 8012ef2:	b084      	sub	sp, #16
 8012ef4:	af00      	add	r7, sp, #0
 8012ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012ef8:	2300      	movs	r3, #0
 8012efa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	68db      	ldr	r3, [r3, #12]
 8012f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d120      	bne.n	8012f4c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8012f12:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8012f14:	f7f7 fb06 	bl	800a524 <HAL_GetTick>
 8012f18:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8012f1a:	e00d      	b.n	8012f38 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8012f1c:	f7f7 fb02 	bl	800a524 <HAL_GetTick>
 8012f20:	4602      	mov	r2, r0
 8012f22:	68bb      	ldr	r3, [r7, #8]
 8012f24:	1ad3      	subs	r3, r2, r3
 8012f26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012f2a:	d905      	bls.n	8012f38 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8012f2c:	2303      	movs	r3, #3
 8012f2e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	2203      	movs	r2, #3
 8012f34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	68db      	ldr	r3, [r3, #12]
 8012f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d102      	bne.n	8012f4c <RTC_EnterInitMode+0x5c>
 8012f46:	7bfb      	ldrb	r3, [r7, #15]
 8012f48:	2b03      	cmp	r3, #3
 8012f4a:	d1e7      	bne.n	8012f1c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8012f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f4e:	4618      	mov	r0, r3
 8012f50:	3710      	adds	r7, #16
 8012f52:	46bd      	mov	sp, r7
 8012f54:	bd80      	pop	{r7, pc}
	...

08012f58 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b084      	sub	sp, #16
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012f60:	2300      	movs	r3, #0
 8012f62:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8012f64:	4b1a      	ldr	r3, [pc, #104]	; (8012fd0 <RTC_ExitInitMode+0x78>)
 8012f66:	68db      	ldr	r3, [r3, #12]
 8012f68:	4a19      	ldr	r2, [pc, #100]	; (8012fd0 <RTC_ExitInitMode+0x78>)
 8012f6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012f6e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8012f70:	4b17      	ldr	r3, [pc, #92]	; (8012fd0 <RTC_ExitInitMode+0x78>)
 8012f72:	689b      	ldr	r3, [r3, #8]
 8012f74:	f003 0320 	and.w	r3, r3, #32
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d10c      	bne.n	8012f96 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012f7c:	6878      	ldr	r0, [r7, #4]
 8012f7e:	f7ff ff91 	bl	8012ea4 <HAL_RTC_WaitForSynchro>
 8012f82:	4603      	mov	r3, r0
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d01e      	beq.n	8012fc6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	2203      	movs	r2, #3
 8012f8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8012f90:	2303      	movs	r3, #3
 8012f92:	73fb      	strb	r3, [r7, #15]
 8012f94:	e017      	b.n	8012fc6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8012f96:	4b0e      	ldr	r3, [pc, #56]	; (8012fd0 <RTC_ExitInitMode+0x78>)
 8012f98:	689b      	ldr	r3, [r3, #8]
 8012f9a:	4a0d      	ldr	r2, [pc, #52]	; (8012fd0 <RTC_ExitInitMode+0x78>)
 8012f9c:	f023 0320 	bic.w	r3, r3, #32
 8012fa0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012fa2:	6878      	ldr	r0, [r7, #4]
 8012fa4:	f7ff ff7e 	bl	8012ea4 <HAL_RTC_WaitForSynchro>
 8012fa8:	4603      	mov	r3, r0
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d005      	beq.n	8012fba <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	2203      	movs	r2, #3
 8012fb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8012fb6:	2303      	movs	r3, #3
 8012fb8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8012fba:	4b05      	ldr	r3, [pc, #20]	; (8012fd0 <RTC_ExitInitMode+0x78>)
 8012fbc:	689b      	ldr	r3, [r3, #8]
 8012fbe:	4a04      	ldr	r2, [pc, #16]	; (8012fd0 <RTC_ExitInitMode+0x78>)
 8012fc0:	f043 0320 	orr.w	r3, r3, #32
 8012fc4:	6093      	str	r3, [r2, #8]
  }

  return status;
 8012fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fc8:	4618      	mov	r0, r3
 8012fca:	3710      	adds	r7, #16
 8012fcc:	46bd      	mov	sp, r7
 8012fce:	bd80      	pop	{r7, pc}
 8012fd0:	40002800 	.word	0x40002800

08012fd4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8012fd4:	b480      	push	{r7}
 8012fd6:	b085      	sub	sp, #20
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	4603      	mov	r3, r0
 8012fdc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8012fde:	2300      	movs	r3, #0
 8012fe0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8012fe2:	79fb      	ldrb	r3, [r7, #7]
 8012fe4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8012fe6:	e005      	b.n	8012ff4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	3301      	adds	r3, #1
 8012fec:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8012fee:	7afb      	ldrb	r3, [r7, #11]
 8012ff0:	3b0a      	subs	r3, #10
 8012ff2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8012ff4:	7afb      	ldrb	r3, [r7, #11]
 8012ff6:	2b09      	cmp	r3, #9
 8012ff8:	d8f6      	bhi.n	8012fe8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	b2db      	uxtb	r3, r3
 8012ffe:	011b      	lsls	r3, r3, #4
 8013000:	b2da      	uxtb	r2, r3
 8013002:	7afb      	ldrb	r3, [r7, #11]
 8013004:	4313      	orrs	r3, r2
 8013006:	b2db      	uxtb	r3, r3
}
 8013008:	4618      	mov	r0, r3
 801300a:	3714      	adds	r7, #20
 801300c:	46bd      	mov	sp, r7
 801300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013012:	4770      	bx	lr

08013014 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8013014:	b480      	push	{r7}
 8013016:	b085      	sub	sp, #20
 8013018:	af00      	add	r7, sp, #0
 801301a:	4603      	mov	r3, r0
 801301c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 801301e:	79fb      	ldrb	r3, [r7, #7]
 8013020:	091b      	lsrs	r3, r3, #4
 8013022:	b2db      	uxtb	r3, r3
 8013024:	461a      	mov	r2, r3
 8013026:	0092      	lsls	r2, r2, #2
 8013028:	4413      	add	r3, r2
 801302a:	005b      	lsls	r3, r3, #1
 801302c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 801302e:	79fb      	ldrb	r3, [r7, #7]
 8013030:	f003 030f 	and.w	r3, r3, #15
 8013034:	b2da      	uxtb	r2, r3
 8013036:	7bfb      	ldrb	r3, [r7, #15]
 8013038:	4413      	add	r3, r2
 801303a:	b2db      	uxtb	r3, r3
}
 801303c:	4618      	mov	r0, r3
 801303e:	3714      	adds	r7, #20
 8013040:	46bd      	mov	sp, r7
 8013042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013046:	4770      	bx	lr

08013048 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8013048:	b580      	push	{r7, lr}
 801304a:	b084      	sub	sp, #16
 801304c:	af00      	add	r7, sp, #0
 801304e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d101      	bne.n	801305a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8013056:	2301      	movs	r3, #1
 8013058:	e1dc      	b.n	8013414 <HAL_SPI_Init+0x3cc>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	4a92      	ldr	r2, [pc, #584]	; (80132a8 <HAL_SPI_Init+0x260>)
 8013060:	4293      	cmp	r3, r2
 8013062:	d00e      	beq.n	8013082 <HAL_SPI_Init+0x3a>
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	4a90      	ldr	r2, [pc, #576]	; (80132ac <HAL_SPI_Init+0x264>)
 801306a:	4293      	cmp	r3, r2
 801306c:	d009      	beq.n	8013082 <HAL_SPI_Init+0x3a>
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	4a8f      	ldr	r2, [pc, #572]	; (80132b0 <HAL_SPI_Init+0x268>)
 8013074:	4293      	cmp	r3, r2
 8013076:	d004      	beq.n	8013082 <HAL_SPI_Init+0x3a>
 8013078:	f240 1145 	movw	r1, #325	; 0x145
 801307c:	488d      	ldr	r0, [pc, #564]	; (80132b4 <HAL_SPI_Init+0x26c>)
 801307e:	f7f1 fa81 	bl	8004584 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	685b      	ldr	r3, [r3, #4]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d009      	beq.n	801309e <HAL_SPI_Init+0x56>
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	685b      	ldr	r3, [r3, #4]
 801308e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013092:	d004      	beq.n	801309e <HAL_SPI_Init+0x56>
 8013094:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8013098:	4886      	ldr	r0, [pc, #536]	; (80132b4 <HAL_SPI_Init+0x26c>)
 801309a:	f7f1 fa73 	bl	8004584 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	689b      	ldr	r3, [r3, #8]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d00e      	beq.n	80130c4 <HAL_SPI_Init+0x7c>
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	689b      	ldr	r3, [r3, #8]
 80130aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80130ae:	d009      	beq.n	80130c4 <HAL_SPI_Init+0x7c>
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	689b      	ldr	r3, [r3, #8]
 80130b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80130b8:	d004      	beq.n	80130c4 <HAL_SPI_Init+0x7c>
 80130ba:	f240 1147 	movw	r1, #327	; 0x147
 80130be:	487d      	ldr	r0, [pc, #500]	; (80132b4 <HAL_SPI_Init+0x26c>)
 80130c0:	f7f1 fa60 	bl	8004584 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	68db      	ldr	r3, [r3, #12]
 80130c8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80130cc:	d040      	beq.n	8013150 <HAL_SPI_Init+0x108>
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	68db      	ldr	r3, [r3, #12]
 80130d2:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 80130d6:	d03b      	beq.n	8013150 <HAL_SPI_Init+0x108>
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	68db      	ldr	r3, [r3, #12]
 80130dc:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 80130e0:	d036      	beq.n	8013150 <HAL_SPI_Init+0x108>
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	68db      	ldr	r3, [r3, #12]
 80130e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80130ea:	d031      	beq.n	8013150 <HAL_SPI_Init+0x108>
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	68db      	ldr	r3, [r3, #12]
 80130f0:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 80130f4:	d02c      	beq.n	8013150 <HAL_SPI_Init+0x108>
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	68db      	ldr	r3, [r3, #12]
 80130fa:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80130fe:	d027      	beq.n	8013150 <HAL_SPI_Init+0x108>
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	68db      	ldr	r3, [r3, #12]
 8013104:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8013108:	d022      	beq.n	8013150 <HAL_SPI_Init+0x108>
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	68db      	ldr	r3, [r3, #12]
 801310e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013112:	d01d      	beq.n	8013150 <HAL_SPI_Init+0x108>
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	68db      	ldr	r3, [r3, #12]
 8013118:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801311c:	d018      	beq.n	8013150 <HAL_SPI_Init+0x108>
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	68db      	ldr	r3, [r3, #12]
 8013122:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8013126:	d013      	beq.n	8013150 <HAL_SPI_Init+0x108>
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	68db      	ldr	r3, [r3, #12]
 801312c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8013130:	d00e      	beq.n	8013150 <HAL_SPI_Init+0x108>
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	68db      	ldr	r3, [r3, #12]
 8013136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801313a:	d009      	beq.n	8013150 <HAL_SPI_Init+0x108>
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	68db      	ldr	r3, [r3, #12]
 8013140:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013144:	d004      	beq.n	8013150 <HAL_SPI_Init+0x108>
 8013146:	f44f 71a4 	mov.w	r1, #328	; 0x148
 801314a:	485a      	ldr	r0, [pc, #360]	; (80132b4 <HAL_SPI_Init+0x26c>)
 801314c:	f7f1 fa1a 	bl	8004584 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	699b      	ldr	r3, [r3, #24]
 8013154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013158:	d00d      	beq.n	8013176 <HAL_SPI_Init+0x12e>
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	699b      	ldr	r3, [r3, #24]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d009      	beq.n	8013176 <HAL_SPI_Init+0x12e>
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	699b      	ldr	r3, [r3, #24]
 8013166:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801316a:	d004      	beq.n	8013176 <HAL_SPI_Init+0x12e>
 801316c:	f240 1149 	movw	r1, #329	; 0x149
 8013170:	4850      	ldr	r0, [pc, #320]	; (80132b4 <HAL_SPI_Init+0x26c>)
 8013172:	f7f1 fa07 	bl	8004584 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801317a:	2b08      	cmp	r3, #8
 801317c:	d008      	beq.n	8013190 <HAL_SPI_Init+0x148>
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013182:	2b00      	cmp	r3, #0
 8013184:	d004      	beq.n	8013190 <HAL_SPI_Init+0x148>
 8013186:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 801318a:	484a      	ldr	r0, [pc, #296]	; (80132b4 <HAL_SPI_Init+0x26c>)
 801318c:	f7f1 f9fa 	bl	8004584 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	69db      	ldr	r3, [r3, #28]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d020      	beq.n	80131da <HAL_SPI_Init+0x192>
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	69db      	ldr	r3, [r3, #28]
 801319c:	2b08      	cmp	r3, #8
 801319e:	d01c      	beq.n	80131da <HAL_SPI_Init+0x192>
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	69db      	ldr	r3, [r3, #28]
 80131a4:	2b10      	cmp	r3, #16
 80131a6:	d018      	beq.n	80131da <HAL_SPI_Init+0x192>
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	69db      	ldr	r3, [r3, #28]
 80131ac:	2b18      	cmp	r3, #24
 80131ae:	d014      	beq.n	80131da <HAL_SPI_Init+0x192>
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	69db      	ldr	r3, [r3, #28]
 80131b4:	2b20      	cmp	r3, #32
 80131b6:	d010      	beq.n	80131da <HAL_SPI_Init+0x192>
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	69db      	ldr	r3, [r3, #28]
 80131bc:	2b28      	cmp	r3, #40	; 0x28
 80131be:	d00c      	beq.n	80131da <HAL_SPI_Init+0x192>
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	69db      	ldr	r3, [r3, #28]
 80131c4:	2b30      	cmp	r3, #48	; 0x30
 80131c6:	d008      	beq.n	80131da <HAL_SPI_Init+0x192>
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	69db      	ldr	r3, [r3, #28]
 80131cc:	2b38      	cmp	r3, #56	; 0x38
 80131ce:	d004      	beq.n	80131da <HAL_SPI_Init+0x192>
 80131d0:	f240 114b 	movw	r1, #331	; 0x14b
 80131d4:	4837      	ldr	r0, [pc, #220]	; (80132b4 <HAL_SPI_Init+0x26c>)
 80131d6:	f7f1 f9d5 	bl	8004584 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	6a1b      	ldr	r3, [r3, #32]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d008      	beq.n	80131f4 <HAL_SPI_Init+0x1ac>
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	6a1b      	ldr	r3, [r3, #32]
 80131e6:	2b80      	cmp	r3, #128	; 0x80
 80131e8:	d004      	beq.n	80131f4 <HAL_SPI_Init+0x1ac>
 80131ea:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80131ee:	4831      	ldr	r0, [pc, #196]	; (80132b4 <HAL_SPI_Init+0x26c>)
 80131f0:	f7f1 f9c8 	bl	8004584 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d008      	beq.n	801320e <HAL_SPI_Init+0x1c6>
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013200:	2b10      	cmp	r3, #16
 8013202:	d004      	beq.n	801320e <HAL_SPI_Init+0x1c6>
 8013204:	f240 114d 	movw	r1, #333	; 0x14d
 8013208:	482a      	ldr	r0, [pc, #168]	; (80132b4 <HAL_SPI_Init+0x26c>)
 801320a:	f7f1 f9bb 	bl	8004584 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013212:	2b00      	cmp	r3, #0
 8013214:	d150      	bne.n	80132b8 <HAL_SPI_Init+0x270>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	691b      	ldr	r3, [r3, #16]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d008      	beq.n	8013230 <HAL_SPI_Init+0x1e8>
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	691b      	ldr	r3, [r3, #16]
 8013222:	2b02      	cmp	r3, #2
 8013224:	d004      	beq.n	8013230 <HAL_SPI_Init+0x1e8>
 8013226:	f44f 71a8 	mov.w	r1, #336	; 0x150
 801322a:	4822      	ldr	r0, [pc, #136]	; (80132b4 <HAL_SPI_Init+0x26c>)
 801322c:	f7f1 f9aa 	bl	8004584 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	695b      	ldr	r3, [r3, #20]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d008      	beq.n	801324a <HAL_SPI_Init+0x202>
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	695b      	ldr	r3, [r3, #20]
 801323c:	2b01      	cmp	r3, #1
 801323e:	d004      	beq.n	801324a <HAL_SPI_Init+0x202>
 8013240:	f240 1151 	movw	r1, #337	; 0x151
 8013244:	481b      	ldr	r0, [pc, #108]	; (80132b4 <HAL_SPI_Init+0x26c>)
 8013246:	f7f1 f99d 	bl	8004584 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	685b      	ldr	r3, [r3, #4]
 801324e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013252:	d125      	bne.n	80132a0 <HAL_SPI_Init+0x258>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	69db      	ldr	r3, [r3, #28]
 8013258:	2b00      	cmp	r3, #0
 801325a:	d058      	beq.n	801330e <HAL_SPI_Init+0x2c6>
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	69db      	ldr	r3, [r3, #28]
 8013260:	2b08      	cmp	r3, #8
 8013262:	d054      	beq.n	801330e <HAL_SPI_Init+0x2c6>
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	69db      	ldr	r3, [r3, #28]
 8013268:	2b10      	cmp	r3, #16
 801326a:	d050      	beq.n	801330e <HAL_SPI_Init+0x2c6>
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	69db      	ldr	r3, [r3, #28]
 8013270:	2b18      	cmp	r3, #24
 8013272:	d04c      	beq.n	801330e <HAL_SPI_Init+0x2c6>
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	69db      	ldr	r3, [r3, #28]
 8013278:	2b20      	cmp	r3, #32
 801327a:	d048      	beq.n	801330e <HAL_SPI_Init+0x2c6>
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	69db      	ldr	r3, [r3, #28]
 8013280:	2b28      	cmp	r3, #40	; 0x28
 8013282:	d044      	beq.n	801330e <HAL_SPI_Init+0x2c6>
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	69db      	ldr	r3, [r3, #28]
 8013288:	2b30      	cmp	r3, #48	; 0x30
 801328a:	d040      	beq.n	801330e <HAL_SPI_Init+0x2c6>
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	69db      	ldr	r3, [r3, #28]
 8013290:	2b38      	cmp	r3, #56	; 0x38
 8013292:	d03c      	beq.n	801330e <HAL_SPI_Init+0x2c6>
 8013294:	f240 1155 	movw	r1, #341	; 0x155
 8013298:	4806      	ldr	r0, [pc, #24]	; (80132b4 <HAL_SPI_Init+0x26c>)
 801329a:	f7f1 f973 	bl	8004584 <assert_failed>
 801329e:	e036      	b.n	801330e <HAL_SPI_Init+0x2c6>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	2200      	movs	r2, #0
 80132a4:	61da      	str	r2, [r3, #28]
 80132a6:	e032      	b.n	801330e <HAL_SPI_Init+0x2c6>
 80132a8:	40013000 	.word	0x40013000
 80132ac:	40003800 	.word	0x40003800
 80132b0:	40003c00 	.word	0x40003c00
 80132b4:	0801bb30 	.word	0x0801bb30
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	69db      	ldr	r3, [r3, #28]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d020      	beq.n	8013302 <HAL_SPI_Init+0x2ba>
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	69db      	ldr	r3, [r3, #28]
 80132c4:	2b08      	cmp	r3, #8
 80132c6:	d01c      	beq.n	8013302 <HAL_SPI_Init+0x2ba>
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	69db      	ldr	r3, [r3, #28]
 80132cc:	2b10      	cmp	r3, #16
 80132ce:	d018      	beq.n	8013302 <HAL_SPI_Init+0x2ba>
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	69db      	ldr	r3, [r3, #28]
 80132d4:	2b18      	cmp	r3, #24
 80132d6:	d014      	beq.n	8013302 <HAL_SPI_Init+0x2ba>
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	69db      	ldr	r3, [r3, #28]
 80132dc:	2b20      	cmp	r3, #32
 80132de:	d010      	beq.n	8013302 <HAL_SPI_Init+0x2ba>
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	69db      	ldr	r3, [r3, #28]
 80132e4:	2b28      	cmp	r3, #40	; 0x28
 80132e6:	d00c      	beq.n	8013302 <HAL_SPI_Init+0x2ba>
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	69db      	ldr	r3, [r3, #28]
 80132ec:	2b30      	cmp	r3, #48	; 0x30
 80132ee:	d008      	beq.n	8013302 <HAL_SPI_Init+0x2ba>
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	69db      	ldr	r3, [r3, #28]
 80132f4:	2b38      	cmp	r3, #56	; 0x38
 80132f6:	d004      	beq.n	8013302 <HAL_SPI_Init+0x2ba>
 80132f8:	f240 115f 	movw	r1, #351	; 0x15f
 80132fc:	4847      	ldr	r0, [pc, #284]	; (801341c <HAL_SPI_Init+0x3d4>)
 80132fe:	f7f1 f941 	bl	8004584 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	2200      	movs	r2, #0
 8013306:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	2200      	movs	r2, #0
 801330c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	2200      	movs	r2, #0
 8013312:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801331a:	b2db      	uxtb	r3, r3
 801331c:	2b00      	cmp	r3, #0
 801331e:	d106      	bne.n	801332e <HAL_SPI_Init+0x2e6>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	2200      	movs	r2, #0
 8013324:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8013328:	6878      	ldr	r0, [r7, #4]
 801332a:	f7f3 fe1d 	bl	8006f68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	2202      	movs	r2, #2
 8013332:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	681a      	ldr	r2, [r3, #0]
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013344:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	68db      	ldr	r3, [r3, #12]
 801334a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801334e:	d902      	bls.n	8013356 <HAL_SPI_Init+0x30e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8013350:	2300      	movs	r3, #0
 8013352:	60fb      	str	r3, [r7, #12]
 8013354:	e002      	b.n	801335c <HAL_SPI_Init+0x314>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8013356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801335a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	68db      	ldr	r3, [r3, #12]
 8013360:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8013364:	d007      	beq.n	8013376 <HAL_SPI_Init+0x32e>
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	68db      	ldr	r3, [r3, #12]
 801336a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801336e:	d002      	beq.n	8013376 <HAL_SPI_Init+0x32e>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	2200      	movs	r2, #0
 8013374:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	685b      	ldr	r3, [r3, #4]
 801337a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	689b      	ldr	r3, [r3, #8]
 8013382:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8013386:	431a      	orrs	r2, r3
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	691b      	ldr	r3, [r3, #16]
 801338c:	f003 0302 	and.w	r3, r3, #2
 8013390:	431a      	orrs	r2, r3
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	695b      	ldr	r3, [r3, #20]
 8013396:	f003 0301 	and.w	r3, r3, #1
 801339a:	431a      	orrs	r2, r3
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	699b      	ldr	r3, [r3, #24]
 80133a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80133a4:	431a      	orrs	r2, r3
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	69db      	ldr	r3, [r3, #28]
 80133aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80133ae:	431a      	orrs	r2, r3
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	6a1b      	ldr	r3, [r3, #32]
 80133b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80133b8:	ea42 0103 	orr.w	r1, r2, r3
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	430a      	orrs	r2, r1
 80133ca:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	699b      	ldr	r3, [r3, #24]
 80133d0:	0c1b      	lsrs	r3, r3, #16
 80133d2:	f003 0204 	and.w	r2, r3, #4
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133da:	f003 0310 	and.w	r3, r3, #16
 80133de:	431a      	orrs	r2, r3
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133e4:	f003 0308 	and.w	r3, r3, #8
 80133e8:	431a      	orrs	r2, r3
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	68db      	ldr	r3, [r3, #12]
 80133ee:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80133f2:	ea42 0103 	orr.w	r1, r2, r3
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	430a      	orrs	r2, r1
 8013402:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	2200      	movs	r2, #0
 8013408:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	2201      	movs	r2, #1
 801340e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8013412:	2300      	movs	r3, #0
}
 8013414:	4618      	mov	r0, r3
 8013416:	3710      	adds	r7, #16
 8013418:	46bd      	mov	sp, r7
 801341a:	bd80      	pop	{r7, pc}
 801341c:	0801bb30 	.word	0x0801bb30

08013420 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8013420:	b580      	push	{r7, lr}
 8013422:	b086      	sub	sp, #24
 8013424:	af00      	add	r7, sp, #0
 8013426:	60f8      	str	r0, [r7, #12]
 8013428:	60b9      	str	r1, [r7, #8]
 801342a:	4613      	mov	r3, r2
 801342c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 801342e:	2300      	movs	r3, #0
 8013430:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	689b      	ldr	r3, [r3, #8]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d009      	beq.n	801344e <HAL_SPI_Transmit_IT+0x2e>
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	689b      	ldr	r3, [r3, #8]
 801343e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013442:	d004      	beq.n	801344e <HAL_SPI_Transmit_IT+0x2e>
 8013444:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 8013448:	4840      	ldr	r0, [pc, #256]	; (801354c <HAL_SPI_Transmit_IT+0x12c>)
 801344a:	f7f1 f89b 	bl	8004584 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8013454:	2b01      	cmp	r3, #1
 8013456:	d101      	bne.n	801345c <HAL_SPI_Transmit_IT+0x3c>
 8013458:	2302      	movs	r3, #2
 801345a:	e072      	b.n	8013542 <HAL_SPI_Transmit_IT+0x122>
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	2201      	movs	r2, #1
 8013460:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8013464:	68bb      	ldr	r3, [r7, #8]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d002      	beq.n	8013470 <HAL_SPI_Transmit_IT+0x50>
 801346a:	88fb      	ldrh	r3, [r7, #6]
 801346c:	2b00      	cmp	r3, #0
 801346e:	d102      	bne.n	8013476 <HAL_SPI_Transmit_IT+0x56>
  {
    errorcode = HAL_ERROR;
 8013470:	2301      	movs	r3, #1
 8013472:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013474:	e060      	b.n	8013538 <HAL_SPI_Transmit_IT+0x118>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801347c:	b2db      	uxtb	r3, r3
 801347e:	2b01      	cmp	r3, #1
 8013480:	d002      	beq.n	8013488 <HAL_SPI_Transmit_IT+0x68>
  {
    errorcode = HAL_BUSY;
 8013482:	2302      	movs	r3, #2
 8013484:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013486:	e057      	b.n	8013538 <HAL_SPI_Transmit_IT+0x118>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	2203      	movs	r2, #3
 801348c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	2200      	movs	r2, #0
 8013494:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	68ba      	ldr	r2, [r7, #8]
 801349a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	88fa      	ldrh	r2, [r7, #6]
 80134a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	88fa      	ldrh	r2, [r7, #6]
 80134a6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	2200      	movs	r2, #0
 80134ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	2200      	movs	r2, #0
 80134b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	2200      	movs	r2, #0
 80134ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	2200      	movs	r2, #0
 80134c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	68db      	ldr	r3, [r3, #12]
 80134c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80134cc:	d903      	bls.n	80134d6 <HAL_SPI_Transmit_IT+0xb6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	4a1f      	ldr	r2, [pc, #124]	; (8013550 <HAL_SPI_Transmit_IT+0x130>)
 80134d2:	651a      	str	r2, [r3, #80]	; 0x50
 80134d4:	e002      	b.n	80134dc <HAL_SPI_Transmit_IT+0xbc>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	4a1e      	ldr	r2, [pc, #120]	; (8013554 <HAL_SPI_Transmit_IT+0x134>)
 80134da:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	689b      	ldr	r3, [r3, #8]
 80134e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80134e4:	d10f      	bne.n	8013506 <HAL_SPI_Transmit_IT+0xe6>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	681a      	ldr	r2, [r3, #0]
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80134f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	681a      	ldr	r2, [r3, #0]
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013504:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	685a      	ldr	r2, [r3, #4]
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8013514:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013520:	2b40      	cmp	r3, #64	; 0x40
 8013522:	d008      	beq.n	8013536 <HAL_SPI_Transmit_IT+0x116>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	681a      	ldr	r2, [r3, #0]
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013532:	601a      	str	r2, [r3, #0]
 8013534:	e000      	b.n	8013538 <HAL_SPI_Transmit_IT+0x118>
  }

error :
 8013536:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	2200      	movs	r2, #0
 801353c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8013540:	7dfb      	ldrb	r3, [r7, #23]
}
 8013542:	4618      	mov	r0, r3
 8013544:	3718      	adds	r7, #24
 8013546:	46bd      	mov	sp, r7
 8013548:	bd80      	pop	{r7, pc}
 801354a:	bf00      	nop
 801354c:	0801bb30 	.word	0x0801bb30
 8013550:	08013d63 	.word	0x08013d63
 8013554:	08013d1d 	.word	0x08013d1d

08013558 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8013558:	b580      	push	{r7, lr}
 801355a:	b086      	sub	sp, #24
 801355c:	af00      	add	r7, sp, #0
 801355e:	60f8      	str	r0, [r7, #12]
 8013560:	60b9      	str	r1, [r7, #8]
 8013562:	4613      	mov	r3, r2
 8013564:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013566:	2300      	movs	r3, #0
 8013568:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	689b      	ldr	r3, [r3, #8]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d110      	bne.n	8013594 <HAL_SPI_Receive_IT+0x3c>
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	685b      	ldr	r3, [r3, #4]
 8013576:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801357a:	d10b      	bne.n	8013594 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	2204      	movs	r2, #4
 8013580:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8013584:	88fb      	ldrh	r3, [r7, #6]
 8013586:	68ba      	ldr	r2, [r7, #8]
 8013588:	68b9      	ldr	r1, [r7, #8]
 801358a:	68f8      	ldr	r0, [r7, #12]
 801358c:	f000 f894 	bl	80136b8 <HAL_SPI_TransmitReceive_IT>
 8013590:	4603      	mov	r3, r0
 8013592:	e089      	b.n	80136a8 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801359a:	2b01      	cmp	r3, #1
 801359c:	d101      	bne.n	80135a2 <HAL_SPI_Receive_IT+0x4a>
 801359e:	2302      	movs	r3, #2
 80135a0:	e082      	b.n	80136a8 <HAL_SPI_Receive_IT+0x150>
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	2201      	movs	r2, #1
 80135a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80135b0:	b2db      	uxtb	r3, r3
 80135b2:	2b01      	cmp	r3, #1
 80135b4:	d002      	beq.n	80135bc <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 80135b6:	2302      	movs	r3, #2
 80135b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80135ba:	e070      	b.n	801369e <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 80135bc:	68bb      	ldr	r3, [r7, #8]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d002      	beq.n	80135c8 <HAL_SPI_Receive_IT+0x70>
 80135c2:	88fb      	ldrh	r3, [r7, #6]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d102      	bne.n	80135ce <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 80135c8:	2301      	movs	r3, #1
 80135ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80135cc:	e067      	b.n	801369e <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	2204      	movs	r2, #4
 80135d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	2200      	movs	r2, #0
 80135da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	68ba      	ldr	r2, [r7, #8]
 80135e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	88fa      	ldrh	r2, [r7, #6]
 80135e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	88fa      	ldrh	r2, [r7, #6]
 80135ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	2200      	movs	r2, #0
 80135f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	2200      	movs	r2, #0
 80135fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	2200      	movs	r2, #0
 8013602:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	2200      	movs	r2, #0
 8013608:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	68db      	ldr	r3, [r3, #12]
 801360e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8013612:	d90b      	bls.n	801362c <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	685a      	ldr	r2, [r3, #4]
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8013622:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	4a22      	ldr	r2, [pc, #136]	; (80136b0 <HAL_SPI_Receive_IT+0x158>)
 8013628:	64da      	str	r2, [r3, #76]	; 0x4c
 801362a:	e00a      	b.n	8013642 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	685a      	ldr	r2, [r3, #4]
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801363a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	4a1d      	ldr	r2, [pc, #116]	; (80136b4 <HAL_SPI_Receive_IT+0x15c>)
 8013640:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	689b      	ldr	r3, [r3, #8]
 8013646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801364a:	d10f      	bne.n	801366c <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	681a      	ldr	r2, [r3, #0]
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801365a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	681a      	ldr	r2, [r3, #0]
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801366a:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	685a      	ldr	r2, [r3, #4]
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 801367a:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013686:	2b40      	cmp	r3, #64	; 0x40
 8013688:	d008      	beq.n	801369c <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	681a      	ldr	r2, [r3, #0]
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013698:	601a      	str	r2, [r3, #0]
 801369a:	e000      	b.n	801369e <HAL_SPI_Receive_IT+0x146>
  }

error :
 801369c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	2200      	movs	r2, #0
 80136a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80136a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80136a8:	4618      	mov	r0, r3
 80136aa:	3718      	adds	r7, #24
 80136ac:	46bd      	mov	sp, r7
 80136ae:	bd80      	pop	{r7, pc}
 80136b0:	08013cd1 	.word	0x08013cd1
 80136b4:	08013c81 	.word	0x08013c81

080136b8 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80136b8:	b580      	push	{r7, lr}
 80136ba:	b086      	sub	sp, #24
 80136bc:	af00      	add	r7, sp, #0
 80136be:	60f8      	str	r0, [r7, #12]
 80136c0:	60b9      	str	r1, [r7, #8]
 80136c2:	607a      	str	r2, [r7, #4]
 80136c4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80136c6:	2300      	movs	r3, #0
 80136c8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	689b      	ldr	r3, [r3, #8]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d004      	beq.n	80136dc <HAL_SPI_TransmitReceive_IT+0x24>
 80136d2:	f240 61da 	movw	r1, #1754	; 0x6da
 80136d6:	4850      	ldr	r0, [pc, #320]	; (8013818 <HAL_SPI_TransmitReceive_IT+0x160>)
 80136d8:	f7f0 ff54 	bl	8004584 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hspi);
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80136e2:	2b01      	cmp	r3, #1
 80136e4:	d101      	bne.n	80136ea <HAL_SPI_TransmitReceive_IT+0x32>
 80136e6:	2302      	movs	r3, #2
 80136e8:	e091      	b.n	801380e <HAL_SPI_TransmitReceive_IT+0x156>
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	2201      	movs	r2, #1
 80136ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80136f8:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	685b      	ldr	r3, [r3, #4]
 80136fe:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8013700:	7dbb      	ldrb	r3, [r7, #22]
 8013702:	2b01      	cmp	r3, #1
 8013704:	d00d      	beq.n	8013722 <HAL_SPI_TransmitReceive_IT+0x6a>
 8013706:	693b      	ldr	r3, [r7, #16]
 8013708:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801370c:	d106      	bne.n	801371c <HAL_SPI_TransmitReceive_IT+0x64>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	689b      	ldr	r3, [r3, #8]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d102      	bne.n	801371c <HAL_SPI_TransmitReceive_IT+0x64>
 8013716:	7dbb      	ldrb	r3, [r7, #22]
 8013718:	2b04      	cmp	r3, #4
 801371a:	d002      	beq.n	8013722 <HAL_SPI_TransmitReceive_IT+0x6a>
  {
    errorcode = HAL_BUSY;
 801371c:	2302      	movs	r3, #2
 801371e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013720:	e070      	b.n	8013804 <HAL_SPI_TransmitReceive_IT+0x14c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013722:	68bb      	ldr	r3, [r7, #8]
 8013724:	2b00      	cmp	r3, #0
 8013726:	d005      	beq.n	8013734 <HAL_SPI_TransmitReceive_IT+0x7c>
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	2b00      	cmp	r3, #0
 801372c:	d002      	beq.n	8013734 <HAL_SPI_TransmitReceive_IT+0x7c>
 801372e:	887b      	ldrh	r3, [r7, #2]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d102      	bne.n	801373a <HAL_SPI_TransmitReceive_IT+0x82>
  {
    errorcode = HAL_ERROR;
 8013734:	2301      	movs	r3, #1
 8013736:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013738:	e064      	b.n	8013804 <HAL_SPI_TransmitReceive_IT+0x14c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8013740:	b2db      	uxtb	r3, r3
 8013742:	2b04      	cmp	r3, #4
 8013744:	d003      	beq.n	801374e <HAL_SPI_TransmitReceive_IT+0x96>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	2205      	movs	r2, #5
 801374a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	2200      	movs	r2, #0
 8013752:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	68ba      	ldr	r2, [r7, #8]
 8013758:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	887a      	ldrh	r2, [r7, #2]
 801375e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	887a      	ldrh	r2, [r7, #2]
 8013764:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	687a      	ldr	r2, [r7, #4]
 801376a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	887a      	ldrh	r2, [r7, #2]
 8013770:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	887a      	ldrh	r2, [r7, #2]
 8013778:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	68db      	ldr	r3, [r3, #12]
 8013780:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8013784:	d906      	bls.n	8013794 <HAL_SPI_TransmitReceive_IT+0xdc>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	4a24      	ldr	r2, [pc, #144]	; (801381c <HAL_SPI_TransmitReceive_IT+0x164>)
 801378a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	4a24      	ldr	r2, [pc, #144]	; (8013820 <HAL_SPI_TransmitReceive_IT+0x168>)
 8013790:	651a      	str	r2, [r3, #80]	; 0x50
 8013792:	e005      	b.n	80137a0 <HAL_SPI_TransmitReceive_IT+0xe8>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	4a23      	ldr	r2, [pc, #140]	; (8013824 <HAL_SPI_TransmitReceive_IT+0x16c>)
 8013798:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	4a22      	ldr	r2, [pc, #136]	; (8013828 <HAL_SPI_TransmitReceive_IT+0x170>)
 801379e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	68db      	ldr	r3, [r3, #12]
 80137a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80137a8:	d802      	bhi.n	80137b0 <HAL_SPI_TransmitReceive_IT+0xf8>
 80137aa:	887b      	ldrh	r3, [r7, #2]
 80137ac:	2b01      	cmp	r3, #1
 80137ae:	d908      	bls.n	80137c2 <HAL_SPI_TransmitReceive_IT+0x10a>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	685a      	ldr	r2, [r3, #4]
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80137be:	605a      	str	r2, [r3, #4]
 80137c0:	e007      	b.n	80137d2 <HAL_SPI_TransmitReceive_IT+0x11a>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	685a      	ldr	r2, [r3, #4]
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80137d0:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	685a      	ldr	r2, [r3, #4]
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80137e0:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80137ec:	2b40      	cmp	r3, #64	; 0x40
 80137ee:	d008      	beq.n	8013802 <HAL_SPI_TransmitReceive_IT+0x14a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	681a      	ldr	r2, [r3, #0]
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80137fe:	601a      	str	r2, [r3, #0]
 8013800:	e000      	b.n	8013804 <HAL_SPI_TransmitReceive_IT+0x14c>
  }

error :
 8013802:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	2200      	movs	r2, #0
 8013808:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801380c:	7dfb      	ldrb	r3, [r7, #23]
}
 801380e:	4618      	mov	r0, r3
 8013810:	3718      	adds	r7, #24
 8013812:	46bd      	mov	sp, r7
 8013814:	bd80      	pop	{r7, pc}
 8013816:	bf00      	nop
 8013818:	0801bb30 	.word	0x0801bb30
 801381c:	08013bbb 	.word	0x08013bbb
 8013820:	08013c21 	.word	0x08013c21
 8013824:	08013a6b 	.word	0x08013a6b
 8013828:	08013b29 	.word	0x08013b29

0801382c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801382c:	b580      	push	{r7, lr}
 801382e:	b088      	sub	sp, #32
 8013830:	af00      	add	r7, sp, #0
 8013832:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	685b      	ldr	r3, [r3, #4]
 801383a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	689b      	ldr	r3, [r3, #8]
 8013842:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8013844:	69bb      	ldr	r3, [r7, #24]
 8013846:	099b      	lsrs	r3, r3, #6
 8013848:	f003 0301 	and.w	r3, r3, #1
 801384c:	2b00      	cmp	r3, #0
 801384e:	d10f      	bne.n	8013870 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8013850:	69bb      	ldr	r3, [r7, #24]
 8013852:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8013856:	2b00      	cmp	r3, #0
 8013858:	d00a      	beq.n	8013870 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801385a:	69fb      	ldr	r3, [r7, #28]
 801385c:	099b      	lsrs	r3, r3, #6
 801385e:	f003 0301 	and.w	r3, r3, #1
 8013862:	2b00      	cmp	r3, #0
 8013864:	d004      	beq.n	8013870 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801386a:	6878      	ldr	r0, [r7, #4]
 801386c:	4798      	blx	r3
    return;
 801386e:	e0d7      	b.n	8013a20 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8013870:	69bb      	ldr	r3, [r7, #24]
 8013872:	085b      	lsrs	r3, r3, #1
 8013874:	f003 0301 	and.w	r3, r3, #1
 8013878:	2b00      	cmp	r3, #0
 801387a:	d00a      	beq.n	8013892 <HAL_SPI_IRQHandler+0x66>
 801387c:	69fb      	ldr	r3, [r7, #28]
 801387e:	09db      	lsrs	r3, r3, #7
 8013880:	f003 0301 	and.w	r3, r3, #1
 8013884:	2b00      	cmp	r3, #0
 8013886:	d004      	beq.n	8013892 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801388c:	6878      	ldr	r0, [r7, #4]
 801388e:	4798      	blx	r3
    return;
 8013890:	e0c6      	b.n	8013a20 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8013892:	69bb      	ldr	r3, [r7, #24]
 8013894:	095b      	lsrs	r3, r3, #5
 8013896:	f003 0301 	and.w	r3, r3, #1
 801389a:	2b00      	cmp	r3, #0
 801389c:	d10c      	bne.n	80138b8 <HAL_SPI_IRQHandler+0x8c>
 801389e:	69bb      	ldr	r3, [r7, #24]
 80138a0:	099b      	lsrs	r3, r3, #6
 80138a2:	f003 0301 	and.w	r3, r3, #1
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d106      	bne.n	80138b8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80138aa:	69bb      	ldr	r3, [r7, #24]
 80138ac:	0a1b      	lsrs	r3, r3, #8
 80138ae:	f003 0301 	and.w	r3, r3, #1
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	f000 80b4 	beq.w	8013a20 <HAL_SPI_IRQHandler+0x1f4>
 80138b8:	69fb      	ldr	r3, [r7, #28]
 80138ba:	095b      	lsrs	r3, r3, #5
 80138bc:	f003 0301 	and.w	r3, r3, #1
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	f000 80ad 	beq.w	8013a20 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80138c6:	69bb      	ldr	r3, [r7, #24]
 80138c8:	099b      	lsrs	r3, r3, #6
 80138ca:	f003 0301 	and.w	r3, r3, #1
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d023      	beq.n	801391a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80138d8:	b2db      	uxtb	r3, r3
 80138da:	2b03      	cmp	r3, #3
 80138dc:	d011      	beq.n	8013902 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80138e2:	f043 0204 	orr.w	r2, r3, #4
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80138ea:	2300      	movs	r3, #0
 80138ec:	617b      	str	r3, [r7, #20]
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	68db      	ldr	r3, [r3, #12]
 80138f4:	617b      	str	r3, [r7, #20]
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	689b      	ldr	r3, [r3, #8]
 80138fc:	617b      	str	r3, [r7, #20]
 80138fe:	697b      	ldr	r3, [r7, #20]
 8013900:	e00b      	b.n	801391a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013902:	2300      	movs	r3, #0
 8013904:	613b      	str	r3, [r7, #16]
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	68db      	ldr	r3, [r3, #12]
 801390c:	613b      	str	r3, [r7, #16]
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	689b      	ldr	r3, [r3, #8]
 8013914:	613b      	str	r3, [r7, #16]
 8013916:	693b      	ldr	r3, [r7, #16]
        return;
 8013918:	e082      	b.n	8013a20 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 801391a:	69bb      	ldr	r3, [r7, #24]
 801391c:	095b      	lsrs	r3, r3, #5
 801391e:	f003 0301 	and.w	r3, r3, #1
 8013922:	2b00      	cmp	r3, #0
 8013924:	d014      	beq.n	8013950 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801392a:	f043 0201 	orr.w	r2, r3, #1
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8013932:	2300      	movs	r3, #0
 8013934:	60fb      	str	r3, [r7, #12]
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	689b      	ldr	r3, [r3, #8]
 801393c:	60fb      	str	r3, [r7, #12]
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	681a      	ldr	r2, [r3, #0]
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801394c:	601a      	str	r2, [r3, #0]
 801394e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8013950:	69bb      	ldr	r3, [r7, #24]
 8013952:	0a1b      	lsrs	r3, r3, #8
 8013954:	f003 0301 	and.w	r3, r3, #1
 8013958:	2b00      	cmp	r3, #0
 801395a:	d00c      	beq.n	8013976 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013960:	f043 0208 	orr.w	r2, r3, #8
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8013968:	2300      	movs	r3, #0
 801396a:	60bb      	str	r3, [r7, #8]
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	689b      	ldr	r3, [r3, #8]
 8013972:	60bb      	str	r3, [r7, #8]
 8013974:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801397a:	2b00      	cmp	r3, #0
 801397c:	d04f      	beq.n	8013a1e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	685a      	ldr	r2, [r3, #4]
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801398c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	2201      	movs	r2, #1
 8013992:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8013996:	69fb      	ldr	r3, [r7, #28]
 8013998:	f003 0302 	and.w	r3, r3, #2
 801399c:	2b00      	cmp	r3, #0
 801399e:	d104      	bne.n	80139aa <HAL_SPI_IRQHandler+0x17e>
 80139a0:	69fb      	ldr	r3, [r7, #28]
 80139a2:	f003 0301 	and.w	r3, r3, #1
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d034      	beq.n	8013a14 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	685a      	ldr	r2, [r3, #4]
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	f022 0203 	bic.w	r2, r2, #3
 80139b8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d011      	beq.n	80139e6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80139c6:	4a18      	ldr	r2, [pc, #96]	; (8013a28 <HAL_SPI_IRQHandler+0x1fc>)
 80139c8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80139ce:	4618      	mov	r0, r3
 80139d0:	f7fa fb38 	bl	800e044 <HAL_DMA_Abort_IT>
 80139d4:	4603      	mov	r3, r0
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d005      	beq.n	80139e6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80139de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d016      	beq.n	8013a1c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80139f2:	4a0d      	ldr	r2, [pc, #52]	; (8013a28 <HAL_SPI_IRQHandler+0x1fc>)
 80139f4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80139fa:	4618      	mov	r0, r3
 80139fc:	f7fa fb22 	bl	800e044 <HAL_DMA_Abort_IT>
 8013a00:	4603      	mov	r3, r0
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d00a      	beq.n	8013a1c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013a0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8013a12:	e003      	b.n	8013a1c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8013a14:	6878      	ldr	r0, [r7, #4]
 8013a16:	f000 f809 	bl	8013a2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8013a1a:	e000      	b.n	8013a1e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8013a1c:	bf00      	nop
    return;
 8013a1e:	bf00      	nop
  }
}
 8013a20:	3720      	adds	r7, #32
 8013a22:	46bd      	mov	sp, r7
 8013a24:	bd80      	pop	{r7, pc}
 8013a26:	bf00      	nop
 8013a28:	08013a41 	.word	0x08013a41

08013a2c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8013a2c:	b480      	push	{r7}
 8013a2e:	b083      	sub	sp, #12
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8013a34:	bf00      	nop
 8013a36:	370c      	adds	r7, #12
 8013a38:	46bd      	mov	sp, r7
 8013a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a3e:	4770      	bx	lr

08013a40 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013a40:	b580      	push	{r7, lr}
 8013a42:	b084      	sub	sp, #16
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a4c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	2200      	movs	r2, #0
 8013a52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	2200      	movs	r2, #0
 8013a5a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8013a5c:	68f8      	ldr	r0, [r7, #12]
 8013a5e:	f7ff ffe5 	bl	8013a2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8013a62:	bf00      	nop
 8013a64:	3710      	adds	r7, #16
 8013a66:	46bd      	mov	sp, r7
 8013a68:	bd80      	pop	{r7, pc}

08013a6a <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8013a6a:	b580      	push	{r7, lr}
 8013a6c:	b082      	sub	sp, #8
 8013a6e:	af00      	add	r7, sp, #0
 8013a70:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8013a78:	b29b      	uxth	r3, r3
 8013a7a:	2b01      	cmp	r3, #1
 8013a7c:	d923      	bls.n	8013ac6 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	68da      	ldr	r2, [r3, #12]
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a88:	b292      	uxth	r2, r2
 8013a8a:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a90:	1c9a      	adds	r2, r3, #2
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8013a9c:	b29b      	uxth	r3, r3
 8013a9e:	3b02      	subs	r3, #2
 8013aa0:	b29a      	uxth	r2, r3
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8013aae:	b29b      	uxth	r3, r3
 8013ab0:	2b01      	cmp	r3, #1
 8013ab2:	d11f      	bne.n	8013af4 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	685a      	ldr	r2, [r3, #4]
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8013ac2:	605a      	str	r2, [r3, #4]
 8013ac4:	e016      	b.n	8013af4 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	f103 020c 	add.w	r2, r3, #12
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ad2:	7812      	ldrb	r2, [r2, #0]
 8013ad4:	b2d2      	uxtb	r2, r2
 8013ad6:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013adc:	1c5a      	adds	r2, r3, #1
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8013ae8:	b29b      	uxth	r3, r3
 8013aea:	3b01      	subs	r3, #1
 8013aec:	b29a      	uxth	r2, r3
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8013afa:	b29b      	uxth	r3, r3
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d10f      	bne.n	8013b20 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	685a      	ldr	r2, [r3, #4]
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8013b0e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013b14:	b29b      	uxth	r3, r3
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d102      	bne.n	8013b20 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8013b1a:	6878      	ldr	r0, [r7, #4]
 8013b1c:	f000 fb00 	bl	8014120 <SPI_CloseRxTx_ISR>
    }
  }
}
 8013b20:	bf00      	nop
 8013b22:	3708      	adds	r7, #8
 8013b24:	46bd      	mov	sp, r7
 8013b26:	bd80      	pop	{r7, pc}

08013b28 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8013b28:	b580      	push	{r7, lr}
 8013b2a:	b082      	sub	sp, #8
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013b34:	b29b      	uxth	r3, r3
 8013b36:	2b01      	cmp	r3, #1
 8013b38:	d912      	bls.n	8013b60 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b3e:	881a      	ldrh	r2, [r3, #0]
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	681b      	ldr	r3, [r3, #0]
 8013b44:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b4a:	1c9a      	adds	r2, r3, #2
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013b54:	b29b      	uxth	r3, r3
 8013b56:	3b02      	subs	r3, #2
 8013b58:	b29a      	uxth	r2, r3
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013b5e:	e012      	b.n	8013b86 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	330c      	adds	r3, #12
 8013b6a:	7812      	ldrb	r2, [r2, #0]
 8013b6c:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b72:	1c5a      	adds	r2, r3, #1
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013b7c:	b29b      	uxth	r3, r3
 8013b7e:	3b01      	subs	r3, #1
 8013b80:	b29a      	uxth	r2, r3
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013b8a:	b29b      	uxth	r3, r3
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d110      	bne.n	8013bb2 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	685a      	ldr	r2, [r3, #4]
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013b9e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8013ba6:	b29b      	uxth	r3, r3
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d102      	bne.n	8013bb2 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8013bac:	6878      	ldr	r0, [r7, #4]
 8013bae:	f000 fab7 	bl	8014120 <SPI_CloseRxTx_ISR>
    }
  }
}
 8013bb2:	bf00      	nop
 8013bb4:	3708      	adds	r7, #8
 8013bb6:	46bd      	mov	sp, r7
 8013bb8:	bd80      	pop	{r7, pc}

08013bba <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8013bba:	b580      	push	{r7, lr}
 8013bbc:	b082      	sub	sp, #8
 8013bbe:	af00      	add	r7, sp, #0
 8013bc0:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	68da      	ldr	r2, [r3, #12]
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bcc:	b292      	uxth	r2, r2
 8013bce:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bd4:	1c9a      	adds	r2, r3, #2
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8013be0:	b29b      	uxth	r3, r3
 8013be2:	3b01      	subs	r3, #1
 8013be4:	b29a      	uxth	r2, r3
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8013bf2:	b29b      	uxth	r3, r3
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d10f      	bne.n	8013c18 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	685a      	ldr	r2, [r3, #4]
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013c06:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013c0c:	b29b      	uxth	r3, r3
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d102      	bne.n	8013c18 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8013c12:	6878      	ldr	r0, [r7, #4]
 8013c14:	f000 fa84 	bl	8014120 <SPI_CloseRxTx_ISR>
    }
  }
}
 8013c18:	bf00      	nop
 8013c1a:	3708      	adds	r7, #8
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	bd80      	pop	{r7, pc}

08013c20 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8013c20:	b580      	push	{r7, lr}
 8013c22:	b082      	sub	sp, #8
 8013c24:	af00      	add	r7, sp, #0
 8013c26:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c2c:	881a      	ldrh	r2, [r3, #0]
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c38:	1c9a      	adds	r2, r3, #2
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013c42:	b29b      	uxth	r3, r3
 8013c44:	3b01      	subs	r3, #1
 8013c46:	b29a      	uxth	r2, r3
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013c50:	b29b      	uxth	r3, r3
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d110      	bne.n	8013c78 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	685a      	ldr	r2, [r3, #4]
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013c64:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8013c6c:	b29b      	uxth	r3, r3
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d102      	bne.n	8013c78 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8013c72:	6878      	ldr	r0, [r7, #4]
 8013c74:	f000 fa54 	bl	8014120 <SPI_CloseRxTx_ISR>
    }
  }
}
 8013c78:	bf00      	nop
 8013c7a:	3708      	adds	r7, #8
 8013c7c:	46bd      	mov	sp, r7
 8013c7e:	bd80      	pop	{r7, pc}

08013c80 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8013c80:	b580      	push	{r7, lr}
 8013c82:	b082      	sub	sp, #8
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	f103 020c 	add.w	r2, r3, #12
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c94:	7812      	ldrb	r2, [r2, #0]
 8013c96:	b2d2      	uxtb	r2, r2
 8013c98:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c9e:	1c5a      	adds	r2, r3, #1
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8013caa:	b29b      	uxth	r3, r3
 8013cac:	3b01      	subs	r3, #1
 8013cae:	b29a      	uxth	r2, r3
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8013cbc:	b29b      	uxth	r3, r3
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d102      	bne.n	8013cc8 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8013cc2:	6878      	ldr	r0, [r7, #4]
 8013cc4:	f000 fa6e 	bl	80141a4 <SPI_CloseRx_ISR>
  }
}
 8013cc8:	bf00      	nop
 8013cca:	3708      	adds	r7, #8
 8013ccc:	46bd      	mov	sp, r7
 8013cce:	bd80      	pop	{r7, pc}

08013cd0 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	b082      	sub	sp, #8
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	68da      	ldr	r2, [r3, #12]
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ce2:	b292      	uxth	r2, r2
 8013ce4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013cea:	1c9a      	adds	r2, r3, #2
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8013cf6:	b29b      	uxth	r3, r3
 8013cf8:	3b01      	subs	r3, #1
 8013cfa:	b29a      	uxth	r2, r3
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8013d08:	b29b      	uxth	r3, r3
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d102      	bne.n	8013d14 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8013d0e:	6878      	ldr	r0, [r7, #4]
 8013d10:	f000 fa48 	bl	80141a4 <SPI_CloseRx_ISR>
  }
}
 8013d14:	bf00      	nop
 8013d16:	3708      	adds	r7, #8
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	bd80      	pop	{r7, pc}

08013d1c <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8013d1c:	b580      	push	{r7, lr}
 8013d1e:	b082      	sub	sp, #8
 8013d20:	af00      	add	r7, sp, #0
 8013d22:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	330c      	adds	r3, #12
 8013d2e:	7812      	ldrb	r2, [r2, #0]
 8013d30:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d36:	1c5a      	adds	r2, r3, #1
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013d40:	b29b      	uxth	r3, r3
 8013d42:	3b01      	subs	r3, #1
 8013d44:	b29a      	uxth	r2, r3
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013d4e:	b29b      	uxth	r3, r3
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d102      	bne.n	8013d5a <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8013d54:	6878      	ldr	r0, [r7, #4]
 8013d56:	f000 fa55 	bl	8014204 <SPI_CloseTx_ISR>
  }
}
 8013d5a:	bf00      	nop
 8013d5c:	3708      	adds	r7, #8
 8013d5e:	46bd      	mov	sp, r7
 8013d60:	bd80      	pop	{r7, pc}

08013d62 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8013d62:	b580      	push	{r7, lr}
 8013d64:	b082      	sub	sp, #8
 8013d66:	af00      	add	r7, sp, #0
 8013d68:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d6e:	881a      	ldrh	r2, [r3, #0]
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d7a:	1c9a      	adds	r2, r3, #2
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013d84:	b29b      	uxth	r3, r3
 8013d86:	3b01      	subs	r3, #1
 8013d88:	b29a      	uxth	r2, r3
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013d92:	b29b      	uxth	r3, r3
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d102      	bne.n	8013d9e <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8013d98:	6878      	ldr	r0, [r7, #4]
 8013d9a:	f000 fa33 	bl	8014204 <SPI_CloseTx_ISR>
  }
}
 8013d9e:	bf00      	nop
 8013da0:	3708      	adds	r7, #8
 8013da2:	46bd      	mov	sp, r7
 8013da4:	bd80      	pop	{r7, pc}
	...

08013da8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b088      	sub	sp, #32
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	60f8      	str	r0, [r7, #12]
 8013db0:	60b9      	str	r1, [r7, #8]
 8013db2:	603b      	str	r3, [r7, #0]
 8013db4:	4613      	mov	r3, r2
 8013db6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8013db8:	f7f6 fbb4 	bl	800a524 <HAL_GetTick>
 8013dbc:	4602      	mov	r2, r0
 8013dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dc0:	1a9b      	subs	r3, r3, r2
 8013dc2:	683a      	ldr	r2, [r7, #0]
 8013dc4:	4413      	add	r3, r2
 8013dc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8013dc8:	f7f6 fbac 	bl	800a524 <HAL_GetTick>
 8013dcc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8013dce:	4b39      	ldr	r3, [pc, #228]	; (8013eb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	015b      	lsls	r3, r3, #5
 8013dd4:	0d1b      	lsrs	r3, r3, #20
 8013dd6:	69fa      	ldr	r2, [r7, #28]
 8013dd8:	fb02 f303 	mul.w	r3, r2, r3
 8013ddc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8013dde:	e054      	b.n	8013e8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8013de0:	683b      	ldr	r3, [r7, #0]
 8013de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013de6:	d050      	beq.n	8013e8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8013de8:	f7f6 fb9c 	bl	800a524 <HAL_GetTick>
 8013dec:	4602      	mov	r2, r0
 8013dee:	69bb      	ldr	r3, [r7, #24]
 8013df0:	1ad3      	subs	r3, r2, r3
 8013df2:	69fa      	ldr	r2, [r7, #28]
 8013df4:	429a      	cmp	r2, r3
 8013df6:	d902      	bls.n	8013dfe <SPI_WaitFlagStateUntilTimeout+0x56>
 8013df8:	69fb      	ldr	r3, [r7, #28]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d13d      	bne.n	8013e7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	685a      	ldr	r2, [r3, #4]
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8013e0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	685b      	ldr	r3, [r3, #4]
 8013e12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013e16:	d111      	bne.n	8013e3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	689b      	ldr	r3, [r3, #8]
 8013e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013e20:	d004      	beq.n	8013e2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	689b      	ldr	r3, [r3, #8]
 8013e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013e2a:	d107      	bne.n	8013e3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	681a      	ldr	r2, [r3, #0]
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013e3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013e44:	d10f      	bne.n	8013e66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	681a      	ldr	r2, [r3, #0]
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013e54:	601a      	str	r2, [r3, #0]
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	681a      	ldr	r2, [r3, #0]
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013e64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	2201      	movs	r2, #1
 8013e6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	2200      	movs	r2, #0
 8013e72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8013e76:	2303      	movs	r3, #3
 8013e78:	e017      	b.n	8013eaa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8013e7a:	697b      	ldr	r3, [r7, #20]
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d101      	bne.n	8013e84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8013e80:	2300      	movs	r3, #0
 8013e82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8013e84:	697b      	ldr	r3, [r7, #20]
 8013e86:	3b01      	subs	r3, #1
 8013e88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	689a      	ldr	r2, [r3, #8]
 8013e90:	68bb      	ldr	r3, [r7, #8]
 8013e92:	4013      	ands	r3, r2
 8013e94:	68ba      	ldr	r2, [r7, #8]
 8013e96:	429a      	cmp	r2, r3
 8013e98:	bf0c      	ite	eq
 8013e9a:	2301      	moveq	r3, #1
 8013e9c:	2300      	movne	r3, #0
 8013e9e:	b2db      	uxtb	r3, r3
 8013ea0:	461a      	mov	r2, r3
 8013ea2:	79fb      	ldrb	r3, [r7, #7]
 8013ea4:	429a      	cmp	r2, r3
 8013ea6:	d19b      	bne.n	8013de0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8013ea8:	2300      	movs	r3, #0
}
 8013eaa:	4618      	mov	r0, r3
 8013eac:	3720      	adds	r7, #32
 8013eae:	46bd      	mov	sp, r7
 8013eb0:	bd80      	pop	{r7, pc}
 8013eb2:	bf00      	nop
 8013eb4:	20000ff8 	.word	0x20000ff8

08013eb8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8013eb8:	b580      	push	{r7, lr}
 8013eba:	b08a      	sub	sp, #40	; 0x28
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	60f8      	str	r0, [r7, #12]
 8013ec0:	60b9      	str	r1, [r7, #8]
 8013ec2:	607a      	str	r2, [r7, #4]
 8013ec4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8013eca:	f7f6 fb2b 	bl	800a524 <HAL_GetTick>
 8013ece:	4602      	mov	r2, r0
 8013ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ed2:	1a9b      	subs	r3, r3, r2
 8013ed4:	683a      	ldr	r2, [r7, #0]
 8013ed6:	4413      	add	r3, r2
 8013ed8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8013eda:	f7f6 fb23 	bl	800a524 <HAL_GetTick>
 8013ede:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	330c      	adds	r3, #12
 8013ee6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8013ee8:	4b3d      	ldr	r3, [pc, #244]	; (8013fe0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8013eea:	681a      	ldr	r2, [r3, #0]
 8013eec:	4613      	mov	r3, r2
 8013eee:	009b      	lsls	r3, r3, #2
 8013ef0:	4413      	add	r3, r2
 8013ef2:	00da      	lsls	r2, r3, #3
 8013ef4:	1ad3      	subs	r3, r2, r3
 8013ef6:	0d1b      	lsrs	r3, r3, #20
 8013ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013efa:	fb02 f303 	mul.w	r3, r2, r3
 8013efe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8013f00:	e060      	b.n	8013fc4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8013f02:	68bb      	ldr	r3, [r7, #8]
 8013f04:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8013f08:	d107      	bne.n	8013f1a <SPI_WaitFifoStateUntilTimeout+0x62>
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d104      	bne.n	8013f1a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8013f10:	69fb      	ldr	r3, [r7, #28]
 8013f12:	781b      	ldrb	r3, [r3, #0]
 8013f14:	b2db      	uxtb	r3, r3
 8013f16:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8013f18:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8013f1a:	683b      	ldr	r3, [r7, #0]
 8013f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f20:	d050      	beq.n	8013fc4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8013f22:	f7f6 faff 	bl	800a524 <HAL_GetTick>
 8013f26:	4602      	mov	r2, r0
 8013f28:	6a3b      	ldr	r3, [r7, #32]
 8013f2a:	1ad3      	subs	r3, r2, r3
 8013f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f2e:	429a      	cmp	r2, r3
 8013f30:	d902      	bls.n	8013f38 <SPI_WaitFifoStateUntilTimeout+0x80>
 8013f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d13d      	bne.n	8013fb4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	685a      	ldr	r2, [r3, #4]
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8013f46:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	685b      	ldr	r3, [r3, #4]
 8013f4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013f50:	d111      	bne.n	8013f76 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	689b      	ldr	r3, [r3, #8]
 8013f56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013f5a:	d004      	beq.n	8013f66 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	689b      	ldr	r3, [r3, #8]
 8013f60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013f64:	d107      	bne.n	8013f76 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	681a      	ldr	r2, [r3, #0]
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013f74:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013f7e:	d10f      	bne.n	8013fa0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	681a      	ldr	r2, [r3, #0]
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013f8e:	601a      	str	r2, [r3, #0]
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	681a      	ldr	r2, [r3, #0]
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013f9e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	2201      	movs	r2, #1
 8013fa4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	2200      	movs	r2, #0
 8013fac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8013fb0:	2303      	movs	r3, #3
 8013fb2:	e010      	b.n	8013fd6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8013fb4:	69bb      	ldr	r3, [r7, #24]
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d101      	bne.n	8013fbe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8013fba:	2300      	movs	r3, #0
 8013fbc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8013fbe:	69bb      	ldr	r3, [r7, #24]
 8013fc0:	3b01      	subs	r3, #1
 8013fc2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	689a      	ldr	r2, [r3, #8]
 8013fca:	68bb      	ldr	r3, [r7, #8]
 8013fcc:	4013      	ands	r3, r2
 8013fce:	687a      	ldr	r2, [r7, #4]
 8013fd0:	429a      	cmp	r2, r3
 8013fd2:	d196      	bne.n	8013f02 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8013fd4:	2300      	movs	r3, #0
}
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	3728      	adds	r7, #40	; 0x28
 8013fda:	46bd      	mov	sp, r7
 8013fdc:	bd80      	pop	{r7, pc}
 8013fde:	bf00      	nop
 8013fe0:	20000ff8 	.word	0x20000ff8

08013fe4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8013fe4:	b580      	push	{r7, lr}
 8013fe6:	b086      	sub	sp, #24
 8013fe8:	af02      	add	r7, sp, #8
 8013fea:	60f8      	str	r0, [r7, #12]
 8013fec:	60b9      	str	r1, [r7, #8]
 8013fee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	685b      	ldr	r3, [r3, #4]
 8013ff4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013ff8:	d111      	bne.n	801401e <SPI_EndRxTransaction+0x3a>
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	689b      	ldr	r3, [r3, #8]
 8013ffe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014002:	d004      	beq.n	801400e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	689b      	ldr	r3, [r3, #8]
 8014008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801400c:	d107      	bne.n	801401e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	681a      	ldr	r2, [r3, #0]
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801401c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	9300      	str	r3, [sp, #0]
 8014022:	68bb      	ldr	r3, [r7, #8]
 8014024:	2200      	movs	r2, #0
 8014026:	2180      	movs	r1, #128	; 0x80
 8014028:	68f8      	ldr	r0, [r7, #12]
 801402a:	f7ff febd 	bl	8013da8 <SPI_WaitFlagStateUntilTimeout>
 801402e:	4603      	mov	r3, r0
 8014030:	2b00      	cmp	r3, #0
 8014032:	d007      	beq.n	8014044 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014038:	f043 0220 	orr.w	r2, r3, #32
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8014040:	2303      	movs	r3, #3
 8014042:	e023      	b.n	801408c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	685b      	ldr	r3, [r3, #4]
 8014048:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801404c:	d11d      	bne.n	801408a <SPI_EndRxTransaction+0xa6>
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	689b      	ldr	r3, [r3, #8]
 8014052:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014056:	d004      	beq.n	8014062 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	689b      	ldr	r3, [r3, #8]
 801405c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014060:	d113      	bne.n	801408a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	9300      	str	r3, [sp, #0]
 8014066:	68bb      	ldr	r3, [r7, #8]
 8014068:	2200      	movs	r2, #0
 801406a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801406e:	68f8      	ldr	r0, [r7, #12]
 8014070:	f7ff ff22 	bl	8013eb8 <SPI_WaitFifoStateUntilTimeout>
 8014074:	4603      	mov	r3, r0
 8014076:	2b00      	cmp	r3, #0
 8014078:	d007      	beq.n	801408a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801407e:	f043 0220 	orr.w	r2, r3, #32
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8014086:	2303      	movs	r3, #3
 8014088:	e000      	b.n	801408c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 801408a:	2300      	movs	r3, #0
}
 801408c:	4618      	mov	r0, r3
 801408e:	3710      	adds	r7, #16
 8014090:	46bd      	mov	sp, r7
 8014092:	bd80      	pop	{r7, pc}

08014094 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8014094:	b580      	push	{r7, lr}
 8014096:	b086      	sub	sp, #24
 8014098:	af02      	add	r7, sp, #8
 801409a:	60f8      	str	r0, [r7, #12]
 801409c:	60b9      	str	r1, [r7, #8]
 801409e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	9300      	str	r3, [sp, #0]
 80140a4:	68bb      	ldr	r3, [r7, #8]
 80140a6:	2200      	movs	r2, #0
 80140a8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80140ac:	68f8      	ldr	r0, [r7, #12]
 80140ae:	f7ff ff03 	bl	8013eb8 <SPI_WaitFifoStateUntilTimeout>
 80140b2:	4603      	mov	r3, r0
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d007      	beq.n	80140c8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80140bc:	f043 0220 	orr.w	r2, r3, #32
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80140c4:	2303      	movs	r3, #3
 80140c6:	e027      	b.n	8014118 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	9300      	str	r3, [sp, #0]
 80140cc:	68bb      	ldr	r3, [r7, #8]
 80140ce:	2200      	movs	r2, #0
 80140d0:	2180      	movs	r1, #128	; 0x80
 80140d2:	68f8      	ldr	r0, [r7, #12]
 80140d4:	f7ff fe68 	bl	8013da8 <SPI_WaitFlagStateUntilTimeout>
 80140d8:	4603      	mov	r3, r0
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d007      	beq.n	80140ee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80140e2:	f043 0220 	orr.w	r2, r3, #32
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80140ea:	2303      	movs	r3, #3
 80140ec:	e014      	b.n	8014118 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	9300      	str	r3, [sp, #0]
 80140f2:	68bb      	ldr	r3, [r7, #8]
 80140f4:	2200      	movs	r2, #0
 80140f6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80140fa:	68f8      	ldr	r0, [r7, #12]
 80140fc:	f7ff fedc 	bl	8013eb8 <SPI_WaitFifoStateUntilTimeout>
 8014100:	4603      	mov	r3, r0
 8014102:	2b00      	cmp	r3, #0
 8014104:	d007      	beq.n	8014116 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801410a:	f043 0220 	orr.w	r2, r3, #32
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8014112:	2303      	movs	r3, #3
 8014114:	e000      	b.n	8014118 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8014116:	2300      	movs	r3, #0
}
 8014118:	4618      	mov	r0, r3
 801411a:	3710      	adds	r7, #16
 801411c:	46bd      	mov	sp, r7
 801411e:	bd80      	pop	{r7, pc}

08014120 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8014120:	b580      	push	{r7, lr}
 8014122:	b084      	sub	sp, #16
 8014124:	af00      	add	r7, sp, #0
 8014126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8014128:	f7f6 f9fc 	bl	800a524 <HAL_GetTick>
 801412c:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	685a      	ldr	r2, [r3, #4]
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	f022 0220 	bic.w	r2, r2, #32
 801413c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 801413e:	68fa      	ldr	r2, [r7, #12]
 8014140:	2164      	movs	r1, #100	; 0x64
 8014142:	6878      	ldr	r0, [r7, #4]
 8014144:	f7ff ffa6 	bl	8014094 <SPI_EndRxTxTransaction>
 8014148:	4603      	mov	r3, r0
 801414a:	2b00      	cmp	r3, #0
 801414c:	d005      	beq.n	801415a <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014152:	f043 0220 	orr.w	r2, r3, #32
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801415e:	2b00      	cmp	r3, #0
 8014160:	d115      	bne.n	801418e <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8014168:	b2db      	uxtb	r3, r3
 801416a:	2b04      	cmp	r3, #4
 801416c:	d107      	bne.n	801417e <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	2201      	movs	r2, #1
 8014172:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8014176:	6878      	ldr	r0, [r7, #4]
 8014178:	f7f2 fe94 	bl	8006ea4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 801417c:	e00e      	b.n	801419c <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	2201      	movs	r2, #1
 8014182:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8014186:	6878      	ldr	r0, [r7, #4]
 8014188:	f7f2 fe9c 	bl	8006ec4 <HAL_SPI_TxRxCpltCallback>
}
 801418c:	e006      	b.n	801419c <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	2201      	movs	r2, #1
 8014192:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8014196:	6878      	ldr	r0, [r7, #4]
 8014198:	f7ff fc48 	bl	8013a2c <HAL_SPI_ErrorCallback>
}
 801419c:	bf00      	nop
 801419e:	3710      	adds	r7, #16
 80141a0:	46bd      	mov	sp, r7
 80141a2:	bd80      	pop	{r7, pc}

080141a4 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80141a4:	b580      	push	{r7, lr}
 80141a6:	b082      	sub	sp, #8
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	685a      	ldr	r2, [r3, #4]
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80141ba:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80141bc:	f7f6 f9b2 	bl	800a524 <HAL_GetTick>
 80141c0:	4603      	mov	r3, r0
 80141c2:	461a      	mov	r2, r3
 80141c4:	2164      	movs	r1, #100	; 0x64
 80141c6:	6878      	ldr	r0, [r7, #4]
 80141c8:	f7ff ff0c 	bl	8013fe4 <SPI_EndRxTransaction>
 80141cc:	4603      	mov	r3, r0
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d005      	beq.n	80141de <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80141d6:	f043 0220 	orr.w	r2, r3, #32
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	2201      	movs	r2, #1
 80141e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d103      	bne.n	80141f6 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80141ee:	6878      	ldr	r0, [r7, #4]
 80141f0:	f7f2 fe58 	bl	8006ea4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80141f4:	e002      	b.n	80141fc <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 80141f6:	6878      	ldr	r0, [r7, #4]
 80141f8:	f7ff fc18 	bl	8013a2c <HAL_SPI_ErrorCallback>
}
 80141fc:	bf00      	nop
 80141fe:	3708      	adds	r7, #8
 8014200:	46bd      	mov	sp, r7
 8014202:	bd80      	pop	{r7, pc}

08014204 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8014204:	b580      	push	{r7, lr}
 8014206:	b084      	sub	sp, #16
 8014208:	af00      	add	r7, sp, #0
 801420a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801420c:	f7f6 f98a 	bl	800a524 <HAL_GetTick>
 8014210:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	685a      	ldr	r2, [r3, #4]
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8014220:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8014222:	68fa      	ldr	r2, [r7, #12]
 8014224:	2164      	movs	r1, #100	; 0x64
 8014226:	6878      	ldr	r0, [r7, #4]
 8014228:	f7ff ff34 	bl	8014094 <SPI_EndRxTxTransaction>
 801422c:	4603      	mov	r3, r0
 801422e:	2b00      	cmp	r3, #0
 8014230:	d005      	beq.n	801423e <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014236:	f043 0220 	orr.w	r2, r3, #32
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	689b      	ldr	r3, [r3, #8]
 8014242:	2b00      	cmp	r3, #0
 8014244:	d10a      	bne.n	801425c <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014246:	2300      	movs	r3, #0
 8014248:	60bb      	str	r3, [r7, #8]
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	68db      	ldr	r3, [r3, #12]
 8014250:	60bb      	str	r3, [r7, #8]
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	689b      	ldr	r3, [r3, #8]
 8014258:	60bb      	str	r3, [r7, #8]
 801425a:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	2201      	movs	r2, #1
 8014260:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014268:	2b00      	cmp	r3, #0
 801426a:	d003      	beq.n	8014274 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 801426c:	6878      	ldr	r0, [r7, #4]
 801426e:	f7ff fbdd 	bl	8013a2c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8014272:	e002      	b.n	801427a <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8014274:	6878      	ldr	r0, [r7, #4]
 8014276:	f7f2 fe05 	bl	8006e84 <HAL_SPI_TxCpltCallback>
}
 801427a:	bf00      	nop
 801427c:	3710      	adds	r7, #16
 801427e:	46bd      	mov	sp, r7
 8014280:	bd80      	pop	{r7, pc}
	...

08014284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8014284:	b580      	push	{r7, lr}
 8014286:	b082      	sub	sp, #8
 8014288:	af00      	add	r7, sp, #0
 801428a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	2b00      	cmp	r3, #0
 8014290:	d101      	bne.n	8014296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8014292:	2301      	movs	r3, #1
 8014294:	e0c8      	b.n	8014428 <HAL_TIM_Base_Init+0x1a4>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	4a65      	ldr	r2, [pc, #404]	; (8014430 <HAL_TIM_Base_Init+0x1ac>)
 801429c:	4293      	cmp	r3, r2
 801429e:	d01d      	beq.n	80142dc <HAL_TIM_Base_Init+0x58>
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80142a8:	d018      	beq.n	80142dc <HAL_TIM_Base_Init+0x58>
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	4a61      	ldr	r2, [pc, #388]	; (8014434 <HAL_TIM_Base_Init+0x1b0>)
 80142b0:	4293      	cmp	r3, r2
 80142b2:	d013      	beq.n	80142dc <HAL_TIM_Base_Init+0x58>
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	4a5f      	ldr	r2, [pc, #380]	; (8014438 <HAL_TIM_Base_Init+0x1b4>)
 80142ba:	4293      	cmp	r3, r2
 80142bc:	d00e      	beq.n	80142dc <HAL_TIM_Base_Init+0x58>
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	4a5e      	ldr	r2, [pc, #376]	; (801443c <HAL_TIM_Base_Init+0x1b8>)
 80142c4:	4293      	cmp	r3, r2
 80142c6:	d009      	beq.n	80142dc <HAL_TIM_Base_Init+0x58>
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	4a5c      	ldr	r2, [pc, #368]	; (8014440 <HAL_TIM_Base_Init+0x1bc>)
 80142ce:	4293      	cmp	r3, r2
 80142d0:	d004      	beq.n	80142dc <HAL_TIM_Base_Init+0x58>
 80142d2:	f44f 718b 	mov.w	r1, #278	; 0x116
 80142d6:	485b      	ldr	r0, [pc, #364]	; (8014444 <HAL_TIM_Base_Init+0x1c0>)
 80142d8:	f7f0 f954 	bl	8004584 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	689b      	ldr	r3, [r3, #8]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d014      	beq.n	801430e <HAL_TIM_Base_Init+0x8a>
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	689b      	ldr	r3, [r3, #8]
 80142e8:	2b10      	cmp	r3, #16
 80142ea:	d010      	beq.n	801430e <HAL_TIM_Base_Init+0x8a>
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	689b      	ldr	r3, [r3, #8]
 80142f0:	2b20      	cmp	r3, #32
 80142f2:	d00c      	beq.n	801430e <HAL_TIM_Base_Init+0x8a>
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	689b      	ldr	r3, [r3, #8]
 80142f8:	2b40      	cmp	r3, #64	; 0x40
 80142fa:	d008      	beq.n	801430e <HAL_TIM_Base_Init+0x8a>
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	689b      	ldr	r3, [r3, #8]
 8014300:	2b60      	cmp	r3, #96	; 0x60
 8014302:	d004      	beq.n	801430e <HAL_TIM_Base_Init+0x8a>
 8014304:	f240 1117 	movw	r1, #279	; 0x117
 8014308:	484e      	ldr	r0, [pc, #312]	; (8014444 <HAL_TIM_Base_Init+0x1c0>)
 801430a:	f7f0 f93b 	bl	8004584 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	691b      	ldr	r3, [r3, #16]
 8014312:	2b00      	cmp	r3, #0
 8014314:	d00e      	beq.n	8014334 <HAL_TIM_Base_Init+0xb0>
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	691b      	ldr	r3, [r3, #16]
 801431a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801431e:	d009      	beq.n	8014334 <HAL_TIM_Base_Init+0xb0>
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	691b      	ldr	r3, [r3, #16]
 8014324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014328:	d004      	beq.n	8014334 <HAL_TIM_Base_Init+0xb0>
 801432a:	f44f 718c 	mov.w	r1, #280	; 0x118
 801432e:	4845      	ldr	r0, [pc, #276]	; (8014444 <HAL_TIM_Base_Init+0x1c0>)
 8014330:	f7f0 f928 	bl	8004584 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801433c:	d00f      	beq.n	801435e <HAL_TIM_Base_Init+0xda>
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	68db      	ldr	r3, [r3, #12]
 8014342:	2b00      	cmp	r3, #0
 8014344:	d006      	beq.n	8014354 <HAL_TIM_Base_Init+0xd0>
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	68db      	ldr	r3, [r3, #12]
 801434a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801434e:	d201      	bcs.n	8014354 <HAL_TIM_Base_Init+0xd0>
 8014350:	2301      	movs	r3, #1
 8014352:	e000      	b.n	8014356 <HAL_TIM_Base_Init+0xd2>
 8014354:	2300      	movs	r3, #0
 8014356:	f003 0301 	and.w	r3, r3, #1
 801435a:	b2db      	uxtb	r3, r3
 801435c:	e006      	b.n	801436c <HAL_TIM_Base_Init+0xe8>
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	68db      	ldr	r3, [r3, #12]
 8014362:	2b00      	cmp	r3, #0
 8014364:	bf14      	ite	ne
 8014366:	2301      	movne	r3, #1
 8014368:	2300      	moveq	r3, #0
 801436a:	b2db      	uxtb	r3, r3
 801436c:	2b00      	cmp	r3, #0
 801436e:	d104      	bne.n	801437a <HAL_TIM_Base_Init+0xf6>
 8014370:	f240 1119 	movw	r1, #281	; 0x119
 8014374:	4833      	ldr	r0, [pc, #204]	; (8014444 <HAL_TIM_Base_Init+0x1c0>)
 8014376:	f7f0 f905 	bl	8004584 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	699b      	ldr	r3, [r3, #24]
 801437e:	2b00      	cmp	r3, #0
 8014380:	d008      	beq.n	8014394 <HAL_TIM_Base_Init+0x110>
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	699b      	ldr	r3, [r3, #24]
 8014386:	2b80      	cmp	r3, #128	; 0x80
 8014388:	d004      	beq.n	8014394 <HAL_TIM_Base_Init+0x110>
 801438a:	f44f 718d 	mov.w	r1, #282	; 0x11a
 801438e:	482d      	ldr	r0, [pc, #180]	; (8014444 <HAL_TIM_Base_Init+0x1c0>)
 8014390:	f7f0 f8f8 	bl	8004584 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801439a:	b2db      	uxtb	r3, r3
 801439c:	2b00      	cmp	r3, #0
 801439e:	d106      	bne.n	80143ae <HAL_TIM_Base_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	2200      	movs	r2, #0
 80143a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80143a8:	6878      	ldr	r0, [r7, #4]
 80143aa:	f7f3 f82f 	bl	800740c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	2202      	movs	r2, #2
 80143b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	681a      	ldr	r2, [r3, #0]
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	3304      	adds	r3, #4
 80143be:	4619      	mov	r1, r3
 80143c0:	4610      	mov	r0, r2
 80143c2:	f000 f9fd 	bl	80147c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	2201      	movs	r2, #1
 80143ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	2201      	movs	r2, #1
 80143d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	2201      	movs	r2, #1
 80143da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	2201      	movs	r2, #1
 80143e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	2201      	movs	r2, #1
 80143ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	2201      	movs	r2, #1
 80143f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	2201      	movs	r2, #1
 80143fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	2201      	movs	r2, #1
 8014402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	2201      	movs	r2, #1
 801440a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	2201      	movs	r2, #1
 8014412:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	2201      	movs	r2, #1
 801441a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	2201      	movs	r2, #1
 8014422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014426:	2300      	movs	r3, #0
}
 8014428:	4618      	mov	r0, r3
 801442a:	3708      	adds	r7, #8
 801442c:	46bd      	mov	sp, r7
 801442e:	bd80      	pop	{r7, pc}
 8014430:	40012c00 	.word	0x40012c00
 8014434:	40001000 	.word	0x40001000
 8014438:	40001400 	.word	0x40001400
 801443c:	40014000 	.word	0x40014000
 8014440:	40014400 	.word	0x40014400
 8014444:	0801bb68 	.word	0x0801bb68

08014448 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8014448:	b580      	push	{r7, lr}
 801444a:	b084      	sub	sp, #16
 801444c:	af00      	add	r7, sp, #0
 801444e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	4a34      	ldr	r2, [pc, #208]	; (8014528 <HAL_TIM_Base_Start_IT+0xe0>)
 8014456:	4293      	cmp	r3, r2
 8014458:	d01d      	beq.n	8014496 <HAL_TIM_Base_Start_IT+0x4e>
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014462:	d018      	beq.n	8014496 <HAL_TIM_Base_Start_IT+0x4e>
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	681b      	ldr	r3, [r3, #0]
 8014468:	4a30      	ldr	r2, [pc, #192]	; (801452c <HAL_TIM_Base_Start_IT+0xe4>)
 801446a:	4293      	cmp	r3, r2
 801446c:	d013      	beq.n	8014496 <HAL_TIM_Base_Start_IT+0x4e>
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	4a2f      	ldr	r2, [pc, #188]	; (8014530 <HAL_TIM_Base_Start_IT+0xe8>)
 8014474:	4293      	cmp	r3, r2
 8014476:	d00e      	beq.n	8014496 <HAL_TIM_Base_Start_IT+0x4e>
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	4a2d      	ldr	r2, [pc, #180]	; (8014534 <HAL_TIM_Base_Start_IT+0xec>)
 801447e:	4293      	cmp	r3, r2
 8014480:	d009      	beq.n	8014496 <HAL_TIM_Base_Start_IT+0x4e>
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	4a2c      	ldr	r2, [pc, #176]	; (8014538 <HAL_TIM_Base_Start_IT+0xf0>)
 8014488:	4293      	cmp	r3, r2
 801448a:	d004      	beq.n	8014496 <HAL_TIM_Base_Start_IT+0x4e>
 801448c:	f240 11d3 	movw	r1, #467	; 0x1d3
 8014490:	482a      	ldr	r0, [pc, #168]	; (801453c <HAL_TIM_Base_Start_IT+0xf4>)
 8014492:	f7f0 f877 	bl	8004584 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801449c:	b2db      	uxtb	r3, r3
 801449e:	2b01      	cmp	r3, #1
 80144a0:	d001      	beq.n	80144a6 <HAL_TIM_Base_Start_IT+0x5e>
  {
    return HAL_ERROR;
 80144a2:	2301      	movs	r3, #1
 80144a4:	e03b      	b.n	801451e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	2202      	movs	r2, #2
 80144aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	68da      	ldr	r2, [r3, #12]
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	f042 0201 	orr.w	r2, r2, #1
 80144bc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	4a19      	ldr	r2, [pc, #100]	; (8014528 <HAL_TIM_Base_Start_IT+0xe0>)
 80144c4:	4293      	cmp	r3, r2
 80144c6:	d009      	beq.n	80144dc <HAL_TIM_Base_Start_IT+0x94>
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80144d0:	d004      	beq.n	80144dc <HAL_TIM_Base_Start_IT+0x94>
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	4a17      	ldr	r2, [pc, #92]	; (8014534 <HAL_TIM_Base_Start_IT+0xec>)
 80144d8:	4293      	cmp	r3, r2
 80144da:	d115      	bne.n	8014508 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	689a      	ldr	r2, [r3, #8]
 80144e2:	4b17      	ldr	r3, [pc, #92]	; (8014540 <HAL_TIM_Base_Start_IT+0xf8>)
 80144e4:	4013      	ands	r3, r2
 80144e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	2b06      	cmp	r3, #6
 80144ec:	d015      	beq.n	801451a <HAL_TIM_Base_Start_IT+0xd2>
 80144ee:	68fb      	ldr	r3, [r7, #12]
 80144f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80144f4:	d011      	beq.n	801451a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	681a      	ldr	r2, [r3, #0]
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	f042 0201 	orr.w	r2, r2, #1
 8014504:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014506:	e008      	b.n	801451a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	681a      	ldr	r2, [r3, #0]
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	f042 0201 	orr.w	r2, r2, #1
 8014516:	601a      	str	r2, [r3, #0]
 8014518:	e000      	b.n	801451c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801451a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801451c:	2300      	movs	r3, #0
}
 801451e:	4618      	mov	r0, r3
 8014520:	3710      	adds	r7, #16
 8014522:	46bd      	mov	sp, r7
 8014524:	bd80      	pop	{r7, pc}
 8014526:	bf00      	nop
 8014528:	40012c00 	.word	0x40012c00
 801452c:	40001000 	.word	0x40001000
 8014530:	40001400 	.word	0x40001400
 8014534:	40014000 	.word	0x40014000
 8014538:	40014400 	.word	0x40014400
 801453c:	0801bb68 	.word	0x0801bb68
 8014540:	00010007 	.word	0x00010007

08014544 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8014544:	b580      	push	{r7, lr}
 8014546:	b082      	sub	sp, #8
 8014548:	af00      	add	r7, sp, #0
 801454a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	691b      	ldr	r3, [r3, #16]
 8014552:	f003 0302 	and.w	r3, r3, #2
 8014556:	2b02      	cmp	r3, #2
 8014558:	d122      	bne.n	80145a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	68db      	ldr	r3, [r3, #12]
 8014560:	f003 0302 	and.w	r3, r3, #2
 8014564:	2b02      	cmp	r3, #2
 8014566:	d11b      	bne.n	80145a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	f06f 0202 	mvn.w	r2, #2
 8014570:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	2201      	movs	r2, #1
 8014576:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	699b      	ldr	r3, [r3, #24]
 801457e:	f003 0303 	and.w	r3, r3, #3
 8014582:	2b00      	cmp	r3, #0
 8014584:	d003      	beq.n	801458e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8014586:	6878      	ldr	r0, [r7, #4]
 8014588:	f7f5 ff30 	bl	800a3ec <HAL_TIM_IC_CaptureCallback>
 801458c:	e005      	b.n	801459a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801458e:	6878      	ldr	r0, [r7, #4]
 8014590:	f000 f8f7 	bl	8014782 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014594:	6878      	ldr	r0, [r7, #4]
 8014596:	f000 f8fe 	bl	8014796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	2200      	movs	r2, #0
 801459e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	691b      	ldr	r3, [r3, #16]
 80145a6:	f003 0304 	and.w	r3, r3, #4
 80145aa:	2b04      	cmp	r3, #4
 80145ac:	d122      	bne.n	80145f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	68db      	ldr	r3, [r3, #12]
 80145b4:	f003 0304 	and.w	r3, r3, #4
 80145b8:	2b04      	cmp	r3, #4
 80145ba:	d11b      	bne.n	80145f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	f06f 0204 	mvn.w	r2, #4
 80145c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	2202      	movs	r2, #2
 80145ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	699b      	ldr	r3, [r3, #24]
 80145d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d003      	beq.n	80145e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80145da:	6878      	ldr	r0, [r7, #4]
 80145dc:	f7f5 ff06 	bl	800a3ec <HAL_TIM_IC_CaptureCallback>
 80145e0:	e005      	b.n	80145ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80145e2:	6878      	ldr	r0, [r7, #4]
 80145e4:	f000 f8cd 	bl	8014782 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80145e8:	6878      	ldr	r0, [r7, #4]
 80145ea:	f000 f8d4 	bl	8014796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	2200      	movs	r2, #0
 80145f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	691b      	ldr	r3, [r3, #16]
 80145fa:	f003 0308 	and.w	r3, r3, #8
 80145fe:	2b08      	cmp	r3, #8
 8014600:	d122      	bne.n	8014648 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	68db      	ldr	r3, [r3, #12]
 8014608:	f003 0308 	and.w	r3, r3, #8
 801460c:	2b08      	cmp	r3, #8
 801460e:	d11b      	bne.n	8014648 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	f06f 0208 	mvn.w	r2, #8
 8014618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	2204      	movs	r2, #4
 801461e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	69db      	ldr	r3, [r3, #28]
 8014626:	f003 0303 	and.w	r3, r3, #3
 801462a:	2b00      	cmp	r3, #0
 801462c:	d003      	beq.n	8014636 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801462e:	6878      	ldr	r0, [r7, #4]
 8014630:	f7f5 fedc 	bl	800a3ec <HAL_TIM_IC_CaptureCallback>
 8014634:	e005      	b.n	8014642 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014636:	6878      	ldr	r0, [r7, #4]
 8014638:	f000 f8a3 	bl	8014782 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801463c:	6878      	ldr	r0, [r7, #4]
 801463e:	f000 f8aa 	bl	8014796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	2200      	movs	r2, #0
 8014646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	691b      	ldr	r3, [r3, #16]
 801464e:	f003 0310 	and.w	r3, r3, #16
 8014652:	2b10      	cmp	r3, #16
 8014654:	d122      	bne.n	801469c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	68db      	ldr	r3, [r3, #12]
 801465c:	f003 0310 	and.w	r3, r3, #16
 8014660:	2b10      	cmp	r3, #16
 8014662:	d11b      	bne.n	801469c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	f06f 0210 	mvn.w	r2, #16
 801466c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	2208      	movs	r2, #8
 8014672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	69db      	ldr	r3, [r3, #28]
 801467a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801467e:	2b00      	cmp	r3, #0
 8014680:	d003      	beq.n	801468a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014682:	6878      	ldr	r0, [r7, #4]
 8014684:	f7f5 feb2 	bl	800a3ec <HAL_TIM_IC_CaptureCallback>
 8014688:	e005      	b.n	8014696 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801468a:	6878      	ldr	r0, [r7, #4]
 801468c:	f000 f879 	bl	8014782 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014690:	6878      	ldr	r0, [r7, #4]
 8014692:	f000 f880 	bl	8014796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	2200      	movs	r2, #0
 801469a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	691b      	ldr	r3, [r3, #16]
 80146a2:	f003 0301 	and.w	r3, r3, #1
 80146a6:	2b01      	cmp	r3, #1
 80146a8:	d10e      	bne.n	80146c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	68db      	ldr	r3, [r3, #12]
 80146b0:	f003 0301 	and.w	r3, r3, #1
 80146b4:	2b01      	cmp	r3, #1
 80146b6:	d107      	bne.n	80146c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	f06f 0201 	mvn.w	r2, #1
 80146c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80146c2:	6878      	ldr	r0, [r7, #4]
 80146c4:	f7f5 fd7e 	bl	800a1c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	691b      	ldr	r3, [r3, #16]
 80146ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80146d2:	2b80      	cmp	r3, #128	; 0x80
 80146d4:	d10e      	bne.n	80146f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	68db      	ldr	r3, [r3, #12]
 80146dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80146e0:	2b80      	cmp	r3, #128	; 0x80
 80146e2:	d107      	bne.n	80146f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80146ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80146ee:	6878      	ldr	r0, [r7, #4]
 80146f0:	f000 f9e8 	bl	8014ac4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	691b      	ldr	r3, [r3, #16]
 80146fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80146fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014702:	d10e      	bne.n	8014722 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	68db      	ldr	r3, [r3, #12]
 801470a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801470e:	2b80      	cmp	r3, #128	; 0x80
 8014710:	d107      	bne.n	8014722 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801471a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801471c:	6878      	ldr	r0, [r7, #4]
 801471e:	f000 f9db 	bl	8014ad8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	691b      	ldr	r3, [r3, #16]
 8014728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801472c:	2b40      	cmp	r3, #64	; 0x40
 801472e:	d10e      	bne.n	801474e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	681b      	ldr	r3, [r3, #0]
 8014734:	68db      	ldr	r3, [r3, #12]
 8014736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801473a:	2b40      	cmp	r3, #64	; 0x40
 801473c:	d107      	bne.n	801474e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8014746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8014748:	6878      	ldr	r0, [r7, #4]
 801474a:	f000 f82e 	bl	80147aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	691b      	ldr	r3, [r3, #16]
 8014754:	f003 0320 	and.w	r3, r3, #32
 8014758:	2b20      	cmp	r3, #32
 801475a:	d10e      	bne.n	801477a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	68db      	ldr	r3, [r3, #12]
 8014762:	f003 0320 	and.w	r3, r3, #32
 8014766:	2b20      	cmp	r3, #32
 8014768:	d107      	bne.n	801477a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	f06f 0220 	mvn.w	r2, #32
 8014772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8014774:	6878      	ldr	r0, [r7, #4]
 8014776:	f000 f99b 	bl	8014ab0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801477a:	bf00      	nop
 801477c:	3708      	adds	r7, #8
 801477e:	46bd      	mov	sp, r7
 8014780:	bd80      	pop	{r7, pc}

08014782 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8014782:	b480      	push	{r7}
 8014784:	b083      	sub	sp, #12
 8014786:	af00      	add	r7, sp, #0
 8014788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801478a:	bf00      	nop
 801478c:	370c      	adds	r7, #12
 801478e:	46bd      	mov	sp, r7
 8014790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014794:	4770      	bx	lr

08014796 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8014796:	b480      	push	{r7}
 8014798:	b083      	sub	sp, #12
 801479a:	af00      	add	r7, sp, #0
 801479c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801479e:	bf00      	nop
 80147a0:	370c      	adds	r7, #12
 80147a2:	46bd      	mov	sp, r7
 80147a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147a8:	4770      	bx	lr

080147aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80147aa:	b480      	push	{r7}
 80147ac:	b083      	sub	sp, #12
 80147ae:	af00      	add	r7, sp, #0
 80147b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80147b2:	bf00      	nop
 80147b4:	370c      	adds	r7, #12
 80147b6:	46bd      	mov	sp, r7
 80147b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147bc:	4770      	bx	lr
	...

080147c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80147c0:	b480      	push	{r7}
 80147c2:	b085      	sub	sp, #20
 80147c4:	af00      	add	r7, sp, #0
 80147c6:	6078      	str	r0, [r7, #4]
 80147c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	4a2a      	ldr	r2, [pc, #168]	; (801487c <TIM_Base_SetConfig+0xbc>)
 80147d4:	4293      	cmp	r3, r2
 80147d6:	d003      	beq.n	80147e0 <TIM_Base_SetConfig+0x20>
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80147de:	d108      	bne.n	80147f2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80147e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80147e8:	683b      	ldr	r3, [r7, #0]
 80147ea:	685b      	ldr	r3, [r3, #4]
 80147ec:	68fa      	ldr	r2, [r7, #12]
 80147ee:	4313      	orrs	r3, r2
 80147f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	4a21      	ldr	r2, [pc, #132]	; (801487c <TIM_Base_SetConfig+0xbc>)
 80147f6:	4293      	cmp	r3, r2
 80147f8:	d00b      	beq.n	8014812 <TIM_Base_SetConfig+0x52>
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014800:	d007      	beq.n	8014812 <TIM_Base_SetConfig+0x52>
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	4a1e      	ldr	r2, [pc, #120]	; (8014880 <TIM_Base_SetConfig+0xc0>)
 8014806:	4293      	cmp	r3, r2
 8014808:	d003      	beq.n	8014812 <TIM_Base_SetConfig+0x52>
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	4a1d      	ldr	r2, [pc, #116]	; (8014884 <TIM_Base_SetConfig+0xc4>)
 801480e:	4293      	cmp	r3, r2
 8014810:	d108      	bne.n	8014824 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801481a:	683b      	ldr	r3, [r7, #0]
 801481c:	68db      	ldr	r3, [r3, #12]
 801481e:	68fa      	ldr	r2, [r7, #12]
 8014820:	4313      	orrs	r3, r2
 8014822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014824:	68fb      	ldr	r3, [r7, #12]
 8014826:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801482a:	683b      	ldr	r3, [r7, #0]
 801482c:	695b      	ldr	r3, [r3, #20]
 801482e:	4313      	orrs	r3, r2
 8014830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	68fa      	ldr	r2, [r7, #12]
 8014836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014838:	683b      	ldr	r3, [r7, #0]
 801483a:	689a      	ldr	r2, [r3, #8]
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014840:	683b      	ldr	r3, [r7, #0]
 8014842:	681a      	ldr	r2, [r3, #0]
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	4a0c      	ldr	r2, [pc, #48]	; (801487c <TIM_Base_SetConfig+0xbc>)
 801484c:	4293      	cmp	r3, r2
 801484e:	d007      	beq.n	8014860 <TIM_Base_SetConfig+0xa0>
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	4a0b      	ldr	r2, [pc, #44]	; (8014880 <TIM_Base_SetConfig+0xc0>)
 8014854:	4293      	cmp	r3, r2
 8014856:	d003      	beq.n	8014860 <TIM_Base_SetConfig+0xa0>
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	4a0a      	ldr	r2, [pc, #40]	; (8014884 <TIM_Base_SetConfig+0xc4>)
 801485c:	4293      	cmp	r3, r2
 801485e:	d103      	bne.n	8014868 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8014860:	683b      	ldr	r3, [r7, #0]
 8014862:	691a      	ldr	r2, [r3, #16]
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	2201      	movs	r2, #1
 801486c:	615a      	str	r2, [r3, #20]
}
 801486e:	bf00      	nop
 8014870:	3714      	adds	r7, #20
 8014872:	46bd      	mov	sp, r7
 8014874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014878:	4770      	bx	lr
 801487a:	bf00      	nop
 801487c:	40012c00 	.word	0x40012c00
 8014880:	40014000 	.word	0x40014000
 8014884:	40014400 	.word	0x40014400

08014888 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8014888:	b580      	push	{r7, lr}
 801488a:	b084      	sub	sp, #16
 801488c:	af00      	add	r7, sp, #0
 801488e:	6078      	str	r0, [r7, #4]
 8014890:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	4a81      	ldr	r2, [pc, #516]	; (8014a9c <HAL_TIMEx_MasterConfigSynchronization+0x214>)
 8014898:	4293      	cmp	r3, r2
 801489a:	d018      	beq.n	80148ce <HAL_TIMEx_MasterConfigSynchronization+0x46>
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80148a4:	d013      	beq.n	80148ce <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	4a7d      	ldr	r2, [pc, #500]	; (8014aa0 <HAL_TIMEx_MasterConfigSynchronization+0x218>)
 80148ac:	4293      	cmp	r3, r2
 80148ae:	d00e      	beq.n	80148ce <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	4a7b      	ldr	r2, [pc, #492]	; (8014aa4 <HAL_TIMEx_MasterConfigSynchronization+0x21c>)
 80148b6:	4293      	cmp	r3, r2
 80148b8:	d009      	beq.n	80148ce <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	4a7a      	ldr	r2, [pc, #488]	; (8014aa8 <HAL_TIMEx_MasterConfigSynchronization+0x220>)
 80148c0:	4293      	cmp	r3, r2
 80148c2:	d004      	beq.n	80148ce <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80148c4:	f240 71b7 	movw	r1, #1975	; 0x7b7
 80148c8:	4878      	ldr	r0, [pc, #480]	; (8014aac <HAL_TIMEx_MasterConfigSynchronization+0x224>)
 80148ca:	f7ef fe5b 	bl	8004584 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80148ce:	683b      	ldr	r3, [r7, #0]
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d020      	beq.n	8014918 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80148d6:	683b      	ldr	r3, [r7, #0]
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	2b10      	cmp	r3, #16
 80148dc:	d01c      	beq.n	8014918 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80148de:	683b      	ldr	r3, [r7, #0]
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	2b20      	cmp	r3, #32
 80148e4:	d018      	beq.n	8014918 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80148e6:	683b      	ldr	r3, [r7, #0]
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	2b30      	cmp	r3, #48	; 0x30
 80148ec:	d014      	beq.n	8014918 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80148ee:	683b      	ldr	r3, [r7, #0]
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	2b40      	cmp	r3, #64	; 0x40
 80148f4:	d010      	beq.n	8014918 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80148f6:	683b      	ldr	r3, [r7, #0]
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	2b50      	cmp	r3, #80	; 0x50
 80148fc:	d00c      	beq.n	8014918 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80148fe:	683b      	ldr	r3, [r7, #0]
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	2b60      	cmp	r3, #96	; 0x60
 8014904:	d008      	beq.n	8014918 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8014906:	683b      	ldr	r3, [r7, #0]
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	2b70      	cmp	r3, #112	; 0x70
 801490c:	d004      	beq.n	8014918 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 801490e:	f44f 61f7 	mov.w	r1, #1976	; 0x7b8
 8014912:	4866      	ldr	r0, [pc, #408]	; (8014aac <HAL_TIMEx_MasterConfigSynchronization+0x224>)
 8014914:	f7ef fe36 	bl	8004584 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8014918:	683b      	ldr	r3, [r7, #0]
 801491a:	689b      	ldr	r3, [r3, #8]
 801491c:	2b80      	cmp	r3, #128	; 0x80
 801491e:	d008      	beq.n	8014932 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8014920:	683b      	ldr	r3, [r7, #0]
 8014922:	689b      	ldr	r3, [r3, #8]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d004      	beq.n	8014932 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8014928:	f240 71b9 	movw	r1, #1977	; 0x7b9
 801492c:	485f      	ldr	r0, [pc, #380]	; (8014aac <HAL_TIMEx_MasterConfigSynchronization+0x224>)
 801492e:	f7ef fe29 	bl	8004584 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014938:	2b01      	cmp	r3, #1
 801493a:	d101      	bne.n	8014940 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 801493c:	2302      	movs	r3, #2
 801493e:	e0a8      	b.n	8014a92 <HAL_TIMEx_MasterConfigSynchronization+0x20a>
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	2201      	movs	r2, #1
 8014944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	2202      	movs	r2, #2
 801494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	685b      	ldr	r3, [r3, #4]
 8014956:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	689b      	ldr	r3, [r3, #8]
 801495e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	4a4d      	ldr	r2, [pc, #308]	; (8014a9c <HAL_TIMEx_MasterConfigSynchronization+0x214>)
 8014966:	4293      	cmp	r3, r2
 8014968:	d161      	bne.n	8014a2e <HAL_TIMEx_MasterConfigSynchronization+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 801496a:	683b      	ldr	r3, [r7, #0]
 801496c:	685b      	ldr	r3, [r3, #4]
 801496e:	2b00      	cmp	r3, #0
 8014970:	d054      	beq.n	8014a1c <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8014972:	683b      	ldr	r3, [r7, #0]
 8014974:	685b      	ldr	r3, [r3, #4]
 8014976:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801497a:	d04f      	beq.n	8014a1c <HAL_TIMEx_MasterConfigSynchronization+0x194>
 801497c:	683b      	ldr	r3, [r7, #0]
 801497e:	685b      	ldr	r3, [r3, #4]
 8014980:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8014984:	d04a      	beq.n	8014a1c <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8014986:	683b      	ldr	r3, [r7, #0]
 8014988:	685b      	ldr	r3, [r3, #4]
 801498a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801498e:	d045      	beq.n	8014a1c <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8014990:	683b      	ldr	r3, [r7, #0]
 8014992:	685b      	ldr	r3, [r3, #4]
 8014994:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014998:	d040      	beq.n	8014a1c <HAL_TIMEx_MasterConfigSynchronization+0x194>
 801499a:	683b      	ldr	r3, [r7, #0]
 801499c:	685b      	ldr	r3, [r3, #4]
 801499e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80149a2:	d03b      	beq.n	8014a1c <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80149a4:	683b      	ldr	r3, [r7, #0]
 80149a6:	685b      	ldr	r3, [r3, #4]
 80149a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80149ac:	d036      	beq.n	8014a1c <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80149ae:	683b      	ldr	r3, [r7, #0]
 80149b0:	685b      	ldr	r3, [r3, #4]
 80149b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80149b6:	d031      	beq.n	8014a1c <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80149b8:	683b      	ldr	r3, [r7, #0]
 80149ba:	685b      	ldr	r3, [r3, #4]
 80149bc:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 80149c0:	d02c      	beq.n	8014a1c <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80149c2:	683b      	ldr	r3, [r7, #0]
 80149c4:	685b      	ldr	r3, [r3, #4]
 80149c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80149ca:	d027      	beq.n	8014a1c <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80149cc:	683b      	ldr	r3, [r7, #0]
 80149ce:	685b      	ldr	r3, [r3, #4]
 80149d0:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 80149d4:	d022      	beq.n	8014a1c <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80149d6:	683b      	ldr	r3, [r7, #0]
 80149d8:	685b      	ldr	r3, [r3, #4]
 80149da:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80149de:	d01d      	beq.n	8014a1c <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80149e0:	683b      	ldr	r3, [r7, #0]
 80149e2:	685b      	ldr	r3, [r3, #4]
 80149e4:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 80149e8:	d018      	beq.n	8014a1c <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80149ea:	683b      	ldr	r3, [r7, #0]
 80149ec:	685b      	ldr	r3, [r3, #4]
 80149ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80149f2:	d013      	beq.n	8014a1c <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80149f4:	683b      	ldr	r3, [r7, #0]
 80149f6:	685b      	ldr	r3, [r3, #4]
 80149f8:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 80149fc:	d00e      	beq.n	8014a1c <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80149fe:	683b      	ldr	r3, [r7, #0]
 8014a00:	685b      	ldr	r3, [r3, #4]
 8014a02:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 8014a06:	d009      	beq.n	8014a1c <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8014a08:	683b      	ldr	r3, [r7, #0]
 8014a0a:	685b      	ldr	r3, [r3, #4]
 8014a0c:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 8014a10:	d004      	beq.n	8014a1c <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8014a12:	f240 71cb 	movw	r1, #1995	; 0x7cb
 8014a16:	4825      	ldr	r0, [pc, #148]	; (8014aac <HAL_TIMEx_MasterConfigSynchronization+0x224>)
 8014a18:	f7ef fdb4 	bl	8004584 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8014a22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8014a24:	683b      	ldr	r3, [r7, #0]
 8014a26:	685b      	ldr	r3, [r3, #4]
 8014a28:	68fa      	ldr	r2, [r7, #12]
 8014a2a:	4313      	orrs	r3, r2
 8014a2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014a34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8014a36:	683b      	ldr	r3, [r7, #0]
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	68fa      	ldr	r2, [r7, #12]
 8014a3c:	4313      	orrs	r3, r2
 8014a3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	68fa      	ldr	r2, [r7, #12]
 8014a46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	4a13      	ldr	r2, [pc, #76]	; (8014a9c <HAL_TIMEx_MasterConfigSynchronization+0x214>)
 8014a4e:	4293      	cmp	r3, r2
 8014a50:	d009      	beq.n	8014a66 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014a5a:	d004      	beq.n	8014a66 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	4a11      	ldr	r2, [pc, #68]	; (8014aa8 <HAL_TIMEx_MasterConfigSynchronization+0x220>)
 8014a62:	4293      	cmp	r3, r2
 8014a64:	d10c      	bne.n	8014a80 <HAL_TIMEx_MasterConfigSynchronization+0x1f8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8014a66:	68bb      	ldr	r3, [r7, #8]
 8014a68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014a6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8014a6e:	683b      	ldr	r3, [r7, #0]
 8014a70:	689b      	ldr	r3, [r3, #8]
 8014a72:	68ba      	ldr	r2, [r7, #8]
 8014a74:	4313      	orrs	r3, r2
 8014a76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	68ba      	ldr	r2, [r7, #8]
 8014a7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	2201      	movs	r2, #1
 8014a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	2200      	movs	r2, #0
 8014a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014a90:	2300      	movs	r3, #0
}
 8014a92:	4618      	mov	r0, r3
 8014a94:	3710      	adds	r7, #16
 8014a96:	46bd      	mov	sp, r7
 8014a98:	bd80      	pop	{r7, pc}
 8014a9a:	bf00      	nop
 8014a9c:	40012c00 	.word	0x40012c00
 8014aa0:	40001000 	.word	0x40001000
 8014aa4:	40001400 	.word	0x40001400
 8014aa8:	40014000 	.word	0x40014000
 8014aac:	0801bba0 	.word	0x0801bba0

08014ab0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8014ab0:	b480      	push	{r7}
 8014ab2:	b083      	sub	sp, #12
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8014ab8:	bf00      	nop
 8014aba:	370c      	adds	r7, #12
 8014abc:	46bd      	mov	sp, r7
 8014abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac2:	4770      	bx	lr

08014ac4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8014ac4:	b480      	push	{r7}
 8014ac6:	b083      	sub	sp, #12
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8014acc:	bf00      	nop
 8014ace:	370c      	adds	r7, #12
 8014ad0:	46bd      	mov	sp, r7
 8014ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ad6:	4770      	bx	lr

08014ad8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8014ad8:	b480      	push	{r7}
 8014ada:	b083      	sub	sp, #12
 8014adc:	af00      	add	r7, sp, #0
 8014ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8014ae0:	bf00      	nop
 8014ae2:	370c      	adds	r7, #12
 8014ae4:	46bd      	mov	sp, r7
 8014ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aea:	4770      	bx	lr

08014aec <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8014aec:	b480      	push	{r7}
 8014aee:	b08b      	sub	sp, #44	; 0x2c
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	60f8      	str	r0, [r7, #12]
 8014af4:	60b9      	str	r1, [r7, #8]
 8014af6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	681a      	ldr	r2, [r3, #0]
 8014afc:	68bb      	ldr	r3, [r7, #8]
 8014afe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014b00:	697b      	ldr	r3, [r7, #20]
 8014b02:	fa93 f3a3 	rbit	r3, r3
 8014b06:	613b      	str	r3, [r7, #16]
  return result;
 8014b08:	693b      	ldr	r3, [r7, #16]
 8014b0a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8014b0c:	69bb      	ldr	r3, [r7, #24]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d101      	bne.n	8014b16 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8014b12:	2320      	movs	r3, #32
 8014b14:	e003      	b.n	8014b1e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8014b16:	69bb      	ldr	r3, [r7, #24]
 8014b18:	fab3 f383 	clz	r3, r3
 8014b1c:	b2db      	uxtb	r3, r3
 8014b1e:	005b      	lsls	r3, r3, #1
 8014b20:	2103      	movs	r1, #3
 8014b22:	fa01 f303 	lsl.w	r3, r1, r3
 8014b26:	43db      	mvns	r3, r3
 8014b28:	401a      	ands	r2, r3
 8014b2a:	68bb      	ldr	r3, [r7, #8]
 8014b2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014b2e:	6a3b      	ldr	r3, [r7, #32]
 8014b30:	fa93 f3a3 	rbit	r3, r3
 8014b34:	61fb      	str	r3, [r7, #28]
  return result;
 8014b36:	69fb      	ldr	r3, [r7, #28]
 8014b38:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8014b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d101      	bne.n	8014b44 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8014b40:	2320      	movs	r3, #32
 8014b42:	e003      	b.n	8014b4c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8014b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b46:	fab3 f383 	clz	r3, r3
 8014b4a:	b2db      	uxtb	r3, r3
 8014b4c:	005b      	lsls	r3, r3, #1
 8014b4e:	6879      	ldr	r1, [r7, #4]
 8014b50:	fa01 f303 	lsl.w	r3, r1, r3
 8014b54:	431a      	orrs	r2, r3
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	601a      	str	r2, [r3, #0]
}
 8014b5a:	bf00      	nop
 8014b5c:	372c      	adds	r7, #44	; 0x2c
 8014b5e:	46bd      	mov	sp, r7
 8014b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b64:	4770      	bx	lr

08014b66 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8014b66:	b480      	push	{r7}
 8014b68:	b085      	sub	sp, #20
 8014b6a:	af00      	add	r7, sp, #0
 8014b6c:	60f8      	str	r0, [r7, #12]
 8014b6e:	60b9      	str	r1, [r7, #8]
 8014b70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	685a      	ldr	r2, [r3, #4]
 8014b76:	68bb      	ldr	r3, [r7, #8]
 8014b78:	43db      	mvns	r3, r3
 8014b7a:	401a      	ands	r2, r3
 8014b7c:	68bb      	ldr	r3, [r7, #8]
 8014b7e:	6879      	ldr	r1, [r7, #4]
 8014b80:	fb01 f303 	mul.w	r3, r1, r3
 8014b84:	431a      	orrs	r2, r3
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	605a      	str	r2, [r3, #4]
}
 8014b8a:	bf00      	nop
 8014b8c:	3714      	adds	r7, #20
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b94:	4770      	bx	lr

08014b96 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8014b96:	b480      	push	{r7}
 8014b98:	b08b      	sub	sp, #44	; 0x2c
 8014b9a:	af00      	add	r7, sp, #0
 8014b9c:	60f8      	str	r0, [r7, #12]
 8014b9e:	60b9      	str	r1, [r7, #8]
 8014ba0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	689a      	ldr	r2, [r3, #8]
 8014ba6:	68bb      	ldr	r3, [r7, #8]
 8014ba8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014baa:	697b      	ldr	r3, [r7, #20]
 8014bac:	fa93 f3a3 	rbit	r3, r3
 8014bb0:	613b      	str	r3, [r7, #16]
  return result;
 8014bb2:	693b      	ldr	r3, [r7, #16]
 8014bb4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8014bb6:	69bb      	ldr	r3, [r7, #24]
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d101      	bne.n	8014bc0 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8014bbc:	2320      	movs	r3, #32
 8014bbe:	e003      	b.n	8014bc8 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8014bc0:	69bb      	ldr	r3, [r7, #24]
 8014bc2:	fab3 f383 	clz	r3, r3
 8014bc6:	b2db      	uxtb	r3, r3
 8014bc8:	005b      	lsls	r3, r3, #1
 8014bca:	2103      	movs	r1, #3
 8014bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8014bd0:	43db      	mvns	r3, r3
 8014bd2:	401a      	ands	r2, r3
 8014bd4:	68bb      	ldr	r3, [r7, #8]
 8014bd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014bd8:	6a3b      	ldr	r3, [r7, #32]
 8014bda:	fa93 f3a3 	rbit	r3, r3
 8014bde:	61fb      	str	r3, [r7, #28]
  return result;
 8014be0:	69fb      	ldr	r3, [r7, #28]
 8014be2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8014be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d101      	bne.n	8014bee <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8014bea:	2320      	movs	r3, #32
 8014bec:	e003      	b.n	8014bf6 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8014bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bf0:	fab3 f383 	clz	r3, r3
 8014bf4:	b2db      	uxtb	r3, r3
 8014bf6:	005b      	lsls	r3, r3, #1
 8014bf8:	6879      	ldr	r1, [r7, #4]
 8014bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8014bfe:	431a      	orrs	r2, r3
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8014c04:	bf00      	nop
 8014c06:	372c      	adds	r7, #44	; 0x2c
 8014c08:	46bd      	mov	sp, r7
 8014c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c0e:	4770      	bx	lr

08014c10 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8014c10:	b480      	push	{r7}
 8014c12:	b08b      	sub	sp, #44	; 0x2c
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	60f8      	str	r0, [r7, #12]
 8014c18:	60b9      	str	r1, [r7, #8]
 8014c1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8014c1c:	68fb      	ldr	r3, [r7, #12]
 8014c1e:	68da      	ldr	r2, [r3, #12]
 8014c20:	68bb      	ldr	r3, [r7, #8]
 8014c22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014c24:	697b      	ldr	r3, [r7, #20]
 8014c26:	fa93 f3a3 	rbit	r3, r3
 8014c2a:	613b      	str	r3, [r7, #16]
  return result;
 8014c2c:	693b      	ldr	r3, [r7, #16]
 8014c2e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8014c30:	69bb      	ldr	r3, [r7, #24]
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d101      	bne.n	8014c3a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8014c36:	2320      	movs	r3, #32
 8014c38:	e003      	b.n	8014c42 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8014c3a:	69bb      	ldr	r3, [r7, #24]
 8014c3c:	fab3 f383 	clz	r3, r3
 8014c40:	b2db      	uxtb	r3, r3
 8014c42:	005b      	lsls	r3, r3, #1
 8014c44:	2103      	movs	r1, #3
 8014c46:	fa01 f303 	lsl.w	r3, r1, r3
 8014c4a:	43db      	mvns	r3, r3
 8014c4c:	401a      	ands	r2, r3
 8014c4e:	68bb      	ldr	r3, [r7, #8]
 8014c50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014c52:	6a3b      	ldr	r3, [r7, #32]
 8014c54:	fa93 f3a3 	rbit	r3, r3
 8014c58:	61fb      	str	r3, [r7, #28]
  return result;
 8014c5a:	69fb      	ldr	r3, [r7, #28]
 8014c5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8014c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d101      	bne.n	8014c68 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8014c64:	2320      	movs	r3, #32
 8014c66:	e003      	b.n	8014c70 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8014c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c6a:	fab3 f383 	clz	r3, r3
 8014c6e:	b2db      	uxtb	r3, r3
 8014c70:	005b      	lsls	r3, r3, #1
 8014c72:	6879      	ldr	r1, [r7, #4]
 8014c74:	fa01 f303 	lsl.w	r3, r1, r3
 8014c78:	431a      	orrs	r2, r3
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	60da      	str	r2, [r3, #12]
}
 8014c7e:	bf00      	nop
 8014c80:	372c      	adds	r7, #44	; 0x2c
 8014c82:	46bd      	mov	sp, r7
 8014c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c88:	4770      	bx	lr

08014c8a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8014c8a:	b480      	push	{r7}
 8014c8c:	b08b      	sub	sp, #44	; 0x2c
 8014c8e:	af00      	add	r7, sp, #0
 8014c90:	60f8      	str	r0, [r7, #12]
 8014c92:	60b9      	str	r1, [r7, #8]
 8014c94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	6a1a      	ldr	r2, [r3, #32]
 8014c9a:	68bb      	ldr	r3, [r7, #8]
 8014c9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014c9e:	697b      	ldr	r3, [r7, #20]
 8014ca0:	fa93 f3a3 	rbit	r3, r3
 8014ca4:	613b      	str	r3, [r7, #16]
  return result;
 8014ca6:	693b      	ldr	r3, [r7, #16]
 8014ca8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8014caa:	69bb      	ldr	r3, [r7, #24]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d101      	bne.n	8014cb4 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8014cb0:	2320      	movs	r3, #32
 8014cb2:	e003      	b.n	8014cbc <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8014cb4:	69bb      	ldr	r3, [r7, #24]
 8014cb6:	fab3 f383 	clz	r3, r3
 8014cba:	b2db      	uxtb	r3, r3
 8014cbc:	009b      	lsls	r3, r3, #2
 8014cbe:	210f      	movs	r1, #15
 8014cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8014cc4:	43db      	mvns	r3, r3
 8014cc6:	401a      	ands	r2, r3
 8014cc8:	68bb      	ldr	r3, [r7, #8]
 8014cca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014ccc:	6a3b      	ldr	r3, [r7, #32]
 8014cce:	fa93 f3a3 	rbit	r3, r3
 8014cd2:	61fb      	str	r3, [r7, #28]
  return result;
 8014cd4:	69fb      	ldr	r3, [r7, #28]
 8014cd6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8014cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d101      	bne.n	8014ce2 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8014cde:	2320      	movs	r3, #32
 8014ce0:	e003      	b.n	8014cea <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8014ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ce4:	fab3 f383 	clz	r3, r3
 8014ce8:	b2db      	uxtb	r3, r3
 8014cea:	009b      	lsls	r3, r3, #2
 8014cec:	6879      	ldr	r1, [r7, #4]
 8014cee:	fa01 f303 	lsl.w	r3, r1, r3
 8014cf2:	431a      	orrs	r2, r3
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8014cf8:	bf00      	nop
 8014cfa:	372c      	adds	r7, #44	; 0x2c
 8014cfc:	46bd      	mov	sp, r7
 8014cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d02:	4770      	bx	lr

08014d04 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8014d04:	b480      	push	{r7}
 8014d06:	b08b      	sub	sp, #44	; 0x2c
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	60f8      	str	r0, [r7, #12]
 8014d0c:	60b9      	str	r1, [r7, #8]
 8014d0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014d14:	68bb      	ldr	r3, [r7, #8]
 8014d16:	0a1b      	lsrs	r3, r3, #8
 8014d18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014d1a:	697b      	ldr	r3, [r7, #20]
 8014d1c:	fa93 f3a3 	rbit	r3, r3
 8014d20:	613b      	str	r3, [r7, #16]
  return result;
 8014d22:	693b      	ldr	r3, [r7, #16]
 8014d24:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8014d26:	69bb      	ldr	r3, [r7, #24]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d101      	bne.n	8014d30 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8014d2c:	2320      	movs	r3, #32
 8014d2e:	e003      	b.n	8014d38 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8014d30:	69bb      	ldr	r3, [r7, #24]
 8014d32:	fab3 f383 	clz	r3, r3
 8014d36:	b2db      	uxtb	r3, r3
 8014d38:	009b      	lsls	r3, r3, #2
 8014d3a:	210f      	movs	r1, #15
 8014d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8014d40:	43db      	mvns	r3, r3
 8014d42:	401a      	ands	r2, r3
 8014d44:	68bb      	ldr	r3, [r7, #8]
 8014d46:	0a1b      	lsrs	r3, r3, #8
 8014d48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014d4a:	6a3b      	ldr	r3, [r7, #32]
 8014d4c:	fa93 f3a3 	rbit	r3, r3
 8014d50:	61fb      	str	r3, [r7, #28]
  return result;
 8014d52:	69fb      	ldr	r3, [r7, #28]
 8014d54:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8014d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d101      	bne.n	8014d60 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8014d5c:	2320      	movs	r3, #32
 8014d5e:	e003      	b.n	8014d68 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8014d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d62:	fab3 f383 	clz	r3, r3
 8014d66:	b2db      	uxtb	r3, r3
 8014d68:	009b      	lsls	r3, r3, #2
 8014d6a:	6879      	ldr	r1, [r7, #4]
 8014d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8014d70:	431a      	orrs	r2, r3
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8014d76:	bf00      	nop
 8014d78:	372c      	adds	r7, #44	; 0x2c
 8014d7a:	46bd      	mov	sp, r7
 8014d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d80:	4770      	bx	lr
	...

08014d84 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8014d84:	b580      	push	{r7, lr}
 8014d86:	b088      	sub	sp, #32
 8014d88:	af00      	add	r7, sp, #0
 8014d8a:	6078      	str	r0, [r7, #4]
 8014d8c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos;
  uint32_t currentpin;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8014d94:	d017      	beq.n	8014dc6 <LL_GPIO_Init+0x42>
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	4a8b      	ldr	r2, [pc, #556]	; (8014fc8 <LL_GPIO_Init+0x244>)
 8014d9a:	4293      	cmp	r3, r2
 8014d9c:	d013      	beq.n	8014dc6 <LL_GPIO_Init+0x42>
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	4a8a      	ldr	r2, [pc, #552]	; (8014fcc <LL_GPIO_Init+0x248>)
 8014da2:	4293      	cmp	r3, r2
 8014da4:	d00f      	beq.n	8014dc6 <LL_GPIO_Init+0x42>
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	4a89      	ldr	r2, [pc, #548]	; (8014fd0 <LL_GPIO_Init+0x24c>)
 8014daa:	4293      	cmp	r3, r2
 8014dac:	d00b      	beq.n	8014dc6 <LL_GPIO_Init+0x42>
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	4a88      	ldr	r2, [pc, #544]	; (8014fd4 <LL_GPIO_Init+0x250>)
 8014db2:	4293      	cmp	r3, r2
 8014db4:	d007      	beq.n	8014dc6 <LL_GPIO_Init+0x42>
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	4a87      	ldr	r2, [pc, #540]	; (8014fd8 <LL_GPIO_Init+0x254>)
 8014dba:	4293      	cmp	r3, r2
 8014dbc:	d003      	beq.n	8014dc6 <LL_GPIO_Init+0x42>
 8014dbe:	21c4      	movs	r1, #196	; 0xc4
 8014dc0:	4886      	ldr	r0, [pc, #536]	; (8014fdc <LL_GPIO_Init+0x258>)
 8014dc2:	f7ef fbdf 	bl	8004584 <assert_failed>
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));
 8014dc6:	683b      	ldr	r3, [r7, #0]
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d004      	beq.n	8014dd8 <LL_GPIO_Init+0x54>
 8014dce:	683b      	ldr	r3, [r7, #0]
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014dd6:	d303      	bcc.n	8014de0 <LL_GPIO_Init+0x5c>
 8014dd8:	21c5      	movs	r1, #197	; 0xc5
 8014dda:	4880      	ldr	r0, [pc, #512]	; (8014fdc <LL_GPIO_Init+0x258>)
 8014ddc:	f7ef fbd2 	bl	8004584 <assert_failed>
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
 8014de0:	683b      	ldr	r3, [r7, #0]
 8014de2:	685b      	ldr	r3, [r3, #4]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d00f      	beq.n	8014e08 <LL_GPIO_Init+0x84>
 8014de8:	683b      	ldr	r3, [r7, #0]
 8014dea:	685b      	ldr	r3, [r3, #4]
 8014dec:	2b01      	cmp	r3, #1
 8014dee:	d00b      	beq.n	8014e08 <LL_GPIO_Init+0x84>
 8014df0:	683b      	ldr	r3, [r7, #0]
 8014df2:	685b      	ldr	r3, [r3, #4]
 8014df4:	2b02      	cmp	r3, #2
 8014df6:	d007      	beq.n	8014e08 <LL_GPIO_Init+0x84>
 8014df8:	683b      	ldr	r3, [r7, #0]
 8014dfa:	685b      	ldr	r3, [r3, #4]
 8014dfc:	2b03      	cmp	r3, #3
 8014dfe:	d003      	beq.n	8014e08 <LL_GPIO_Init+0x84>
 8014e00:	21c6      	movs	r1, #198	; 0xc6
 8014e02:	4876      	ldr	r0, [pc, #472]	; (8014fdc <LL_GPIO_Init+0x258>)
 8014e04:	f7ef fbbe 	bl	8004584 <assert_failed>
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));
 8014e08:	683b      	ldr	r3, [r7, #0]
 8014e0a:	691b      	ldr	r3, [r3, #16]
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d00b      	beq.n	8014e28 <LL_GPIO_Init+0xa4>
 8014e10:	683b      	ldr	r3, [r7, #0]
 8014e12:	691b      	ldr	r3, [r3, #16]
 8014e14:	2b01      	cmp	r3, #1
 8014e16:	d007      	beq.n	8014e28 <LL_GPIO_Init+0xa4>
 8014e18:	683b      	ldr	r3, [r7, #0]
 8014e1a:	691b      	ldr	r3, [r3, #16]
 8014e1c:	2b02      	cmp	r3, #2
 8014e1e:	d003      	beq.n	8014e28 <LL_GPIO_Init+0xa4>
 8014e20:	21c7      	movs	r1, #199	; 0xc7
 8014e22:	486e      	ldr	r0, [pc, #440]	; (8014fdc <LL_GPIO_Init+0x258>)
 8014e24:	f7ef fbae 	bl	8004584 <assert_failed>

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8014e28:	683b      	ldr	r3, [r7, #0]
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014e2e:	693b      	ldr	r3, [r7, #16]
 8014e30:	fa93 f3a3 	rbit	r3, r3
 8014e34:	60fb      	str	r3, [r7, #12]
  return result;
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8014e3a:	697b      	ldr	r3, [r7, #20]
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d101      	bne.n	8014e44 <LL_GPIO_Init+0xc0>
    return 32U;
 8014e40:	2320      	movs	r3, #32
 8014e42:	e003      	b.n	8014e4c <LL_GPIO_Init+0xc8>
  return __builtin_clz(value);
 8014e44:	697b      	ldr	r3, [r7, #20]
 8014e46:	fab3 f383 	clz	r3, r3
 8014e4a:	b2db      	uxtb	r3, r3
 8014e4c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8014e4e:	e0ad      	b.n	8014fac <LL_GPIO_Init+0x228>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8014e50:	683b      	ldr	r3, [r7, #0]
 8014e52:	681a      	ldr	r2, [r3, #0]
 8014e54:	2101      	movs	r1, #1
 8014e56:	69fb      	ldr	r3, [r7, #28]
 8014e58:	fa01 f303 	lsl.w	r3, r1, r3
 8014e5c:	4013      	ands	r3, r2
 8014e5e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8014e60:	69bb      	ldr	r3, [r7, #24]
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	f000 809f 	beq.w	8014fa6 <LL_GPIO_Init+0x222>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8014e68:	683b      	ldr	r3, [r7, #0]
 8014e6a:	685b      	ldr	r3, [r3, #4]
 8014e6c:	2b01      	cmp	r3, #1
 8014e6e:	d003      	beq.n	8014e78 <LL_GPIO_Init+0xf4>
 8014e70:	683b      	ldr	r3, [r7, #0]
 8014e72:	685b      	ldr	r3, [r3, #4]
 8014e74:	2b02      	cmp	r3, #2
 8014e76:	d12e      	bne.n	8014ed6 <LL_GPIO_Init+0x152>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
 8014e78:	683b      	ldr	r3, [r7, #0]
 8014e7a:	689b      	ldr	r3, [r3, #8]
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d00f      	beq.n	8014ea0 <LL_GPIO_Init+0x11c>
 8014e80:	683b      	ldr	r3, [r7, #0]
 8014e82:	689b      	ldr	r3, [r3, #8]
 8014e84:	2b01      	cmp	r3, #1
 8014e86:	d00b      	beq.n	8014ea0 <LL_GPIO_Init+0x11c>
 8014e88:	683b      	ldr	r3, [r7, #0]
 8014e8a:	689b      	ldr	r3, [r3, #8]
 8014e8c:	2b02      	cmp	r3, #2
 8014e8e:	d007      	beq.n	8014ea0 <LL_GPIO_Init+0x11c>
 8014e90:	683b      	ldr	r3, [r7, #0]
 8014e92:	689b      	ldr	r3, [r3, #8]
 8014e94:	2b03      	cmp	r3, #3
 8014e96:	d003      	beq.n	8014ea0 <LL_GPIO_Init+0x11c>
 8014e98:	21d8      	movs	r1, #216	; 0xd8
 8014e9a:	4850      	ldr	r0, [pc, #320]	; (8014fdc <LL_GPIO_Init+0x258>)
 8014e9c:	f7ef fb72 	bl	8004584 <assert_failed>

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8014ea0:	683b      	ldr	r3, [r7, #0]
 8014ea2:	689b      	ldr	r3, [r3, #8]
 8014ea4:	461a      	mov	r2, r3
 8014ea6:	69b9      	ldr	r1, [r7, #24]
 8014ea8:	6878      	ldr	r0, [r7, #4]
 8014eaa:	f7ff fe74 	bl	8014b96 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
 8014eae:	683b      	ldr	r3, [r7, #0]
 8014eb0:	68db      	ldr	r3, [r3, #12]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d007      	beq.n	8014ec6 <LL_GPIO_Init+0x142>
 8014eb6:	683b      	ldr	r3, [r7, #0]
 8014eb8:	68db      	ldr	r3, [r3, #12]
 8014eba:	2b01      	cmp	r3, #1
 8014ebc:	d003      	beq.n	8014ec6 <LL_GPIO_Init+0x142>
 8014ebe:	21de      	movs	r1, #222	; 0xde
 8014ec0:	4846      	ldr	r0, [pc, #280]	; (8014fdc <LL_GPIO_Init+0x258>)
 8014ec2:	f7ef fb5f 	bl	8004584 <assert_failed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8014ec6:	683b      	ldr	r3, [r7, #0]
 8014ec8:	6819      	ldr	r1, [r3, #0]
 8014eca:	683b      	ldr	r3, [r7, #0]
 8014ecc:	68db      	ldr	r3, [r3, #12]
 8014ece:	461a      	mov	r2, r3
 8014ed0:	6878      	ldr	r0, [r7, #4]
 8014ed2:	f7ff fe48 	bl	8014b66 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8014ed6:	683b      	ldr	r3, [r7, #0]
 8014ed8:	691b      	ldr	r3, [r3, #16]
 8014eda:	461a      	mov	r2, r3
 8014edc:	69b9      	ldr	r1, [r7, #24]
 8014ede:	6878      	ldr	r0, [r7, #4]
 8014ee0:	f7ff fe96 	bl	8014c10 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8014ee4:	683b      	ldr	r3, [r7, #0]
 8014ee6:	685b      	ldr	r3, [r3, #4]
 8014ee8:	2b02      	cmp	r3, #2
 8014eea:	d155      	bne.n	8014f98 <LL_GPIO_Init+0x214>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
 8014eec:	683b      	ldr	r3, [r7, #0]
 8014eee:	695b      	ldr	r3, [r3, #20]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d03f      	beq.n	8014f74 <LL_GPIO_Init+0x1f0>
 8014ef4:	683b      	ldr	r3, [r7, #0]
 8014ef6:	695b      	ldr	r3, [r3, #20]
 8014ef8:	2b01      	cmp	r3, #1
 8014efa:	d03b      	beq.n	8014f74 <LL_GPIO_Init+0x1f0>
 8014efc:	683b      	ldr	r3, [r7, #0]
 8014efe:	695b      	ldr	r3, [r3, #20]
 8014f00:	2b02      	cmp	r3, #2
 8014f02:	d037      	beq.n	8014f74 <LL_GPIO_Init+0x1f0>
 8014f04:	683b      	ldr	r3, [r7, #0]
 8014f06:	695b      	ldr	r3, [r3, #20]
 8014f08:	2b03      	cmp	r3, #3
 8014f0a:	d033      	beq.n	8014f74 <LL_GPIO_Init+0x1f0>
 8014f0c:	683b      	ldr	r3, [r7, #0]
 8014f0e:	695b      	ldr	r3, [r3, #20]
 8014f10:	2b04      	cmp	r3, #4
 8014f12:	d02f      	beq.n	8014f74 <LL_GPIO_Init+0x1f0>
 8014f14:	683b      	ldr	r3, [r7, #0]
 8014f16:	695b      	ldr	r3, [r3, #20]
 8014f18:	2b05      	cmp	r3, #5
 8014f1a:	d02b      	beq.n	8014f74 <LL_GPIO_Init+0x1f0>
 8014f1c:	683b      	ldr	r3, [r7, #0]
 8014f1e:	695b      	ldr	r3, [r3, #20]
 8014f20:	2b06      	cmp	r3, #6
 8014f22:	d027      	beq.n	8014f74 <LL_GPIO_Init+0x1f0>
 8014f24:	683b      	ldr	r3, [r7, #0]
 8014f26:	695b      	ldr	r3, [r3, #20]
 8014f28:	2b07      	cmp	r3, #7
 8014f2a:	d023      	beq.n	8014f74 <LL_GPIO_Init+0x1f0>
 8014f2c:	683b      	ldr	r3, [r7, #0]
 8014f2e:	695b      	ldr	r3, [r3, #20]
 8014f30:	2b08      	cmp	r3, #8
 8014f32:	d01f      	beq.n	8014f74 <LL_GPIO_Init+0x1f0>
 8014f34:	683b      	ldr	r3, [r7, #0]
 8014f36:	695b      	ldr	r3, [r3, #20]
 8014f38:	2b09      	cmp	r3, #9
 8014f3a:	d01b      	beq.n	8014f74 <LL_GPIO_Init+0x1f0>
 8014f3c:	683b      	ldr	r3, [r7, #0]
 8014f3e:	695b      	ldr	r3, [r3, #20]
 8014f40:	2b0a      	cmp	r3, #10
 8014f42:	d017      	beq.n	8014f74 <LL_GPIO_Init+0x1f0>
 8014f44:	683b      	ldr	r3, [r7, #0]
 8014f46:	695b      	ldr	r3, [r3, #20]
 8014f48:	2b0b      	cmp	r3, #11
 8014f4a:	d013      	beq.n	8014f74 <LL_GPIO_Init+0x1f0>
 8014f4c:	683b      	ldr	r3, [r7, #0]
 8014f4e:	695b      	ldr	r3, [r3, #20]
 8014f50:	2b0c      	cmp	r3, #12
 8014f52:	d00f      	beq.n	8014f74 <LL_GPIO_Init+0x1f0>
 8014f54:	683b      	ldr	r3, [r7, #0]
 8014f56:	695b      	ldr	r3, [r3, #20]
 8014f58:	2b0d      	cmp	r3, #13
 8014f5a:	d00b      	beq.n	8014f74 <LL_GPIO_Init+0x1f0>
 8014f5c:	683b      	ldr	r3, [r7, #0]
 8014f5e:	695b      	ldr	r3, [r3, #20]
 8014f60:	2b0e      	cmp	r3, #14
 8014f62:	d007      	beq.n	8014f74 <LL_GPIO_Init+0x1f0>
 8014f64:	683b      	ldr	r3, [r7, #0]
 8014f66:	695b      	ldr	r3, [r3, #20]
 8014f68:	2b0f      	cmp	r3, #15
 8014f6a:	d003      	beq.n	8014f74 <LL_GPIO_Init+0x1f0>
 8014f6c:	21ea      	movs	r1, #234	; 0xea
 8014f6e:	481b      	ldr	r0, [pc, #108]	; (8014fdc <LL_GPIO_Init+0x258>)
 8014f70:	f7ef fb08 	bl	8004584 <assert_failed>

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8014f74:	69bb      	ldr	r3, [r7, #24]
 8014f76:	2bff      	cmp	r3, #255	; 0xff
 8014f78:	d807      	bhi.n	8014f8a <LL_GPIO_Init+0x206>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8014f7a:	683b      	ldr	r3, [r7, #0]
 8014f7c:	695b      	ldr	r3, [r3, #20]
 8014f7e:	461a      	mov	r2, r3
 8014f80:	69b9      	ldr	r1, [r7, #24]
 8014f82:	6878      	ldr	r0, [r7, #4]
 8014f84:	f7ff fe81 	bl	8014c8a <LL_GPIO_SetAFPin_0_7>
 8014f88:	e006      	b.n	8014f98 <LL_GPIO_Init+0x214>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8014f8a:	683b      	ldr	r3, [r7, #0]
 8014f8c:	695b      	ldr	r3, [r3, #20]
 8014f8e:	461a      	mov	r2, r3
 8014f90:	69b9      	ldr	r1, [r7, #24]
 8014f92:	6878      	ldr	r0, [r7, #4]
 8014f94:	f7ff feb6 	bl	8014d04 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8014f98:	683b      	ldr	r3, [r7, #0]
 8014f9a:	685b      	ldr	r3, [r3, #4]
 8014f9c:	461a      	mov	r2, r3
 8014f9e:	69b9      	ldr	r1, [r7, #24]
 8014fa0:	6878      	ldr	r0, [r7, #4]
 8014fa2:	f7ff fda3 	bl	8014aec <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8014fa6:	69fb      	ldr	r3, [r7, #28]
 8014fa8:	3301      	adds	r3, #1
 8014faa:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8014fac:	683b      	ldr	r3, [r7, #0]
 8014fae:	681a      	ldr	r2, [r3, #0]
 8014fb0:	69fb      	ldr	r3, [r7, #28]
 8014fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	f47f af4a 	bne.w	8014e50 <LL_GPIO_Init+0xcc>
  }

  return (SUCCESS);
 8014fbc:	2300      	movs	r3, #0
}
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	3720      	adds	r7, #32
 8014fc2:	46bd      	mov	sp, r7
 8014fc4:	bd80      	pop	{r7, pc}
 8014fc6:	bf00      	nop
 8014fc8:	48000400 	.word	0x48000400
 8014fcc:	48000800 	.word	0x48000800
 8014fd0:	48000c00 	.word	0x48000c00
 8014fd4:	48001000 	.word	0x48001000
 8014fd8:	48001c00 	.word	0x48001c00
 8014fdc:	0801bbdc 	.word	0x0801bbdc

08014fe0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8014fe0:	b480      	push	{r7}
 8014fe2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8014fe4:	4b07      	ldr	r3, [pc, #28]	; (8015004 <LL_RCC_HSI_IsReady+0x24>)
 8014fe6:	681b      	ldr	r3, [r3, #0]
 8014fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014ff0:	d101      	bne.n	8014ff6 <LL_RCC_HSI_IsReady+0x16>
 8014ff2:	2301      	movs	r3, #1
 8014ff4:	e000      	b.n	8014ff8 <LL_RCC_HSI_IsReady+0x18>
 8014ff6:	2300      	movs	r3, #0
}
 8014ff8:	4618      	mov	r0, r3
 8014ffa:	46bd      	mov	sp, r7
 8014ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015000:	4770      	bx	lr
 8015002:	bf00      	nop
 8015004:	40021000 	.word	0x40021000

08015008 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8015008:	b480      	push	{r7}
 801500a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 801500c:	4b07      	ldr	r3, [pc, #28]	; (801502c <LL_RCC_LSE_IsReady+0x24>)
 801500e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015012:	f003 0302 	and.w	r3, r3, #2
 8015016:	2b02      	cmp	r3, #2
 8015018:	d101      	bne.n	801501e <LL_RCC_LSE_IsReady+0x16>
 801501a:	2301      	movs	r3, #1
 801501c:	e000      	b.n	8015020 <LL_RCC_LSE_IsReady+0x18>
 801501e:	2300      	movs	r3, #0
}
 8015020:	4618      	mov	r0, r3
 8015022:	46bd      	mov	sp, r7
 8015024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015028:	4770      	bx	lr
 801502a:	bf00      	nop
 801502c:	40021000 	.word	0x40021000

08015030 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8015030:	b480      	push	{r7}
 8015032:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8015034:	4b06      	ldr	r3, [pc, #24]	; (8015050 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	f003 0308 	and.w	r3, r3, #8
 801503c:	2b08      	cmp	r3, #8
 801503e:	d101      	bne.n	8015044 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8015040:	2301      	movs	r3, #1
 8015042:	e000      	b.n	8015046 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8015044:	2300      	movs	r3, #0
}
 8015046:	4618      	mov	r0, r3
 8015048:	46bd      	mov	sp, r7
 801504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801504e:	4770      	bx	lr
 8015050:	40021000 	.word	0x40021000

08015054 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8015054:	b480      	push	{r7}
 8015056:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8015058:	4b04      	ldr	r3, [pc, #16]	; (801506c <LL_RCC_MSI_GetRange+0x18>)
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8015060:	4618      	mov	r0, r3
 8015062:	46bd      	mov	sp, r7
 8015064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015068:	4770      	bx	lr
 801506a:	bf00      	nop
 801506c:	40021000 	.word	0x40021000

08015070 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8015070:	b480      	push	{r7}
 8015072:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8015074:	4b04      	ldr	r3, [pc, #16]	; (8015088 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8015076:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801507a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 801507e:	4618      	mov	r0, r3
 8015080:	46bd      	mov	sp, r7
 8015082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015086:	4770      	bx	lr
 8015088:	40021000 	.word	0x40021000

0801508c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 801508c:	b480      	push	{r7}
 801508e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8015090:	4b04      	ldr	r3, [pc, #16]	; (80150a4 <LL_RCC_GetSysClkSource+0x18>)
 8015092:	689b      	ldr	r3, [r3, #8]
 8015094:	f003 030c 	and.w	r3, r3, #12
}
 8015098:	4618      	mov	r0, r3
 801509a:	46bd      	mov	sp, r7
 801509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150a0:	4770      	bx	lr
 80150a2:	bf00      	nop
 80150a4:	40021000 	.word	0x40021000

080150a8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80150a8:	b480      	push	{r7}
 80150aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80150ac:	4b04      	ldr	r3, [pc, #16]	; (80150c0 <LL_RCC_GetAHBPrescaler+0x18>)
 80150ae:	689b      	ldr	r3, [r3, #8]
 80150b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80150b4:	4618      	mov	r0, r3
 80150b6:	46bd      	mov	sp, r7
 80150b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150bc:	4770      	bx	lr
 80150be:	bf00      	nop
 80150c0:	40021000 	.word	0x40021000

080150c4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80150c4:	b480      	push	{r7}
 80150c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80150c8:	4b04      	ldr	r3, [pc, #16]	; (80150dc <LL_RCC_GetAPB1Prescaler+0x18>)
 80150ca:	689b      	ldr	r3, [r3, #8]
 80150cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80150d0:	4618      	mov	r0, r3
 80150d2:	46bd      	mov	sp, r7
 80150d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d8:	4770      	bx	lr
 80150da:	bf00      	nop
 80150dc:	40021000 	.word	0x40021000

080150e0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80150e0:	b480      	push	{r7}
 80150e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80150e4:	4b04      	ldr	r3, [pc, #16]	; (80150f8 <LL_RCC_GetAPB2Prescaler+0x18>)
 80150e6:	689b      	ldr	r3, [r3, #8]
 80150e8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80150ec:	4618      	mov	r0, r3
 80150ee:	46bd      	mov	sp, r7
 80150f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150f4:	4770      	bx	lr
 80150f6:	bf00      	nop
 80150f8:	40021000 	.word	0x40021000

080150fc <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80150fc:	b480      	push	{r7}
 80150fe:	b083      	sub	sp, #12
 8015100:	af00      	add	r7, sp, #0
 8015102:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8015104:	4b06      	ldr	r3, [pc, #24]	; (8015120 <LL_RCC_GetUSARTClockSource+0x24>)
 8015106:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	401a      	ands	r2, r3
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	041b      	lsls	r3, r3, #16
 8015112:	4313      	orrs	r3, r2
}
 8015114:	4618      	mov	r0, r3
 8015116:	370c      	adds	r7, #12
 8015118:	46bd      	mov	sp, r7
 801511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801511e:	4770      	bx	lr
 8015120:	40021000 	.word	0x40021000

08015124 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8015124:	b480      	push	{r7}
 8015126:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8015128:	4b04      	ldr	r3, [pc, #16]	; (801513c <LL_RCC_PLL_GetMainSource+0x18>)
 801512a:	68db      	ldr	r3, [r3, #12]
 801512c:	f003 0303 	and.w	r3, r3, #3
}
 8015130:	4618      	mov	r0, r3
 8015132:	46bd      	mov	sp, r7
 8015134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015138:	4770      	bx	lr
 801513a:	bf00      	nop
 801513c:	40021000 	.word	0x40021000

08015140 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8015140:	b480      	push	{r7}
 8015142:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8015144:	4b04      	ldr	r3, [pc, #16]	; (8015158 <LL_RCC_PLL_GetN+0x18>)
 8015146:	68db      	ldr	r3, [r3, #12]
 8015148:	0a1b      	lsrs	r3, r3, #8
 801514a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 801514e:	4618      	mov	r0, r3
 8015150:	46bd      	mov	sp, r7
 8015152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015156:	4770      	bx	lr
 8015158:	40021000 	.word	0x40021000

0801515c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 801515c:	b480      	push	{r7}
 801515e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8015160:	4b04      	ldr	r3, [pc, #16]	; (8015174 <LL_RCC_PLL_GetR+0x18>)
 8015162:	68db      	ldr	r3, [r3, #12]
 8015164:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8015168:	4618      	mov	r0, r3
 801516a:	46bd      	mov	sp, r7
 801516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015170:	4770      	bx	lr
 8015172:	bf00      	nop
 8015174:	40021000 	.word	0x40021000

08015178 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8015178:	b480      	push	{r7}
 801517a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 801517c:	4b04      	ldr	r3, [pc, #16]	; (8015190 <LL_RCC_PLL_GetDivider+0x18>)
 801517e:	68db      	ldr	r3, [r3, #12]
 8015180:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8015184:	4618      	mov	r0, r3
 8015186:	46bd      	mov	sp, r7
 8015188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801518c:	4770      	bx	lr
 801518e:	bf00      	nop
 8015190:	40021000 	.word	0x40021000

08015194 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8015194:	b580      	push	{r7, lr}
 8015196:	b084      	sub	sp, #16
 8015198:	af00      	add	r7, sp, #0
 801519a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 801519c:	2300      	movs	r3, #0
 801519e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	2b03      	cmp	r3, #3
 80151a4:	d00a      	beq.n	80151bc <LL_RCC_GetUSARTClockFreq+0x28>
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	2b0c      	cmp	r3, #12
 80151aa:	d007      	beq.n	80151bc <LL_RCC_GetUSARTClockFreq+0x28>
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	2b30      	cmp	r3, #48	; 0x30
 80151b0:	d004      	beq.n	80151bc <LL_RCC_GetUSARTClockFreq+0x28>
 80151b2:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 80151b6:	486d      	ldr	r0, [pc, #436]	; (801536c <LL_RCC_GetUSARTClockFreq+0x1d8>)
 80151b8:	f7ef f9e4 	bl	8004584 <assert_failed>

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	2b03      	cmp	r3, #3
 80151c0:	d137      	bne.n	8015232 <LL_RCC_GetUSARTClockFreq+0x9e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80151c2:	6878      	ldr	r0, [r7, #4]
 80151c4:	f7ff ff9a 	bl	80150fc <LL_RCC_GetUSARTClockSource>
 80151c8:	4603      	mov	r3, r0
 80151ca:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80151ce:	2b03      	cmp	r3, #3
 80151d0:	f200 80b3 	bhi.w	801533a <LL_RCC_GetUSARTClockFreq+0x1a6>
 80151d4:	a201      	add	r2, pc, #4	; (adr r2, 80151dc <LL_RCC_GetUSARTClockFreq+0x48>)
 80151d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80151da:	bf00      	nop
 80151dc:	0801521b 	.word	0x0801521b
 80151e0:	080151ed 	.word	0x080151ed
 80151e4:	080151f5 	.word	0x080151f5
 80151e8:	08015207 	.word	0x08015207
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80151ec:	f000 f8c6 	bl	801537c <RCC_GetSystemClockFreq>
 80151f0:	60f8      	str	r0, [r7, #12]
        break;
 80151f2:	e0b5      	b.n	8015360 <LL_RCC_GetUSARTClockFreq+0x1cc>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80151f4:	f7ff fef4 	bl	8014fe0 <LL_RCC_HSI_IsReady>
 80151f8:	4603      	mov	r3, r0
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	f000 809f 	beq.w	801533e <LL_RCC_GetUSARTClockFreq+0x1aa>
        {
          usart_frequency = HSI_VALUE;
 8015200:	4b5b      	ldr	r3, [pc, #364]	; (8015370 <LL_RCC_GetUSARTClockFreq+0x1dc>)
 8015202:	60fb      	str	r3, [r7, #12]
        }
        break;
 8015204:	e09b      	b.n	801533e <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8015206:	f7ff feff 	bl	8015008 <LL_RCC_LSE_IsReady>
 801520a:	4603      	mov	r3, r0
 801520c:	2b00      	cmp	r3, #0
 801520e:	f000 8098 	beq.w	8015342 <LL_RCC_GetUSARTClockFreq+0x1ae>
        {
          usart_frequency = LSE_VALUE;
 8015212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015216:	60fb      	str	r3, [r7, #12]
        }
        break;
 8015218:	e093      	b.n	8015342 <LL_RCC_GetUSARTClockFreq+0x1ae>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 801521a:	f000 f8af 	bl	801537c <RCC_GetSystemClockFreq>
 801521e:	4603      	mov	r3, r0
 8015220:	4618      	mov	r0, r3
 8015222:	f000 f93b 	bl	801549c <RCC_GetHCLKClockFreq>
 8015226:	4603      	mov	r3, r0
 8015228:	4618      	mov	r0, r3
 801522a:	f000 f961 	bl	80154f0 <RCC_GetPCLK2ClockFreq>
 801522e:	60f8      	str	r0, [r7, #12]
        break;
 8015230:	e096      	b.n	8015360 <LL_RCC_GetUSARTClockFreq+0x1cc>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	2b0c      	cmp	r3, #12
 8015236:	d146      	bne.n	80152c6 <LL_RCC_GetUSARTClockFreq+0x132>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8015238:	6878      	ldr	r0, [r7, #4]
 801523a:	f7ff ff5f 	bl	80150fc <LL_RCC_GetUSARTClockSource>
 801523e:	4603      	mov	r3, r0
 8015240:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8015244:	2b0c      	cmp	r3, #12
 8015246:	d87e      	bhi.n	8015346 <LL_RCC_GetUSARTClockFreq+0x1b2>
 8015248:	a201      	add	r2, pc, #4	; (adr r2, 8015250 <LL_RCC_GetUSARTClockFreq+0xbc>)
 801524a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801524e:	bf00      	nop
 8015250:	080152af 	.word	0x080152af
 8015254:	08015347 	.word	0x08015347
 8015258:	08015347 	.word	0x08015347
 801525c:	08015347 	.word	0x08015347
 8015260:	08015285 	.word	0x08015285
 8015264:	08015347 	.word	0x08015347
 8015268:	08015347 	.word	0x08015347
 801526c:	08015347 	.word	0x08015347
 8015270:	0801528d 	.word	0x0801528d
 8015274:	08015347 	.word	0x08015347
 8015278:	08015347 	.word	0x08015347
 801527c:	08015347 	.word	0x08015347
 8015280:	0801529d 	.word	0x0801529d
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8015284:	f000 f87a 	bl	801537c <RCC_GetSystemClockFreq>
 8015288:	60f8      	str	r0, [r7, #12]
        break;
 801528a:	e069      	b.n	8015360 <LL_RCC_GetUSARTClockFreq+0x1cc>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 801528c:	f7ff fea8 	bl	8014fe0 <LL_RCC_HSI_IsReady>
 8015290:	4603      	mov	r3, r0
 8015292:	2b00      	cmp	r3, #0
 8015294:	d059      	beq.n	801534a <LL_RCC_GetUSARTClockFreq+0x1b6>
        {
          usart_frequency = HSI_VALUE;
 8015296:	4b36      	ldr	r3, [pc, #216]	; (8015370 <LL_RCC_GetUSARTClockFreq+0x1dc>)
 8015298:	60fb      	str	r3, [r7, #12]
        }
        break;
 801529a:	e056      	b.n	801534a <LL_RCC_GetUSARTClockFreq+0x1b6>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 801529c:	f7ff feb4 	bl	8015008 <LL_RCC_LSE_IsReady>
 80152a0:	4603      	mov	r3, r0
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d053      	beq.n	801534e <LL_RCC_GetUSARTClockFreq+0x1ba>
        {
          usart_frequency = LSE_VALUE;
 80152a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80152aa:	60fb      	str	r3, [r7, #12]
        }
        break;
 80152ac:	e04f      	b.n	801534e <LL_RCC_GetUSARTClockFreq+0x1ba>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80152ae:	f000 f865 	bl	801537c <RCC_GetSystemClockFreq>
 80152b2:	4603      	mov	r3, r0
 80152b4:	4618      	mov	r0, r3
 80152b6:	f000 f8f1 	bl	801549c <RCC_GetHCLKClockFreq>
 80152ba:	4603      	mov	r3, r0
 80152bc:	4618      	mov	r0, r3
 80152be:	f000 f903 	bl	80154c8 <RCC_GetPCLK1ClockFreq>
 80152c2:	60f8      	str	r0, [r7, #12]
        break;
 80152c4:	e04c      	b.n	8015360 <LL_RCC_GetUSARTClockFreq+0x1cc>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	2b30      	cmp	r3, #48	; 0x30
 80152ca:	d142      	bne.n	8015352 <LL_RCC_GetUSARTClockFreq+0x1be>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80152cc:	6878      	ldr	r0, [r7, #4]
 80152ce:	f7ff ff15 	bl	80150fc <LL_RCC_GetUSARTClockSource>
 80152d2:	4603      	mov	r3, r0
 80152d4:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80152d8:	d01a      	beq.n	8015310 <LL_RCC_GetUSARTClockFreq+0x17c>
 80152da:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80152de:	d83a      	bhi.n	8015356 <LL_RCC_GetUSARTClockFreq+0x1c2>
 80152e0:	4a24      	ldr	r2, [pc, #144]	; (8015374 <LL_RCC_GetUSARTClockFreq+0x1e0>)
 80152e2:	4293      	cmp	r3, r2
 80152e4:	d00c      	beq.n	8015300 <LL_RCC_GetUSARTClockFreq+0x16c>
 80152e6:	4a23      	ldr	r2, [pc, #140]	; (8015374 <LL_RCC_GetUSARTClockFreq+0x1e0>)
 80152e8:	4293      	cmp	r3, r2
 80152ea:	d834      	bhi.n	8015356 <LL_RCC_GetUSARTClockFreq+0x1c2>
 80152ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80152f0:	d017      	beq.n	8015322 <LL_RCC_GetUSARTClockFreq+0x18e>
 80152f2:	4a21      	ldr	r2, [pc, #132]	; (8015378 <LL_RCC_GetUSARTClockFreq+0x1e4>)
 80152f4:	4293      	cmp	r3, r2
 80152f6:	d12e      	bne.n	8015356 <LL_RCC_GetUSARTClockFreq+0x1c2>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 80152f8:	f000 f840 	bl	801537c <RCC_GetSystemClockFreq>
 80152fc:	60f8      	str	r0, [r7, #12]
          break;
 80152fe:	e02f      	b.n	8015360 <LL_RCC_GetUSARTClockFreq+0x1cc>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8015300:	f7ff fe6e 	bl	8014fe0 <LL_RCC_HSI_IsReady>
 8015304:	4603      	mov	r3, r0
 8015306:	2b00      	cmp	r3, #0
 8015308:	d027      	beq.n	801535a <LL_RCC_GetUSARTClockFreq+0x1c6>
          {
            usart_frequency = HSI_VALUE;
 801530a:	4b19      	ldr	r3, [pc, #100]	; (8015370 <LL_RCC_GetUSARTClockFreq+0x1dc>)
 801530c:	60fb      	str	r3, [r7, #12]
          }
          break;
 801530e:	e024      	b.n	801535a <LL_RCC_GetUSARTClockFreq+0x1c6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8015310:	f7ff fe7a 	bl	8015008 <LL_RCC_LSE_IsReady>
 8015314:	4603      	mov	r3, r0
 8015316:	2b00      	cmp	r3, #0
 8015318:	d021      	beq.n	801535e <LL_RCC_GetUSARTClockFreq+0x1ca>
          {
            usart_frequency = LSE_VALUE;
 801531a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801531e:	60fb      	str	r3, [r7, #12]
          }
          break;
 8015320:	e01d      	b.n	801535e <LL_RCC_GetUSARTClockFreq+0x1ca>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8015322:	f000 f82b 	bl	801537c <RCC_GetSystemClockFreq>
 8015326:	4603      	mov	r3, r0
 8015328:	4618      	mov	r0, r3
 801532a:	f000 f8b7 	bl	801549c <RCC_GetHCLKClockFreq>
 801532e:	4603      	mov	r3, r0
 8015330:	4618      	mov	r0, r3
 8015332:	f000 f8c9 	bl	80154c8 <RCC_GetPCLK1ClockFreq>
 8015336:	60f8      	str	r0, [r7, #12]
          break;
 8015338:	e012      	b.n	8015360 <LL_RCC_GetUSARTClockFreq+0x1cc>
        break;
 801533a:	bf00      	nop
 801533c:	e010      	b.n	8015360 <LL_RCC_GetUSARTClockFreq+0x1cc>
        break;
 801533e:	bf00      	nop
 8015340:	e00e      	b.n	8015360 <LL_RCC_GetUSARTClockFreq+0x1cc>
        break;
 8015342:	bf00      	nop
 8015344:	e00c      	b.n	8015360 <LL_RCC_GetUSARTClockFreq+0x1cc>
        break;
 8015346:	bf00      	nop
 8015348:	e00a      	b.n	8015360 <LL_RCC_GetUSARTClockFreq+0x1cc>
        break;
 801534a:	bf00      	nop
 801534c:	e008      	b.n	8015360 <LL_RCC_GetUSARTClockFreq+0x1cc>
        break;
 801534e:	bf00      	nop
 8015350:	e006      	b.n	8015360 <LL_RCC_GetUSARTClockFreq+0x1cc>

        default:
          break;
      }
    }
 8015352:	bf00      	nop
 8015354:	e004      	b.n	8015360 <LL_RCC_GetUSARTClockFreq+0x1cc>
          break;
 8015356:	bf00      	nop
 8015358:	e002      	b.n	8015360 <LL_RCC_GetUSARTClockFreq+0x1cc>
          break;
 801535a:	bf00      	nop
 801535c:	e000      	b.n	8015360 <LL_RCC_GetUSARTClockFreq+0x1cc>
          break;
 801535e:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8015360:	68fb      	ldr	r3, [r7, #12]
}
 8015362:	4618      	mov	r0, r3
 8015364:	3710      	adds	r7, #16
 8015366:	46bd      	mov	sp, r7
 8015368:	bd80      	pop	{r7, pc}
 801536a:	bf00      	nop
 801536c:	0801bc14 	.word	0x0801bc14
 8015370:	00f42400 	.word	0x00f42400
 8015374:	00300020 	.word	0x00300020
 8015378:	00300010 	.word	0x00300010

0801537c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 801537c:	b580      	push	{r7, lr}
 801537e:	b082      	sub	sp, #8
 8015380:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8015382:	f7ff fe83 	bl	801508c <LL_RCC_GetSysClkSource>
 8015386:	4603      	mov	r3, r0
 8015388:	2b0c      	cmp	r3, #12
 801538a:	d851      	bhi.n	8015430 <RCC_GetSystemClockFreq+0xb4>
 801538c:	a201      	add	r2, pc, #4	; (adr r2, 8015394 <RCC_GetSystemClockFreq+0x18>)
 801538e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015392:	bf00      	nop
 8015394:	080153c9 	.word	0x080153c9
 8015398:	08015431 	.word	0x08015431
 801539c:	08015431 	.word	0x08015431
 80153a0:	08015431 	.word	0x08015431
 80153a4:	0801541d 	.word	0x0801541d
 80153a8:	08015431 	.word	0x08015431
 80153ac:	08015431 	.word	0x08015431
 80153b0:	08015431 	.word	0x08015431
 80153b4:	08015423 	.word	0x08015423
 80153b8:	08015431 	.word	0x08015431
 80153bc:	08015431 	.word	0x08015431
 80153c0:	08015431 	.word	0x08015431
 80153c4:	08015429 	.word	0x08015429
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80153c8:	f7ff fe32 	bl	8015030 <LL_RCC_MSI_IsEnabledRangeSelect>
 80153cc:	4603      	mov	r3, r0
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d111      	bne.n	80153f6 <RCC_GetSystemClockFreq+0x7a>
 80153d2:	f7ff fe2d 	bl	8015030 <LL_RCC_MSI_IsEnabledRangeSelect>
 80153d6:	4603      	mov	r3, r0
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d004      	beq.n	80153e6 <RCC_GetSystemClockFreq+0x6a>
 80153dc:	f7ff fe3a 	bl	8015054 <LL_RCC_MSI_GetRange>
 80153e0:	4603      	mov	r3, r0
 80153e2:	0a1b      	lsrs	r3, r3, #8
 80153e4:	e003      	b.n	80153ee <RCC_GetSystemClockFreq+0x72>
 80153e6:	f7ff fe43 	bl	8015070 <LL_RCC_MSI_GetRangeAfterStandby>
 80153ea:	4603      	mov	r3, r0
 80153ec:	0a1b      	lsrs	r3, r3, #8
 80153ee:	4a28      	ldr	r2, [pc, #160]	; (8015490 <RCC_GetSystemClockFreq+0x114>)
 80153f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80153f4:	e010      	b.n	8015418 <RCC_GetSystemClockFreq+0x9c>
 80153f6:	f7ff fe1b 	bl	8015030 <LL_RCC_MSI_IsEnabledRangeSelect>
 80153fa:	4603      	mov	r3, r0
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d004      	beq.n	801540a <RCC_GetSystemClockFreq+0x8e>
 8015400:	f7ff fe28 	bl	8015054 <LL_RCC_MSI_GetRange>
 8015404:	4603      	mov	r3, r0
 8015406:	091b      	lsrs	r3, r3, #4
 8015408:	e003      	b.n	8015412 <RCC_GetSystemClockFreq+0x96>
 801540a:	f7ff fe31 	bl	8015070 <LL_RCC_MSI_GetRangeAfterStandby>
 801540e:	4603      	mov	r3, r0
 8015410:	091b      	lsrs	r3, r3, #4
 8015412:	4a1f      	ldr	r2, [pc, #124]	; (8015490 <RCC_GetSystemClockFreq+0x114>)
 8015414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015418:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 801541a:	e033      	b.n	8015484 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 801541c:	4b1d      	ldr	r3, [pc, #116]	; (8015494 <RCC_GetSystemClockFreq+0x118>)
 801541e:	607b      	str	r3, [r7, #4]
      break;
 8015420:	e030      	b.n	8015484 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8015422:	4b1d      	ldr	r3, [pc, #116]	; (8015498 <RCC_GetSystemClockFreq+0x11c>)
 8015424:	607b      	str	r3, [r7, #4]
      break;
 8015426:	e02d      	b.n	8015484 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8015428:	f000 f876 	bl	8015518 <RCC_PLL_GetFreqDomain_SYS>
 801542c:	6078      	str	r0, [r7, #4]
      break;
 801542e:	e029      	b.n	8015484 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8015430:	f7ff fdfe 	bl	8015030 <LL_RCC_MSI_IsEnabledRangeSelect>
 8015434:	4603      	mov	r3, r0
 8015436:	2b00      	cmp	r3, #0
 8015438:	d111      	bne.n	801545e <RCC_GetSystemClockFreq+0xe2>
 801543a:	f7ff fdf9 	bl	8015030 <LL_RCC_MSI_IsEnabledRangeSelect>
 801543e:	4603      	mov	r3, r0
 8015440:	2b00      	cmp	r3, #0
 8015442:	d004      	beq.n	801544e <RCC_GetSystemClockFreq+0xd2>
 8015444:	f7ff fe06 	bl	8015054 <LL_RCC_MSI_GetRange>
 8015448:	4603      	mov	r3, r0
 801544a:	0a1b      	lsrs	r3, r3, #8
 801544c:	e003      	b.n	8015456 <RCC_GetSystemClockFreq+0xda>
 801544e:	f7ff fe0f 	bl	8015070 <LL_RCC_MSI_GetRangeAfterStandby>
 8015452:	4603      	mov	r3, r0
 8015454:	0a1b      	lsrs	r3, r3, #8
 8015456:	4a0e      	ldr	r2, [pc, #56]	; (8015490 <RCC_GetSystemClockFreq+0x114>)
 8015458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801545c:	e010      	b.n	8015480 <RCC_GetSystemClockFreq+0x104>
 801545e:	f7ff fde7 	bl	8015030 <LL_RCC_MSI_IsEnabledRangeSelect>
 8015462:	4603      	mov	r3, r0
 8015464:	2b00      	cmp	r3, #0
 8015466:	d004      	beq.n	8015472 <RCC_GetSystemClockFreq+0xf6>
 8015468:	f7ff fdf4 	bl	8015054 <LL_RCC_MSI_GetRange>
 801546c:	4603      	mov	r3, r0
 801546e:	091b      	lsrs	r3, r3, #4
 8015470:	e003      	b.n	801547a <RCC_GetSystemClockFreq+0xfe>
 8015472:	f7ff fdfd 	bl	8015070 <LL_RCC_MSI_GetRangeAfterStandby>
 8015476:	4603      	mov	r3, r0
 8015478:	091b      	lsrs	r3, r3, #4
 801547a:	4a05      	ldr	r2, [pc, #20]	; (8015490 <RCC_GetSystemClockFreq+0x114>)
 801547c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015480:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8015482:	bf00      	nop
  }

  return frequency;
 8015484:	687b      	ldr	r3, [r7, #4]
}
 8015486:	4618      	mov	r0, r3
 8015488:	3708      	adds	r7, #8
 801548a:	46bd      	mov	sp, r7
 801548c:	bd80      	pop	{r7, pc}
 801548e:	bf00      	nop
 8015490:	0801c024 	.word	0x0801c024
 8015494:	00f42400 	.word	0x00f42400
 8015498:	017d7840 	.word	0x017d7840

0801549c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 801549c:	b580      	push	{r7, lr}
 801549e:	b082      	sub	sp, #8
 80154a0:	af00      	add	r7, sp, #0
 80154a2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80154a4:	f7ff fe00 	bl	80150a8 <LL_RCC_GetAHBPrescaler>
 80154a8:	4603      	mov	r3, r0
 80154aa:	091b      	lsrs	r3, r3, #4
 80154ac:	f003 030f 	and.w	r3, r3, #15
 80154b0:	4a04      	ldr	r2, [pc, #16]	; (80154c4 <RCC_GetHCLKClockFreq+0x28>)
 80154b2:	5cd3      	ldrb	r3, [r2, r3]
 80154b4:	461a      	mov	r2, r3
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	40d3      	lsrs	r3, r2
}
 80154ba:	4618      	mov	r0, r3
 80154bc:	3708      	adds	r7, #8
 80154be:	46bd      	mov	sp, r7
 80154c0:	bd80      	pop	{r7, pc}
 80154c2:	bf00      	nop
 80154c4:	0801c00c 	.word	0x0801c00c

080154c8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80154c8:	b580      	push	{r7, lr}
 80154ca:	b082      	sub	sp, #8
 80154cc:	af00      	add	r7, sp, #0
 80154ce:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80154d0:	f7ff fdf8 	bl	80150c4 <LL_RCC_GetAPB1Prescaler>
 80154d4:	4603      	mov	r3, r0
 80154d6:	0a1b      	lsrs	r3, r3, #8
 80154d8:	4a04      	ldr	r2, [pc, #16]	; (80154ec <RCC_GetPCLK1ClockFreq+0x24>)
 80154da:	5cd3      	ldrb	r3, [r2, r3]
 80154dc:	461a      	mov	r2, r3
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	40d3      	lsrs	r3, r2
}
 80154e2:	4618      	mov	r0, r3
 80154e4:	3708      	adds	r7, #8
 80154e6:	46bd      	mov	sp, r7
 80154e8:	bd80      	pop	{r7, pc}
 80154ea:	bf00      	nop
 80154ec:	0801c01c 	.word	0x0801c01c

080154f0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80154f0:	b580      	push	{r7, lr}
 80154f2:	b082      	sub	sp, #8
 80154f4:	af00      	add	r7, sp, #0
 80154f6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80154f8:	f7ff fdf2 	bl	80150e0 <LL_RCC_GetAPB2Prescaler>
 80154fc:	4603      	mov	r3, r0
 80154fe:	0adb      	lsrs	r3, r3, #11
 8015500:	4a04      	ldr	r2, [pc, #16]	; (8015514 <RCC_GetPCLK2ClockFreq+0x24>)
 8015502:	5cd3      	ldrb	r3, [r2, r3]
 8015504:	461a      	mov	r2, r3
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	40d3      	lsrs	r3, r2
}
 801550a:	4618      	mov	r0, r3
 801550c:	3708      	adds	r7, #8
 801550e:	46bd      	mov	sp, r7
 8015510:	bd80      	pop	{r7, pc}
 8015512:	bf00      	nop
 8015514:	0801c01c 	.word	0x0801c01c

08015518 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8015518:	b590      	push	{r4, r7, lr}
 801551a:	b083      	sub	sp, #12
 801551c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 801551e:	f7ff fe01 	bl	8015124 <LL_RCC_PLL_GetMainSource>
 8015522:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8015524:	683b      	ldr	r3, [r7, #0]
 8015526:	2b03      	cmp	r3, #3
 8015528:	d036      	beq.n	8015598 <RCC_PLL_GetFreqDomain_SYS+0x80>
 801552a:	683b      	ldr	r3, [r7, #0]
 801552c:	2b03      	cmp	r3, #3
 801552e:	d836      	bhi.n	801559e <RCC_PLL_GetFreqDomain_SYS+0x86>
 8015530:	683b      	ldr	r3, [r7, #0]
 8015532:	2b01      	cmp	r3, #1
 8015534:	d003      	beq.n	801553e <RCC_PLL_GetFreqDomain_SYS+0x26>
 8015536:	683b      	ldr	r3, [r7, #0]
 8015538:	2b02      	cmp	r3, #2
 801553a:	d02a      	beq.n	8015592 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 801553c:	e02f      	b.n	801559e <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 801553e:	f7ff fd77 	bl	8015030 <LL_RCC_MSI_IsEnabledRangeSelect>
 8015542:	4603      	mov	r3, r0
 8015544:	2b00      	cmp	r3, #0
 8015546:	d111      	bne.n	801556c <RCC_PLL_GetFreqDomain_SYS+0x54>
 8015548:	f7ff fd72 	bl	8015030 <LL_RCC_MSI_IsEnabledRangeSelect>
 801554c:	4603      	mov	r3, r0
 801554e:	2b00      	cmp	r3, #0
 8015550:	d004      	beq.n	801555c <RCC_PLL_GetFreqDomain_SYS+0x44>
 8015552:	f7ff fd7f 	bl	8015054 <LL_RCC_MSI_GetRange>
 8015556:	4603      	mov	r3, r0
 8015558:	0a1b      	lsrs	r3, r3, #8
 801555a:	e003      	b.n	8015564 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 801555c:	f7ff fd88 	bl	8015070 <LL_RCC_MSI_GetRangeAfterStandby>
 8015560:	4603      	mov	r3, r0
 8015562:	0a1b      	lsrs	r3, r3, #8
 8015564:	4a2f      	ldr	r2, [pc, #188]	; (8015624 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8015566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801556a:	e010      	b.n	801558e <RCC_PLL_GetFreqDomain_SYS+0x76>
 801556c:	f7ff fd60 	bl	8015030 <LL_RCC_MSI_IsEnabledRangeSelect>
 8015570:	4603      	mov	r3, r0
 8015572:	2b00      	cmp	r3, #0
 8015574:	d004      	beq.n	8015580 <RCC_PLL_GetFreqDomain_SYS+0x68>
 8015576:	f7ff fd6d 	bl	8015054 <LL_RCC_MSI_GetRange>
 801557a:	4603      	mov	r3, r0
 801557c:	091b      	lsrs	r3, r3, #4
 801557e:	e003      	b.n	8015588 <RCC_PLL_GetFreqDomain_SYS+0x70>
 8015580:	f7ff fd76 	bl	8015070 <LL_RCC_MSI_GetRangeAfterStandby>
 8015584:	4603      	mov	r3, r0
 8015586:	091b      	lsrs	r3, r3, #4
 8015588:	4a26      	ldr	r2, [pc, #152]	; (8015624 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 801558a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801558e:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8015590:	e02f      	b.n	80155f2 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8015592:	4b25      	ldr	r3, [pc, #148]	; (8015628 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8015594:	607b      	str	r3, [r7, #4]
      break;
 8015596:	e02c      	b.n	80155f2 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8015598:	4b24      	ldr	r3, [pc, #144]	; (801562c <RCC_PLL_GetFreqDomain_SYS+0x114>)
 801559a:	607b      	str	r3, [r7, #4]
      break;
 801559c:	e029      	b.n	80155f2 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 801559e:	f7ff fd47 	bl	8015030 <LL_RCC_MSI_IsEnabledRangeSelect>
 80155a2:	4603      	mov	r3, r0
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d111      	bne.n	80155cc <RCC_PLL_GetFreqDomain_SYS+0xb4>
 80155a8:	f7ff fd42 	bl	8015030 <LL_RCC_MSI_IsEnabledRangeSelect>
 80155ac:	4603      	mov	r3, r0
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d004      	beq.n	80155bc <RCC_PLL_GetFreqDomain_SYS+0xa4>
 80155b2:	f7ff fd4f 	bl	8015054 <LL_RCC_MSI_GetRange>
 80155b6:	4603      	mov	r3, r0
 80155b8:	0a1b      	lsrs	r3, r3, #8
 80155ba:	e003      	b.n	80155c4 <RCC_PLL_GetFreqDomain_SYS+0xac>
 80155bc:	f7ff fd58 	bl	8015070 <LL_RCC_MSI_GetRangeAfterStandby>
 80155c0:	4603      	mov	r3, r0
 80155c2:	0a1b      	lsrs	r3, r3, #8
 80155c4:	4a17      	ldr	r2, [pc, #92]	; (8015624 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80155c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80155ca:	e010      	b.n	80155ee <RCC_PLL_GetFreqDomain_SYS+0xd6>
 80155cc:	f7ff fd30 	bl	8015030 <LL_RCC_MSI_IsEnabledRangeSelect>
 80155d0:	4603      	mov	r3, r0
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d004      	beq.n	80155e0 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 80155d6:	f7ff fd3d 	bl	8015054 <LL_RCC_MSI_GetRange>
 80155da:	4603      	mov	r3, r0
 80155dc:	091b      	lsrs	r3, r3, #4
 80155de:	e003      	b.n	80155e8 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 80155e0:	f7ff fd46 	bl	8015070 <LL_RCC_MSI_GetRangeAfterStandby>
 80155e4:	4603      	mov	r3, r0
 80155e6:	091b      	lsrs	r3, r3, #4
 80155e8:	4a0e      	ldr	r2, [pc, #56]	; (8015624 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80155ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80155ee:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80155f0:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80155f2:	f7ff fdc1 	bl	8015178 <LL_RCC_PLL_GetDivider>
 80155f6:	4603      	mov	r3, r0
 80155f8:	091b      	lsrs	r3, r3, #4
 80155fa:	3301      	adds	r3, #1
 80155fc:	687a      	ldr	r2, [r7, #4]
 80155fe:	fbb2 f4f3 	udiv	r4, r2, r3
 8015602:	f7ff fd9d 	bl	8015140 <LL_RCC_PLL_GetN>
 8015606:	4603      	mov	r3, r0
 8015608:	fb03 f404 	mul.w	r4, r3, r4
 801560c:	f7ff fda6 	bl	801515c <LL_RCC_PLL_GetR>
 8015610:	4603      	mov	r3, r0
 8015612:	0e5b      	lsrs	r3, r3, #25
 8015614:	3301      	adds	r3, #1
 8015616:	005b      	lsls	r3, r3, #1
 8015618:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 801561c:	4618      	mov	r0, r3
 801561e:	370c      	adds	r7, #12
 8015620:	46bd      	mov	sp, r7
 8015622:	bd90      	pop	{r4, r7, pc}
 8015624:	0801c024 	.word	0x0801c024
 8015628:	00f42400 	.word	0x00f42400
 801562c:	017d7840 	.word	0x017d7840

08015630 <LL_USART_IsEnabled>:
{
 8015630:	b480      	push	{r7}
 8015632:	b083      	sub	sp, #12
 8015634:	af00      	add	r7, sp, #0
 8015636:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	f003 0301 	and.w	r3, r3, #1
 8015640:	2b01      	cmp	r3, #1
 8015642:	d101      	bne.n	8015648 <LL_USART_IsEnabled+0x18>
 8015644:	2301      	movs	r3, #1
 8015646:	e000      	b.n	801564a <LL_USART_IsEnabled+0x1a>
 8015648:	2300      	movs	r3, #0
}
 801564a:	4618      	mov	r0, r3
 801564c:	370c      	adds	r7, #12
 801564e:	46bd      	mov	sp, r7
 8015650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015654:	4770      	bx	lr

08015656 <LL_USART_SetStopBitsLength>:
{
 8015656:	b480      	push	{r7}
 8015658:	b083      	sub	sp, #12
 801565a:	af00      	add	r7, sp, #0
 801565c:	6078      	str	r0, [r7, #4]
 801565e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	685b      	ldr	r3, [r3, #4]
 8015664:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8015668:	683b      	ldr	r3, [r7, #0]
 801566a:	431a      	orrs	r2, r3
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	605a      	str	r2, [r3, #4]
}
 8015670:	bf00      	nop
 8015672:	370c      	adds	r7, #12
 8015674:	46bd      	mov	sp, r7
 8015676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801567a:	4770      	bx	lr

0801567c <LL_USART_SetHWFlowCtrl>:
{
 801567c:	b480      	push	{r7}
 801567e:	b083      	sub	sp, #12
 8015680:	af00      	add	r7, sp, #0
 8015682:	6078      	str	r0, [r7, #4]
 8015684:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	689b      	ldr	r3, [r3, #8]
 801568a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801568e:	683b      	ldr	r3, [r7, #0]
 8015690:	431a      	orrs	r2, r3
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	609a      	str	r2, [r3, #8]
}
 8015696:	bf00      	nop
 8015698:	370c      	adds	r7, #12
 801569a:	46bd      	mov	sp, r7
 801569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a0:	4770      	bx	lr

080156a2 <LL_USART_SetBaudRate>:
{
 80156a2:	b480      	push	{r7}
 80156a4:	b087      	sub	sp, #28
 80156a6:	af00      	add	r7, sp, #0
 80156a8:	60f8      	str	r0, [r7, #12]
 80156aa:	60b9      	str	r1, [r7, #8]
 80156ac:	607a      	str	r2, [r7, #4]
 80156ae:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80156b6:	d11a      	bne.n	80156ee <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80156b8:	68bb      	ldr	r3, [r7, #8]
 80156ba:	005a      	lsls	r2, r3, #1
 80156bc:	683b      	ldr	r3, [r7, #0]
 80156be:	085b      	lsrs	r3, r3, #1
 80156c0:	441a      	add	r2, r3
 80156c2:	683b      	ldr	r3, [r7, #0]
 80156c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80156c8:	b29b      	uxth	r3, r3
 80156ca:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80156cc:	697a      	ldr	r2, [r7, #20]
 80156ce:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80156d2:	4013      	ands	r3, r2
 80156d4:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80156d6:	697b      	ldr	r3, [r7, #20]
 80156d8:	085b      	lsrs	r3, r3, #1
 80156da:	b29b      	uxth	r3, r3
 80156dc:	f003 0307 	and.w	r3, r3, #7
 80156e0:	693a      	ldr	r2, [r7, #16]
 80156e2:	4313      	orrs	r3, r2
 80156e4:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	693a      	ldr	r2, [r7, #16]
 80156ea:	60da      	str	r2, [r3, #12]
}
 80156ec:	e00a      	b.n	8015704 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80156ee:	683b      	ldr	r3, [r7, #0]
 80156f0:	085a      	lsrs	r2, r3, #1
 80156f2:	68bb      	ldr	r3, [r7, #8]
 80156f4:	441a      	add	r2, r3
 80156f6:	683b      	ldr	r3, [r7, #0]
 80156f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80156fc:	b29b      	uxth	r3, r3
 80156fe:	461a      	mov	r2, r3
 8015700:	68fb      	ldr	r3, [r7, #12]
 8015702:	60da      	str	r2, [r3, #12]
}
 8015704:	bf00      	nop
 8015706:	371c      	adds	r7, #28
 8015708:	46bd      	mov	sp, r7
 801570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801570e:	4770      	bx	lr

08015710 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8015710:	b580      	push	{r7, lr}
 8015712:	b084      	sub	sp, #16
 8015714:	af00      	add	r7, sp, #0
 8015716:	6078      	str	r0, [r7, #4]
 8015718:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 801571a:	2301      	movs	r3, #1
 801571c:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 801571e:	2300      	movs	r3, #0
 8015720:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(USARTx));
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	4a73      	ldr	r2, [pc, #460]	; (80158f4 <LL_USART_Init+0x1e4>)
 8015726:	4293      	cmp	r3, r2
 8015728:	d00b      	beq.n	8015742 <LL_USART_Init+0x32>
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	4a72      	ldr	r2, [pc, #456]	; (80158f8 <LL_USART_Init+0x1e8>)
 801572e:	4293      	cmp	r3, r2
 8015730:	d007      	beq.n	8015742 <LL_USART_Init+0x32>
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	4a71      	ldr	r2, [pc, #452]	; (80158fc <LL_USART_Init+0x1ec>)
 8015736:	4293      	cmp	r3, r2
 8015738:	d003      	beq.n	8015742 <LL_USART_Init+0x32>
 801573a:	21d7      	movs	r1, #215	; 0xd7
 801573c:	4870      	ldr	r0, [pc, #448]	; (8015900 <LL_USART_Init+0x1f0>)
 801573e:	f7ee ff21 	bl	8004584 <assert_failed>
#if defined(USART_PRESC_PRESCALER)
  assert_param(IS_LL_USART_PRESCALER(USART_InitStruct->PrescalerValue));
#endif /* USART_PRESC_PRESCALER */
  assert_param(IS_LL_USART_BAUDRATE(USART_InitStruct->BaudRate));
 8015742:	683b      	ldr	r3, [r7, #0]
 8015744:	681b      	ldr	r3, [r3, #0]
 8015746:	4a6f      	ldr	r2, [pc, #444]	; (8015904 <LL_USART_Init+0x1f4>)
 8015748:	4293      	cmp	r3, r2
 801574a:	d903      	bls.n	8015754 <LL_USART_Init+0x44>
 801574c:	21db      	movs	r1, #219	; 0xdb
 801574e:	486c      	ldr	r0, [pc, #432]	; (8015900 <LL_USART_Init+0x1f0>)
 8015750:	f7ee ff18 	bl	8004584 <assert_failed>
  assert_param(IS_LL_USART_DATAWIDTH(USART_InitStruct->DataWidth));
 8015754:	683b      	ldr	r3, [r7, #0]
 8015756:	685b      	ldr	r3, [r3, #4]
 8015758:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801575c:	d00c      	beq.n	8015778 <LL_USART_Init+0x68>
 801575e:	683b      	ldr	r3, [r7, #0]
 8015760:	685b      	ldr	r3, [r3, #4]
 8015762:	2b00      	cmp	r3, #0
 8015764:	d008      	beq.n	8015778 <LL_USART_Init+0x68>
 8015766:	683b      	ldr	r3, [r7, #0]
 8015768:	685b      	ldr	r3, [r3, #4]
 801576a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801576e:	d003      	beq.n	8015778 <LL_USART_Init+0x68>
 8015770:	21dc      	movs	r1, #220	; 0xdc
 8015772:	4863      	ldr	r0, [pc, #396]	; (8015900 <LL_USART_Init+0x1f0>)
 8015774:	f7ee ff06 	bl	8004584 <assert_failed>
  assert_param(IS_LL_USART_STOPBITS(USART_InitStruct->StopBits));
 8015778:	683b      	ldr	r3, [r7, #0]
 801577a:	689b      	ldr	r3, [r3, #8]
 801577c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015780:	d011      	beq.n	80157a6 <LL_USART_Init+0x96>
 8015782:	683b      	ldr	r3, [r7, #0]
 8015784:	689b      	ldr	r3, [r3, #8]
 8015786:	2b00      	cmp	r3, #0
 8015788:	d00d      	beq.n	80157a6 <LL_USART_Init+0x96>
 801578a:	683b      	ldr	r3, [r7, #0]
 801578c:	689b      	ldr	r3, [r3, #8]
 801578e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8015792:	d008      	beq.n	80157a6 <LL_USART_Init+0x96>
 8015794:	683b      	ldr	r3, [r7, #0]
 8015796:	689b      	ldr	r3, [r3, #8]
 8015798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801579c:	d003      	beq.n	80157a6 <LL_USART_Init+0x96>
 801579e:	21dd      	movs	r1, #221	; 0xdd
 80157a0:	4857      	ldr	r0, [pc, #348]	; (8015900 <LL_USART_Init+0x1f0>)
 80157a2:	f7ee feef 	bl	8004584 <assert_failed>
  assert_param(IS_LL_USART_PARITY(USART_InitStruct->Parity));
 80157a6:	683b      	ldr	r3, [r7, #0]
 80157a8:	68db      	ldr	r3, [r3, #12]
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d00d      	beq.n	80157ca <LL_USART_Init+0xba>
 80157ae:	683b      	ldr	r3, [r7, #0]
 80157b0:	68db      	ldr	r3, [r3, #12]
 80157b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80157b6:	d008      	beq.n	80157ca <LL_USART_Init+0xba>
 80157b8:	683b      	ldr	r3, [r7, #0]
 80157ba:	68db      	ldr	r3, [r3, #12]
 80157bc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80157c0:	d003      	beq.n	80157ca <LL_USART_Init+0xba>
 80157c2:	21de      	movs	r1, #222	; 0xde
 80157c4:	484e      	ldr	r0, [pc, #312]	; (8015900 <LL_USART_Init+0x1f0>)
 80157c6:	f7ee fedd 	bl	8004584 <assert_failed>
  assert_param(IS_LL_USART_DIRECTION(USART_InitStruct->TransferDirection));
 80157ca:	683b      	ldr	r3, [r7, #0]
 80157cc:	691b      	ldr	r3, [r3, #16]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d00f      	beq.n	80157f2 <LL_USART_Init+0xe2>
 80157d2:	683b      	ldr	r3, [r7, #0]
 80157d4:	691b      	ldr	r3, [r3, #16]
 80157d6:	2b04      	cmp	r3, #4
 80157d8:	d00b      	beq.n	80157f2 <LL_USART_Init+0xe2>
 80157da:	683b      	ldr	r3, [r7, #0]
 80157dc:	691b      	ldr	r3, [r3, #16]
 80157de:	2b08      	cmp	r3, #8
 80157e0:	d007      	beq.n	80157f2 <LL_USART_Init+0xe2>
 80157e2:	683b      	ldr	r3, [r7, #0]
 80157e4:	691b      	ldr	r3, [r3, #16]
 80157e6:	2b0c      	cmp	r3, #12
 80157e8:	d003      	beq.n	80157f2 <LL_USART_Init+0xe2>
 80157ea:	21df      	movs	r1, #223	; 0xdf
 80157ec:	4844      	ldr	r0, [pc, #272]	; (8015900 <LL_USART_Init+0x1f0>)
 80157ee:	f7ee fec9 	bl	8004584 <assert_failed>
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
 80157f2:	683b      	ldr	r3, [r7, #0]
 80157f4:	695b      	ldr	r3, [r3, #20]
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d012      	beq.n	8015820 <LL_USART_Init+0x110>
 80157fa:	683b      	ldr	r3, [r7, #0]
 80157fc:	695b      	ldr	r3, [r3, #20]
 80157fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015802:	d00d      	beq.n	8015820 <LL_USART_Init+0x110>
 8015804:	683b      	ldr	r3, [r7, #0]
 8015806:	695b      	ldr	r3, [r3, #20]
 8015808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801580c:	d008      	beq.n	8015820 <LL_USART_Init+0x110>
 801580e:	683b      	ldr	r3, [r7, #0]
 8015810:	695b      	ldr	r3, [r3, #20]
 8015812:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015816:	d003      	beq.n	8015820 <LL_USART_Init+0x110>
 8015818:	21e0      	movs	r1, #224	; 0xe0
 801581a:	4839      	ldr	r0, [pc, #228]	; (8015900 <LL_USART_Init+0x1f0>)
 801581c:	f7ee feb2 	bl	8004584 <assert_failed>
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
 8015820:	683b      	ldr	r3, [r7, #0]
 8015822:	699b      	ldr	r3, [r3, #24]
 8015824:	2b00      	cmp	r3, #0
 8015826:	d008      	beq.n	801583a <LL_USART_Init+0x12a>
 8015828:	683b      	ldr	r3, [r7, #0]
 801582a:	699b      	ldr	r3, [r3, #24]
 801582c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015830:	d003      	beq.n	801583a <LL_USART_Init+0x12a>
 8015832:	21e1      	movs	r1, #225	; 0xe1
 8015834:	4832      	ldr	r0, [pc, #200]	; (8015900 <LL_USART_Init+0x1f0>)
 8015836:	f7ee fea5 	bl	8004584 <assert_failed>

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 801583a:	6878      	ldr	r0, [r7, #4]
 801583c:	f7ff fef8 	bl	8015630 <LL_USART_IsEnabled>
 8015840:	4603      	mov	r3, r0
 8015842:	2b00      	cmp	r3, #0
 8015844:	d151      	bne.n	80158ea <LL_USART_Init+0x1da>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	681a      	ldr	r2, [r3, #0]
 801584a:	4b2f      	ldr	r3, [pc, #188]	; (8015908 <LL_USART_Init+0x1f8>)
 801584c:	4013      	ands	r3, r2
 801584e:	683a      	ldr	r2, [r7, #0]
 8015850:	6851      	ldr	r1, [r2, #4]
 8015852:	683a      	ldr	r2, [r7, #0]
 8015854:	68d2      	ldr	r2, [r2, #12]
 8015856:	4311      	orrs	r1, r2
 8015858:	683a      	ldr	r2, [r7, #0]
 801585a:	6912      	ldr	r2, [r2, #16]
 801585c:	4311      	orrs	r1, r2
 801585e:	683a      	ldr	r2, [r7, #0]
 8015860:	6992      	ldr	r2, [r2, #24]
 8015862:	430a      	orrs	r2, r1
 8015864:	431a      	orrs	r2, r3
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 801586a:	683b      	ldr	r3, [r7, #0]
 801586c:	689b      	ldr	r3, [r3, #8]
 801586e:	4619      	mov	r1, r3
 8015870:	6878      	ldr	r0, [r7, #4]
 8015872:	f7ff fef0 	bl	8015656 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8015876:	683b      	ldr	r3, [r7, #0]
 8015878:	695b      	ldr	r3, [r3, #20]
 801587a:	4619      	mov	r1, r3
 801587c:	6878      	ldr	r0, [r7, #4]
 801587e:	f7ff fefd 	bl	801567c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	4a1b      	ldr	r2, [pc, #108]	; (80158f4 <LL_USART_Init+0x1e4>)
 8015886:	4293      	cmp	r3, r2
 8015888:	d104      	bne.n	8015894 <LL_USART_Init+0x184>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 801588a:	2003      	movs	r0, #3
 801588c:	f7ff fc82 	bl	8015194 <LL_RCC_GetUSARTClockFreq>
 8015890:	60b8      	str	r0, [r7, #8]
 8015892:	e010      	b.n	80158b6 <LL_USART_Init+0x1a6>
    }
    else if (USARTx == USART2)
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	4a18      	ldr	r2, [pc, #96]	; (80158f8 <LL_USART_Init+0x1e8>)
 8015898:	4293      	cmp	r3, r2
 801589a:	d104      	bne.n	80158a6 <LL_USART_Init+0x196>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 801589c:	200c      	movs	r0, #12
 801589e:	f7ff fc79 	bl	8015194 <LL_RCC_GetUSARTClockFreq>
 80158a2:	60b8      	str	r0, [r7, #8]
 80158a4:	e007      	b.n	80158b6 <LL_USART_Init+0x1a6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	4a14      	ldr	r2, [pc, #80]	; (80158fc <LL_USART_Init+0x1ec>)
 80158aa:	4293      	cmp	r3, r2
 80158ac:	d103      	bne.n	80158b6 <LL_USART_Init+0x1a6>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 80158ae:	2030      	movs	r0, #48	; 0x30
 80158b0:	f7ff fc70 	bl	8015194 <LL_RCC_GetUSARTClockFreq>
 80158b4:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
#endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80158b6:	68bb      	ldr	r3, [r7, #8]
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d016      	beq.n	80158ea <LL_USART_Init+0x1da>
        && (USART_InitStruct->BaudRate != 0U))
 80158bc:	683b      	ldr	r3, [r7, #0]
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d012      	beq.n	80158ea <LL_USART_Init+0x1da>
    {
      status = SUCCESS;
 80158c4:	2300      	movs	r3, #0
 80158c6:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 80158c8:	683b      	ldr	r3, [r7, #0]
 80158ca:	699a      	ldr	r2, [r3, #24]
 80158cc:	683b      	ldr	r3, [r7, #0]
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	68b9      	ldr	r1, [r7, #8]
 80158d2:	6878      	ldr	r0, [r7, #4]
 80158d4:	f7ff fee5 	bl	80156a2 <LL_USART_SetBaudRate>
#endif /* USART_PRESC_PRESCALER */
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);

      /* Check BRR is greater than or equal to 16d */
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	68db      	ldr	r3, [r3, #12]
 80158dc:	2b0f      	cmp	r3, #15
 80158de:	d804      	bhi.n	80158ea <LL_USART_Init+0x1da>
 80158e0:	f44f 719c 	mov.w	r1, #312	; 0x138
 80158e4:	4806      	ldr	r0, [pc, #24]	; (8015900 <LL_USART_Init+0x1f0>)
 80158e6:	f7ee fe4d 	bl	8004584 <assert_failed>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80158ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80158ec:	4618      	mov	r0, r3
 80158ee:	3710      	adds	r7, #16
 80158f0:	46bd      	mov	sp, r7
 80158f2:	bd80      	pop	{r7, pc}
 80158f4:	40013800 	.word	0x40013800
 80158f8:	40004400 	.word	0x40004400
 80158fc:	40004800 	.word	0x40004800
 8015900:	0801bc4c 	.word	0x0801bc4c
 8015904:	00989680 	.word	0x00989680
 8015908:	efff69f3 	.word	0xefff69f3

0801590c <atof>:
 801590c:	2100      	movs	r1, #0
 801590e:	f001 bebd 	b.w	801768c <strtod>

08015912 <atoi>:
 8015912:	220a      	movs	r2, #10
 8015914:	2100      	movs	r1, #0
 8015916:	f001 bfa7 	b.w	8017868 <strtol>

0801591a <atoll>:
 801591a:	220a      	movs	r2, #10
 801591c:	2100      	movs	r1, #0
 801591e:	f002 b843 	b.w	80179a8 <strtoll>
	...

08015924 <__errno>:
 8015924:	4b01      	ldr	r3, [pc, #4]	; (801592c <__errno+0x8>)
 8015926:	6818      	ldr	r0, [r3, #0]
 8015928:	4770      	bx	lr
 801592a:	bf00      	nop
 801592c:	20001494 	.word	0x20001494

08015930 <__libc_init_array>:
 8015930:	b570      	push	{r4, r5, r6, lr}
 8015932:	4d0d      	ldr	r5, [pc, #52]	; (8015968 <__libc_init_array+0x38>)
 8015934:	4c0d      	ldr	r4, [pc, #52]	; (801596c <__libc_init_array+0x3c>)
 8015936:	1b64      	subs	r4, r4, r5
 8015938:	10a4      	asrs	r4, r4, #2
 801593a:	2600      	movs	r6, #0
 801593c:	42a6      	cmp	r6, r4
 801593e:	d109      	bne.n	8015954 <__libc_init_array+0x24>
 8015940:	4d0b      	ldr	r5, [pc, #44]	; (8015970 <__libc_init_array+0x40>)
 8015942:	4c0c      	ldr	r4, [pc, #48]	; (8015974 <__libc_init_array+0x44>)
 8015944:	f005 fd52 	bl	801b3ec <_init>
 8015948:	1b64      	subs	r4, r4, r5
 801594a:	10a4      	asrs	r4, r4, #2
 801594c:	2600      	movs	r6, #0
 801594e:	42a6      	cmp	r6, r4
 8015950:	d105      	bne.n	801595e <__libc_init_array+0x2e>
 8015952:	bd70      	pop	{r4, r5, r6, pc}
 8015954:	f855 3b04 	ldr.w	r3, [r5], #4
 8015958:	4798      	blx	r3
 801595a:	3601      	adds	r6, #1
 801595c:	e7ee      	b.n	801593c <__libc_init_array+0xc>
 801595e:	f855 3b04 	ldr.w	r3, [r5], #4
 8015962:	4798      	blx	r3
 8015964:	3601      	adds	r6, #1
 8015966:	e7f2      	b.n	801594e <__libc_init_array+0x1e>
 8015968:	0801c6a4 	.word	0x0801c6a4
 801596c:	0801c6a4 	.word	0x0801c6a4
 8015970:	0801c6a4 	.word	0x0801c6a4
 8015974:	0801c6a8 	.word	0x0801c6a8

08015978 <__itoa>:
 8015978:	1e93      	subs	r3, r2, #2
 801597a:	2b22      	cmp	r3, #34	; 0x22
 801597c:	b510      	push	{r4, lr}
 801597e:	460c      	mov	r4, r1
 8015980:	d904      	bls.n	801598c <__itoa+0x14>
 8015982:	2300      	movs	r3, #0
 8015984:	700b      	strb	r3, [r1, #0]
 8015986:	461c      	mov	r4, r3
 8015988:	4620      	mov	r0, r4
 801598a:	bd10      	pop	{r4, pc}
 801598c:	2a0a      	cmp	r2, #10
 801598e:	d109      	bne.n	80159a4 <__itoa+0x2c>
 8015990:	2800      	cmp	r0, #0
 8015992:	da07      	bge.n	80159a4 <__itoa+0x2c>
 8015994:	232d      	movs	r3, #45	; 0x2d
 8015996:	700b      	strb	r3, [r1, #0]
 8015998:	4240      	negs	r0, r0
 801599a:	2101      	movs	r1, #1
 801599c:	4421      	add	r1, r4
 801599e:	f002 fa43 	bl	8017e28 <__utoa>
 80159a2:	e7f1      	b.n	8015988 <__itoa+0x10>
 80159a4:	2100      	movs	r1, #0
 80159a6:	e7f9      	b.n	801599c <__itoa+0x24>

080159a8 <itoa>:
 80159a8:	f7ff bfe6 	b.w	8015978 <__itoa>

080159ac <malloc>:
 80159ac:	4b02      	ldr	r3, [pc, #8]	; (80159b8 <malloc+0xc>)
 80159ae:	4601      	mov	r1, r0
 80159b0:	6818      	ldr	r0, [r3, #0]
 80159b2:	f000 baef 	b.w	8015f94 <_malloc_r>
 80159b6:	bf00      	nop
 80159b8:	20001494 	.word	0x20001494

080159bc <free>:
 80159bc:	4b02      	ldr	r3, [pc, #8]	; (80159c8 <free+0xc>)
 80159be:	4601      	mov	r1, r0
 80159c0:	6818      	ldr	r0, [r3, #0]
 80159c2:	f000 ba97 	b.w	8015ef4 <_free_r>
 80159c6:	bf00      	nop
 80159c8:	20001494 	.word	0x20001494

080159cc <memcpy>:
 80159cc:	440a      	add	r2, r1
 80159ce:	4291      	cmp	r1, r2
 80159d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80159d4:	d100      	bne.n	80159d8 <memcpy+0xc>
 80159d6:	4770      	bx	lr
 80159d8:	b510      	push	{r4, lr}
 80159da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80159de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80159e2:	4291      	cmp	r1, r2
 80159e4:	d1f9      	bne.n	80159da <memcpy+0xe>
 80159e6:	bd10      	pop	{r4, pc}

080159e8 <memset>:
 80159e8:	4402      	add	r2, r0
 80159ea:	4603      	mov	r3, r0
 80159ec:	4293      	cmp	r3, r2
 80159ee:	d100      	bne.n	80159f2 <memset+0xa>
 80159f0:	4770      	bx	lr
 80159f2:	f803 1b01 	strb.w	r1, [r3], #1
 80159f6:	e7f9      	b.n	80159ec <memset+0x4>

080159f8 <validate_structure>:
 80159f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80159fa:	6801      	ldr	r1, [r0, #0]
 80159fc:	293b      	cmp	r1, #59	; 0x3b
 80159fe:	4604      	mov	r4, r0
 8015a00:	d911      	bls.n	8015a26 <validate_structure+0x2e>
 8015a02:	223c      	movs	r2, #60	; 0x3c
 8015a04:	4668      	mov	r0, sp
 8015a06:	f002 fa6f 	bl	8017ee8 <div>
 8015a0a:	9a01      	ldr	r2, [sp, #4]
 8015a0c:	6863      	ldr	r3, [r4, #4]
 8015a0e:	9900      	ldr	r1, [sp, #0]
 8015a10:	2a00      	cmp	r2, #0
 8015a12:	440b      	add	r3, r1
 8015a14:	6063      	str	r3, [r4, #4]
 8015a16:	bfbb      	ittet	lt
 8015a18:	323c      	addlt	r2, #60	; 0x3c
 8015a1a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8015a1e:	6022      	strge	r2, [r4, #0]
 8015a20:	6022      	strlt	r2, [r4, #0]
 8015a22:	bfb8      	it	lt
 8015a24:	6063      	strlt	r3, [r4, #4]
 8015a26:	6861      	ldr	r1, [r4, #4]
 8015a28:	293b      	cmp	r1, #59	; 0x3b
 8015a2a:	d911      	bls.n	8015a50 <validate_structure+0x58>
 8015a2c:	223c      	movs	r2, #60	; 0x3c
 8015a2e:	4668      	mov	r0, sp
 8015a30:	f002 fa5a 	bl	8017ee8 <div>
 8015a34:	9a01      	ldr	r2, [sp, #4]
 8015a36:	68a3      	ldr	r3, [r4, #8]
 8015a38:	9900      	ldr	r1, [sp, #0]
 8015a3a:	2a00      	cmp	r2, #0
 8015a3c:	440b      	add	r3, r1
 8015a3e:	60a3      	str	r3, [r4, #8]
 8015a40:	bfbb      	ittet	lt
 8015a42:	323c      	addlt	r2, #60	; 0x3c
 8015a44:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8015a48:	6062      	strge	r2, [r4, #4]
 8015a4a:	6062      	strlt	r2, [r4, #4]
 8015a4c:	bfb8      	it	lt
 8015a4e:	60a3      	strlt	r3, [r4, #8]
 8015a50:	68a1      	ldr	r1, [r4, #8]
 8015a52:	2917      	cmp	r1, #23
 8015a54:	d911      	bls.n	8015a7a <validate_structure+0x82>
 8015a56:	2218      	movs	r2, #24
 8015a58:	4668      	mov	r0, sp
 8015a5a:	f002 fa45 	bl	8017ee8 <div>
 8015a5e:	9a01      	ldr	r2, [sp, #4]
 8015a60:	68e3      	ldr	r3, [r4, #12]
 8015a62:	9900      	ldr	r1, [sp, #0]
 8015a64:	2a00      	cmp	r2, #0
 8015a66:	440b      	add	r3, r1
 8015a68:	60e3      	str	r3, [r4, #12]
 8015a6a:	bfbb      	ittet	lt
 8015a6c:	3218      	addlt	r2, #24
 8015a6e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8015a72:	60a2      	strge	r2, [r4, #8]
 8015a74:	60a2      	strlt	r2, [r4, #8]
 8015a76:	bfb8      	it	lt
 8015a78:	60e3      	strlt	r3, [r4, #12]
 8015a7a:	6921      	ldr	r1, [r4, #16]
 8015a7c:	290b      	cmp	r1, #11
 8015a7e:	d911      	bls.n	8015aa4 <validate_structure+0xac>
 8015a80:	220c      	movs	r2, #12
 8015a82:	4668      	mov	r0, sp
 8015a84:	f002 fa30 	bl	8017ee8 <div>
 8015a88:	9a01      	ldr	r2, [sp, #4]
 8015a8a:	6963      	ldr	r3, [r4, #20]
 8015a8c:	9900      	ldr	r1, [sp, #0]
 8015a8e:	2a00      	cmp	r2, #0
 8015a90:	440b      	add	r3, r1
 8015a92:	6163      	str	r3, [r4, #20]
 8015a94:	bfbb      	ittet	lt
 8015a96:	320c      	addlt	r2, #12
 8015a98:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8015a9c:	6122      	strge	r2, [r4, #16]
 8015a9e:	6122      	strlt	r2, [r4, #16]
 8015aa0:	bfb8      	it	lt
 8015aa2:	6163      	strlt	r3, [r4, #20]
 8015aa4:	6963      	ldr	r3, [r4, #20]
 8015aa6:	0799      	lsls	r1, r3, #30
 8015aa8:	d120      	bne.n	8015aec <validate_structure+0xf4>
 8015aaa:	2164      	movs	r1, #100	; 0x64
 8015aac:	fb93 f2f1 	sdiv	r2, r3, r1
 8015ab0:	fb01 3212 	mls	r2, r1, r2, r3
 8015ab4:	b9e2      	cbnz	r2, 8015af0 <validate_structure+0xf8>
 8015ab6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8015aba:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8015abe:	fb93 f2f1 	sdiv	r2, r3, r1
 8015ac2:	fb01 3312 	mls	r3, r1, r2, r3
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	bf14      	ite	ne
 8015aca:	231c      	movne	r3, #28
 8015acc:	231d      	moveq	r3, #29
 8015ace:	68e2      	ldr	r2, [r4, #12]
 8015ad0:	2a00      	cmp	r2, #0
 8015ad2:	dc0f      	bgt.n	8015af4 <validate_structure+0xfc>
 8015ad4:	4f33      	ldr	r7, [pc, #204]	; (8015ba4 <validate_structure+0x1ac>)
 8015ad6:	260b      	movs	r6, #11
 8015ad8:	2064      	movs	r0, #100	; 0x64
 8015ada:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8015ade:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8015ae2:	f1bc 0f00 	cmp.w	ip, #0
 8015ae6:	dd31      	ble.n	8015b4c <validate_structure+0x154>
 8015ae8:	b003      	add	sp, #12
 8015aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015aec:	231c      	movs	r3, #28
 8015aee:	e7ee      	b.n	8015ace <validate_structure+0xd6>
 8015af0:	231d      	movs	r3, #29
 8015af2:	e7ec      	b.n	8015ace <validate_structure+0xd6>
 8015af4:	4f2b      	ldr	r7, [pc, #172]	; (8015ba4 <validate_structure+0x1ac>)
 8015af6:	f04f 0c00 	mov.w	ip, #0
 8015afa:	2564      	movs	r5, #100	; 0x64
 8015afc:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8015b00:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8015b04:	2a01      	cmp	r2, #1
 8015b06:	bf14      	ite	ne
 8015b08:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 8015b0c:	4618      	moveq	r0, r3
 8015b0e:	4281      	cmp	r1, r0
 8015b10:	ddea      	ble.n	8015ae8 <validate_structure+0xf0>
 8015b12:	3201      	adds	r2, #1
 8015b14:	1a09      	subs	r1, r1, r0
 8015b16:	2a0c      	cmp	r2, #12
 8015b18:	60e1      	str	r1, [r4, #12]
 8015b1a:	6122      	str	r2, [r4, #16]
 8015b1c:	d1f0      	bne.n	8015b00 <validate_structure+0x108>
 8015b1e:	6963      	ldr	r3, [r4, #20]
 8015b20:	1c5a      	adds	r2, r3, #1
 8015b22:	0791      	lsls	r1, r2, #30
 8015b24:	e9c4 c204 	strd	ip, r2, [r4, #16]
 8015b28:	d137      	bne.n	8015b9a <validate_structure+0x1a2>
 8015b2a:	fb92 f1f5 	sdiv	r1, r2, r5
 8015b2e:	fb05 2211 	mls	r2, r5, r1, r2
 8015b32:	2a00      	cmp	r2, #0
 8015b34:	d133      	bne.n	8015b9e <validate_structure+0x1a6>
 8015b36:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8015b3a:	fb93 f2f6 	sdiv	r2, r3, r6
 8015b3e:	fb06 3312 	mls	r3, r6, r2, r3
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	bf14      	ite	ne
 8015b46:	231c      	movne	r3, #28
 8015b48:	231d      	moveq	r3, #29
 8015b4a:	e7d9      	b.n	8015b00 <validate_structure+0x108>
 8015b4c:	6921      	ldr	r1, [r4, #16]
 8015b4e:	3901      	subs	r1, #1
 8015b50:	6121      	str	r1, [r4, #16]
 8015b52:	3101      	adds	r1, #1
 8015b54:	d114      	bne.n	8015b80 <validate_structure+0x188>
 8015b56:	6963      	ldr	r3, [r4, #20]
 8015b58:	1e59      	subs	r1, r3, #1
 8015b5a:	078a      	lsls	r2, r1, #30
 8015b5c:	e9c4 6104 	strd	r6, r1, [r4, #16]
 8015b60:	d117      	bne.n	8015b92 <validate_structure+0x19a>
 8015b62:	fb91 f2f0 	sdiv	r2, r1, r0
 8015b66:	fb00 1112 	mls	r1, r0, r2, r1
 8015b6a:	b9a1      	cbnz	r1, 8015b96 <validate_structure+0x19e>
 8015b6c:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8015b70:	fb93 f2f5 	sdiv	r2, r3, r5
 8015b74:	fb05 3312 	mls	r3, r5, r2, r3
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	bf14      	ite	ne
 8015b7c:	231c      	movne	r3, #28
 8015b7e:	231d      	moveq	r3, #29
 8015b80:	6922      	ldr	r2, [r4, #16]
 8015b82:	2a01      	cmp	r2, #1
 8015b84:	bf14      	ite	ne
 8015b86:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8015b8a:	461a      	moveq	r2, r3
 8015b8c:	4462      	add	r2, ip
 8015b8e:	60e2      	str	r2, [r4, #12]
 8015b90:	e7a5      	b.n	8015ade <validate_structure+0xe6>
 8015b92:	231c      	movs	r3, #28
 8015b94:	e7f4      	b.n	8015b80 <validate_structure+0x188>
 8015b96:	231d      	movs	r3, #29
 8015b98:	e7f2      	b.n	8015b80 <validate_structure+0x188>
 8015b9a:	231c      	movs	r3, #28
 8015b9c:	e7b0      	b.n	8015b00 <validate_structure+0x108>
 8015b9e:	231d      	movs	r3, #29
 8015ba0:	e7ae      	b.n	8015b00 <validate_structure+0x108>
 8015ba2:	bf00      	nop
 8015ba4:	0801c058 	.word	0x0801c058

08015ba8 <mktime>:
 8015ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bac:	b08b      	sub	sp, #44	; 0x2c
 8015bae:	4605      	mov	r5, r0
 8015bb0:	f003 fbea 	bl	8019388 <__gettzinfo>
 8015bb4:	4607      	mov	r7, r0
 8015bb6:	4628      	mov	r0, r5
 8015bb8:	f7ff ff1e 	bl	80159f8 <validate_structure>
 8015bbc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015bc0:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 8015bc4:	68a8      	ldr	r0, [r5, #8]
 8015bc6:	696e      	ldr	r6, [r5, #20]
 8015bc8:	fb0a 2303 	mla	r3, sl, r3, r2
 8015bcc:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 8015bd0:	fb0a 3a00 	mla	sl, sl, r0, r3
 8015bd4:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 8015bd8:	4ac3      	ldr	r2, [pc, #780]	; (8015ee8 <mktime+0x340>)
 8015bda:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8015bde:	3c01      	subs	r4, #1
 8015be0:	2b01      	cmp	r3, #1
 8015be2:	4414      	add	r4, r2
 8015be4:	dd11      	ble.n	8015c0a <mktime+0x62>
 8015be6:	07b1      	lsls	r1, r6, #30
 8015be8:	d10f      	bne.n	8015c0a <mktime+0x62>
 8015bea:	2264      	movs	r2, #100	; 0x64
 8015bec:	fb96 f3f2 	sdiv	r3, r6, r2
 8015bf0:	fb02 6313 	mls	r3, r2, r3, r6
 8015bf4:	b943      	cbnz	r3, 8015c08 <mktime+0x60>
 8015bf6:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 8015bfa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8015bfe:	fb91 f3f2 	sdiv	r3, r1, r2
 8015c02:	fb02 1313 	mls	r3, r2, r3, r1
 8015c06:	b903      	cbnz	r3, 8015c0a <mktime+0x62>
 8015c08:	3401      	adds	r4, #1
 8015c0a:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8015c0e:	3310      	adds	r3, #16
 8015c10:	f644 6220 	movw	r2, #20000	; 0x4e20
 8015c14:	4293      	cmp	r3, r2
 8015c16:	61ec      	str	r4, [r5, #28]
 8015c18:	f200 8161 	bhi.w	8015ede <mktime+0x336>
 8015c1c:	2e46      	cmp	r6, #70	; 0x46
 8015c1e:	dd77      	ble.n	8015d10 <mktime+0x168>
 8015c20:	2346      	movs	r3, #70	; 0x46
 8015c22:	f240 1e6d 	movw	lr, #365	; 0x16d
 8015c26:	2164      	movs	r1, #100	; 0x64
 8015c28:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8015c2c:	079a      	lsls	r2, r3, #30
 8015c2e:	d169      	bne.n	8015d04 <mktime+0x15c>
 8015c30:	fb93 f2f1 	sdiv	r2, r3, r1
 8015c34:	fb01 3212 	mls	r2, r1, r2, r3
 8015c38:	2a00      	cmp	r2, #0
 8015c3a:	d166      	bne.n	8015d0a <mktime+0x162>
 8015c3c:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8015c40:	fb9c f2f0 	sdiv	r2, ip, r0
 8015c44:	fb00 c212 	mls	r2, r0, r2, ip
 8015c48:	2a00      	cmp	r2, #0
 8015c4a:	bf14      	ite	ne
 8015c4c:	4672      	movne	r2, lr
 8015c4e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8015c52:	3301      	adds	r3, #1
 8015c54:	429e      	cmp	r6, r3
 8015c56:	4414      	add	r4, r2
 8015c58:	d1e8      	bne.n	8015c2c <mktime+0x84>
 8015c5a:	4ba4      	ldr	r3, [pc, #656]	; (8015eec <mktime+0x344>)
 8015c5c:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8015c60:	fbc3 ab04 	smlal	sl, fp, r3, r4
 8015c64:	f001 ff52 	bl	8017b0c <__tz_lock>
 8015c68:	f001 ff5c 	bl	8017b24 <_tzset_unlocked>
 8015c6c:	4ba0      	ldr	r3, [pc, #640]	; (8015ef0 <mktime+0x348>)
 8015c6e:	f8d3 9000 	ldr.w	r9, [r3]
 8015c72:	f1b9 0f00 	cmp.w	r9, #0
 8015c76:	d03f      	beq.n	8015cf8 <mktime+0x150>
 8015c78:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8015c7c:	6968      	ldr	r0, [r5, #20]
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	f1b9 0f01 	cmp.w	r9, #1
 8015c84:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8015c88:	46c8      	mov	r8, r9
 8015c8a:	bfa8      	it	ge
 8015c8c:	f04f 0801 	movge.w	r8, #1
 8015c90:	4283      	cmp	r3, r0
 8015c92:	d17f      	bne.n	8015d94 <mktime+0x1ec>
 8015c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c96:	4619      	mov	r1, r3
 8015c98:	17da      	asrs	r2, r3, #31
 8015c9a:	e9cd 1200 	strd	r1, r2, [sp]
 8015c9e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8015ca2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8015ca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015caa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015cac:	1a80      	subs	r0, r0, r2
 8015cae:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 8015cb2:	4582      	cmp	sl, r0
 8015cb4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015cb8:	eb7b 0101 	sbcs.w	r1, fp, r1
 8015cbc:	da71      	bge.n	8015da2 <mktime+0x1fa>
 8015cbe:	9800      	ldr	r0, [sp, #0]
 8015cc0:	6a39      	ldr	r1, [r7, #32]
 8015cc2:	1a09      	subs	r1, r1, r0
 8015cc4:	9104      	str	r1, [sp, #16]
 8015cc6:	9801      	ldr	r0, [sp, #4]
 8015cc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015cca:	eb61 0100 	sbc.w	r1, r1, r0
 8015cce:	9105      	str	r1, [sp, #20]
 8015cd0:	6839      	ldr	r1, [r7, #0]
 8015cd2:	2900      	cmp	r1, #0
 8015cd4:	d075      	beq.n	8015dc2 <mktime+0x21a>
 8015cd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015cda:	4582      	cmp	sl, r0
 8015cdc:	eb7b 0101 	sbcs.w	r1, fp, r1
 8015ce0:	db05      	blt.n	8015cee <mktime+0x146>
 8015ce2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015ce6:	4582      	cmp	sl, r0
 8015ce8:	eb7b 0101 	sbcs.w	r1, fp, r1
 8015cec:	db6f      	blt.n	8015dce <mktime+0x226>
 8015cee:	f1b9 0f00 	cmp.w	r9, #0
 8015cf2:	f04f 0900 	mov.w	r9, #0
 8015cf6:	da6f      	bge.n	8015dd8 <mktime+0x230>
 8015cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cfa:	eb1a 0a03 	adds.w	sl, sl, r3
 8015cfe:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8015d02:	e0ae      	b.n	8015e62 <mktime+0x2ba>
 8015d04:	f240 126d 	movw	r2, #365	; 0x16d
 8015d08:	e7a3      	b.n	8015c52 <mktime+0xaa>
 8015d0a:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8015d0e:	e7a0      	b.n	8015c52 <mktime+0xaa>
 8015d10:	d0a3      	beq.n	8015c5a <mktime+0xb2>
 8015d12:	2345      	movs	r3, #69	; 0x45
 8015d14:	f240 1e6d 	movw	lr, #365	; 0x16d
 8015d18:	2164      	movs	r1, #100	; 0x64
 8015d1a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8015d1e:	e012      	b.n	8015d46 <mktime+0x19e>
 8015d20:	bb62      	cbnz	r2, 8015d7c <mktime+0x1d4>
 8015d22:	fb93 f2f1 	sdiv	r2, r3, r1
 8015d26:	fb01 3212 	mls	r2, r1, r2, r3
 8015d2a:	bb52      	cbnz	r2, 8015d82 <mktime+0x1da>
 8015d2c:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8015d30:	fb9c f2f0 	sdiv	r2, ip, r0
 8015d34:	fb00 c212 	mls	r2, r0, r2, ip
 8015d38:	2a00      	cmp	r2, #0
 8015d3a:	bf14      	ite	ne
 8015d3c:	4672      	movne	r2, lr
 8015d3e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8015d42:	1aa4      	subs	r4, r4, r2
 8015d44:	3b01      	subs	r3, #1
 8015d46:	429e      	cmp	r6, r3
 8015d48:	f003 0203 	and.w	r2, r3, #3
 8015d4c:	dbe8      	blt.n	8015d20 <mktime+0x178>
 8015d4e:	b9da      	cbnz	r2, 8015d88 <mktime+0x1e0>
 8015d50:	2264      	movs	r2, #100	; 0x64
 8015d52:	fb96 f3f2 	sdiv	r3, r6, r2
 8015d56:	fb02 6313 	mls	r3, r2, r3, r6
 8015d5a:	b9c3      	cbnz	r3, 8015d8e <mktime+0x1e6>
 8015d5c:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 8015d60:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8015d64:	fb91 f3f2 	sdiv	r3, r1, r2
 8015d68:	fb02 1313 	mls	r3, r2, r3, r1
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	f240 136d 	movw	r3, #365	; 0x16d
 8015d72:	bf08      	it	eq
 8015d74:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8015d78:	1ae4      	subs	r4, r4, r3
 8015d7a:	e76e      	b.n	8015c5a <mktime+0xb2>
 8015d7c:	f240 126d 	movw	r2, #365	; 0x16d
 8015d80:	e7df      	b.n	8015d42 <mktime+0x19a>
 8015d82:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8015d86:	e7dc      	b.n	8015d42 <mktime+0x19a>
 8015d88:	f240 136d 	movw	r3, #365	; 0x16d
 8015d8c:	e7f4      	b.n	8015d78 <mktime+0x1d0>
 8015d8e:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8015d92:	e7f1      	b.n	8015d78 <mktime+0x1d0>
 8015d94:	f001 fe12 	bl	80179bc <__tzcalc_limits>
 8015d98:	2800      	cmp	r0, #0
 8015d9a:	f47f af7b 	bne.w	8015c94 <mktime+0xec>
 8015d9e:	46c1      	mov	r9, r8
 8015da0:	e054      	b.n	8015e4c <mktime+0x2a4>
 8015da2:	9800      	ldr	r0, [sp, #0]
 8015da4:	9902      	ldr	r1, [sp, #8]
 8015da6:	1a09      	subs	r1, r1, r0
 8015da8:	9108      	str	r1, [sp, #32]
 8015daa:	9801      	ldr	r0, [sp, #4]
 8015dac:	9903      	ldr	r1, [sp, #12]
 8015dae:	eb61 0100 	sbc.w	r1, r1, r0
 8015db2:	9109      	str	r1, [sp, #36]	; 0x24
 8015db4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015db8:	4582      	cmp	sl, r0
 8015dba:	eb7b 0101 	sbcs.w	r1, fp, r1
 8015dbe:	dbee      	blt.n	8015d9e <mktime+0x1f6>
 8015dc0:	e77d      	b.n	8015cbe <mktime+0x116>
 8015dc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015dc6:	4582      	cmp	sl, r0
 8015dc8:	eb7b 0101 	sbcs.w	r1, fp, r1
 8015dcc:	db89      	blt.n	8015ce2 <mktime+0x13a>
 8015dce:	f1b9 0f00 	cmp.w	r9, #0
 8015dd2:	db3f      	blt.n	8015e54 <mktime+0x2ac>
 8015dd4:	f04f 0901 	mov.w	r9, #1
 8015dd8:	ea88 0809 	eor.w	r8, r8, r9
 8015ddc:	f1b8 0f01 	cmp.w	r8, #1
 8015de0:	d134      	bne.n	8015e4c <mktime+0x2a4>
 8015de2:	f1b9 0f00 	cmp.w	r9, #0
 8015de6:	d04f      	beq.n	8015e88 <mktime+0x2e0>
 8015de8:	1ad3      	subs	r3, r2, r3
 8015dea:	682a      	ldr	r2, [r5, #0]
 8015dec:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8015df0:	441a      	add	r2, r3
 8015df2:	eb1a 0a03 	adds.w	sl, sl, r3
 8015df6:	602a      	str	r2, [r5, #0]
 8015df8:	4628      	mov	r0, r5
 8015dfa:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8015dfe:	f7ff fdfb 	bl	80159f8 <validate_structure>
 8015e02:	68ea      	ldr	r2, [r5, #12]
 8015e04:	ebb2 0208 	subs.w	r2, r2, r8
 8015e08:	d020      	beq.n	8015e4c <mktime+0x2a4>
 8015e0a:	2a01      	cmp	r2, #1
 8015e0c:	dc3e      	bgt.n	8015e8c <mktime+0x2e4>
 8015e0e:	1c90      	adds	r0, r2, #2
 8015e10:	bfd8      	it	le
 8015e12:	2201      	movle	r2, #1
 8015e14:	69eb      	ldr	r3, [r5, #28]
 8015e16:	18d3      	adds	r3, r2, r3
 8015e18:	4414      	add	r4, r2
 8015e1a:	d540      	bpl.n	8015e9e <mktime+0x2f6>
 8015e1c:	1e72      	subs	r2, r6, #1
 8015e1e:	0791      	lsls	r1, r2, #30
 8015e20:	d137      	bne.n	8015e92 <mktime+0x2ea>
 8015e22:	2164      	movs	r1, #100	; 0x64
 8015e24:	fb92 f3f1 	sdiv	r3, r2, r1
 8015e28:	fb01 2313 	mls	r3, r1, r3, r2
 8015e2c:	bba3      	cbnz	r3, 8015e98 <mktime+0x2f0>
 8015e2e:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8015e32:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8015e36:	fb96 f3f2 	sdiv	r3, r6, r2
 8015e3a:	fb02 6613 	mls	r6, r2, r3, r6
 8015e3e:	2e00      	cmp	r6, #0
 8015e40:	f240 136d 	movw	r3, #365	; 0x16d
 8015e44:	bf18      	it	ne
 8015e46:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8015e4a:	61eb      	str	r3, [r5, #28]
 8015e4c:	f1b9 0f01 	cmp.w	r9, #1
 8015e50:	f47f af52 	bne.w	8015cf8 <mktime+0x150>
 8015e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015e56:	eb1a 0a03 	adds.w	sl, sl, r3
 8015e5a:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8015e5e:	f04f 0901 	mov.w	r9, #1
 8015e62:	f001 fe59 	bl	8017b18 <__tz_unlock>
 8015e66:	3404      	adds	r4, #4
 8015e68:	2307      	movs	r3, #7
 8015e6a:	fb94 f3f3 	sdiv	r3, r4, r3
 8015e6e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8015e72:	1ae4      	subs	r4, r4, r3
 8015e74:	bf48      	it	mi
 8015e76:	3407      	addmi	r4, #7
 8015e78:	f8c5 9020 	str.w	r9, [r5, #32]
 8015e7c:	61ac      	str	r4, [r5, #24]
 8015e7e:	4650      	mov	r0, sl
 8015e80:	4659      	mov	r1, fp
 8015e82:	b00b      	add	sp, #44	; 0x2c
 8015e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e88:	1a9b      	subs	r3, r3, r2
 8015e8a:	e7ae      	b.n	8015dea <mktime+0x242>
 8015e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8015e90:	e7c0      	b.n	8015e14 <mktime+0x26c>
 8015e92:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8015e96:	e7d8      	b.n	8015e4a <mktime+0x2a2>
 8015e98:	f240 136d 	movw	r3, #365	; 0x16d
 8015e9c:	e7d5      	b.n	8015e4a <mktime+0x2a2>
 8015e9e:	07b2      	lsls	r2, r6, #30
 8015ea0:	d117      	bne.n	8015ed2 <mktime+0x32a>
 8015ea2:	2164      	movs	r1, #100	; 0x64
 8015ea4:	fb96 f2f1 	sdiv	r2, r6, r1
 8015ea8:	fb01 6212 	mls	r2, r1, r2, r6
 8015eac:	b9a2      	cbnz	r2, 8015ed8 <mktime+0x330>
 8015eae:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8015eb2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8015eb6:	fb96 f2f1 	sdiv	r2, r6, r1
 8015eba:	fb01 6612 	mls	r6, r1, r2, r6
 8015ebe:	2e00      	cmp	r6, #0
 8015ec0:	f240 126d 	movw	r2, #365	; 0x16d
 8015ec4:	bf08      	it	eq
 8015ec6:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8015eca:	4293      	cmp	r3, r2
 8015ecc:	bfa8      	it	ge
 8015ece:	1a9b      	subge	r3, r3, r2
 8015ed0:	e7bb      	b.n	8015e4a <mktime+0x2a2>
 8015ed2:	f240 126d 	movw	r2, #365	; 0x16d
 8015ed6:	e7f8      	b.n	8015eca <mktime+0x322>
 8015ed8:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8015edc:	e7f5      	b.n	8015eca <mktime+0x322>
 8015ede:	f04f 3aff 	mov.w	sl, #4294967295
 8015ee2:	f04f 3bff 	mov.w	fp, #4294967295
 8015ee6:	e7ca      	b.n	8015e7e <mktime+0x2d6>
 8015ee8:	0801c088 	.word	0x0801c088
 8015eec:	00015180 	.word	0x00015180
 8015ef0:	200021a8 	.word	0x200021a8

08015ef4 <_free_r>:
 8015ef4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015ef6:	2900      	cmp	r1, #0
 8015ef8:	d048      	beq.n	8015f8c <_free_r+0x98>
 8015efa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015efe:	9001      	str	r0, [sp, #4]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	f1a1 0404 	sub.w	r4, r1, #4
 8015f06:	bfb8      	it	lt
 8015f08:	18e4      	addlt	r4, r4, r3
 8015f0a:	f003 fa5d 	bl	80193c8 <__malloc_lock>
 8015f0e:	4a20      	ldr	r2, [pc, #128]	; (8015f90 <_free_r+0x9c>)
 8015f10:	9801      	ldr	r0, [sp, #4]
 8015f12:	6813      	ldr	r3, [r2, #0]
 8015f14:	4615      	mov	r5, r2
 8015f16:	b933      	cbnz	r3, 8015f26 <_free_r+0x32>
 8015f18:	6063      	str	r3, [r4, #4]
 8015f1a:	6014      	str	r4, [r2, #0]
 8015f1c:	b003      	add	sp, #12
 8015f1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015f22:	f003 ba57 	b.w	80193d4 <__malloc_unlock>
 8015f26:	42a3      	cmp	r3, r4
 8015f28:	d90b      	bls.n	8015f42 <_free_r+0x4e>
 8015f2a:	6821      	ldr	r1, [r4, #0]
 8015f2c:	1862      	adds	r2, r4, r1
 8015f2e:	4293      	cmp	r3, r2
 8015f30:	bf04      	itt	eq
 8015f32:	681a      	ldreq	r2, [r3, #0]
 8015f34:	685b      	ldreq	r3, [r3, #4]
 8015f36:	6063      	str	r3, [r4, #4]
 8015f38:	bf04      	itt	eq
 8015f3a:	1852      	addeq	r2, r2, r1
 8015f3c:	6022      	streq	r2, [r4, #0]
 8015f3e:	602c      	str	r4, [r5, #0]
 8015f40:	e7ec      	b.n	8015f1c <_free_r+0x28>
 8015f42:	461a      	mov	r2, r3
 8015f44:	685b      	ldr	r3, [r3, #4]
 8015f46:	b10b      	cbz	r3, 8015f4c <_free_r+0x58>
 8015f48:	42a3      	cmp	r3, r4
 8015f4a:	d9fa      	bls.n	8015f42 <_free_r+0x4e>
 8015f4c:	6811      	ldr	r1, [r2, #0]
 8015f4e:	1855      	adds	r5, r2, r1
 8015f50:	42a5      	cmp	r5, r4
 8015f52:	d10b      	bne.n	8015f6c <_free_r+0x78>
 8015f54:	6824      	ldr	r4, [r4, #0]
 8015f56:	4421      	add	r1, r4
 8015f58:	1854      	adds	r4, r2, r1
 8015f5a:	42a3      	cmp	r3, r4
 8015f5c:	6011      	str	r1, [r2, #0]
 8015f5e:	d1dd      	bne.n	8015f1c <_free_r+0x28>
 8015f60:	681c      	ldr	r4, [r3, #0]
 8015f62:	685b      	ldr	r3, [r3, #4]
 8015f64:	6053      	str	r3, [r2, #4]
 8015f66:	4421      	add	r1, r4
 8015f68:	6011      	str	r1, [r2, #0]
 8015f6a:	e7d7      	b.n	8015f1c <_free_r+0x28>
 8015f6c:	d902      	bls.n	8015f74 <_free_r+0x80>
 8015f6e:	230c      	movs	r3, #12
 8015f70:	6003      	str	r3, [r0, #0]
 8015f72:	e7d3      	b.n	8015f1c <_free_r+0x28>
 8015f74:	6825      	ldr	r5, [r4, #0]
 8015f76:	1961      	adds	r1, r4, r5
 8015f78:	428b      	cmp	r3, r1
 8015f7a:	bf04      	itt	eq
 8015f7c:	6819      	ldreq	r1, [r3, #0]
 8015f7e:	685b      	ldreq	r3, [r3, #4]
 8015f80:	6063      	str	r3, [r4, #4]
 8015f82:	bf04      	itt	eq
 8015f84:	1949      	addeq	r1, r1, r5
 8015f86:	6021      	streq	r1, [r4, #0]
 8015f88:	6054      	str	r4, [r2, #4]
 8015f8a:	e7c7      	b.n	8015f1c <_free_r+0x28>
 8015f8c:	b003      	add	sp, #12
 8015f8e:	bd30      	pop	{r4, r5, pc}
 8015f90:	20002184 	.word	0x20002184

08015f94 <_malloc_r>:
 8015f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f96:	1ccd      	adds	r5, r1, #3
 8015f98:	f025 0503 	bic.w	r5, r5, #3
 8015f9c:	3508      	adds	r5, #8
 8015f9e:	2d0c      	cmp	r5, #12
 8015fa0:	bf38      	it	cc
 8015fa2:	250c      	movcc	r5, #12
 8015fa4:	2d00      	cmp	r5, #0
 8015fa6:	4606      	mov	r6, r0
 8015fa8:	db01      	blt.n	8015fae <_malloc_r+0x1a>
 8015faa:	42a9      	cmp	r1, r5
 8015fac:	d903      	bls.n	8015fb6 <_malloc_r+0x22>
 8015fae:	230c      	movs	r3, #12
 8015fb0:	6033      	str	r3, [r6, #0]
 8015fb2:	2000      	movs	r0, #0
 8015fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015fb6:	f003 fa07 	bl	80193c8 <__malloc_lock>
 8015fba:	4921      	ldr	r1, [pc, #132]	; (8016040 <_malloc_r+0xac>)
 8015fbc:	680a      	ldr	r2, [r1, #0]
 8015fbe:	4614      	mov	r4, r2
 8015fc0:	b99c      	cbnz	r4, 8015fea <_malloc_r+0x56>
 8015fc2:	4f20      	ldr	r7, [pc, #128]	; (8016044 <_malloc_r+0xb0>)
 8015fc4:	683b      	ldr	r3, [r7, #0]
 8015fc6:	b923      	cbnz	r3, 8015fd2 <_malloc_r+0x3e>
 8015fc8:	4621      	mov	r1, r4
 8015fca:	4630      	mov	r0, r6
 8015fcc:	f000 fca6 	bl	801691c <_sbrk_r>
 8015fd0:	6038      	str	r0, [r7, #0]
 8015fd2:	4629      	mov	r1, r5
 8015fd4:	4630      	mov	r0, r6
 8015fd6:	f000 fca1 	bl	801691c <_sbrk_r>
 8015fda:	1c43      	adds	r3, r0, #1
 8015fdc:	d123      	bne.n	8016026 <_malloc_r+0x92>
 8015fde:	230c      	movs	r3, #12
 8015fe0:	6033      	str	r3, [r6, #0]
 8015fe2:	4630      	mov	r0, r6
 8015fe4:	f003 f9f6 	bl	80193d4 <__malloc_unlock>
 8015fe8:	e7e3      	b.n	8015fb2 <_malloc_r+0x1e>
 8015fea:	6823      	ldr	r3, [r4, #0]
 8015fec:	1b5b      	subs	r3, r3, r5
 8015fee:	d417      	bmi.n	8016020 <_malloc_r+0x8c>
 8015ff0:	2b0b      	cmp	r3, #11
 8015ff2:	d903      	bls.n	8015ffc <_malloc_r+0x68>
 8015ff4:	6023      	str	r3, [r4, #0]
 8015ff6:	441c      	add	r4, r3
 8015ff8:	6025      	str	r5, [r4, #0]
 8015ffa:	e004      	b.n	8016006 <_malloc_r+0x72>
 8015ffc:	6863      	ldr	r3, [r4, #4]
 8015ffe:	42a2      	cmp	r2, r4
 8016000:	bf0c      	ite	eq
 8016002:	600b      	streq	r3, [r1, #0]
 8016004:	6053      	strne	r3, [r2, #4]
 8016006:	4630      	mov	r0, r6
 8016008:	f003 f9e4 	bl	80193d4 <__malloc_unlock>
 801600c:	f104 000b 	add.w	r0, r4, #11
 8016010:	1d23      	adds	r3, r4, #4
 8016012:	f020 0007 	bic.w	r0, r0, #7
 8016016:	1ac2      	subs	r2, r0, r3
 8016018:	d0cc      	beq.n	8015fb4 <_malloc_r+0x20>
 801601a:	1a1b      	subs	r3, r3, r0
 801601c:	50a3      	str	r3, [r4, r2]
 801601e:	e7c9      	b.n	8015fb4 <_malloc_r+0x20>
 8016020:	4622      	mov	r2, r4
 8016022:	6864      	ldr	r4, [r4, #4]
 8016024:	e7cc      	b.n	8015fc0 <_malloc_r+0x2c>
 8016026:	1cc4      	adds	r4, r0, #3
 8016028:	f024 0403 	bic.w	r4, r4, #3
 801602c:	42a0      	cmp	r0, r4
 801602e:	d0e3      	beq.n	8015ff8 <_malloc_r+0x64>
 8016030:	1a21      	subs	r1, r4, r0
 8016032:	4630      	mov	r0, r6
 8016034:	f000 fc72 	bl	801691c <_sbrk_r>
 8016038:	3001      	adds	r0, #1
 801603a:	d1dd      	bne.n	8015ff8 <_malloc_r+0x64>
 801603c:	e7cf      	b.n	8015fde <_malloc_r+0x4a>
 801603e:	bf00      	nop
 8016040:	20002184 	.word	0x20002184
 8016044:	20002188 	.word	0x20002188

08016048 <__cvt>:
 8016048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801604c:	ec55 4b10 	vmov	r4, r5, d0
 8016050:	2d00      	cmp	r5, #0
 8016052:	460e      	mov	r6, r1
 8016054:	4619      	mov	r1, r3
 8016056:	462b      	mov	r3, r5
 8016058:	bfbb      	ittet	lt
 801605a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801605e:	461d      	movlt	r5, r3
 8016060:	2300      	movge	r3, #0
 8016062:	232d      	movlt	r3, #45	; 0x2d
 8016064:	700b      	strb	r3, [r1, #0]
 8016066:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016068:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801606c:	4691      	mov	r9, r2
 801606e:	f023 0820 	bic.w	r8, r3, #32
 8016072:	bfbc      	itt	lt
 8016074:	4622      	movlt	r2, r4
 8016076:	4614      	movlt	r4, r2
 8016078:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801607c:	d005      	beq.n	801608a <__cvt+0x42>
 801607e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8016082:	d100      	bne.n	8016086 <__cvt+0x3e>
 8016084:	3601      	adds	r6, #1
 8016086:	2102      	movs	r1, #2
 8016088:	e000      	b.n	801608c <__cvt+0x44>
 801608a:	2103      	movs	r1, #3
 801608c:	ab03      	add	r3, sp, #12
 801608e:	9301      	str	r3, [sp, #4]
 8016090:	ab02      	add	r3, sp, #8
 8016092:	9300      	str	r3, [sp, #0]
 8016094:	ec45 4b10 	vmov	d0, r4, r5
 8016098:	4653      	mov	r3, sl
 801609a:	4632      	mov	r2, r6
 801609c:	f001 ffc4 	bl	8018028 <_dtoa_r>
 80160a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80160a4:	4607      	mov	r7, r0
 80160a6:	d102      	bne.n	80160ae <__cvt+0x66>
 80160a8:	f019 0f01 	tst.w	r9, #1
 80160ac:	d022      	beq.n	80160f4 <__cvt+0xac>
 80160ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80160b2:	eb07 0906 	add.w	r9, r7, r6
 80160b6:	d110      	bne.n	80160da <__cvt+0x92>
 80160b8:	783b      	ldrb	r3, [r7, #0]
 80160ba:	2b30      	cmp	r3, #48	; 0x30
 80160bc:	d10a      	bne.n	80160d4 <__cvt+0x8c>
 80160be:	2200      	movs	r2, #0
 80160c0:	2300      	movs	r3, #0
 80160c2:	4620      	mov	r0, r4
 80160c4:	4629      	mov	r1, r5
 80160c6:	f7eb f90f 	bl	80012e8 <__aeabi_dcmpeq>
 80160ca:	b918      	cbnz	r0, 80160d4 <__cvt+0x8c>
 80160cc:	f1c6 0601 	rsb	r6, r6, #1
 80160d0:	f8ca 6000 	str.w	r6, [sl]
 80160d4:	f8da 3000 	ldr.w	r3, [sl]
 80160d8:	4499      	add	r9, r3
 80160da:	2200      	movs	r2, #0
 80160dc:	2300      	movs	r3, #0
 80160de:	4620      	mov	r0, r4
 80160e0:	4629      	mov	r1, r5
 80160e2:	f7eb f901 	bl	80012e8 <__aeabi_dcmpeq>
 80160e6:	b108      	cbz	r0, 80160ec <__cvt+0xa4>
 80160e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80160ec:	2230      	movs	r2, #48	; 0x30
 80160ee:	9b03      	ldr	r3, [sp, #12]
 80160f0:	454b      	cmp	r3, r9
 80160f2:	d307      	bcc.n	8016104 <__cvt+0xbc>
 80160f4:	9b03      	ldr	r3, [sp, #12]
 80160f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80160f8:	1bdb      	subs	r3, r3, r7
 80160fa:	4638      	mov	r0, r7
 80160fc:	6013      	str	r3, [r2, #0]
 80160fe:	b004      	add	sp, #16
 8016100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016104:	1c59      	adds	r1, r3, #1
 8016106:	9103      	str	r1, [sp, #12]
 8016108:	701a      	strb	r2, [r3, #0]
 801610a:	e7f0      	b.n	80160ee <__cvt+0xa6>

0801610c <__exponent>:
 801610c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801610e:	4603      	mov	r3, r0
 8016110:	2900      	cmp	r1, #0
 8016112:	bfb8      	it	lt
 8016114:	4249      	neglt	r1, r1
 8016116:	f803 2b02 	strb.w	r2, [r3], #2
 801611a:	bfb4      	ite	lt
 801611c:	222d      	movlt	r2, #45	; 0x2d
 801611e:	222b      	movge	r2, #43	; 0x2b
 8016120:	2909      	cmp	r1, #9
 8016122:	7042      	strb	r2, [r0, #1]
 8016124:	dd2a      	ble.n	801617c <__exponent+0x70>
 8016126:	f10d 0407 	add.w	r4, sp, #7
 801612a:	46a4      	mov	ip, r4
 801612c:	270a      	movs	r7, #10
 801612e:	46a6      	mov	lr, r4
 8016130:	460a      	mov	r2, r1
 8016132:	fb91 f6f7 	sdiv	r6, r1, r7
 8016136:	fb07 1516 	mls	r5, r7, r6, r1
 801613a:	3530      	adds	r5, #48	; 0x30
 801613c:	2a63      	cmp	r2, #99	; 0x63
 801613e:	f104 34ff 	add.w	r4, r4, #4294967295
 8016142:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8016146:	4631      	mov	r1, r6
 8016148:	dcf1      	bgt.n	801612e <__exponent+0x22>
 801614a:	3130      	adds	r1, #48	; 0x30
 801614c:	f1ae 0502 	sub.w	r5, lr, #2
 8016150:	f804 1c01 	strb.w	r1, [r4, #-1]
 8016154:	1c44      	adds	r4, r0, #1
 8016156:	4629      	mov	r1, r5
 8016158:	4561      	cmp	r1, ip
 801615a:	d30a      	bcc.n	8016172 <__exponent+0x66>
 801615c:	f10d 0209 	add.w	r2, sp, #9
 8016160:	eba2 020e 	sub.w	r2, r2, lr
 8016164:	4565      	cmp	r5, ip
 8016166:	bf88      	it	hi
 8016168:	2200      	movhi	r2, #0
 801616a:	4413      	add	r3, r2
 801616c:	1a18      	subs	r0, r3, r0
 801616e:	b003      	add	sp, #12
 8016170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016172:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016176:	f804 2f01 	strb.w	r2, [r4, #1]!
 801617a:	e7ed      	b.n	8016158 <__exponent+0x4c>
 801617c:	2330      	movs	r3, #48	; 0x30
 801617e:	3130      	adds	r1, #48	; 0x30
 8016180:	7083      	strb	r3, [r0, #2]
 8016182:	70c1      	strb	r1, [r0, #3]
 8016184:	1d03      	adds	r3, r0, #4
 8016186:	e7f1      	b.n	801616c <__exponent+0x60>

08016188 <_printf_float>:
 8016188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801618c:	ed2d 8b02 	vpush	{d8}
 8016190:	b08d      	sub	sp, #52	; 0x34
 8016192:	460c      	mov	r4, r1
 8016194:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8016198:	4616      	mov	r6, r2
 801619a:	461f      	mov	r7, r3
 801619c:	4605      	mov	r5, r0
 801619e:	f003 f8f7 	bl	8019390 <_localeconv_r>
 80161a2:	f8d0 a000 	ldr.w	sl, [r0]
 80161a6:	4650      	mov	r0, sl
 80161a8:	f7ea fc1c 	bl	80009e4 <strlen>
 80161ac:	2300      	movs	r3, #0
 80161ae:	930a      	str	r3, [sp, #40]	; 0x28
 80161b0:	6823      	ldr	r3, [r4, #0]
 80161b2:	9305      	str	r3, [sp, #20]
 80161b4:	f8d8 3000 	ldr.w	r3, [r8]
 80161b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80161bc:	3307      	adds	r3, #7
 80161be:	f023 0307 	bic.w	r3, r3, #7
 80161c2:	f103 0208 	add.w	r2, r3, #8
 80161c6:	f8c8 2000 	str.w	r2, [r8]
 80161ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80161d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80161d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80161da:	9307      	str	r3, [sp, #28]
 80161dc:	f8cd 8018 	str.w	r8, [sp, #24]
 80161e0:	ee08 0a10 	vmov	s16, r0
 80161e4:	4b9f      	ldr	r3, [pc, #636]	; (8016464 <_printf_float+0x2dc>)
 80161e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80161ea:	f04f 32ff 	mov.w	r2, #4294967295
 80161ee:	f7eb f8ad 	bl	800134c <__aeabi_dcmpun>
 80161f2:	bb88      	cbnz	r0, 8016258 <_printf_float+0xd0>
 80161f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80161f8:	4b9a      	ldr	r3, [pc, #616]	; (8016464 <_printf_float+0x2dc>)
 80161fa:	f04f 32ff 	mov.w	r2, #4294967295
 80161fe:	f7eb f887 	bl	8001310 <__aeabi_dcmple>
 8016202:	bb48      	cbnz	r0, 8016258 <_printf_float+0xd0>
 8016204:	2200      	movs	r2, #0
 8016206:	2300      	movs	r3, #0
 8016208:	4640      	mov	r0, r8
 801620a:	4649      	mov	r1, r9
 801620c:	f7eb f876 	bl	80012fc <__aeabi_dcmplt>
 8016210:	b110      	cbz	r0, 8016218 <_printf_float+0x90>
 8016212:	232d      	movs	r3, #45	; 0x2d
 8016214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016218:	4b93      	ldr	r3, [pc, #588]	; (8016468 <_printf_float+0x2e0>)
 801621a:	4894      	ldr	r0, [pc, #592]	; (801646c <_printf_float+0x2e4>)
 801621c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8016220:	bf94      	ite	ls
 8016222:	4698      	movls	r8, r3
 8016224:	4680      	movhi	r8, r0
 8016226:	2303      	movs	r3, #3
 8016228:	6123      	str	r3, [r4, #16]
 801622a:	9b05      	ldr	r3, [sp, #20]
 801622c:	f023 0204 	bic.w	r2, r3, #4
 8016230:	6022      	str	r2, [r4, #0]
 8016232:	f04f 0900 	mov.w	r9, #0
 8016236:	9700      	str	r7, [sp, #0]
 8016238:	4633      	mov	r3, r6
 801623a:	aa0b      	add	r2, sp, #44	; 0x2c
 801623c:	4621      	mov	r1, r4
 801623e:	4628      	mov	r0, r5
 8016240:	f000 f9d8 	bl	80165f4 <_printf_common>
 8016244:	3001      	adds	r0, #1
 8016246:	f040 8090 	bne.w	801636a <_printf_float+0x1e2>
 801624a:	f04f 30ff 	mov.w	r0, #4294967295
 801624e:	b00d      	add	sp, #52	; 0x34
 8016250:	ecbd 8b02 	vpop	{d8}
 8016254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016258:	4642      	mov	r2, r8
 801625a:	464b      	mov	r3, r9
 801625c:	4640      	mov	r0, r8
 801625e:	4649      	mov	r1, r9
 8016260:	f7eb f874 	bl	800134c <__aeabi_dcmpun>
 8016264:	b140      	cbz	r0, 8016278 <_printf_float+0xf0>
 8016266:	464b      	mov	r3, r9
 8016268:	2b00      	cmp	r3, #0
 801626a:	bfbc      	itt	lt
 801626c:	232d      	movlt	r3, #45	; 0x2d
 801626e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8016272:	487f      	ldr	r0, [pc, #508]	; (8016470 <_printf_float+0x2e8>)
 8016274:	4b7f      	ldr	r3, [pc, #508]	; (8016474 <_printf_float+0x2ec>)
 8016276:	e7d1      	b.n	801621c <_printf_float+0x94>
 8016278:	6863      	ldr	r3, [r4, #4]
 801627a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801627e:	9206      	str	r2, [sp, #24]
 8016280:	1c5a      	adds	r2, r3, #1
 8016282:	d13f      	bne.n	8016304 <_printf_float+0x17c>
 8016284:	2306      	movs	r3, #6
 8016286:	6063      	str	r3, [r4, #4]
 8016288:	9b05      	ldr	r3, [sp, #20]
 801628a:	6861      	ldr	r1, [r4, #4]
 801628c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8016290:	2300      	movs	r3, #0
 8016292:	9303      	str	r3, [sp, #12]
 8016294:	ab0a      	add	r3, sp, #40	; 0x28
 8016296:	e9cd b301 	strd	fp, r3, [sp, #4]
 801629a:	ab09      	add	r3, sp, #36	; 0x24
 801629c:	ec49 8b10 	vmov	d0, r8, r9
 80162a0:	9300      	str	r3, [sp, #0]
 80162a2:	6022      	str	r2, [r4, #0]
 80162a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80162a8:	4628      	mov	r0, r5
 80162aa:	f7ff fecd 	bl	8016048 <__cvt>
 80162ae:	9b06      	ldr	r3, [sp, #24]
 80162b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80162b2:	2b47      	cmp	r3, #71	; 0x47
 80162b4:	4680      	mov	r8, r0
 80162b6:	d108      	bne.n	80162ca <_printf_float+0x142>
 80162b8:	1cc8      	adds	r0, r1, #3
 80162ba:	db02      	blt.n	80162c2 <_printf_float+0x13a>
 80162bc:	6863      	ldr	r3, [r4, #4]
 80162be:	4299      	cmp	r1, r3
 80162c0:	dd41      	ble.n	8016346 <_printf_float+0x1be>
 80162c2:	f1ab 0b02 	sub.w	fp, fp, #2
 80162c6:	fa5f fb8b 	uxtb.w	fp, fp
 80162ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80162ce:	d820      	bhi.n	8016312 <_printf_float+0x18a>
 80162d0:	3901      	subs	r1, #1
 80162d2:	465a      	mov	r2, fp
 80162d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80162d8:	9109      	str	r1, [sp, #36]	; 0x24
 80162da:	f7ff ff17 	bl	801610c <__exponent>
 80162de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80162e0:	1813      	adds	r3, r2, r0
 80162e2:	2a01      	cmp	r2, #1
 80162e4:	4681      	mov	r9, r0
 80162e6:	6123      	str	r3, [r4, #16]
 80162e8:	dc02      	bgt.n	80162f0 <_printf_float+0x168>
 80162ea:	6822      	ldr	r2, [r4, #0]
 80162ec:	07d2      	lsls	r2, r2, #31
 80162ee:	d501      	bpl.n	80162f4 <_printf_float+0x16c>
 80162f0:	3301      	adds	r3, #1
 80162f2:	6123      	str	r3, [r4, #16]
 80162f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d09c      	beq.n	8016236 <_printf_float+0xae>
 80162fc:	232d      	movs	r3, #45	; 0x2d
 80162fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016302:	e798      	b.n	8016236 <_printf_float+0xae>
 8016304:	9a06      	ldr	r2, [sp, #24]
 8016306:	2a47      	cmp	r2, #71	; 0x47
 8016308:	d1be      	bne.n	8016288 <_printf_float+0x100>
 801630a:	2b00      	cmp	r3, #0
 801630c:	d1bc      	bne.n	8016288 <_printf_float+0x100>
 801630e:	2301      	movs	r3, #1
 8016310:	e7b9      	b.n	8016286 <_printf_float+0xfe>
 8016312:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8016316:	d118      	bne.n	801634a <_printf_float+0x1c2>
 8016318:	2900      	cmp	r1, #0
 801631a:	6863      	ldr	r3, [r4, #4]
 801631c:	dd0b      	ble.n	8016336 <_printf_float+0x1ae>
 801631e:	6121      	str	r1, [r4, #16]
 8016320:	b913      	cbnz	r3, 8016328 <_printf_float+0x1a0>
 8016322:	6822      	ldr	r2, [r4, #0]
 8016324:	07d0      	lsls	r0, r2, #31
 8016326:	d502      	bpl.n	801632e <_printf_float+0x1a6>
 8016328:	3301      	adds	r3, #1
 801632a:	440b      	add	r3, r1
 801632c:	6123      	str	r3, [r4, #16]
 801632e:	65a1      	str	r1, [r4, #88]	; 0x58
 8016330:	f04f 0900 	mov.w	r9, #0
 8016334:	e7de      	b.n	80162f4 <_printf_float+0x16c>
 8016336:	b913      	cbnz	r3, 801633e <_printf_float+0x1b6>
 8016338:	6822      	ldr	r2, [r4, #0]
 801633a:	07d2      	lsls	r2, r2, #31
 801633c:	d501      	bpl.n	8016342 <_printf_float+0x1ba>
 801633e:	3302      	adds	r3, #2
 8016340:	e7f4      	b.n	801632c <_printf_float+0x1a4>
 8016342:	2301      	movs	r3, #1
 8016344:	e7f2      	b.n	801632c <_printf_float+0x1a4>
 8016346:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801634a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801634c:	4299      	cmp	r1, r3
 801634e:	db05      	blt.n	801635c <_printf_float+0x1d4>
 8016350:	6823      	ldr	r3, [r4, #0]
 8016352:	6121      	str	r1, [r4, #16]
 8016354:	07d8      	lsls	r0, r3, #31
 8016356:	d5ea      	bpl.n	801632e <_printf_float+0x1a6>
 8016358:	1c4b      	adds	r3, r1, #1
 801635a:	e7e7      	b.n	801632c <_printf_float+0x1a4>
 801635c:	2900      	cmp	r1, #0
 801635e:	bfd4      	ite	le
 8016360:	f1c1 0202 	rsble	r2, r1, #2
 8016364:	2201      	movgt	r2, #1
 8016366:	4413      	add	r3, r2
 8016368:	e7e0      	b.n	801632c <_printf_float+0x1a4>
 801636a:	6823      	ldr	r3, [r4, #0]
 801636c:	055a      	lsls	r2, r3, #21
 801636e:	d407      	bmi.n	8016380 <_printf_float+0x1f8>
 8016370:	6923      	ldr	r3, [r4, #16]
 8016372:	4642      	mov	r2, r8
 8016374:	4631      	mov	r1, r6
 8016376:	4628      	mov	r0, r5
 8016378:	47b8      	blx	r7
 801637a:	3001      	adds	r0, #1
 801637c:	d12c      	bne.n	80163d8 <_printf_float+0x250>
 801637e:	e764      	b.n	801624a <_printf_float+0xc2>
 8016380:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016384:	f240 80e0 	bls.w	8016548 <_printf_float+0x3c0>
 8016388:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801638c:	2200      	movs	r2, #0
 801638e:	2300      	movs	r3, #0
 8016390:	f7ea ffaa 	bl	80012e8 <__aeabi_dcmpeq>
 8016394:	2800      	cmp	r0, #0
 8016396:	d034      	beq.n	8016402 <_printf_float+0x27a>
 8016398:	4a37      	ldr	r2, [pc, #220]	; (8016478 <_printf_float+0x2f0>)
 801639a:	2301      	movs	r3, #1
 801639c:	4631      	mov	r1, r6
 801639e:	4628      	mov	r0, r5
 80163a0:	47b8      	blx	r7
 80163a2:	3001      	adds	r0, #1
 80163a4:	f43f af51 	beq.w	801624a <_printf_float+0xc2>
 80163a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80163ac:	429a      	cmp	r2, r3
 80163ae:	db02      	blt.n	80163b6 <_printf_float+0x22e>
 80163b0:	6823      	ldr	r3, [r4, #0]
 80163b2:	07d8      	lsls	r0, r3, #31
 80163b4:	d510      	bpl.n	80163d8 <_printf_float+0x250>
 80163b6:	ee18 3a10 	vmov	r3, s16
 80163ba:	4652      	mov	r2, sl
 80163bc:	4631      	mov	r1, r6
 80163be:	4628      	mov	r0, r5
 80163c0:	47b8      	blx	r7
 80163c2:	3001      	adds	r0, #1
 80163c4:	f43f af41 	beq.w	801624a <_printf_float+0xc2>
 80163c8:	f04f 0800 	mov.w	r8, #0
 80163cc:	f104 091a 	add.w	r9, r4, #26
 80163d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80163d2:	3b01      	subs	r3, #1
 80163d4:	4543      	cmp	r3, r8
 80163d6:	dc09      	bgt.n	80163ec <_printf_float+0x264>
 80163d8:	6823      	ldr	r3, [r4, #0]
 80163da:	079b      	lsls	r3, r3, #30
 80163dc:	f100 8105 	bmi.w	80165ea <_printf_float+0x462>
 80163e0:	68e0      	ldr	r0, [r4, #12]
 80163e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80163e4:	4298      	cmp	r0, r3
 80163e6:	bfb8      	it	lt
 80163e8:	4618      	movlt	r0, r3
 80163ea:	e730      	b.n	801624e <_printf_float+0xc6>
 80163ec:	2301      	movs	r3, #1
 80163ee:	464a      	mov	r2, r9
 80163f0:	4631      	mov	r1, r6
 80163f2:	4628      	mov	r0, r5
 80163f4:	47b8      	blx	r7
 80163f6:	3001      	adds	r0, #1
 80163f8:	f43f af27 	beq.w	801624a <_printf_float+0xc2>
 80163fc:	f108 0801 	add.w	r8, r8, #1
 8016400:	e7e6      	b.n	80163d0 <_printf_float+0x248>
 8016402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016404:	2b00      	cmp	r3, #0
 8016406:	dc39      	bgt.n	801647c <_printf_float+0x2f4>
 8016408:	4a1b      	ldr	r2, [pc, #108]	; (8016478 <_printf_float+0x2f0>)
 801640a:	2301      	movs	r3, #1
 801640c:	4631      	mov	r1, r6
 801640e:	4628      	mov	r0, r5
 8016410:	47b8      	blx	r7
 8016412:	3001      	adds	r0, #1
 8016414:	f43f af19 	beq.w	801624a <_printf_float+0xc2>
 8016418:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801641c:	4313      	orrs	r3, r2
 801641e:	d102      	bne.n	8016426 <_printf_float+0x29e>
 8016420:	6823      	ldr	r3, [r4, #0]
 8016422:	07d9      	lsls	r1, r3, #31
 8016424:	d5d8      	bpl.n	80163d8 <_printf_float+0x250>
 8016426:	ee18 3a10 	vmov	r3, s16
 801642a:	4652      	mov	r2, sl
 801642c:	4631      	mov	r1, r6
 801642e:	4628      	mov	r0, r5
 8016430:	47b8      	blx	r7
 8016432:	3001      	adds	r0, #1
 8016434:	f43f af09 	beq.w	801624a <_printf_float+0xc2>
 8016438:	f04f 0900 	mov.w	r9, #0
 801643c:	f104 0a1a 	add.w	sl, r4, #26
 8016440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016442:	425b      	negs	r3, r3
 8016444:	454b      	cmp	r3, r9
 8016446:	dc01      	bgt.n	801644c <_printf_float+0x2c4>
 8016448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801644a:	e792      	b.n	8016372 <_printf_float+0x1ea>
 801644c:	2301      	movs	r3, #1
 801644e:	4652      	mov	r2, sl
 8016450:	4631      	mov	r1, r6
 8016452:	4628      	mov	r0, r5
 8016454:	47b8      	blx	r7
 8016456:	3001      	adds	r0, #1
 8016458:	f43f aef7 	beq.w	801624a <_printf_float+0xc2>
 801645c:	f109 0901 	add.w	r9, r9, #1
 8016460:	e7ee      	b.n	8016440 <_printf_float+0x2b8>
 8016462:	bf00      	nop
 8016464:	7fefffff 	.word	0x7fefffff
 8016468:	0801c0b8 	.word	0x0801c0b8
 801646c:	0801c0bc 	.word	0x0801c0bc
 8016470:	0801c0c4 	.word	0x0801c0c4
 8016474:	0801c0c0 	.word	0x0801c0c0
 8016478:	0801c684 	.word	0x0801c684
 801647c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801647e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016480:	429a      	cmp	r2, r3
 8016482:	bfa8      	it	ge
 8016484:	461a      	movge	r2, r3
 8016486:	2a00      	cmp	r2, #0
 8016488:	4691      	mov	r9, r2
 801648a:	dc37      	bgt.n	80164fc <_printf_float+0x374>
 801648c:	f04f 0b00 	mov.w	fp, #0
 8016490:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016494:	f104 021a 	add.w	r2, r4, #26
 8016498:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801649a:	9305      	str	r3, [sp, #20]
 801649c:	eba3 0309 	sub.w	r3, r3, r9
 80164a0:	455b      	cmp	r3, fp
 80164a2:	dc33      	bgt.n	801650c <_printf_float+0x384>
 80164a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80164a8:	429a      	cmp	r2, r3
 80164aa:	db3b      	blt.n	8016524 <_printf_float+0x39c>
 80164ac:	6823      	ldr	r3, [r4, #0]
 80164ae:	07da      	lsls	r2, r3, #31
 80164b0:	d438      	bmi.n	8016524 <_printf_float+0x39c>
 80164b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80164b4:	9b05      	ldr	r3, [sp, #20]
 80164b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80164b8:	1ad3      	subs	r3, r2, r3
 80164ba:	eba2 0901 	sub.w	r9, r2, r1
 80164be:	4599      	cmp	r9, r3
 80164c0:	bfa8      	it	ge
 80164c2:	4699      	movge	r9, r3
 80164c4:	f1b9 0f00 	cmp.w	r9, #0
 80164c8:	dc35      	bgt.n	8016536 <_printf_float+0x3ae>
 80164ca:	f04f 0800 	mov.w	r8, #0
 80164ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80164d2:	f104 0a1a 	add.w	sl, r4, #26
 80164d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80164da:	1a9b      	subs	r3, r3, r2
 80164dc:	eba3 0309 	sub.w	r3, r3, r9
 80164e0:	4543      	cmp	r3, r8
 80164e2:	f77f af79 	ble.w	80163d8 <_printf_float+0x250>
 80164e6:	2301      	movs	r3, #1
 80164e8:	4652      	mov	r2, sl
 80164ea:	4631      	mov	r1, r6
 80164ec:	4628      	mov	r0, r5
 80164ee:	47b8      	blx	r7
 80164f0:	3001      	adds	r0, #1
 80164f2:	f43f aeaa 	beq.w	801624a <_printf_float+0xc2>
 80164f6:	f108 0801 	add.w	r8, r8, #1
 80164fa:	e7ec      	b.n	80164d6 <_printf_float+0x34e>
 80164fc:	4613      	mov	r3, r2
 80164fe:	4631      	mov	r1, r6
 8016500:	4642      	mov	r2, r8
 8016502:	4628      	mov	r0, r5
 8016504:	47b8      	blx	r7
 8016506:	3001      	adds	r0, #1
 8016508:	d1c0      	bne.n	801648c <_printf_float+0x304>
 801650a:	e69e      	b.n	801624a <_printf_float+0xc2>
 801650c:	2301      	movs	r3, #1
 801650e:	4631      	mov	r1, r6
 8016510:	4628      	mov	r0, r5
 8016512:	9205      	str	r2, [sp, #20]
 8016514:	47b8      	blx	r7
 8016516:	3001      	adds	r0, #1
 8016518:	f43f ae97 	beq.w	801624a <_printf_float+0xc2>
 801651c:	9a05      	ldr	r2, [sp, #20]
 801651e:	f10b 0b01 	add.w	fp, fp, #1
 8016522:	e7b9      	b.n	8016498 <_printf_float+0x310>
 8016524:	ee18 3a10 	vmov	r3, s16
 8016528:	4652      	mov	r2, sl
 801652a:	4631      	mov	r1, r6
 801652c:	4628      	mov	r0, r5
 801652e:	47b8      	blx	r7
 8016530:	3001      	adds	r0, #1
 8016532:	d1be      	bne.n	80164b2 <_printf_float+0x32a>
 8016534:	e689      	b.n	801624a <_printf_float+0xc2>
 8016536:	9a05      	ldr	r2, [sp, #20]
 8016538:	464b      	mov	r3, r9
 801653a:	4442      	add	r2, r8
 801653c:	4631      	mov	r1, r6
 801653e:	4628      	mov	r0, r5
 8016540:	47b8      	blx	r7
 8016542:	3001      	adds	r0, #1
 8016544:	d1c1      	bne.n	80164ca <_printf_float+0x342>
 8016546:	e680      	b.n	801624a <_printf_float+0xc2>
 8016548:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801654a:	2a01      	cmp	r2, #1
 801654c:	dc01      	bgt.n	8016552 <_printf_float+0x3ca>
 801654e:	07db      	lsls	r3, r3, #31
 8016550:	d538      	bpl.n	80165c4 <_printf_float+0x43c>
 8016552:	2301      	movs	r3, #1
 8016554:	4642      	mov	r2, r8
 8016556:	4631      	mov	r1, r6
 8016558:	4628      	mov	r0, r5
 801655a:	47b8      	blx	r7
 801655c:	3001      	adds	r0, #1
 801655e:	f43f ae74 	beq.w	801624a <_printf_float+0xc2>
 8016562:	ee18 3a10 	vmov	r3, s16
 8016566:	4652      	mov	r2, sl
 8016568:	4631      	mov	r1, r6
 801656a:	4628      	mov	r0, r5
 801656c:	47b8      	blx	r7
 801656e:	3001      	adds	r0, #1
 8016570:	f43f ae6b 	beq.w	801624a <_printf_float+0xc2>
 8016574:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016578:	2200      	movs	r2, #0
 801657a:	2300      	movs	r3, #0
 801657c:	f7ea feb4 	bl	80012e8 <__aeabi_dcmpeq>
 8016580:	b9d8      	cbnz	r0, 80165ba <_printf_float+0x432>
 8016582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016584:	f108 0201 	add.w	r2, r8, #1
 8016588:	3b01      	subs	r3, #1
 801658a:	4631      	mov	r1, r6
 801658c:	4628      	mov	r0, r5
 801658e:	47b8      	blx	r7
 8016590:	3001      	adds	r0, #1
 8016592:	d10e      	bne.n	80165b2 <_printf_float+0x42a>
 8016594:	e659      	b.n	801624a <_printf_float+0xc2>
 8016596:	2301      	movs	r3, #1
 8016598:	4652      	mov	r2, sl
 801659a:	4631      	mov	r1, r6
 801659c:	4628      	mov	r0, r5
 801659e:	47b8      	blx	r7
 80165a0:	3001      	adds	r0, #1
 80165a2:	f43f ae52 	beq.w	801624a <_printf_float+0xc2>
 80165a6:	f108 0801 	add.w	r8, r8, #1
 80165aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80165ac:	3b01      	subs	r3, #1
 80165ae:	4543      	cmp	r3, r8
 80165b0:	dcf1      	bgt.n	8016596 <_printf_float+0x40e>
 80165b2:	464b      	mov	r3, r9
 80165b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80165b8:	e6dc      	b.n	8016374 <_printf_float+0x1ec>
 80165ba:	f04f 0800 	mov.w	r8, #0
 80165be:	f104 0a1a 	add.w	sl, r4, #26
 80165c2:	e7f2      	b.n	80165aa <_printf_float+0x422>
 80165c4:	2301      	movs	r3, #1
 80165c6:	4642      	mov	r2, r8
 80165c8:	e7df      	b.n	801658a <_printf_float+0x402>
 80165ca:	2301      	movs	r3, #1
 80165cc:	464a      	mov	r2, r9
 80165ce:	4631      	mov	r1, r6
 80165d0:	4628      	mov	r0, r5
 80165d2:	47b8      	blx	r7
 80165d4:	3001      	adds	r0, #1
 80165d6:	f43f ae38 	beq.w	801624a <_printf_float+0xc2>
 80165da:	f108 0801 	add.w	r8, r8, #1
 80165de:	68e3      	ldr	r3, [r4, #12]
 80165e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80165e2:	1a5b      	subs	r3, r3, r1
 80165e4:	4543      	cmp	r3, r8
 80165e6:	dcf0      	bgt.n	80165ca <_printf_float+0x442>
 80165e8:	e6fa      	b.n	80163e0 <_printf_float+0x258>
 80165ea:	f04f 0800 	mov.w	r8, #0
 80165ee:	f104 0919 	add.w	r9, r4, #25
 80165f2:	e7f4      	b.n	80165de <_printf_float+0x456>

080165f4 <_printf_common>:
 80165f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165f8:	4616      	mov	r6, r2
 80165fa:	4699      	mov	r9, r3
 80165fc:	688a      	ldr	r2, [r1, #8]
 80165fe:	690b      	ldr	r3, [r1, #16]
 8016600:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016604:	4293      	cmp	r3, r2
 8016606:	bfb8      	it	lt
 8016608:	4613      	movlt	r3, r2
 801660a:	6033      	str	r3, [r6, #0]
 801660c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016610:	4607      	mov	r7, r0
 8016612:	460c      	mov	r4, r1
 8016614:	b10a      	cbz	r2, 801661a <_printf_common+0x26>
 8016616:	3301      	adds	r3, #1
 8016618:	6033      	str	r3, [r6, #0]
 801661a:	6823      	ldr	r3, [r4, #0]
 801661c:	0699      	lsls	r1, r3, #26
 801661e:	bf42      	ittt	mi
 8016620:	6833      	ldrmi	r3, [r6, #0]
 8016622:	3302      	addmi	r3, #2
 8016624:	6033      	strmi	r3, [r6, #0]
 8016626:	6825      	ldr	r5, [r4, #0]
 8016628:	f015 0506 	ands.w	r5, r5, #6
 801662c:	d106      	bne.n	801663c <_printf_common+0x48>
 801662e:	f104 0a19 	add.w	sl, r4, #25
 8016632:	68e3      	ldr	r3, [r4, #12]
 8016634:	6832      	ldr	r2, [r6, #0]
 8016636:	1a9b      	subs	r3, r3, r2
 8016638:	42ab      	cmp	r3, r5
 801663a:	dc26      	bgt.n	801668a <_printf_common+0x96>
 801663c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016640:	1e13      	subs	r3, r2, #0
 8016642:	6822      	ldr	r2, [r4, #0]
 8016644:	bf18      	it	ne
 8016646:	2301      	movne	r3, #1
 8016648:	0692      	lsls	r2, r2, #26
 801664a:	d42b      	bmi.n	80166a4 <_printf_common+0xb0>
 801664c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016650:	4649      	mov	r1, r9
 8016652:	4638      	mov	r0, r7
 8016654:	47c0      	blx	r8
 8016656:	3001      	adds	r0, #1
 8016658:	d01e      	beq.n	8016698 <_printf_common+0xa4>
 801665a:	6823      	ldr	r3, [r4, #0]
 801665c:	68e5      	ldr	r5, [r4, #12]
 801665e:	6832      	ldr	r2, [r6, #0]
 8016660:	f003 0306 	and.w	r3, r3, #6
 8016664:	2b04      	cmp	r3, #4
 8016666:	bf08      	it	eq
 8016668:	1aad      	subeq	r5, r5, r2
 801666a:	68a3      	ldr	r3, [r4, #8]
 801666c:	6922      	ldr	r2, [r4, #16]
 801666e:	bf0c      	ite	eq
 8016670:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016674:	2500      	movne	r5, #0
 8016676:	4293      	cmp	r3, r2
 8016678:	bfc4      	itt	gt
 801667a:	1a9b      	subgt	r3, r3, r2
 801667c:	18ed      	addgt	r5, r5, r3
 801667e:	2600      	movs	r6, #0
 8016680:	341a      	adds	r4, #26
 8016682:	42b5      	cmp	r5, r6
 8016684:	d11a      	bne.n	80166bc <_printf_common+0xc8>
 8016686:	2000      	movs	r0, #0
 8016688:	e008      	b.n	801669c <_printf_common+0xa8>
 801668a:	2301      	movs	r3, #1
 801668c:	4652      	mov	r2, sl
 801668e:	4649      	mov	r1, r9
 8016690:	4638      	mov	r0, r7
 8016692:	47c0      	blx	r8
 8016694:	3001      	adds	r0, #1
 8016696:	d103      	bne.n	80166a0 <_printf_common+0xac>
 8016698:	f04f 30ff 	mov.w	r0, #4294967295
 801669c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166a0:	3501      	adds	r5, #1
 80166a2:	e7c6      	b.n	8016632 <_printf_common+0x3e>
 80166a4:	18e1      	adds	r1, r4, r3
 80166a6:	1c5a      	adds	r2, r3, #1
 80166a8:	2030      	movs	r0, #48	; 0x30
 80166aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80166ae:	4422      	add	r2, r4
 80166b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80166b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80166b8:	3302      	adds	r3, #2
 80166ba:	e7c7      	b.n	801664c <_printf_common+0x58>
 80166bc:	2301      	movs	r3, #1
 80166be:	4622      	mov	r2, r4
 80166c0:	4649      	mov	r1, r9
 80166c2:	4638      	mov	r0, r7
 80166c4:	47c0      	blx	r8
 80166c6:	3001      	adds	r0, #1
 80166c8:	d0e6      	beq.n	8016698 <_printf_common+0xa4>
 80166ca:	3601      	adds	r6, #1
 80166cc:	e7d9      	b.n	8016682 <_printf_common+0x8e>
	...

080166d0 <_printf_i>:
 80166d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80166d4:	460c      	mov	r4, r1
 80166d6:	4691      	mov	r9, r2
 80166d8:	7e27      	ldrb	r7, [r4, #24]
 80166da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80166dc:	2f78      	cmp	r7, #120	; 0x78
 80166de:	4680      	mov	r8, r0
 80166e0:	469a      	mov	sl, r3
 80166e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80166e6:	d807      	bhi.n	80166f8 <_printf_i+0x28>
 80166e8:	2f62      	cmp	r7, #98	; 0x62
 80166ea:	d80a      	bhi.n	8016702 <_printf_i+0x32>
 80166ec:	2f00      	cmp	r7, #0
 80166ee:	f000 80d8 	beq.w	80168a2 <_printf_i+0x1d2>
 80166f2:	2f58      	cmp	r7, #88	; 0x58
 80166f4:	f000 80a3 	beq.w	801683e <_printf_i+0x16e>
 80166f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80166fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016700:	e03a      	b.n	8016778 <_printf_i+0xa8>
 8016702:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016706:	2b15      	cmp	r3, #21
 8016708:	d8f6      	bhi.n	80166f8 <_printf_i+0x28>
 801670a:	a001      	add	r0, pc, #4	; (adr r0, 8016710 <_printf_i+0x40>)
 801670c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8016710:	08016769 	.word	0x08016769
 8016714:	0801677d 	.word	0x0801677d
 8016718:	080166f9 	.word	0x080166f9
 801671c:	080166f9 	.word	0x080166f9
 8016720:	080166f9 	.word	0x080166f9
 8016724:	080166f9 	.word	0x080166f9
 8016728:	0801677d 	.word	0x0801677d
 801672c:	080166f9 	.word	0x080166f9
 8016730:	080166f9 	.word	0x080166f9
 8016734:	080166f9 	.word	0x080166f9
 8016738:	080166f9 	.word	0x080166f9
 801673c:	08016889 	.word	0x08016889
 8016740:	080167ad 	.word	0x080167ad
 8016744:	0801686b 	.word	0x0801686b
 8016748:	080166f9 	.word	0x080166f9
 801674c:	080166f9 	.word	0x080166f9
 8016750:	080168ab 	.word	0x080168ab
 8016754:	080166f9 	.word	0x080166f9
 8016758:	080167ad 	.word	0x080167ad
 801675c:	080166f9 	.word	0x080166f9
 8016760:	080166f9 	.word	0x080166f9
 8016764:	08016873 	.word	0x08016873
 8016768:	680b      	ldr	r3, [r1, #0]
 801676a:	1d1a      	adds	r2, r3, #4
 801676c:	681b      	ldr	r3, [r3, #0]
 801676e:	600a      	str	r2, [r1, #0]
 8016770:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016774:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016778:	2301      	movs	r3, #1
 801677a:	e0a3      	b.n	80168c4 <_printf_i+0x1f4>
 801677c:	6825      	ldr	r5, [r4, #0]
 801677e:	6808      	ldr	r0, [r1, #0]
 8016780:	062e      	lsls	r6, r5, #24
 8016782:	f100 0304 	add.w	r3, r0, #4
 8016786:	d50a      	bpl.n	801679e <_printf_i+0xce>
 8016788:	6805      	ldr	r5, [r0, #0]
 801678a:	600b      	str	r3, [r1, #0]
 801678c:	2d00      	cmp	r5, #0
 801678e:	da03      	bge.n	8016798 <_printf_i+0xc8>
 8016790:	232d      	movs	r3, #45	; 0x2d
 8016792:	426d      	negs	r5, r5
 8016794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016798:	485e      	ldr	r0, [pc, #376]	; (8016914 <_printf_i+0x244>)
 801679a:	230a      	movs	r3, #10
 801679c:	e019      	b.n	80167d2 <_printf_i+0x102>
 801679e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80167a2:	6805      	ldr	r5, [r0, #0]
 80167a4:	600b      	str	r3, [r1, #0]
 80167a6:	bf18      	it	ne
 80167a8:	b22d      	sxthne	r5, r5
 80167aa:	e7ef      	b.n	801678c <_printf_i+0xbc>
 80167ac:	680b      	ldr	r3, [r1, #0]
 80167ae:	6825      	ldr	r5, [r4, #0]
 80167b0:	1d18      	adds	r0, r3, #4
 80167b2:	6008      	str	r0, [r1, #0]
 80167b4:	0628      	lsls	r0, r5, #24
 80167b6:	d501      	bpl.n	80167bc <_printf_i+0xec>
 80167b8:	681d      	ldr	r5, [r3, #0]
 80167ba:	e002      	b.n	80167c2 <_printf_i+0xf2>
 80167bc:	0669      	lsls	r1, r5, #25
 80167be:	d5fb      	bpl.n	80167b8 <_printf_i+0xe8>
 80167c0:	881d      	ldrh	r5, [r3, #0]
 80167c2:	4854      	ldr	r0, [pc, #336]	; (8016914 <_printf_i+0x244>)
 80167c4:	2f6f      	cmp	r7, #111	; 0x6f
 80167c6:	bf0c      	ite	eq
 80167c8:	2308      	moveq	r3, #8
 80167ca:	230a      	movne	r3, #10
 80167cc:	2100      	movs	r1, #0
 80167ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80167d2:	6866      	ldr	r6, [r4, #4]
 80167d4:	60a6      	str	r6, [r4, #8]
 80167d6:	2e00      	cmp	r6, #0
 80167d8:	bfa2      	ittt	ge
 80167da:	6821      	ldrge	r1, [r4, #0]
 80167dc:	f021 0104 	bicge.w	r1, r1, #4
 80167e0:	6021      	strge	r1, [r4, #0]
 80167e2:	b90d      	cbnz	r5, 80167e8 <_printf_i+0x118>
 80167e4:	2e00      	cmp	r6, #0
 80167e6:	d04d      	beq.n	8016884 <_printf_i+0x1b4>
 80167e8:	4616      	mov	r6, r2
 80167ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80167ee:	fb03 5711 	mls	r7, r3, r1, r5
 80167f2:	5dc7      	ldrb	r7, [r0, r7]
 80167f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80167f8:	462f      	mov	r7, r5
 80167fa:	42bb      	cmp	r3, r7
 80167fc:	460d      	mov	r5, r1
 80167fe:	d9f4      	bls.n	80167ea <_printf_i+0x11a>
 8016800:	2b08      	cmp	r3, #8
 8016802:	d10b      	bne.n	801681c <_printf_i+0x14c>
 8016804:	6823      	ldr	r3, [r4, #0]
 8016806:	07df      	lsls	r7, r3, #31
 8016808:	d508      	bpl.n	801681c <_printf_i+0x14c>
 801680a:	6923      	ldr	r3, [r4, #16]
 801680c:	6861      	ldr	r1, [r4, #4]
 801680e:	4299      	cmp	r1, r3
 8016810:	bfde      	ittt	le
 8016812:	2330      	movle	r3, #48	; 0x30
 8016814:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016818:	f106 36ff 	addle.w	r6, r6, #4294967295
 801681c:	1b92      	subs	r2, r2, r6
 801681e:	6122      	str	r2, [r4, #16]
 8016820:	f8cd a000 	str.w	sl, [sp]
 8016824:	464b      	mov	r3, r9
 8016826:	aa03      	add	r2, sp, #12
 8016828:	4621      	mov	r1, r4
 801682a:	4640      	mov	r0, r8
 801682c:	f7ff fee2 	bl	80165f4 <_printf_common>
 8016830:	3001      	adds	r0, #1
 8016832:	d14c      	bne.n	80168ce <_printf_i+0x1fe>
 8016834:	f04f 30ff 	mov.w	r0, #4294967295
 8016838:	b004      	add	sp, #16
 801683a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801683e:	4835      	ldr	r0, [pc, #212]	; (8016914 <_printf_i+0x244>)
 8016840:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016844:	6823      	ldr	r3, [r4, #0]
 8016846:	680e      	ldr	r6, [r1, #0]
 8016848:	061f      	lsls	r7, r3, #24
 801684a:	f856 5b04 	ldr.w	r5, [r6], #4
 801684e:	600e      	str	r6, [r1, #0]
 8016850:	d514      	bpl.n	801687c <_printf_i+0x1ac>
 8016852:	07d9      	lsls	r1, r3, #31
 8016854:	bf44      	itt	mi
 8016856:	f043 0320 	orrmi.w	r3, r3, #32
 801685a:	6023      	strmi	r3, [r4, #0]
 801685c:	b91d      	cbnz	r5, 8016866 <_printf_i+0x196>
 801685e:	6823      	ldr	r3, [r4, #0]
 8016860:	f023 0320 	bic.w	r3, r3, #32
 8016864:	6023      	str	r3, [r4, #0]
 8016866:	2310      	movs	r3, #16
 8016868:	e7b0      	b.n	80167cc <_printf_i+0xfc>
 801686a:	6823      	ldr	r3, [r4, #0]
 801686c:	f043 0320 	orr.w	r3, r3, #32
 8016870:	6023      	str	r3, [r4, #0]
 8016872:	2378      	movs	r3, #120	; 0x78
 8016874:	4828      	ldr	r0, [pc, #160]	; (8016918 <_printf_i+0x248>)
 8016876:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801687a:	e7e3      	b.n	8016844 <_printf_i+0x174>
 801687c:	065e      	lsls	r6, r3, #25
 801687e:	bf48      	it	mi
 8016880:	b2ad      	uxthmi	r5, r5
 8016882:	e7e6      	b.n	8016852 <_printf_i+0x182>
 8016884:	4616      	mov	r6, r2
 8016886:	e7bb      	b.n	8016800 <_printf_i+0x130>
 8016888:	680b      	ldr	r3, [r1, #0]
 801688a:	6826      	ldr	r6, [r4, #0]
 801688c:	6960      	ldr	r0, [r4, #20]
 801688e:	1d1d      	adds	r5, r3, #4
 8016890:	600d      	str	r5, [r1, #0]
 8016892:	0635      	lsls	r5, r6, #24
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	d501      	bpl.n	801689c <_printf_i+0x1cc>
 8016898:	6018      	str	r0, [r3, #0]
 801689a:	e002      	b.n	80168a2 <_printf_i+0x1d2>
 801689c:	0671      	lsls	r1, r6, #25
 801689e:	d5fb      	bpl.n	8016898 <_printf_i+0x1c8>
 80168a0:	8018      	strh	r0, [r3, #0]
 80168a2:	2300      	movs	r3, #0
 80168a4:	6123      	str	r3, [r4, #16]
 80168a6:	4616      	mov	r6, r2
 80168a8:	e7ba      	b.n	8016820 <_printf_i+0x150>
 80168aa:	680b      	ldr	r3, [r1, #0]
 80168ac:	1d1a      	adds	r2, r3, #4
 80168ae:	600a      	str	r2, [r1, #0]
 80168b0:	681e      	ldr	r6, [r3, #0]
 80168b2:	6862      	ldr	r2, [r4, #4]
 80168b4:	2100      	movs	r1, #0
 80168b6:	4630      	mov	r0, r6
 80168b8:	f7ea f8a2 	bl	8000a00 <memchr>
 80168bc:	b108      	cbz	r0, 80168c2 <_printf_i+0x1f2>
 80168be:	1b80      	subs	r0, r0, r6
 80168c0:	6060      	str	r0, [r4, #4]
 80168c2:	6863      	ldr	r3, [r4, #4]
 80168c4:	6123      	str	r3, [r4, #16]
 80168c6:	2300      	movs	r3, #0
 80168c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80168cc:	e7a8      	b.n	8016820 <_printf_i+0x150>
 80168ce:	6923      	ldr	r3, [r4, #16]
 80168d0:	4632      	mov	r2, r6
 80168d2:	4649      	mov	r1, r9
 80168d4:	4640      	mov	r0, r8
 80168d6:	47d0      	blx	sl
 80168d8:	3001      	adds	r0, #1
 80168da:	d0ab      	beq.n	8016834 <_printf_i+0x164>
 80168dc:	6823      	ldr	r3, [r4, #0]
 80168de:	079b      	lsls	r3, r3, #30
 80168e0:	d413      	bmi.n	801690a <_printf_i+0x23a>
 80168e2:	68e0      	ldr	r0, [r4, #12]
 80168e4:	9b03      	ldr	r3, [sp, #12]
 80168e6:	4298      	cmp	r0, r3
 80168e8:	bfb8      	it	lt
 80168ea:	4618      	movlt	r0, r3
 80168ec:	e7a4      	b.n	8016838 <_printf_i+0x168>
 80168ee:	2301      	movs	r3, #1
 80168f0:	4632      	mov	r2, r6
 80168f2:	4649      	mov	r1, r9
 80168f4:	4640      	mov	r0, r8
 80168f6:	47d0      	blx	sl
 80168f8:	3001      	adds	r0, #1
 80168fa:	d09b      	beq.n	8016834 <_printf_i+0x164>
 80168fc:	3501      	adds	r5, #1
 80168fe:	68e3      	ldr	r3, [r4, #12]
 8016900:	9903      	ldr	r1, [sp, #12]
 8016902:	1a5b      	subs	r3, r3, r1
 8016904:	42ab      	cmp	r3, r5
 8016906:	dcf2      	bgt.n	80168ee <_printf_i+0x21e>
 8016908:	e7eb      	b.n	80168e2 <_printf_i+0x212>
 801690a:	2500      	movs	r5, #0
 801690c:	f104 0619 	add.w	r6, r4, #25
 8016910:	e7f5      	b.n	80168fe <_printf_i+0x22e>
 8016912:	bf00      	nop
 8016914:	0801c0c8 	.word	0x0801c0c8
 8016918:	0801c0d9 	.word	0x0801c0d9

0801691c <_sbrk_r>:
 801691c:	b538      	push	{r3, r4, r5, lr}
 801691e:	4d06      	ldr	r5, [pc, #24]	; (8016938 <_sbrk_r+0x1c>)
 8016920:	2300      	movs	r3, #0
 8016922:	4604      	mov	r4, r0
 8016924:	4608      	mov	r0, r1
 8016926:	602b      	str	r3, [r5, #0]
 8016928:	f7f0 fce2 	bl	80072f0 <_sbrk>
 801692c:	1c43      	adds	r3, r0, #1
 801692e:	d102      	bne.n	8016936 <_sbrk_r+0x1a>
 8016930:	682b      	ldr	r3, [r5, #0]
 8016932:	b103      	cbz	r3, 8016936 <_sbrk_r+0x1a>
 8016934:	6023      	str	r3, [r4, #0]
 8016936:	bd38      	pop	{r3, r4, r5, pc}
 8016938:	20007138 	.word	0x20007138

0801693c <siprintf>:
 801693c:	b40e      	push	{r1, r2, r3}
 801693e:	b500      	push	{lr}
 8016940:	b09c      	sub	sp, #112	; 0x70
 8016942:	ab1d      	add	r3, sp, #116	; 0x74
 8016944:	9002      	str	r0, [sp, #8]
 8016946:	9006      	str	r0, [sp, #24]
 8016948:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801694c:	4809      	ldr	r0, [pc, #36]	; (8016974 <siprintf+0x38>)
 801694e:	9107      	str	r1, [sp, #28]
 8016950:	9104      	str	r1, [sp, #16]
 8016952:	4909      	ldr	r1, [pc, #36]	; (8016978 <siprintf+0x3c>)
 8016954:	f853 2b04 	ldr.w	r2, [r3], #4
 8016958:	9105      	str	r1, [sp, #20]
 801695a:	6800      	ldr	r0, [r0, #0]
 801695c:	9301      	str	r3, [sp, #4]
 801695e:	a902      	add	r1, sp, #8
 8016960:	f003 fa64 	bl	8019e2c <_svfiprintf_r>
 8016964:	9b02      	ldr	r3, [sp, #8]
 8016966:	2200      	movs	r2, #0
 8016968:	701a      	strb	r2, [r3, #0]
 801696a:	b01c      	add	sp, #112	; 0x70
 801696c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016970:	b003      	add	sp, #12
 8016972:	4770      	bx	lr
 8016974:	20001494 	.word	0x20001494
 8016978:	ffff0208 	.word	0xffff0208

0801697c <strcat>:
 801697c:	b510      	push	{r4, lr}
 801697e:	4602      	mov	r2, r0
 8016980:	7814      	ldrb	r4, [r2, #0]
 8016982:	4613      	mov	r3, r2
 8016984:	3201      	adds	r2, #1
 8016986:	2c00      	cmp	r4, #0
 8016988:	d1fa      	bne.n	8016980 <strcat+0x4>
 801698a:	3b01      	subs	r3, #1
 801698c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016990:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016994:	2a00      	cmp	r2, #0
 8016996:	d1f9      	bne.n	801698c <strcat+0x10>
 8016998:	bd10      	pop	{r4, pc}

0801699a <strchr>:
 801699a:	b2c9      	uxtb	r1, r1
 801699c:	4603      	mov	r3, r0
 801699e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80169a2:	b11a      	cbz	r2, 80169ac <strchr+0x12>
 80169a4:	428a      	cmp	r2, r1
 80169a6:	d1f9      	bne.n	801699c <strchr+0x2>
 80169a8:	4618      	mov	r0, r3
 80169aa:	4770      	bx	lr
 80169ac:	2900      	cmp	r1, #0
 80169ae:	bf18      	it	ne
 80169b0:	2300      	movne	r3, #0
 80169b2:	e7f9      	b.n	80169a8 <strchr+0xe>

080169b4 <strcpy>:
 80169b4:	4603      	mov	r3, r0
 80169b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80169ba:	f803 2b01 	strb.w	r2, [r3], #1
 80169be:	2a00      	cmp	r2, #0
 80169c0:	d1f9      	bne.n	80169b6 <strcpy+0x2>
 80169c2:	4770      	bx	lr

080169c4 <strncmp>:
 80169c4:	b510      	push	{r4, lr}
 80169c6:	b16a      	cbz	r2, 80169e4 <strncmp+0x20>
 80169c8:	3901      	subs	r1, #1
 80169ca:	1884      	adds	r4, r0, r2
 80169cc:	f810 3b01 	ldrb.w	r3, [r0], #1
 80169d0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80169d4:	4293      	cmp	r3, r2
 80169d6:	d103      	bne.n	80169e0 <strncmp+0x1c>
 80169d8:	42a0      	cmp	r0, r4
 80169da:	d001      	beq.n	80169e0 <strncmp+0x1c>
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d1f5      	bne.n	80169cc <strncmp+0x8>
 80169e0:	1a98      	subs	r0, r3, r2
 80169e2:	bd10      	pop	{r4, pc}
 80169e4:	4610      	mov	r0, r2
 80169e6:	e7fc      	b.n	80169e2 <strncmp+0x1e>

080169e8 <strncpy>:
 80169e8:	b510      	push	{r4, lr}
 80169ea:	3901      	subs	r1, #1
 80169ec:	4603      	mov	r3, r0
 80169ee:	b132      	cbz	r2, 80169fe <strncpy+0x16>
 80169f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80169f4:	f803 4b01 	strb.w	r4, [r3], #1
 80169f8:	3a01      	subs	r2, #1
 80169fa:	2c00      	cmp	r4, #0
 80169fc:	d1f7      	bne.n	80169ee <strncpy+0x6>
 80169fe:	441a      	add	r2, r3
 8016a00:	2100      	movs	r1, #0
 8016a02:	4293      	cmp	r3, r2
 8016a04:	d100      	bne.n	8016a08 <strncpy+0x20>
 8016a06:	bd10      	pop	{r4, pc}
 8016a08:	f803 1b01 	strb.w	r1, [r3], #1
 8016a0c:	e7f9      	b.n	8016a02 <strncpy+0x1a>

08016a0e <strstr>:
 8016a0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a10:	780c      	ldrb	r4, [r1, #0]
 8016a12:	b164      	cbz	r4, 8016a2e <strstr+0x20>
 8016a14:	4603      	mov	r3, r0
 8016a16:	781a      	ldrb	r2, [r3, #0]
 8016a18:	4618      	mov	r0, r3
 8016a1a:	1c5e      	adds	r6, r3, #1
 8016a1c:	b90a      	cbnz	r2, 8016a22 <strstr+0x14>
 8016a1e:	4610      	mov	r0, r2
 8016a20:	e005      	b.n	8016a2e <strstr+0x20>
 8016a22:	4294      	cmp	r4, r2
 8016a24:	d108      	bne.n	8016a38 <strstr+0x2a>
 8016a26:	460d      	mov	r5, r1
 8016a28:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8016a2c:	b902      	cbnz	r2, 8016a30 <strstr+0x22>
 8016a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a30:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8016a34:	4297      	cmp	r7, r2
 8016a36:	d0f7      	beq.n	8016a28 <strstr+0x1a>
 8016a38:	4633      	mov	r3, r6
 8016a3a:	e7ec      	b.n	8016a16 <strstr+0x8>

08016a3c <sulp>:
 8016a3c:	b570      	push	{r4, r5, r6, lr}
 8016a3e:	4604      	mov	r4, r0
 8016a40:	460d      	mov	r5, r1
 8016a42:	ec45 4b10 	vmov	d0, r4, r5
 8016a46:	4616      	mov	r6, r2
 8016a48:	f003 f836 	bl	8019ab8 <__ulp>
 8016a4c:	ec51 0b10 	vmov	r0, r1, d0
 8016a50:	b17e      	cbz	r6, 8016a72 <sulp+0x36>
 8016a52:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016a56:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	dd09      	ble.n	8016a72 <sulp+0x36>
 8016a5e:	051b      	lsls	r3, r3, #20
 8016a60:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016a64:	2400      	movs	r4, #0
 8016a66:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016a6a:	4622      	mov	r2, r4
 8016a6c:	462b      	mov	r3, r5
 8016a6e:	f7ea f9d3 	bl	8000e18 <__aeabi_dmul>
 8016a72:	bd70      	pop	{r4, r5, r6, pc}
 8016a74:	0000      	movs	r0, r0
	...

08016a78 <_strtod_l>:
 8016a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a7c:	b0a3      	sub	sp, #140	; 0x8c
 8016a7e:	461f      	mov	r7, r3
 8016a80:	2300      	movs	r3, #0
 8016a82:	931e      	str	r3, [sp, #120]	; 0x78
 8016a84:	4ba4      	ldr	r3, [pc, #656]	; (8016d18 <_strtod_l+0x2a0>)
 8016a86:	9219      	str	r2, [sp, #100]	; 0x64
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	9307      	str	r3, [sp, #28]
 8016a8c:	4604      	mov	r4, r0
 8016a8e:	4618      	mov	r0, r3
 8016a90:	4688      	mov	r8, r1
 8016a92:	f7e9 ffa7 	bl	80009e4 <strlen>
 8016a96:	f04f 0a00 	mov.w	sl, #0
 8016a9a:	4605      	mov	r5, r0
 8016a9c:	f04f 0b00 	mov.w	fp, #0
 8016aa0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8016aa4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016aa6:	781a      	ldrb	r2, [r3, #0]
 8016aa8:	2a2b      	cmp	r2, #43	; 0x2b
 8016aaa:	d04c      	beq.n	8016b46 <_strtod_l+0xce>
 8016aac:	d839      	bhi.n	8016b22 <_strtod_l+0xaa>
 8016aae:	2a0d      	cmp	r2, #13
 8016ab0:	d832      	bhi.n	8016b18 <_strtod_l+0xa0>
 8016ab2:	2a08      	cmp	r2, #8
 8016ab4:	d832      	bhi.n	8016b1c <_strtod_l+0xa4>
 8016ab6:	2a00      	cmp	r2, #0
 8016ab8:	d03c      	beq.n	8016b34 <_strtod_l+0xbc>
 8016aba:	2300      	movs	r3, #0
 8016abc:	930e      	str	r3, [sp, #56]	; 0x38
 8016abe:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016ac0:	7833      	ldrb	r3, [r6, #0]
 8016ac2:	2b30      	cmp	r3, #48	; 0x30
 8016ac4:	f040 80b4 	bne.w	8016c30 <_strtod_l+0x1b8>
 8016ac8:	7873      	ldrb	r3, [r6, #1]
 8016aca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016ace:	2b58      	cmp	r3, #88	; 0x58
 8016ad0:	d16c      	bne.n	8016bac <_strtod_l+0x134>
 8016ad2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016ad4:	9301      	str	r3, [sp, #4]
 8016ad6:	ab1e      	add	r3, sp, #120	; 0x78
 8016ad8:	9702      	str	r7, [sp, #8]
 8016ada:	9300      	str	r3, [sp, #0]
 8016adc:	4a8f      	ldr	r2, [pc, #572]	; (8016d1c <_strtod_l+0x2a4>)
 8016ade:	ab1f      	add	r3, sp, #124	; 0x7c
 8016ae0:	a91d      	add	r1, sp, #116	; 0x74
 8016ae2:	4620      	mov	r0, r4
 8016ae4:	f002 f906 	bl	8018cf4 <__gethex>
 8016ae8:	f010 0707 	ands.w	r7, r0, #7
 8016aec:	4605      	mov	r5, r0
 8016aee:	d005      	beq.n	8016afc <_strtod_l+0x84>
 8016af0:	2f06      	cmp	r7, #6
 8016af2:	d12a      	bne.n	8016b4a <_strtod_l+0xd2>
 8016af4:	3601      	adds	r6, #1
 8016af6:	2300      	movs	r3, #0
 8016af8:	961d      	str	r6, [sp, #116]	; 0x74
 8016afa:	930e      	str	r3, [sp, #56]	; 0x38
 8016afc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	f040 8596 	bne.w	8017630 <_strtod_l+0xbb8>
 8016b04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016b06:	b1db      	cbz	r3, 8016b40 <_strtod_l+0xc8>
 8016b08:	4652      	mov	r2, sl
 8016b0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016b0e:	ec43 2b10 	vmov	d0, r2, r3
 8016b12:	b023      	add	sp, #140	; 0x8c
 8016b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b18:	2a20      	cmp	r2, #32
 8016b1a:	d1ce      	bne.n	8016aba <_strtod_l+0x42>
 8016b1c:	3301      	adds	r3, #1
 8016b1e:	931d      	str	r3, [sp, #116]	; 0x74
 8016b20:	e7c0      	b.n	8016aa4 <_strtod_l+0x2c>
 8016b22:	2a2d      	cmp	r2, #45	; 0x2d
 8016b24:	d1c9      	bne.n	8016aba <_strtod_l+0x42>
 8016b26:	2201      	movs	r2, #1
 8016b28:	920e      	str	r2, [sp, #56]	; 0x38
 8016b2a:	1c5a      	adds	r2, r3, #1
 8016b2c:	921d      	str	r2, [sp, #116]	; 0x74
 8016b2e:	785b      	ldrb	r3, [r3, #1]
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d1c4      	bne.n	8016abe <_strtod_l+0x46>
 8016b34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016b36:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	f040 8576 	bne.w	801762c <_strtod_l+0xbb4>
 8016b40:	4652      	mov	r2, sl
 8016b42:	465b      	mov	r3, fp
 8016b44:	e7e3      	b.n	8016b0e <_strtod_l+0x96>
 8016b46:	2200      	movs	r2, #0
 8016b48:	e7ee      	b.n	8016b28 <_strtod_l+0xb0>
 8016b4a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016b4c:	b13a      	cbz	r2, 8016b5e <_strtod_l+0xe6>
 8016b4e:	2135      	movs	r1, #53	; 0x35
 8016b50:	a820      	add	r0, sp, #128	; 0x80
 8016b52:	f003 f8bc 	bl	8019cce <__copybits>
 8016b56:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016b58:	4620      	mov	r0, r4
 8016b5a:	f002 fc81 	bl	8019460 <_Bfree>
 8016b5e:	3f01      	subs	r7, #1
 8016b60:	2f05      	cmp	r7, #5
 8016b62:	d807      	bhi.n	8016b74 <_strtod_l+0xfc>
 8016b64:	e8df f007 	tbb	[pc, r7]
 8016b68:	1d180b0e 	.word	0x1d180b0e
 8016b6c:	030e      	.short	0x030e
 8016b6e:	f04f 0b00 	mov.w	fp, #0
 8016b72:	46da      	mov	sl, fp
 8016b74:	0728      	lsls	r0, r5, #28
 8016b76:	d5c1      	bpl.n	8016afc <_strtod_l+0x84>
 8016b78:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016b7c:	e7be      	b.n	8016afc <_strtod_l+0x84>
 8016b7e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8016b82:	e7f7      	b.n	8016b74 <_strtod_l+0xfc>
 8016b84:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8016b88:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8016b8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016b8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016b92:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016b96:	e7ed      	b.n	8016b74 <_strtod_l+0xfc>
 8016b98:	f8df b184 	ldr.w	fp, [pc, #388]	; 8016d20 <_strtod_l+0x2a8>
 8016b9c:	f04f 0a00 	mov.w	sl, #0
 8016ba0:	e7e8      	b.n	8016b74 <_strtod_l+0xfc>
 8016ba2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016ba6:	f04f 3aff 	mov.w	sl, #4294967295
 8016baa:	e7e3      	b.n	8016b74 <_strtod_l+0xfc>
 8016bac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016bae:	1c5a      	adds	r2, r3, #1
 8016bb0:	921d      	str	r2, [sp, #116]	; 0x74
 8016bb2:	785b      	ldrb	r3, [r3, #1]
 8016bb4:	2b30      	cmp	r3, #48	; 0x30
 8016bb6:	d0f9      	beq.n	8016bac <_strtod_l+0x134>
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d09f      	beq.n	8016afc <_strtod_l+0x84>
 8016bbc:	2301      	movs	r3, #1
 8016bbe:	f04f 0900 	mov.w	r9, #0
 8016bc2:	9304      	str	r3, [sp, #16]
 8016bc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016bc6:	930a      	str	r3, [sp, #40]	; 0x28
 8016bc8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8016bcc:	464f      	mov	r7, r9
 8016bce:	220a      	movs	r2, #10
 8016bd0:	981d      	ldr	r0, [sp, #116]	; 0x74
 8016bd2:	7806      	ldrb	r6, [r0, #0]
 8016bd4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8016bd8:	b2d9      	uxtb	r1, r3
 8016bda:	2909      	cmp	r1, #9
 8016bdc:	d92a      	bls.n	8016c34 <_strtod_l+0x1bc>
 8016bde:	9907      	ldr	r1, [sp, #28]
 8016be0:	462a      	mov	r2, r5
 8016be2:	f7ff feef 	bl	80169c4 <strncmp>
 8016be6:	b398      	cbz	r0, 8016c50 <_strtod_l+0x1d8>
 8016be8:	2000      	movs	r0, #0
 8016bea:	4633      	mov	r3, r6
 8016bec:	463d      	mov	r5, r7
 8016bee:	9007      	str	r0, [sp, #28]
 8016bf0:	4602      	mov	r2, r0
 8016bf2:	2b65      	cmp	r3, #101	; 0x65
 8016bf4:	d001      	beq.n	8016bfa <_strtod_l+0x182>
 8016bf6:	2b45      	cmp	r3, #69	; 0x45
 8016bf8:	d118      	bne.n	8016c2c <_strtod_l+0x1b4>
 8016bfa:	b91d      	cbnz	r5, 8016c04 <_strtod_l+0x18c>
 8016bfc:	9b04      	ldr	r3, [sp, #16]
 8016bfe:	4303      	orrs	r3, r0
 8016c00:	d098      	beq.n	8016b34 <_strtod_l+0xbc>
 8016c02:	2500      	movs	r5, #0
 8016c04:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8016c08:	f108 0301 	add.w	r3, r8, #1
 8016c0c:	931d      	str	r3, [sp, #116]	; 0x74
 8016c0e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016c12:	2b2b      	cmp	r3, #43	; 0x2b
 8016c14:	d075      	beq.n	8016d02 <_strtod_l+0x28a>
 8016c16:	2b2d      	cmp	r3, #45	; 0x2d
 8016c18:	d07b      	beq.n	8016d12 <_strtod_l+0x29a>
 8016c1a:	f04f 0c00 	mov.w	ip, #0
 8016c1e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016c22:	2909      	cmp	r1, #9
 8016c24:	f240 8082 	bls.w	8016d2c <_strtod_l+0x2b4>
 8016c28:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8016c2c:	2600      	movs	r6, #0
 8016c2e:	e09d      	b.n	8016d6c <_strtod_l+0x2f4>
 8016c30:	2300      	movs	r3, #0
 8016c32:	e7c4      	b.n	8016bbe <_strtod_l+0x146>
 8016c34:	2f08      	cmp	r7, #8
 8016c36:	bfd8      	it	le
 8016c38:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8016c3a:	f100 0001 	add.w	r0, r0, #1
 8016c3e:	bfda      	itte	le
 8016c40:	fb02 3301 	mlale	r3, r2, r1, r3
 8016c44:	9309      	strle	r3, [sp, #36]	; 0x24
 8016c46:	fb02 3909 	mlagt	r9, r2, r9, r3
 8016c4a:	3701      	adds	r7, #1
 8016c4c:	901d      	str	r0, [sp, #116]	; 0x74
 8016c4e:	e7bf      	b.n	8016bd0 <_strtod_l+0x158>
 8016c50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016c52:	195a      	adds	r2, r3, r5
 8016c54:	921d      	str	r2, [sp, #116]	; 0x74
 8016c56:	5d5b      	ldrb	r3, [r3, r5]
 8016c58:	2f00      	cmp	r7, #0
 8016c5a:	d037      	beq.n	8016ccc <_strtod_l+0x254>
 8016c5c:	9007      	str	r0, [sp, #28]
 8016c5e:	463d      	mov	r5, r7
 8016c60:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8016c64:	2a09      	cmp	r2, #9
 8016c66:	d912      	bls.n	8016c8e <_strtod_l+0x216>
 8016c68:	2201      	movs	r2, #1
 8016c6a:	e7c2      	b.n	8016bf2 <_strtod_l+0x17a>
 8016c6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016c6e:	1c5a      	adds	r2, r3, #1
 8016c70:	921d      	str	r2, [sp, #116]	; 0x74
 8016c72:	785b      	ldrb	r3, [r3, #1]
 8016c74:	3001      	adds	r0, #1
 8016c76:	2b30      	cmp	r3, #48	; 0x30
 8016c78:	d0f8      	beq.n	8016c6c <_strtod_l+0x1f4>
 8016c7a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016c7e:	2a08      	cmp	r2, #8
 8016c80:	f200 84db 	bhi.w	801763a <_strtod_l+0xbc2>
 8016c84:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016c86:	9007      	str	r0, [sp, #28]
 8016c88:	2000      	movs	r0, #0
 8016c8a:	920a      	str	r2, [sp, #40]	; 0x28
 8016c8c:	4605      	mov	r5, r0
 8016c8e:	3b30      	subs	r3, #48	; 0x30
 8016c90:	f100 0201 	add.w	r2, r0, #1
 8016c94:	d014      	beq.n	8016cc0 <_strtod_l+0x248>
 8016c96:	9907      	ldr	r1, [sp, #28]
 8016c98:	4411      	add	r1, r2
 8016c9a:	9107      	str	r1, [sp, #28]
 8016c9c:	462a      	mov	r2, r5
 8016c9e:	eb00 0e05 	add.w	lr, r0, r5
 8016ca2:	210a      	movs	r1, #10
 8016ca4:	4572      	cmp	r2, lr
 8016ca6:	d113      	bne.n	8016cd0 <_strtod_l+0x258>
 8016ca8:	182a      	adds	r2, r5, r0
 8016caa:	2a08      	cmp	r2, #8
 8016cac:	f105 0501 	add.w	r5, r5, #1
 8016cb0:	4405      	add	r5, r0
 8016cb2:	dc1c      	bgt.n	8016cee <_strtod_l+0x276>
 8016cb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016cb6:	220a      	movs	r2, #10
 8016cb8:	fb02 3301 	mla	r3, r2, r1, r3
 8016cbc:	9309      	str	r3, [sp, #36]	; 0x24
 8016cbe:	2200      	movs	r2, #0
 8016cc0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016cc2:	1c59      	adds	r1, r3, #1
 8016cc4:	911d      	str	r1, [sp, #116]	; 0x74
 8016cc6:	785b      	ldrb	r3, [r3, #1]
 8016cc8:	4610      	mov	r0, r2
 8016cca:	e7c9      	b.n	8016c60 <_strtod_l+0x1e8>
 8016ccc:	4638      	mov	r0, r7
 8016cce:	e7d2      	b.n	8016c76 <_strtod_l+0x1fe>
 8016cd0:	2a08      	cmp	r2, #8
 8016cd2:	dc04      	bgt.n	8016cde <_strtod_l+0x266>
 8016cd4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8016cd6:	434e      	muls	r6, r1
 8016cd8:	9609      	str	r6, [sp, #36]	; 0x24
 8016cda:	3201      	adds	r2, #1
 8016cdc:	e7e2      	b.n	8016ca4 <_strtod_l+0x22c>
 8016cde:	f102 0c01 	add.w	ip, r2, #1
 8016ce2:	f1bc 0f10 	cmp.w	ip, #16
 8016ce6:	bfd8      	it	le
 8016ce8:	fb01 f909 	mulle.w	r9, r1, r9
 8016cec:	e7f5      	b.n	8016cda <_strtod_l+0x262>
 8016cee:	2d10      	cmp	r5, #16
 8016cf0:	bfdc      	itt	le
 8016cf2:	220a      	movle	r2, #10
 8016cf4:	fb02 3909 	mlale	r9, r2, r9, r3
 8016cf8:	e7e1      	b.n	8016cbe <_strtod_l+0x246>
 8016cfa:	2300      	movs	r3, #0
 8016cfc:	9307      	str	r3, [sp, #28]
 8016cfe:	2201      	movs	r2, #1
 8016d00:	e77c      	b.n	8016bfc <_strtod_l+0x184>
 8016d02:	f04f 0c00 	mov.w	ip, #0
 8016d06:	f108 0302 	add.w	r3, r8, #2
 8016d0a:	931d      	str	r3, [sp, #116]	; 0x74
 8016d0c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8016d10:	e785      	b.n	8016c1e <_strtod_l+0x1a6>
 8016d12:	f04f 0c01 	mov.w	ip, #1
 8016d16:	e7f6      	b.n	8016d06 <_strtod_l+0x28e>
 8016d18:	0801c43c 	.word	0x0801c43c
 8016d1c:	0801c0ec 	.word	0x0801c0ec
 8016d20:	7ff00000 	.word	0x7ff00000
 8016d24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016d26:	1c59      	adds	r1, r3, #1
 8016d28:	911d      	str	r1, [sp, #116]	; 0x74
 8016d2a:	785b      	ldrb	r3, [r3, #1]
 8016d2c:	2b30      	cmp	r3, #48	; 0x30
 8016d2e:	d0f9      	beq.n	8016d24 <_strtod_l+0x2ac>
 8016d30:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8016d34:	2908      	cmp	r1, #8
 8016d36:	f63f af79 	bhi.w	8016c2c <_strtod_l+0x1b4>
 8016d3a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8016d3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016d40:	9308      	str	r3, [sp, #32]
 8016d42:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016d44:	1c59      	adds	r1, r3, #1
 8016d46:	911d      	str	r1, [sp, #116]	; 0x74
 8016d48:	785b      	ldrb	r3, [r3, #1]
 8016d4a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8016d4e:	2e09      	cmp	r6, #9
 8016d50:	d937      	bls.n	8016dc2 <_strtod_l+0x34a>
 8016d52:	9e08      	ldr	r6, [sp, #32]
 8016d54:	1b89      	subs	r1, r1, r6
 8016d56:	2908      	cmp	r1, #8
 8016d58:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8016d5c:	dc02      	bgt.n	8016d64 <_strtod_l+0x2ec>
 8016d5e:	4576      	cmp	r6, lr
 8016d60:	bfa8      	it	ge
 8016d62:	4676      	movge	r6, lr
 8016d64:	f1bc 0f00 	cmp.w	ip, #0
 8016d68:	d000      	beq.n	8016d6c <_strtod_l+0x2f4>
 8016d6a:	4276      	negs	r6, r6
 8016d6c:	2d00      	cmp	r5, #0
 8016d6e:	d14f      	bne.n	8016e10 <_strtod_l+0x398>
 8016d70:	9904      	ldr	r1, [sp, #16]
 8016d72:	4301      	orrs	r1, r0
 8016d74:	f47f aec2 	bne.w	8016afc <_strtod_l+0x84>
 8016d78:	2a00      	cmp	r2, #0
 8016d7a:	f47f aedb 	bne.w	8016b34 <_strtod_l+0xbc>
 8016d7e:	2b69      	cmp	r3, #105	; 0x69
 8016d80:	d027      	beq.n	8016dd2 <_strtod_l+0x35a>
 8016d82:	dc24      	bgt.n	8016dce <_strtod_l+0x356>
 8016d84:	2b49      	cmp	r3, #73	; 0x49
 8016d86:	d024      	beq.n	8016dd2 <_strtod_l+0x35a>
 8016d88:	2b4e      	cmp	r3, #78	; 0x4e
 8016d8a:	f47f aed3 	bne.w	8016b34 <_strtod_l+0xbc>
 8016d8e:	499e      	ldr	r1, [pc, #632]	; (8017008 <_strtod_l+0x590>)
 8016d90:	a81d      	add	r0, sp, #116	; 0x74
 8016d92:	f002 fa07 	bl	80191a4 <__match>
 8016d96:	2800      	cmp	r0, #0
 8016d98:	f43f aecc 	beq.w	8016b34 <_strtod_l+0xbc>
 8016d9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016d9e:	781b      	ldrb	r3, [r3, #0]
 8016da0:	2b28      	cmp	r3, #40	; 0x28
 8016da2:	d12d      	bne.n	8016e00 <_strtod_l+0x388>
 8016da4:	4999      	ldr	r1, [pc, #612]	; (801700c <_strtod_l+0x594>)
 8016da6:	aa20      	add	r2, sp, #128	; 0x80
 8016da8:	a81d      	add	r0, sp, #116	; 0x74
 8016daa:	f002 fa0f 	bl	80191cc <__hexnan>
 8016dae:	2805      	cmp	r0, #5
 8016db0:	d126      	bne.n	8016e00 <_strtod_l+0x388>
 8016db2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016db4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8016db8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016dbc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016dc0:	e69c      	b.n	8016afc <_strtod_l+0x84>
 8016dc2:	210a      	movs	r1, #10
 8016dc4:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016dc8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016dcc:	e7b9      	b.n	8016d42 <_strtod_l+0x2ca>
 8016dce:	2b6e      	cmp	r3, #110	; 0x6e
 8016dd0:	e7db      	b.n	8016d8a <_strtod_l+0x312>
 8016dd2:	498f      	ldr	r1, [pc, #572]	; (8017010 <_strtod_l+0x598>)
 8016dd4:	a81d      	add	r0, sp, #116	; 0x74
 8016dd6:	f002 f9e5 	bl	80191a4 <__match>
 8016dda:	2800      	cmp	r0, #0
 8016ddc:	f43f aeaa 	beq.w	8016b34 <_strtod_l+0xbc>
 8016de0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016de2:	498c      	ldr	r1, [pc, #560]	; (8017014 <_strtod_l+0x59c>)
 8016de4:	3b01      	subs	r3, #1
 8016de6:	a81d      	add	r0, sp, #116	; 0x74
 8016de8:	931d      	str	r3, [sp, #116]	; 0x74
 8016dea:	f002 f9db 	bl	80191a4 <__match>
 8016dee:	b910      	cbnz	r0, 8016df6 <_strtod_l+0x37e>
 8016df0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016df2:	3301      	adds	r3, #1
 8016df4:	931d      	str	r3, [sp, #116]	; 0x74
 8016df6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8017024 <_strtod_l+0x5ac>
 8016dfa:	f04f 0a00 	mov.w	sl, #0
 8016dfe:	e67d      	b.n	8016afc <_strtod_l+0x84>
 8016e00:	4885      	ldr	r0, [pc, #532]	; (8017018 <_strtod_l+0x5a0>)
 8016e02:	f003 fa6d 	bl	801a2e0 <nan>
 8016e06:	ed8d 0b04 	vstr	d0, [sp, #16]
 8016e0a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8016e0e:	e675      	b.n	8016afc <_strtod_l+0x84>
 8016e10:	9b07      	ldr	r3, [sp, #28]
 8016e12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016e14:	1af3      	subs	r3, r6, r3
 8016e16:	2f00      	cmp	r7, #0
 8016e18:	bf08      	it	eq
 8016e1a:	462f      	moveq	r7, r5
 8016e1c:	2d10      	cmp	r5, #16
 8016e1e:	9308      	str	r3, [sp, #32]
 8016e20:	46a8      	mov	r8, r5
 8016e22:	bfa8      	it	ge
 8016e24:	f04f 0810 	movge.w	r8, #16
 8016e28:	f7e9 ff7c 	bl	8000d24 <__aeabi_ui2d>
 8016e2c:	2d09      	cmp	r5, #9
 8016e2e:	4682      	mov	sl, r0
 8016e30:	468b      	mov	fp, r1
 8016e32:	dd13      	ble.n	8016e5c <_strtod_l+0x3e4>
 8016e34:	4b79      	ldr	r3, [pc, #484]	; (801701c <_strtod_l+0x5a4>)
 8016e36:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016e3a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016e3e:	f7e9 ffeb 	bl	8000e18 <__aeabi_dmul>
 8016e42:	4682      	mov	sl, r0
 8016e44:	4648      	mov	r0, r9
 8016e46:	468b      	mov	fp, r1
 8016e48:	f7e9 ff6c 	bl	8000d24 <__aeabi_ui2d>
 8016e4c:	4602      	mov	r2, r0
 8016e4e:	460b      	mov	r3, r1
 8016e50:	4650      	mov	r0, sl
 8016e52:	4659      	mov	r1, fp
 8016e54:	f7e9 fe2a 	bl	8000aac <__adddf3>
 8016e58:	4682      	mov	sl, r0
 8016e5a:	468b      	mov	fp, r1
 8016e5c:	2d0f      	cmp	r5, #15
 8016e5e:	dc38      	bgt.n	8016ed2 <_strtod_l+0x45a>
 8016e60:	9b08      	ldr	r3, [sp, #32]
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	f43f ae4a 	beq.w	8016afc <_strtod_l+0x84>
 8016e68:	dd24      	ble.n	8016eb4 <_strtod_l+0x43c>
 8016e6a:	2b16      	cmp	r3, #22
 8016e6c:	dc0b      	bgt.n	8016e86 <_strtod_l+0x40e>
 8016e6e:	4d6b      	ldr	r5, [pc, #428]	; (801701c <_strtod_l+0x5a4>)
 8016e70:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8016e74:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016e78:	4652      	mov	r2, sl
 8016e7a:	465b      	mov	r3, fp
 8016e7c:	f7e9 ffcc 	bl	8000e18 <__aeabi_dmul>
 8016e80:	4682      	mov	sl, r0
 8016e82:	468b      	mov	fp, r1
 8016e84:	e63a      	b.n	8016afc <_strtod_l+0x84>
 8016e86:	9a08      	ldr	r2, [sp, #32]
 8016e88:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8016e8c:	4293      	cmp	r3, r2
 8016e8e:	db20      	blt.n	8016ed2 <_strtod_l+0x45a>
 8016e90:	4c62      	ldr	r4, [pc, #392]	; (801701c <_strtod_l+0x5a4>)
 8016e92:	f1c5 050f 	rsb	r5, r5, #15
 8016e96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8016e9a:	4652      	mov	r2, sl
 8016e9c:	465b      	mov	r3, fp
 8016e9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016ea2:	f7e9 ffb9 	bl	8000e18 <__aeabi_dmul>
 8016ea6:	9b08      	ldr	r3, [sp, #32]
 8016ea8:	1b5d      	subs	r5, r3, r5
 8016eaa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8016eae:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016eb2:	e7e3      	b.n	8016e7c <_strtod_l+0x404>
 8016eb4:	9b08      	ldr	r3, [sp, #32]
 8016eb6:	3316      	adds	r3, #22
 8016eb8:	db0b      	blt.n	8016ed2 <_strtod_l+0x45a>
 8016eba:	9b07      	ldr	r3, [sp, #28]
 8016ebc:	4a57      	ldr	r2, [pc, #348]	; (801701c <_strtod_l+0x5a4>)
 8016ebe:	1b9e      	subs	r6, r3, r6
 8016ec0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8016ec4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016ec8:	4650      	mov	r0, sl
 8016eca:	4659      	mov	r1, fp
 8016ecc:	f7ea f8ce 	bl	800106c <__aeabi_ddiv>
 8016ed0:	e7d6      	b.n	8016e80 <_strtod_l+0x408>
 8016ed2:	9b08      	ldr	r3, [sp, #32]
 8016ed4:	eba5 0808 	sub.w	r8, r5, r8
 8016ed8:	4498      	add	r8, r3
 8016eda:	f1b8 0f00 	cmp.w	r8, #0
 8016ede:	dd71      	ble.n	8016fc4 <_strtod_l+0x54c>
 8016ee0:	f018 030f 	ands.w	r3, r8, #15
 8016ee4:	d00a      	beq.n	8016efc <_strtod_l+0x484>
 8016ee6:	494d      	ldr	r1, [pc, #308]	; (801701c <_strtod_l+0x5a4>)
 8016ee8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016eec:	4652      	mov	r2, sl
 8016eee:	465b      	mov	r3, fp
 8016ef0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016ef4:	f7e9 ff90 	bl	8000e18 <__aeabi_dmul>
 8016ef8:	4682      	mov	sl, r0
 8016efa:	468b      	mov	fp, r1
 8016efc:	f038 080f 	bics.w	r8, r8, #15
 8016f00:	d04d      	beq.n	8016f9e <_strtod_l+0x526>
 8016f02:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8016f06:	dd22      	ble.n	8016f4e <_strtod_l+0x4d6>
 8016f08:	2500      	movs	r5, #0
 8016f0a:	462e      	mov	r6, r5
 8016f0c:	9509      	str	r5, [sp, #36]	; 0x24
 8016f0e:	9507      	str	r5, [sp, #28]
 8016f10:	2322      	movs	r3, #34	; 0x22
 8016f12:	f8df b110 	ldr.w	fp, [pc, #272]	; 8017024 <_strtod_l+0x5ac>
 8016f16:	6023      	str	r3, [r4, #0]
 8016f18:	f04f 0a00 	mov.w	sl, #0
 8016f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	f43f adec 	beq.w	8016afc <_strtod_l+0x84>
 8016f24:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016f26:	4620      	mov	r0, r4
 8016f28:	f002 fa9a 	bl	8019460 <_Bfree>
 8016f2c:	9907      	ldr	r1, [sp, #28]
 8016f2e:	4620      	mov	r0, r4
 8016f30:	f002 fa96 	bl	8019460 <_Bfree>
 8016f34:	4631      	mov	r1, r6
 8016f36:	4620      	mov	r0, r4
 8016f38:	f002 fa92 	bl	8019460 <_Bfree>
 8016f3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016f3e:	4620      	mov	r0, r4
 8016f40:	f002 fa8e 	bl	8019460 <_Bfree>
 8016f44:	4629      	mov	r1, r5
 8016f46:	4620      	mov	r0, r4
 8016f48:	f002 fa8a 	bl	8019460 <_Bfree>
 8016f4c:	e5d6      	b.n	8016afc <_strtod_l+0x84>
 8016f4e:	2300      	movs	r3, #0
 8016f50:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016f54:	4650      	mov	r0, sl
 8016f56:	4659      	mov	r1, fp
 8016f58:	4699      	mov	r9, r3
 8016f5a:	f1b8 0f01 	cmp.w	r8, #1
 8016f5e:	dc21      	bgt.n	8016fa4 <_strtod_l+0x52c>
 8016f60:	b10b      	cbz	r3, 8016f66 <_strtod_l+0x4ee>
 8016f62:	4682      	mov	sl, r0
 8016f64:	468b      	mov	fp, r1
 8016f66:	4b2e      	ldr	r3, [pc, #184]	; (8017020 <_strtod_l+0x5a8>)
 8016f68:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016f6c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8016f70:	4652      	mov	r2, sl
 8016f72:	465b      	mov	r3, fp
 8016f74:	e9d9 0100 	ldrd	r0, r1, [r9]
 8016f78:	f7e9 ff4e 	bl	8000e18 <__aeabi_dmul>
 8016f7c:	4b29      	ldr	r3, [pc, #164]	; (8017024 <_strtod_l+0x5ac>)
 8016f7e:	460a      	mov	r2, r1
 8016f80:	400b      	ands	r3, r1
 8016f82:	4929      	ldr	r1, [pc, #164]	; (8017028 <_strtod_l+0x5b0>)
 8016f84:	428b      	cmp	r3, r1
 8016f86:	4682      	mov	sl, r0
 8016f88:	d8be      	bhi.n	8016f08 <_strtod_l+0x490>
 8016f8a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016f8e:	428b      	cmp	r3, r1
 8016f90:	bf86      	itte	hi
 8016f92:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801702c <_strtod_l+0x5b4>
 8016f96:	f04f 3aff 	movhi.w	sl, #4294967295
 8016f9a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016f9e:	2300      	movs	r3, #0
 8016fa0:	9304      	str	r3, [sp, #16]
 8016fa2:	e081      	b.n	80170a8 <_strtod_l+0x630>
 8016fa4:	f018 0f01 	tst.w	r8, #1
 8016fa8:	d007      	beq.n	8016fba <_strtod_l+0x542>
 8016faa:	4b1d      	ldr	r3, [pc, #116]	; (8017020 <_strtod_l+0x5a8>)
 8016fac:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8016fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fb4:	f7e9 ff30 	bl	8000e18 <__aeabi_dmul>
 8016fb8:	2301      	movs	r3, #1
 8016fba:	f109 0901 	add.w	r9, r9, #1
 8016fbe:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016fc2:	e7ca      	b.n	8016f5a <_strtod_l+0x4e2>
 8016fc4:	d0eb      	beq.n	8016f9e <_strtod_l+0x526>
 8016fc6:	f1c8 0800 	rsb	r8, r8, #0
 8016fca:	f018 020f 	ands.w	r2, r8, #15
 8016fce:	d00a      	beq.n	8016fe6 <_strtod_l+0x56e>
 8016fd0:	4b12      	ldr	r3, [pc, #72]	; (801701c <_strtod_l+0x5a4>)
 8016fd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016fd6:	4650      	mov	r0, sl
 8016fd8:	4659      	mov	r1, fp
 8016fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fde:	f7ea f845 	bl	800106c <__aeabi_ddiv>
 8016fe2:	4682      	mov	sl, r0
 8016fe4:	468b      	mov	fp, r1
 8016fe6:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016fea:	d0d8      	beq.n	8016f9e <_strtod_l+0x526>
 8016fec:	f1b8 0f1f 	cmp.w	r8, #31
 8016ff0:	dd1e      	ble.n	8017030 <_strtod_l+0x5b8>
 8016ff2:	2500      	movs	r5, #0
 8016ff4:	462e      	mov	r6, r5
 8016ff6:	9509      	str	r5, [sp, #36]	; 0x24
 8016ff8:	9507      	str	r5, [sp, #28]
 8016ffa:	2322      	movs	r3, #34	; 0x22
 8016ffc:	f04f 0a00 	mov.w	sl, #0
 8017000:	f04f 0b00 	mov.w	fp, #0
 8017004:	6023      	str	r3, [r4, #0]
 8017006:	e789      	b.n	8016f1c <_strtod_l+0x4a4>
 8017008:	0801c0c5 	.word	0x0801c0c5
 801700c:	0801c100 	.word	0x0801c100
 8017010:	0801c0bd 	.word	0x0801c0bd
 8017014:	0801c359 	.word	0x0801c359
 8017018:	0801c254 	.word	0x0801c254
 801701c:	0801c538 	.word	0x0801c538
 8017020:	0801c510 	.word	0x0801c510
 8017024:	7ff00000 	.word	0x7ff00000
 8017028:	7ca00000 	.word	0x7ca00000
 801702c:	7fefffff 	.word	0x7fefffff
 8017030:	f018 0310 	ands.w	r3, r8, #16
 8017034:	bf18      	it	ne
 8017036:	236a      	movne	r3, #106	; 0x6a
 8017038:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80173f0 <_strtod_l+0x978>
 801703c:	9304      	str	r3, [sp, #16]
 801703e:	4650      	mov	r0, sl
 8017040:	4659      	mov	r1, fp
 8017042:	2300      	movs	r3, #0
 8017044:	f018 0f01 	tst.w	r8, #1
 8017048:	d004      	beq.n	8017054 <_strtod_l+0x5dc>
 801704a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801704e:	f7e9 fee3 	bl	8000e18 <__aeabi_dmul>
 8017052:	2301      	movs	r3, #1
 8017054:	ea5f 0868 	movs.w	r8, r8, asr #1
 8017058:	f109 0908 	add.w	r9, r9, #8
 801705c:	d1f2      	bne.n	8017044 <_strtod_l+0x5cc>
 801705e:	b10b      	cbz	r3, 8017064 <_strtod_l+0x5ec>
 8017060:	4682      	mov	sl, r0
 8017062:	468b      	mov	fp, r1
 8017064:	9b04      	ldr	r3, [sp, #16]
 8017066:	b1bb      	cbz	r3, 8017098 <_strtod_l+0x620>
 8017068:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801706c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017070:	2b00      	cmp	r3, #0
 8017072:	4659      	mov	r1, fp
 8017074:	dd10      	ble.n	8017098 <_strtod_l+0x620>
 8017076:	2b1f      	cmp	r3, #31
 8017078:	f340 8128 	ble.w	80172cc <_strtod_l+0x854>
 801707c:	2b34      	cmp	r3, #52	; 0x34
 801707e:	bfde      	ittt	le
 8017080:	3b20      	suble	r3, #32
 8017082:	f04f 32ff 	movle.w	r2, #4294967295
 8017086:	fa02 f303 	lslle.w	r3, r2, r3
 801708a:	f04f 0a00 	mov.w	sl, #0
 801708e:	bfcc      	ite	gt
 8017090:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8017094:	ea03 0b01 	andle.w	fp, r3, r1
 8017098:	2200      	movs	r2, #0
 801709a:	2300      	movs	r3, #0
 801709c:	4650      	mov	r0, sl
 801709e:	4659      	mov	r1, fp
 80170a0:	f7ea f922 	bl	80012e8 <__aeabi_dcmpeq>
 80170a4:	2800      	cmp	r0, #0
 80170a6:	d1a4      	bne.n	8016ff2 <_strtod_l+0x57a>
 80170a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170aa:	9300      	str	r3, [sp, #0]
 80170ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80170ae:	462b      	mov	r3, r5
 80170b0:	463a      	mov	r2, r7
 80170b2:	4620      	mov	r0, r4
 80170b4:	f002 fa40 	bl	8019538 <__s2b>
 80170b8:	9009      	str	r0, [sp, #36]	; 0x24
 80170ba:	2800      	cmp	r0, #0
 80170bc:	f43f af24 	beq.w	8016f08 <_strtod_l+0x490>
 80170c0:	9b07      	ldr	r3, [sp, #28]
 80170c2:	1b9e      	subs	r6, r3, r6
 80170c4:	9b08      	ldr	r3, [sp, #32]
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	bfb4      	ite	lt
 80170ca:	4633      	movlt	r3, r6
 80170cc:	2300      	movge	r3, #0
 80170ce:	9310      	str	r3, [sp, #64]	; 0x40
 80170d0:	9b08      	ldr	r3, [sp, #32]
 80170d2:	2500      	movs	r5, #0
 80170d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80170d8:	9318      	str	r3, [sp, #96]	; 0x60
 80170da:	462e      	mov	r6, r5
 80170dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170de:	4620      	mov	r0, r4
 80170e0:	6859      	ldr	r1, [r3, #4]
 80170e2:	f002 f97d 	bl	80193e0 <_Balloc>
 80170e6:	9007      	str	r0, [sp, #28]
 80170e8:	2800      	cmp	r0, #0
 80170ea:	f43f af11 	beq.w	8016f10 <_strtod_l+0x498>
 80170ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170f0:	691a      	ldr	r2, [r3, #16]
 80170f2:	3202      	adds	r2, #2
 80170f4:	f103 010c 	add.w	r1, r3, #12
 80170f8:	0092      	lsls	r2, r2, #2
 80170fa:	300c      	adds	r0, #12
 80170fc:	f7fe fc66 	bl	80159cc <memcpy>
 8017100:	ec4b ab10 	vmov	d0, sl, fp
 8017104:	aa20      	add	r2, sp, #128	; 0x80
 8017106:	a91f      	add	r1, sp, #124	; 0x7c
 8017108:	4620      	mov	r0, r4
 801710a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801710e:	f002 fd4f 	bl	8019bb0 <__d2b>
 8017112:	901e      	str	r0, [sp, #120]	; 0x78
 8017114:	2800      	cmp	r0, #0
 8017116:	f43f aefb 	beq.w	8016f10 <_strtod_l+0x498>
 801711a:	2101      	movs	r1, #1
 801711c:	4620      	mov	r0, r4
 801711e:	f002 faa5 	bl	801966c <__i2b>
 8017122:	4606      	mov	r6, r0
 8017124:	2800      	cmp	r0, #0
 8017126:	f43f aef3 	beq.w	8016f10 <_strtod_l+0x498>
 801712a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801712c:	9904      	ldr	r1, [sp, #16]
 801712e:	2b00      	cmp	r3, #0
 8017130:	bfab      	itete	ge
 8017132:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8017134:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8017136:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8017138:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801713c:	bfac      	ite	ge
 801713e:	eb03 0902 	addge.w	r9, r3, r2
 8017142:	1ad7      	sublt	r7, r2, r3
 8017144:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017146:	eba3 0801 	sub.w	r8, r3, r1
 801714a:	4490      	add	r8, r2
 801714c:	4ba3      	ldr	r3, [pc, #652]	; (80173dc <_strtod_l+0x964>)
 801714e:	f108 38ff 	add.w	r8, r8, #4294967295
 8017152:	4598      	cmp	r8, r3
 8017154:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017158:	f280 80cc 	bge.w	80172f4 <_strtod_l+0x87c>
 801715c:	eba3 0308 	sub.w	r3, r3, r8
 8017160:	2b1f      	cmp	r3, #31
 8017162:	eba2 0203 	sub.w	r2, r2, r3
 8017166:	f04f 0101 	mov.w	r1, #1
 801716a:	f300 80b6 	bgt.w	80172da <_strtod_l+0x862>
 801716e:	fa01 f303 	lsl.w	r3, r1, r3
 8017172:	9311      	str	r3, [sp, #68]	; 0x44
 8017174:	2300      	movs	r3, #0
 8017176:	930c      	str	r3, [sp, #48]	; 0x30
 8017178:	eb09 0802 	add.w	r8, r9, r2
 801717c:	9b04      	ldr	r3, [sp, #16]
 801717e:	45c1      	cmp	r9, r8
 8017180:	4417      	add	r7, r2
 8017182:	441f      	add	r7, r3
 8017184:	464b      	mov	r3, r9
 8017186:	bfa8      	it	ge
 8017188:	4643      	movge	r3, r8
 801718a:	42bb      	cmp	r3, r7
 801718c:	bfa8      	it	ge
 801718e:	463b      	movge	r3, r7
 8017190:	2b00      	cmp	r3, #0
 8017192:	bfc2      	ittt	gt
 8017194:	eba8 0803 	subgt.w	r8, r8, r3
 8017198:	1aff      	subgt	r7, r7, r3
 801719a:	eba9 0903 	subgt.w	r9, r9, r3
 801719e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	dd17      	ble.n	80171d4 <_strtod_l+0x75c>
 80171a4:	4631      	mov	r1, r6
 80171a6:	461a      	mov	r2, r3
 80171a8:	4620      	mov	r0, r4
 80171aa:	f002 fb1b 	bl	80197e4 <__pow5mult>
 80171ae:	4606      	mov	r6, r0
 80171b0:	2800      	cmp	r0, #0
 80171b2:	f43f aead 	beq.w	8016f10 <_strtod_l+0x498>
 80171b6:	4601      	mov	r1, r0
 80171b8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80171ba:	4620      	mov	r0, r4
 80171bc:	f002 fa6c 	bl	8019698 <__multiply>
 80171c0:	900f      	str	r0, [sp, #60]	; 0x3c
 80171c2:	2800      	cmp	r0, #0
 80171c4:	f43f aea4 	beq.w	8016f10 <_strtod_l+0x498>
 80171c8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80171ca:	4620      	mov	r0, r4
 80171cc:	f002 f948 	bl	8019460 <_Bfree>
 80171d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80171d2:	931e      	str	r3, [sp, #120]	; 0x78
 80171d4:	f1b8 0f00 	cmp.w	r8, #0
 80171d8:	f300 8091 	bgt.w	80172fe <_strtod_l+0x886>
 80171dc:	9b08      	ldr	r3, [sp, #32]
 80171de:	2b00      	cmp	r3, #0
 80171e0:	dd08      	ble.n	80171f4 <_strtod_l+0x77c>
 80171e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80171e4:	9907      	ldr	r1, [sp, #28]
 80171e6:	4620      	mov	r0, r4
 80171e8:	f002 fafc 	bl	80197e4 <__pow5mult>
 80171ec:	9007      	str	r0, [sp, #28]
 80171ee:	2800      	cmp	r0, #0
 80171f0:	f43f ae8e 	beq.w	8016f10 <_strtod_l+0x498>
 80171f4:	2f00      	cmp	r7, #0
 80171f6:	dd08      	ble.n	801720a <_strtod_l+0x792>
 80171f8:	9907      	ldr	r1, [sp, #28]
 80171fa:	463a      	mov	r2, r7
 80171fc:	4620      	mov	r0, r4
 80171fe:	f002 fb4b 	bl	8019898 <__lshift>
 8017202:	9007      	str	r0, [sp, #28]
 8017204:	2800      	cmp	r0, #0
 8017206:	f43f ae83 	beq.w	8016f10 <_strtod_l+0x498>
 801720a:	f1b9 0f00 	cmp.w	r9, #0
 801720e:	dd08      	ble.n	8017222 <_strtod_l+0x7aa>
 8017210:	4631      	mov	r1, r6
 8017212:	464a      	mov	r2, r9
 8017214:	4620      	mov	r0, r4
 8017216:	f002 fb3f 	bl	8019898 <__lshift>
 801721a:	4606      	mov	r6, r0
 801721c:	2800      	cmp	r0, #0
 801721e:	f43f ae77 	beq.w	8016f10 <_strtod_l+0x498>
 8017222:	9a07      	ldr	r2, [sp, #28]
 8017224:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017226:	4620      	mov	r0, r4
 8017228:	f002 fbbe 	bl	80199a8 <__mdiff>
 801722c:	4605      	mov	r5, r0
 801722e:	2800      	cmp	r0, #0
 8017230:	f43f ae6e 	beq.w	8016f10 <_strtod_l+0x498>
 8017234:	68c3      	ldr	r3, [r0, #12]
 8017236:	930f      	str	r3, [sp, #60]	; 0x3c
 8017238:	2300      	movs	r3, #0
 801723a:	60c3      	str	r3, [r0, #12]
 801723c:	4631      	mov	r1, r6
 801723e:	f002 fb97 	bl	8019970 <__mcmp>
 8017242:	2800      	cmp	r0, #0
 8017244:	da65      	bge.n	8017312 <_strtod_l+0x89a>
 8017246:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017248:	ea53 030a 	orrs.w	r3, r3, sl
 801724c:	f040 8087 	bne.w	801735e <_strtod_l+0x8e6>
 8017250:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017254:	2b00      	cmp	r3, #0
 8017256:	f040 8082 	bne.w	801735e <_strtod_l+0x8e6>
 801725a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801725e:	0d1b      	lsrs	r3, r3, #20
 8017260:	051b      	lsls	r3, r3, #20
 8017262:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8017266:	d97a      	bls.n	801735e <_strtod_l+0x8e6>
 8017268:	696b      	ldr	r3, [r5, #20]
 801726a:	b913      	cbnz	r3, 8017272 <_strtod_l+0x7fa>
 801726c:	692b      	ldr	r3, [r5, #16]
 801726e:	2b01      	cmp	r3, #1
 8017270:	dd75      	ble.n	801735e <_strtod_l+0x8e6>
 8017272:	4629      	mov	r1, r5
 8017274:	2201      	movs	r2, #1
 8017276:	4620      	mov	r0, r4
 8017278:	f002 fb0e 	bl	8019898 <__lshift>
 801727c:	4631      	mov	r1, r6
 801727e:	4605      	mov	r5, r0
 8017280:	f002 fb76 	bl	8019970 <__mcmp>
 8017284:	2800      	cmp	r0, #0
 8017286:	dd6a      	ble.n	801735e <_strtod_l+0x8e6>
 8017288:	9904      	ldr	r1, [sp, #16]
 801728a:	4a55      	ldr	r2, [pc, #340]	; (80173e0 <_strtod_l+0x968>)
 801728c:	465b      	mov	r3, fp
 801728e:	2900      	cmp	r1, #0
 8017290:	f000 8085 	beq.w	801739e <_strtod_l+0x926>
 8017294:	ea02 010b 	and.w	r1, r2, fp
 8017298:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801729c:	dc7f      	bgt.n	801739e <_strtod_l+0x926>
 801729e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80172a2:	f77f aeaa 	ble.w	8016ffa <_strtod_l+0x582>
 80172a6:	4a4f      	ldr	r2, [pc, #316]	; (80173e4 <_strtod_l+0x96c>)
 80172a8:	2300      	movs	r3, #0
 80172aa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80172ae:	4650      	mov	r0, sl
 80172b0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80172b4:	4659      	mov	r1, fp
 80172b6:	f7e9 fdaf 	bl	8000e18 <__aeabi_dmul>
 80172ba:	460b      	mov	r3, r1
 80172bc:	4303      	orrs	r3, r0
 80172be:	bf08      	it	eq
 80172c0:	2322      	moveq	r3, #34	; 0x22
 80172c2:	4682      	mov	sl, r0
 80172c4:	468b      	mov	fp, r1
 80172c6:	bf08      	it	eq
 80172c8:	6023      	streq	r3, [r4, #0]
 80172ca:	e62b      	b.n	8016f24 <_strtod_l+0x4ac>
 80172cc:	f04f 32ff 	mov.w	r2, #4294967295
 80172d0:	fa02 f303 	lsl.w	r3, r2, r3
 80172d4:	ea03 0a0a 	and.w	sl, r3, sl
 80172d8:	e6de      	b.n	8017098 <_strtod_l+0x620>
 80172da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80172de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80172e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80172e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80172ea:	fa01 f308 	lsl.w	r3, r1, r8
 80172ee:	930c      	str	r3, [sp, #48]	; 0x30
 80172f0:	9111      	str	r1, [sp, #68]	; 0x44
 80172f2:	e741      	b.n	8017178 <_strtod_l+0x700>
 80172f4:	2300      	movs	r3, #0
 80172f6:	930c      	str	r3, [sp, #48]	; 0x30
 80172f8:	2301      	movs	r3, #1
 80172fa:	9311      	str	r3, [sp, #68]	; 0x44
 80172fc:	e73c      	b.n	8017178 <_strtod_l+0x700>
 80172fe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017300:	4642      	mov	r2, r8
 8017302:	4620      	mov	r0, r4
 8017304:	f002 fac8 	bl	8019898 <__lshift>
 8017308:	901e      	str	r0, [sp, #120]	; 0x78
 801730a:	2800      	cmp	r0, #0
 801730c:	f47f af66 	bne.w	80171dc <_strtod_l+0x764>
 8017310:	e5fe      	b.n	8016f10 <_strtod_l+0x498>
 8017312:	465f      	mov	r7, fp
 8017314:	d16e      	bne.n	80173f4 <_strtod_l+0x97c>
 8017316:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017318:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801731c:	b342      	cbz	r2, 8017370 <_strtod_l+0x8f8>
 801731e:	4a32      	ldr	r2, [pc, #200]	; (80173e8 <_strtod_l+0x970>)
 8017320:	4293      	cmp	r3, r2
 8017322:	d128      	bne.n	8017376 <_strtod_l+0x8fe>
 8017324:	9b04      	ldr	r3, [sp, #16]
 8017326:	4650      	mov	r0, sl
 8017328:	b1eb      	cbz	r3, 8017366 <_strtod_l+0x8ee>
 801732a:	4a2d      	ldr	r2, [pc, #180]	; (80173e0 <_strtod_l+0x968>)
 801732c:	403a      	ands	r2, r7
 801732e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8017332:	f04f 31ff 	mov.w	r1, #4294967295
 8017336:	d819      	bhi.n	801736c <_strtod_l+0x8f4>
 8017338:	0d12      	lsrs	r2, r2, #20
 801733a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801733e:	fa01 f303 	lsl.w	r3, r1, r3
 8017342:	4298      	cmp	r0, r3
 8017344:	d117      	bne.n	8017376 <_strtod_l+0x8fe>
 8017346:	4b29      	ldr	r3, [pc, #164]	; (80173ec <_strtod_l+0x974>)
 8017348:	429f      	cmp	r7, r3
 801734a:	d102      	bne.n	8017352 <_strtod_l+0x8da>
 801734c:	3001      	adds	r0, #1
 801734e:	f43f addf 	beq.w	8016f10 <_strtod_l+0x498>
 8017352:	4b23      	ldr	r3, [pc, #140]	; (80173e0 <_strtod_l+0x968>)
 8017354:	403b      	ands	r3, r7
 8017356:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801735a:	f04f 0a00 	mov.w	sl, #0
 801735e:	9b04      	ldr	r3, [sp, #16]
 8017360:	2b00      	cmp	r3, #0
 8017362:	d1a0      	bne.n	80172a6 <_strtod_l+0x82e>
 8017364:	e5de      	b.n	8016f24 <_strtod_l+0x4ac>
 8017366:	f04f 33ff 	mov.w	r3, #4294967295
 801736a:	e7ea      	b.n	8017342 <_strtod_l+0x8ca>
 801736c:	460b      	mov	r3, r1
 801736e:	e7e8      	b.n	8017342 <_strtod_l+0x8ca>
 8017370:	ea53 030a 	orrs.w	r3, r3, sl
 8017374:	d088      	beq.n	8017288 <_strtod_l+0x810>
 8017376:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017378:	b1db      	cbz	r3, 80173b2 <_strtod_l+0x93a>
 801737a:	423b      	tst	r3, r7
 801737c:	d0ef      	beq.n	801735e <_strtod_l+0x8e6>
 801737e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017380:	9a04      	ldr	r2, [sp, #16]
 8017382:	4650      	mov	r0, sl
 8017384:	4659      	mov	r1, fp
 8017386:	b1c3      	cbz	r3, 80173ba <_strtod_l+0x942>
 8017388:	f7ff fb58 	bl	8016a3c <sulp>
 801738c:	4602      	mov	r2, r0
 801738e:	460b      	mov	r3, r1
 8017390:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017394:	f7e9 fb8a 	bl	8000aac <__adddf3>
 8017398:	4682      	mov	sl, r0
 801739a:	468b      	mov	fp, r1
 801739c:	e7df      	b.n	801735e <_strtod_l+0x8e6>
 801739e:	4013      	ands	r3, r2
 80173a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80173a4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80173a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80173ac:	f04f 3aff 	mov.w	sl, #4294967295
 80173b0:	e7d5      	b.n	801735e <_strtod_l+0x8e6>
 80173b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80173b4:	ea13 0f0a 	tst.w	r3, sl
 80173b8:	e7e0      	b.n	801737c <_strtod_l+0x904>
 80173ba:	f7ff fb3f 	bl	8016a3c <sulp>
 80173be:	4602      	mov	r2, r0
 80173c0:	460b      	mov	r3, r1
 80173c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80173c6:	f7e9 fb6f 	bl	8000aa8 <__aeabi_dsub>
 80173ca:	2200      	movs	r2, #0
 80173cc:	2300      	movs	r3, #0
 80173ce:	4682      	mov	sl, r0
 80173d0:	468b      	mov	fp, r1
 80173d2:	f7e9 ff89 	bl	80012e8 <__aeabi_dcmpeq>
 80173d6:	2800      	cmp	r0, #0
 80173d8:	d0c1      	beq.n	801735e <_strtod_l+0x8e6>
 80173da:	e60e      	b.n	8016ffa <_strtod_l+0x582>
 80173dc:	fffffc02 	.word	0xfffffc02
 80173e0:	7ff00000 	.word	0x7ff00000
 80173e4:	39500000 	.word	0x39500000
 80173e8:	000fffff 	.word	0x000fffff
 80173ec:	7fefffff 	.word	0x7fefffff
 80173f0:	0801c118 	.word	0x0801c118
 80173f4:	4631      	mov	r1, r6
 80173f6:	4628      	mov	r0, r5
 80173f8:	f002 fc36 	bl	8019c68 <__ratio>
 80173fc:	ec59 8b10 	vmov	r8, r9, d0
 8017400:	ee10 0a10 	vmov	r0, s0
 8017404:	2200      	movs	r2, #0
 8017406:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801740a:	4649      	mov	r1, r9
 801740c:	f7e9 ff80 	bl	8001310 <__aeabi_dcmple>
 8017410:	2800      	cmp	r0, #0
 8017412:	d07c      	beq.n	801750e <_strtod_l+0xa96>
 8017414:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017416:	2b00      	cmp	r3, #0
 8017418:	d04c      	beq.n	80174b4 <_strtod_l+0xa3c>
 801741a:	4b95      	ldr	r3, [pc, #596]	; (8017670 <_strtod_l+0xbf8>)
 801741c:	2200      	movs	r2, #0
 801741e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017422:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8017670 <_strtod_l+0xbf8>
 8017426:	f04f 0800 	mov.w	r8, #0
 801742a:	4b92      	ldr	r3, [pc, #584]	; (8017674 <_strtod_l+0xbfc>)
 801742c:	403b      	ands	r3, r7
 801742e:	9311      	str	r3, [sp, #68]	; 0x44
 8017430:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017432:	4b91      	ldr	r3, [pc, #580]	; (8017678 <_strtod_l+0xc00>)
 8017434:	429a      	cmp	r2, r3
 8017436:	f040 80b2 	bne.w	801759e <_strtod_l+0xb26>
 801743a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801743e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017442:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8017446:	ec4b ab10 	vmov	d0, sl, fp
 801744a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801744e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017452:	f002 fb31 	bl	8019ab8 <__ulp>
 8017456:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801745a:	ec53 2b10 	vmov	r2, r3, d0
 801745e:	f7e9 fcdb 	bl	8000e18 <__aeabi_dmul>
 8017462:	4652      	mov	r2, sl
 8017464:	465b      	mov	r3, fp
 8017466:	f7e9 fb21 	bl	8000aac <__adddf3>
 801746a:	460b      	mov	r3, r1
 801746c:	4981      	ldr	r1, [pc, #516]	; (8017674 <_strtod_l+0xbfc>)
 801746e:	4a83      	ldr	r2, [pc, #524]	; (801767c <_strtod_l+0xc04>)
 8017470:	4019      	ands	r1, r3
 8017472:	4291      	cmp	r1, r2
 8017474:	4682      	mov	sl, r0
 8017476:	d95e      	bls.n	8017536 <_strtod_l+0xabe>
 8017478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801747a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801747e:	4293      	cmp	r3, r2
 8017480:	d103      	bne.n	801748a <_strtod_l+0xa12>
 8017482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017484:	3301      	adds	r3, #1
 8017486:	f43f ad43 	beq.w	8016f10 <_strtod_l+0x498>
 801748a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8017688 <_strtod_l+0xc10>
 801748e:	f04f 3aff 	mov.w	sl, #4294967295
 8017492:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017494:	4620      	mov	r0, r4
 8017496:	f001 ffe3 	bl	8019460 <_Bfree>
 801749a:	9907      	ldr	r1, [sp, #28]
 801749c:	4620      	mov	r0, r4
 801749e:	f001 ffdf 	bl	8019460 <_Bfree>
 80174a2:	4631      	mov	r1, r6
 80174a4:	4620      	mov	r0, r4
 80174a6:	f001 ffdb 	bl	8019460 <_Bfree>
 80174aa:	4629      	mov	r1, r5
 80174ac:	4620      	mov	r0, r4
 80174ae:	f001 ffd7 	bl	8019460 <_Bfree>
 80174b2:	e613      	b.n	80170dc <_strtod_l+0x664>
 80174b4:	f1ba 0f00 	cmp.w	sl, #0
 80174b8:	d11b      	bne.n	80174f2 <_strtod_l+0xa7a>
 80174ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80174be:	b9f3      	cbnz	r3, 80174fe <_strtod_l+0xa86>
 80174c0:	4b6b      	ldr	r3, [pc, #428]	; (8017670 <_strtod_l+0xbf8>)
 80174c2:	2200      	movs	r2, #0
 80174c4:	4640      	mov	r0, r8
 80174c6:	4649      	mov	r1, r9
 80174c8:	f7e9 ff18 	bl	80012fc <__aeabi_dcmplt>
 80174cc:	b9d0      	cbnz	r0, 8017504 <_strtod_l+0xa8c>
 80174ce:	4640      	mov	r0, r8
 80174d0:	4649      	mov	r1, r9
 80174d2:	4b6b      	ldr	r3, [pc, #428]	; (8017680 <_strtod_l+0xc08>)
 80174d4:	2200      	movs	r2, #0
 80174d6:	f7e9 fc9f 	bl	8000e18 <__aeabi_dmul>
 80174da:	4680      	mov	r8, r0
 80174dc:	4689      	mov	r9, r1
 80174de:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80174e2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80174e6:	931b      	str	r3, [sp, #108]	; 0x6c
 80174e8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80174ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80174f0:	e79b      	b.n	801742a <_strtod_l+0x9b2>
 80174f2:	f1ba 0f01 	cmp.w	sl, #1
 80174f6:	d102      	bne.n	80174fe <_strtod_l+0xa86>
 80174f8:	2f00      	cmp	r7, #0
 80174fa:	f43f ad7e 	beq.w	8016ffa <_strtod_l+0x582>
 80174fe:	4b61      	ldr	r3, [pc, #388]	; (8017684 <_strtod_l+0xc0c>)
 8017500:	2200      	movs	r2, #0
 8017502:	e78c      	b.n	801741e <_strtod_l+0x9a6>
 8017504:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8017680 <_strtod_l+0xc08>
 8017508:	f04f 0800 	mov.w	r8, #0
 801750c:	e7e7      	b.n	80174de <_strtod_l+0xa66>
 801750e:	4b5c      	ldr	r3, [pc, #368]	; (8017680 <_strtod_l+0xc08>)
 8017510:	4640      	mov	r0, r8
 8017512:	4649      	mov	r1, r9
 8017514:	2200      	movs	r2, #0
 8017516:	f7e9 fc7f 	bl	8000e18 <__aeabi_dmul>
 801751a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801751c:	4680      	mov	r8, r0
 801751e:	4689      	mov	r9, r1
 8017520:	b933      	cbnz	r3, 8017530 <_strtod_l+0xab8>
 8017522:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017526:	9012      	str	r0, [sp, #72]	; 0x48
 8017528:	9313      	str	r3, [sp, #76]	; 0x4c
 801752a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801752e:	e7dd      	b.n	80174ec <_strtod_l+0xa74>
 8017530:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8017534:	e7f9      	b.n	801752a <_strtod_l+0xab2>
 8017536:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801753a:	9b04      	ldr	r3, [sp, #16]
 801753c:	2b00      	cmp	r3, #0
 801753e:	d1a8      	bne.n	8017492 <_strtod_l+0xa1a>
 8017540:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017544:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017546:	0d1b      	lsrs	r3, r3, #20
 8017548:	051b      	lsls	r3, r3, #20
 801754a:	429a      	cmp	r2, r3
 801754c:	d1a1      	bne.n	8017492 <_strtod_l+0xa1a>
 801754e:	4640      	mov	r0, r8
 8017550:	4649      	mov	r1, r9
 8017552:	f7e9 ffc1 	bl	80014d8 <__aeabi_d2lz>
 8017556:	f7e9 fc31 	bl	8000dbc <__aeabi_l2d>
 801755a:	4602      	mov	r2, r0
 801755c:	460b      	mov	r3, r1
 801755e:	4640      	mov	r0, r8
 8017560:	4649      	mov	r1, r9
 8017562:	f7e9 faa1 	bl	8000aa8 <__aeabi_dsub>
 8017566:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017568:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801756c:	ea43 030a 	orr.w	r3, r3, sl
 8017570:	4313      	orrs	r3, r2
 8017572:	4680      	mov	r8, r0
 8017574:	4689      	mov	r9, r1
 8017576:	d053      	beq.n	8017620 <_strtod_l+0xba8>
 8017578:	a335      	add	r3, pc, #212	; (adr r3, 8017650 <_strtod_l+0xbd8>)
 801757a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801757e:	f7e9 febd 	bl	80012fc <__aeabi_dcmplt>
 8017582:	2800      	cmp	r0, #0
 8017584:	f47f acce 	bne.w	8016f24 <_strtod_l+0x4ac>
 8017588:	a333      	add	r3, pc, #204	; (adr r3, 8017658 <_strtod_l+0xbe0>)
 801758a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801758e:	4640      	mov	r0, r8
 8017590:	4649      	mov	r1, r9
 8017592:	f7e9 fed1 	bl	8001338 <__aeabi_dcmpgt>
 8017596:	2800      	cmp	r0, #0
 8017598:	f43f af7b 	beq.w	8017492 <_strtod_l+0xa1a>
 801759c:	e4c2      	b.n	8016f24 <_strtod_l+0x4ac>
 801759e:	9b04      	ldr	r3, [sp, #16]
 80175a0:	b333      	cbz	r3, 80175f0 <_strtod_l+0xb78>
 80175a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80175a4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80175a8:	d822      	bhi.n	80175f0 <_strtod_l+0xb78>
 80175aa:	a32d      	add	r3, pc, #180	; (adr r3, 8017660 <_strtod_l+0xbe8>)
 80175ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175b0:	4640      	mov	r0, r8
 80175b2:	4649      	mov	r1, r9
 80175b4:	f7e9 feac 	bl	8001310 <__aeabi_dcmple>
 80175b8:	b1a0      	cbz	r0, 80175e4 <_strtod_l+0xb6c>
 80175ba:	4649      	mov	r1, r9
 80175bc:	4640      	mov	r0, r8
 80175be:	f7e9 ff03 	bl	80013c8 <__aeabi_d2uiz>
 80175c2:	2801      	cmp	r0, #1
 80175c4:	bf38      	it	cc
 80175c6:	2001      	movcc	r0, #1
 80175c8:	f7e9 fbac 	bl	8000d24 <__aeabi_ui2d>
 80175cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80175ce:	4680      	mov	r8, r0
 80175d0:	4689      	mov	r9, r1
 80175d2:	bb13      	cbnz	r3, 801761a <_strtod_l+0xba2>
 80175d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80175d8:	9014      	str	r0, [sp, #80]	; 0x50
 80175da:	9315      	str	r3, [sp, #84]	; 0x54
 80175dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80175e0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80175e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80175e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80175e8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80175ec:	1a9b      	subs	r3, r3, r2
 80175ee:	930d      	str	r3, [sp, #52]	; 0x34
 80175f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80175f4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80175f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80175fc:	f002 fa5c 	bl	8019ab8 <__ulp>
 8017600:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017604:	ec53 2b10 	vmov	r2, r3, d0
 8017608:	f7e9 fc06 	bl	8000e18 <__aeabi_dmul>
 801760c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017610:	f7e9 fa4c 	bl	8000aac <__adddf3>
 8017614:	4682      	mov	sl, r0
 8017616:	468b      	mov	fp, r1
 8017618:	e78f      	b.n	801753a <_strtod_l+0xac2>
 801761a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801761e:	e7dd      	b.n	80175dc <_strtod_l+0xb64>
 8017620:	a311      	add	r3, pc, #68	; (adr r3, 8017668 <_strtod_l+0xbf0>)
 8017622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017626:	f7e9 fe69 	bl	80012fc <__aeabi_dcmplt>
 801762a:	e7b4      	b.n	8017596 <_strtod_l+0xb1e>
 801762c:	2300      	movs	r3, #0
 801762e:	930e      	str	r3, [sp, #56]	; 0x38
 8017630:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8017632:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017634:	6013      	str	r3, [r2, #0]
 8017636:	f7ff ba65 	b.w	8016b04 <_strtod_l+0x8c>
 801763a:	2b65      	cmp	r3, #101	; 0x65
 801763c:	f43f ab5d 	beq.w	8016cfa <_strtod_l+0x282>
 8017640:	2b45      	cmp	r3, #69	; 0x45
 8017642:	f43f ab5a 	beq.w	8016cfa <_strtod_l+0x282>
 8017646:	2201      	movs	r2, #1
 8017648:	f7ff bb92 	b.w	8016d70 <_strtod_l+0x2f8>
 801764c:	f3af 8000 	nop.w
 8017650:	94a03595 	.word	0x94a03595
 8017654:	3fdfffff 	.word	0x3fdfffff
 8017658:	35afe535 	.word	0x35afe535
 801765c:	3fe00000 	.word	0x3fe00000
 8017660:	ffc00000 	.word	0xffc00000
 8017664:	41dfffff 	.word	0x41dfffff
 8017668:	94a03595 	.word	0x94a03595
 801766c:	3fcfffff 	.word	0x3fcfffff
 8017670:	3ff00000 	.word	0x3ff00000
 8017674:	7ff00000 	.word	0x7ff00000
 8017678:	7fe00000 	.word	0x7fe00000
 801767c:	7c9fffff 	.word	0x7c9fffff
 8017680:	3fe00000 	.word	0x3fe00000
 8017684:	bff00000 	.word	0xbff00000
 8017688:	7fefffff 	.word	0x7fefffff

0801768c <strtod>:
 801768c:	460a      	mov	r2, r1
 801768e:	4601      	mov	r1, r0
 8017690:	4802      	ldr	r0, [pc, #8]	; (801769c <strtod+0x10>)
 8017692:	4b03      	ldr	r3, [pc, #12]	; (80176a0 <strtod+0x14>)
 8017694:	6800      	ldr	r0, [r0, #0]
 8017696:	f7ff b9ef 	b.w	8016a78 <_strtod_l>
 801769a:	bf00      	nop
 801769c:	20001494 	.word	0x20001494
 80176a0:	2000155c 	.word	0x2000155c

080176a4 <strtok>:
 80176a4:	4b16      	ldr	r3, [pc, #88]	; (8017700 <strtok+0x5c>)
 80176a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80176a8:	681e      	ldr	r6, [r3, #0]
 80176aa:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80176ac:	4605      	mov	r5, r0
 80176ae:	b9fc      	cbnz	r4, 80176f0 <strtok+0x4c>
 80176b0:	2050      	movs	r0, #80	; 0x50
 80176b2:	9101      	str	r1, [sp, #4]
 80176b4:	f7fe f97a 	bl	80159ac <malloc>
 80176b8:	9901      	ldr	r1, [sp, #4]
 80176ba:	65b0      	str	r0, [r6, #88]	; 0x58
 80176bc:	4602      	mov	r2, r0
 80176be:	b920      	cbnz	r0, 80176ca <strtok+0x26>
 80176c0:	4b10      	ldr	r3, [pc, #64]	; (8017704 <strtok+0x60>)
 80176c2:	4811      	ldr	r0, [pc, #68]	; (8017708 <strtok+0x64>)
 80176c4:	2157      	movs	r1, #87	; 0x57
 80176c6:	f000 fbf1 	bl	8017eac <__assert_func>
 80176ca:	e9c0 4400 	strd	r4, r4, [r0]
 80176ce:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80176d2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80176d6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80176da:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80176de:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80176e2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80176e6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80176ea:	6184      	str	r4, [r0, #24]
 80176ec:	7704      	strb	r4, [r0, #28]
 80176ee:	6244      	str	r4, [r0, #36]	; 0x24
 80176f0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80176f2:	2301      	movs	r3, #1
 80176f4:	4628      	mov	r0, r5
 80176f6:	b002      	add	sp, #8
 80176f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80176fc:	f000 b806 	b.w	801770c <__strtok_r>
 8017700:	20001494 	.word	0x20001494
 8017704:	0801c140 	.word	0x0801c140
 8017708:	0801c157 	.word	0x0801c157

0801770c <__strtok_r>:
 801770c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801770e:	b908      	cbnz	r0, 8017714 <__strtok_r+0x8>
 8017710:	6810      	ldr	r0, [r2, #0]
 8017712:	b188      	cbz	r0, 8017738 <__strtok_r+0x2c>
 8017714:	4604      	mov	r4, r0
 8017716:	4620      	mov	r0, r4
 8017718:	f814 5b01 	ldrb.w	r5, [r4], #1
 801771c:	460f      	mov	r7, r1
 801771e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8017722:	b91e      	cbnz	r6, 801772c <__strtok_r+0x20>
 8017724:	b965      	cbnz	r5, 8017740 <__strtok_r+0x34>
 8017726:	6015      	str	r5, [r2, #0]
 8017728:	4628      	mov	r0, r5
 801772a:	e005      	b.n	8017738 <__strtok_r+0x2c>
 801772c:	42b5      	cmp	r5, r6
 801772e:	d1f6      	bne.n	801771e <__strtok_r+0x12>
 8017730:	2b00      	cmp	r3, #0
 8017732:	d1f0      	bne.n	8017716 <__strtok_r+0xa>
 8017734:	6014      	str	r4, [r2, #0]
 8017736:	7003      	strb	r3, [r0, #0]
 8017738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801773a:	461c      	mov	r4, r3
 801773c:	e00c      	b.n	8017758 <__strtok_r+0x4c>
 801773e:	b915      	cbnz	r5, 8017746 <__strtok_r+0x3a>
 8017740:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017744:	460e      	mov	r6, r1
 8017746:	f816 5b01 	ldrb.w	r5, [r6], #1
 801774a:	42ab      	cmp	r3, r5
 801774c:	d1f7      	bne.n	801773e <__strtok_r+0x32>
 801774e:	2b00      	cmp	r3, #0
 8017750:	d0f3      	beq.n	801773a <__strtok_r+0x2e>
 8017752:	2300      	movs	r3, #0
 8017754:	f804 3c01 	strb.w	r3, [r4, #-1]
 8017758:	6014      	str	r4, [r2, #0]
 801775a:	e7ed      	b.n	8017738 <__strtok_r+0x2c>

0801775c <_strtol_l.isra.0>:
 801775c:	2b01      	cmp	r3, #1
 801775e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017762:	d001      	beq.n	8017768 <_strtol_l.isra.0+0xc>
 8017764:	2b24      	cmp	r3, #36	; 0x24
 8017766:	d906      	bls.n	8017776 <_strtol_l.isra.0+0x1a>
 8017768:	f7fe f8dc 	bl	8015924 <__errno>
 801776c:	2316      	movs	r3, #22
 801776e:	6003      	str	r3, [r0, #0]
 8017770:	2000      	movs	r0, #0
 8017772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017776:	4f3a      	ldr	r7, [pc, #232]	; (8017860 <_strtol_l.isra.0+0x104>)
 8017778:	468e      	mov	lr, r1
 801777a:	4676      	mov	r6, lr
 801777c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8017780:	5de5      	ldrb	r5, [r4, r7]
 8017782:	f015 0508 	ands.w	r5, r5, #8
 8017786:	d1f8      	bne.n	801777a <_strtol_l.isra.0+0x1e>
 8017788:	2c2d      	cmp	r4, #45	; 0x2d
 801778a:	d134      	bne.n	80177f6 <_strtol_l.isra.0+0x9a>
 801778c:	f89e 4000 	ldrb.w	r4, [lr]
 8017790:	f04f 0801 	mov.w	r8, #1
 8017794:	f106 0e02 	add.w	lr, r6, #2
 8017798:	2b00      	cmp	r3, #0
 801779a:	d05c      	beq.n	8017856 <_strtol_l.isra.0+0xfa>
 801779c:	2b10      	cmp	r3, #16
 801779e:	d10c      	bne.n	80177ba <_strtol_l.isra.0+0x5e>
 80177a0:	2c30      	cmp	r4, #48	; 0x30
 80177a2:	d10a      	bne.n	80177ba <_strtol_l.isra.0+0x5e>
 80177a4:	f89e 4000 	ldrb.w	r4, [lr]
 80177a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80177ac:	2c58      	cmp	r4, #88	; 0x58
 80177ae:	d14d      	bne.n	801784c <_strtol_l.isra.0+0xf0>
 80177b0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80177b4:	2310      	movs	r3, #16
 80177b6:	f10e 0e02 	add.w	lr, lr, #2
 80177ba:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80177be:	f10c 3cff 	add.w	ip, ip, #4294967295
 80177c2:	2600      	movs	r6, #0
 80177c4:	fbbc f9f3 	udiv	r9, ip, r3
 80177c8:	4635      	mov	r5, r6
 80177ca:	fb03 ca19 	mls	sl, r3, r9, ip
 80177ce:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80177d2:	2f09      	cmp	r7, #9
 80177d4:	d818      	bhi.n	8017808 <_strtol_l.isra.0+0xac>
 80177d6:	463c      	mov	r4, r7
 80177d8:	42a3      	cmp	r3, r4
 80177da:	dd24      	ble.n	8017826 <_strtol_l.isra.0+0xca>
 80177dc:	2e00      	cmp	r6, #0
 80177de:	db1f      	blt.n	8017820 <_strtol_l.isra.0+0xc4>
 80177e0:	45a9      	cmp	r9, r5
 80177e2:	d31d      	bcc.n	8017820 <_strtol_l.isra.0+0xc4>
 80177e4:	d101      	bne.n	80177ea <_strtol_l.isra.0+0x8e>
 80177e6:	45a2      	cmp	sl, r4
 80177e8:	db1a      	blt.n	8017820 <_strtol_l.isra.0+0xc4>
 80177ea:	fb05 4503 	mla	r5, r5, r3, r4
 80177ee:	2601      	movs	r6, #1
 80177f0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80177f4:	e7eb      	b.n	80177ce <_strtol_l.isra.0+0x72>
 80177f6:	2c2b      	cmp	r4, #43	; 0x2b
 80177f8:	bf08      	it	eq
 80177fa:	f89e 4000 	ldrbeq.w	r4, [lr]
 80177fe:	46a8      	mov	r8, r5
 8017800:	bf08      	it	eq
 8017802:	f106 0e02 	addeq.w	lr, r6, #2
 8017806:	e7c7      	b.n	8017798 <_strtol_l.isra.0+0x3c>
 8017808:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801780c:	2f19      	cmp	r7, #25
 801780e:	d801      	bhi.n	8017814 <_strtol_l.isra.0+0xb8>
 8017810:	3c37      	subs	r4, #55	; 0x37
 8017812:	e7e1      	b.n	80177d8 <_strtol_l.isra.0+0x7c>
 8017814:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017818:	2f19      	cmp	r7, #25
 801781a:	d804      	bhi.n	8017826 <_strtol_l.isra.0+0xca>
 801781c:	3c57      	subs	r4, #87	; 0x57
 801781e:	e7db      	b.n	80177d8 <_strtol_l.isra.0+0x7c>
 8017820:	f04f 36ff 	mov.w	r6, #4294967295
 8017824:	e7e4      	b.n	80177f0 <_strtol_l.isra.0+0x94>
 8017826:	2e00      	cmp	r6, #0
 8017828:	da05      	bge.n	8017836 <_strtol_l.isra.0+0xda>
 801782a:	2322      	movs	r3, #34	; 0x22
 801782c:	6003      	str	r3, [r0, #0]
 801782e:	4665      	mov	r5, ip
 8017830:	b942      	cbnz	r2, 8017844 <_strtol_l.isra.0+0xe8>
 8017832:	4628      	mov	r0, r5
 8017834:	e79d      	b.n	8017772 <_strtol_l.isra.0+0x16>
 8017836:	f1b8 0f00 	cmp.w	r8, #0
 801783a:	d000      	beq.n	801783e <_strtol_l.isra.0+0xe2>
 801783c:	426d      	negs	r5, r5
 801783e:	2a00      	cmp	r2, #0
 8017840:	d0f7      	beq.n	8017832 <_strtol_l.isra.0+0xd6>
 8017842:	b10e      	cbz	r6, 8017848 <_strtol_l.isra.0+0xec>
 8017844:	f10e 31ff 	add.w	r1, lr, #4294967295
 8017848:	6011      	str	r1, [r2, #0]
 801784a:	e7f2      	b.n	8017832 <_strtol_l.isra.0+0xd6>
 801784c:	2430      	movs	r4, #48	; 0x30
 801784e:	2b00      	cmp	r3, #0
 8017850:	d1b3      	bne.n	80177ba <_strtol_l.isra.0+0x5e>
 8017852:	2308      	movs	r3, #8
 8017854:	e7b1      	b.n	80177ba <_strtol_l.isra.0+0x5e>
 8017856:	2c30      	cmp	r4, #48	; 0x30
 8017858:	d0a4      	beq.n	80177a4 <_strtol_l.isra.0+0x48>
 801785a:	230a      	movs	r3, #10
 801785c:	e7ad      	b.n	80177ba <_strtol_l.isra.0+0x5e>
 801785e:	bf00      	nop
 8017860:	0801c256 	.word	0x0801c256

08017864 <_strtol_r>:
 8017864:	f7ff bf7a 	b.w	801775c <_strtol_l.isra.0>

08017868 <strtol>:
 8017868:	4613      	mov	r3, r2
 801786a:	460a      	mov	r2, r1
 801786c:	4601      	mov	r1, r0
 801786e:	4802      	ldr	r0, [pc, #8]	; (8017878 <strtol+0x10>)
 8017870:	6800      	ldr	r0, [r0, #0]
 8017872:	f7ff bf73 	b.w	801775c <_strtol_l.isra.0>
 8017876:	bf00      	nop
 8017878:	20001494 	.word	0x20001494

0801787c <_strtoll_l.isra.0>:
 801787c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017880:	b087      	sub	sp, #28
 8017882:	4691      	mov	r9, r2
 8017884:	4a47      	ldr	r2, [pc, #284]	; (80179a4 <_strtoll_l.isra.0+0x128>)
 8017886:	9005      	str	r0, [sp, #20]
 8017888:	4688      	mov	r8, r1
 801788a:	461f      	mov	r7, r3
 801788c:	460d      	mov	r5, r1
 801788e:	462b      	mov	r3, r5
 8017890:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017894:	5ca6      	ldrb	r6, [r4, r2]
 8017896:	f016 0608 	ands.w	r6, r6, #8
 801789a:	d1f8      	bne.n	801788e <_strtoll_l.isra.0+0x12>
 801789c:	2c2d      	cmp	r4, #45	; 0x2d
 801789e:	d147      	bne.n	8017930 <_strtoll_l.isra.0+0xb4>
 80178a0:	782c      	ldrb	r4, [r5, #0]
 80178a2:	2601      	movs	r6, #1
 80178a4:	1c9d      	adds	r5, r3, #2
 80178a6:	2f00      	cmp	r7, #0
 80178a8:	d077      	beq.n	801799a <_strtoll_l.isra.0+0x11e>
 80178aa:	2f10      	cmp	r7, #16
 80178ac:	d109      	bne.n	80178c2 <_strtoll_l.isra.0+0x46>
 80178ae:	2c30      	cmp	r4, #48	; 0x30
 80178b0:	d107      	bne.n	80178c2 <_strtoll_l.isra.0+0x46>
 80178b2:	782b      	ldrb	r3, [r5, #0]
 80178b4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80178b8:	2b58      	cmp	r3, #88	; 0x58
 80178ba:	d169      	bne.n	8017990 <_strtoll_l.isra.0+0x114>
 80178bc:	786c      	ldrb	r4, [r5, #1]
 80178be:	2710      	movs	r7, #16
 80178c0:	3502      	adds	r5, #2
 80178c2:	f04f 32ff 	mov.w	r2, #4294967295
 80178c6:	1990      	adds	r0, r2, r6
 80178c8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80178cc:	ea4f 7be7 	mov.w	fp, r7, asr #31
 80178d0:	eb43 71e6 	adc.w	r1, r3, r6, asr #31
 80178d4:	463a      	mov	r2, r7
 80178d6:	465b      	mov	r3, fp
 80178d8:	e9cd 0100 	strd	r0, r1, [sp]
 80178dc:	f7e9 fde4 	bl	80014a8 <__aeabi_uldivmod>
 80178e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80178e4:	46ba      	mov	sl, r7
 80178e6:	4696      	mov	lr, r2
 80178e8:	2300      	movs	r3, #0
 80178ea:	2000      	movs	r0, #0
 80178ec:	2100      	movs	r1, #0
 80178ee:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80178f2:	f1bc 0f09 	cmp.w	ip, #9
 80178f6:	d820      	bhi.n	801793a <_strtoll_l.isra.0+0xbe>
 80178f8:	4664      	mov	r4, ip
 80178fa:	42a7      	cmp	r7, r4
 80178fc:	dd2e      	ble.n	801795c <_strtoll_l.isra.0+0xe0>
 80178fe:	1c5a      	adds	r2, r3, #1
 8017900:	d013      	beq.n	801792a <_strtoll_l.isra.0+0xae>
 8017902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017906:	428b      	cmp	r3, r1
 8017908:	bf08      	it	eq
 801790a:	4282      	cmpeq	r2, r0
 801790c:	d323      	bcc.n	8017956 <_strtoll_l.isra.0+0xda>
 801790e:	d101      	bne.n	8017914 <_strtoll_l.isra.0+0x98>
 8017910:	45a6      	cmp	lr, r4
 8017912:	db20      	blt.n	8017956 <_strtoll_l.isra.0+0xda>
 8017914:	fb0a f301 	mul.w	r3, sl, r1
 8017918:	fb00 330b 	mla	r3, r0, fp, r3
 801791c:	fbaa 0100 	umull	r0, r1, sl, r0
 8017920:	4419      	add	r1, r3
 8017922:	1900      	adds	r0, r0, r4
 8017924:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8017928:	2301      	movs	r3, #1
 801792a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801792e:	e7de      	b.n	80178ee <_strtoll_l.isra.0+0x72>
 8017930:	2c2b      	cmp	r4, #43	; 0x2b
 8017932:	bf04      	itt	eq
 8017934:	782c      	ldrbeq	r4, [r5, #0]
 8017936:	1c9d      	addeq	r5, r3, #2
 8017938:	e7b5      	b.n	80178a6 <_strtoll_l.isra.0+0x2a>
 801793a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801793e:	f1bc 0f19 	cmp.w	ip, #25
 8017942:	d801      	bhi.n	8017948 <_strtoll_l.isra.0+0xcc>
 8017944:	3c37      	subs	r4, #55	; 0x37
 8017946:	e7d8      	b.n	80178fa <_strtoll_l.isra.0+0x7e>
 8017948:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801794c:	f1bc 0f19 	cmp.w	ip, #25
 8017950:	d804      	bhi.n	801795c <_strtoll_l.isra.0+0xe0>
 8017952:	3c57      	subs	r4, #87	; 0x57
 8017954:	e7d1      	b.n	80178fa <_strtoll_l.isra.0+0x7e>
 8017956:	f04f 33ff 	mov.w	r3, #4294967295
 801795a:	e7e6      	b.n	801792a <_strtoll_l.isra.0+0xae>
 801795c:	1c5a      	adds	r2, r3, #1
 801795e:	d10a      	bne.n	8017976 <_strtoll_l.isra.0+0xfa>
 8017960:	9a05      	ldr	r2, [sp, #20]
 8017962:	2322      	movs	r3, #34	; 0x22
 8017964:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017968:	6013      	str	r3, [r2, #0]
 801796a:	f1b9 0f00 	cmp.w	r9, #0
 801796e:	d10a      	bne.n	8017986 <_strtoll_l.isra.0+0x10a>
 8017970:	b007      	add	sp, #28
 8017972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017976:	b116      	cbz	r6, 801797e <_strtoll_l.isra.0+0x102>
 8017978:	4240      	negs	r0, r0
 801797a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801797e:	f1b9 0f00 	cmp.w	r9, #0
 8017982:	d0f5      	beq.n	8017970 <_strtoll_l.isra.0+0xf4>
 8017984:	b10b      	cbz	r3, 801798a <_strtoll_l.isra.0+0x10e>
 8017986:	f105 38ff 	add.w	r8, r5, #4294967295
 801798a:	f8c9 8000 	str.w	r8, [r9]
 801798e:	e7ef      	b.n	8017970 <_strtoll_l.isra.0+0xf4>
 8017990:	2430      	movs	r4, #48	; 0x30
 8017992:	2f00      	cmp	r7, #0
 8017994:	d195      	bne.n	80178c2 <_strtoll_l.isra.0+0x46>
 8017996:	2708      	movs	r7, #8
 8017998:	e793      	b.n	80178c2 <_strtoll_l.isra.0+0x46>
 801799a:	2c30      	cmp	r4, #48	; 0x30
 801799c:	d089      	beq.n	80178b2 <_strtoll_l.isra.0+0x36>
 801799e:	270a      	movs	r7, #10
 80179a0:	e78f      	b.n	80178c2 <_strtoll_l.isra.0+0x46>
 80179a2:	bf00      	nop
 80179a4:	0801c256 	.word	0x0801c256

080179a8 <strtoll>:
 80179a8:	4613      	mov	r3, r2
 80179aa:	460a      	mov	r2, r1
 80179ac:	4601      	mov	r1, r0
 80179ae:	4802      	ldr	r0, [pc, #8]	; (80179b8 <strtoll+0x10>)
 80179b0:	6800      	ldr	r0, [r0, #0]
 80179b2:	f7ff bf63 	b.w	801787c <_strtoll_l.isra.0>
 80179b6:	bf00      	nop
 80179b8:	20001494 	.word	0x20001494

080179bc <__tzcalc_limits>:
 80179bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179c0:	4680      	mov	r8, r0
 80179c2:	f001 fce1 	bl	8019388 <__gettzinfo>
 80179c6:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80179ca:	4598      	cmp	r8, r3
 80179cc:	f340 8098 	ble.w	8017b00 <__tzcalc_limits+0x144>
 80179d0:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80179d4:	4443      	add	r3, r8
 80179d6:	109b      	asrs	r3, r3, #2
 80179d8:	f240 126d 	movw	r2, #365	; 0x16d
 80179dc:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 80179e0:	fb02 3505 	mla	r5, r2, r5, r3
 80179e4:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80179e8:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 80179ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80179f0:	441d      	add	r5, r3
 80179f2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80179f6:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80179fa:	fb98 f7f3 	sdiv	r7, r8, r3
 80179fe:	fb03 8717 	mls	r7, r3, r7, r8
 8017a02:	4442      	add	r2, r8
 8017a04:	fab7 fc87 	clz	ip, r7
 8017a08:	fbb2 f2f3 	udiv	r2, r2, r3
 8017a0c:	f008 0303 	and.w	r3, r8, #3
 8017a10:	4415      	add	r5, r2
 8017a12:	2264      	movs	r2, #100	; 0x64
 8017a14:	f8c0 8004 	str.w	r8, [r0, #4]
 8017a18:	fb98 f6f2 	sdiv	r6, r8, r2
 8017a1c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8017a20:	fb02 8616 	mls	r6, r2, r6, r8
 8017a24:	4604      	mov	r4, r0
 8017a26:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8017a2a:	9300      	str	r3, [sp, #0]
 8017a2c:	f04f 0e07 	mov.w	lr, #7
 8017a30:	7a22      	ldrb	r2, [r4, #8]
 8017a32:	6963      	ldr	r3, [r4, #20]
 8017a34:	2a4a      	cmp	r2, #74	; 0x4a
 8017a36:	d128      	bne.n	8017a8a <__tzcalc_limits+0xce>
 8017a38:	9900      	ldr	r1, [sp, #0]
 8017a3a:	18ea      	adds	r2, r5, r3
 8017a3c:	b901      	cbnz	r1, 8017a40 <__tzcalc_limits+0x84>
 8017a3e:	b906      	cbnz	r6, 8017a42 <__tzcalc_limits+0x86>
 8017a40:	bb0f      	cbnz	r7, 8017a86 <__tzcalc_limits+0xca>
 8017a42:	2b3b      	cmp	r3, #59	; 0x3b
 8017a44:	bfd4      	ite	le
 8017a46:	2300      	movle	r3, #0
 8017a48:	2301      	movgt	r3, #1
 8017a4a:	4413      	add	r3, r2
 8017a4c:	1e5a      	subs	r2, r3, #1
 8017a4e:	69a3      	ldr	r3, [r4, #24]
 8017a50:	492c      	ldr	r1, [pc, #176]	; (8017b04 <__tzcalc_limits+0x148>)
 8017a52:	fb01 3202 	mla	r2, r1, r2, r3
 8017a56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017a58:	4413      	add	r3, r2
 8017a5a:	461a      	mov	r2, r3
 8017a5c:	17db      	asrs	r3, r3, #31
 8017a5e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8017a62:	3428      	adds	r4, #40	; 0x28
 8017a64:	45a3      	cmp	fp, r4
 8017a66:	d1e3      	bne.n	8017a30 <__tzcalc_limits+0x74>
 8017a68:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8017a6c:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8017a70:	4294      	cmp	r4, r2
 8017a72:	eb75 0303 	sbcs.w	r3, r5, r3
 8017a76:	bfb4      	ite	lt
 8017a78:	2301      	movlt	r3, #1
 8017a7a:	2300      	movge	r3, #0
 8017a7c:	6003      	str	r3, [r0, #0]
 8017a7e:	2001      	movs	r0, #1
 8017a80:	b003      	add	sp, #12
 8017a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a86:	2300      	movs	r3, #0
 8017a88:	e7df      	b.n	8017a4a <__tzcalc_limits+0x8e>
 8017a8a:	2a44      	cmp	r2, #68	; 0x44
 8017a8c:	d101      	bne.n	8017a92 <__tzcalc_limits+0xd6>
 8017a8e:	18ea      	adds	r2, r5, r3
 8017a90:	e7dd      	b.n	8017a4e <__tzcalc_limits+0x92>
 8017a92:	9a00      	ldr	r2, [sp, #0]
 8017a94:	bb72      	cbnz	r2, 8017af4 <__tzcalc_limits+0x138>
 8017a96:	2e00      	cmp	r6, #0
 8017a98:	bf0c      	ite	eq
 8017a9a:	46e0      	moveq	r8, ip
 8017a9c:	f04f 0801 	movne.w	r8, #1
 8017aa0:	4919      	ldr	r1, [pc, #100]	; (8017b08 <__tzcalc_limits+0x14c>)
 8017aa2:	68e2      	ldr	r2, [r4, #12]
 8017aa4:	9201      	str	r2, [sp, #4]
 8017aa6:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8017aaa:	fb0a 1808 	mla	r8, sl, r8, r1
 8017aae:	462a      	mov	r2, r5
 8017ab0:	f04f 0900 	mov.w	r9, #0
 8017ab4:	f1a8 0804 	sub.w	r8, r8, #4
 8017ab8:	9901      	ldr	r1, [sp, #4]
 8017aba:	f109 0901 	add.w	r9, r9, #1
 8017abe:	4549      	cmp	r1, r9
 8017ac0:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 8017ac4:	dc18      	bgt.n	8017af8 <__tzcalc_limits+0x13c>
 8017ac6:	f102 0804 	add.w	r8, r2, #4
 8017aca:	fb98 f9fe 	sdiv	r9, r8, lr
 8017ace:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8017ad2:	eba8 0909 	sub.w	r9, r8, r9
 8017ad6:	ebb3 0909 	subs.w	r9, r3, r9
 8017ada:	6923      	ldr	r3, [r4, #16]
 8017adc:	f103 33ff 	add.w	r3, r3, #4294967295
 8017ae0:	bf48      	it	mi
 8017ae2:	f109 0907 	addmi.w	r9, r9, #7
 8017ae6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8017aea:	444b      	add	r3, r9
 8017aec:	4553      	cmp	r3, sl
 8017aee:	da05      	bge.n	8017afc <__tzcalc_limits+0x140>
 8017af0:	441a      	add	r2, r3
 8017af2:	e7ac      	b.n	8017a4e <__tzcalc_limits+0x92>
 8017af4:	46e0      	mov	r8, ip
 8017af6:	e7d3      	b.n	8017aa0 <__tzcalc_limits+0xe4>
 8017af8:	4452      	add	r2, sl
 8017afa:	e7dd      	b.n	8017ab8 <__tzcalc_limits+0xfc>
 8017afc:	3b07      	subs	r3, #7
 8017afe:	e7f5      	b.n	8017aec <__tzcalc_limits+0x130>
 8017b00:	2000      	movs	r0, #0
 8017b02:	e7bd      	b.n	8017a80 <__tzcalc_limits+0xc4>
 8017b04:	00015180 	.word	0x00015180
 8017b08:	0801c450 	.word	0x0801c450

08017b0c <__tz_lock>:
 8017b0c:	4801      	ldr	r0, [pc, #4]	; (8017b14 <__tz_lock+0x8>)
 8017b0e:	f001 bc44 	b.w	801939a <__retarget_lock_acquire>
 8017b12:	bf00      	nop
 8017b14:	20007133 	.word	0x20007133

08017b18 <__tz_unlock>:
 8017b18:	4801      	ldr	r0, [pc, #4]	; (8017b20 <__tz_unlock+0x8>)
 8017b1a:	f001 bc40 	b.w	801939e <__retarget_lock_release>
 8017b1e:	bf00      	nop
 8017b20:	20007133 	.word	0x20007133

08017b24 <_tzset_unlocked>:
 8017b24:	4b01      	ldr	r3, [pc, #4]	; (8017b2c <_tzset_unlocked+0x8>)
 8017b26:	6818      	ldr	r0, [r3, #0]
 8017b28:	f000 b802 	b.w	8017b30 <_tzset_unlocked_r>
 8017b2c:	20001494 	.word	0x20001494

08017b30 <_tzset_unlocked_r>:
 8017b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b34:	b08d      	sub	sp, #52	; 0x34
 8017b36:	4607      	mov	r7, r0
 8017b38:	f001 fc26 	bl	8019388 <__gettzinfo>
 8017b3c:	49ae      	ldr	r1, [pc, #696]	; (8017df8 <_tzset_unlocked_r+0x2c8>)
 8017b3e:	4eaf      	ldr	r6, [pc, #700]	; (8017dfc <_tzset_unlocked_r+0x2cc>)
 8017b40:	4605      	mov	r5, r0
 8017b42:	4638      	mov	r0, r7
 8017b44:	f001 fc18 	bl	8019378 <_getenv_r>
 8017b48:	4604      	mov	r4, r0
 8017b4a:	b970      	cbnz	r0, 8017b6a <_tzset_unlocked_r+0x3a>
 8017b4c:	4bac      	ldr	r3, [pc, #688]	; (8017e00 <_tzset_unlocked_r+0x2d0>)
 8017b4e:	4aad      	ldr	r2, [pc, #692]	; (8017e04 <_tzset_unlocked_r+0x2d4>)
 8017b50:	6018      	str	r0, [r3, #0]
 8017b52:	4bad      	ldr	r3, [pc, #692]	; (8017e08 <_tzset_unlocked_r+0x2d8>)
 8017b54:	6018      	str	r0, [r3, #0]
 8017b56:	4bad      	ldr	r3, [pc, #692]	; (8017e0c <_tzset_unlocked_r+0x2dc>)
 8017b58:	6830      	ldr	r0, [r6, #0]
 8017b5a:	e9c3 2200 	strd	r2, r2, [r3]
 8017b5e:	f7fd ff2d 	bl	80159bc <free>
 8017b62:	6034      	str	r4, [r6, #0]
 8017b64:	b00d      	add	sp, #52	; 0x34
 8017b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b6a:	6831      	ldr	r1, [r6, #0]
 8017b6c:	2900      	cmp	r1, #0
 8017b6e:	d15f      	bne.n	8017c30 <_tzset_unlocked_r+0x100>
 8017b70:	6830      	ldr	r0, [r6, #0]
 8017b72:	f7fd ff23 	bl	80159bc <free>
 8017b76:	4620      	mov	r0, r4
 8017b78:	f7e8 ff34 	bl	80009e4 <strlen>
 8017b7c:	1c41      	adds	r1, r0, #1
 8017b7e:	4638      	mov	r0, r7
 8017b80:	f7fe fa08 	bl	8015f94 <_malloc_r>
 8017b84:	6030      	str	r0, [r6, #0]
 8017b86:	2800      	cmp	r0, #0
 8017b88:	d157      	bne.n	8017c3a <_tzset_unlocked_r+0x10a>
 8017b8a:	7823      	ldrb	r3, [r4, #0]
 8017b8c:	4aa0      	ldr	r2, [pc, #640]	; (8017e10 <_tzset_unlocked_r+0x2e0>)
 8017b8e:	49a1      	ldr	r1, [pc, #644]	; (8017e14 <_tzset_unlocked_r+0x2e4>)
 8017b90:	2b3a      	cmp	r3, #58	; 0x3a
 8017b92:	bf08      	it	eq
 8017b94:	3401      	addeq	r4, #1
 8017b96:	ae0a      	add	r6, sp, #40	; 0x28
 8017b98:	4633      	mov	r3, r6
 8017b9a:	4620      	mov	r0, r4
 8017b9c:	f002 fba8 	bl	801a2f0 <siscanf>
 8017ba0:	2800      	cmp	r0, #0
 8017ba2:	dddf      	ble.n	8017b64 <_tzset_unlocked_r+0x34>
 8017ba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ba6:	18e7      	adds	r7, r4, r3
 8017ba8:	5ce3      	ldrb	r3, [r4, r3]
 8017baa:	2b2d      	cmp	r3, #45	; 0x2d
 8017bac:	d149      	bne.n	8017c42 <_tzset_unlocked_r+0x112>
 8017bae:	3701      	adds	r7, #1
 8017bb0:	f04f 34ff 	mov.w	r4, #4294967295
 8017bb4:	f10d 0a20 	add.w	sl, sp, #32
 8017bb8:	f10d 0b1e 	add.w	fp, sp, #30
 8017bbc:	f04f 0800 	mov.w	r8, #0
 8017bc0:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8017bc4:	4994      	ldr	r1, [pc, #592]	; (8017e18 <_tzset_unlocked_r+0x2e8>)
 8017bc6:	9603      	str	r6, [sp, #12]
 8017bc8:	f8cd b000 	str.w	fp, [sp]
 8017bcc:	4633      	mov	r3, r6
 8017bce:	aa07      	add	r2, sp, #28
 8017bd0:	4638      	mov	r0, r7
 8017bd2:	f8ad 801e 	strh.w	r8, [sp, #30]
 8017bd6:	f8ad 8020 	strh.w	r8, [sp, #32]
 8017bda:	f002 fb89 	bl	801a2f0 <siscanf>
 8017bde:	4540      	cmp	r0, r8
 8017be0:	ddc0      	ble.n	8017b64 <_tzset_unlocked_r+0x34>
 8017be2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8017be6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8017bea:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8017e24 <_tzset_unlocked_r+0x2f4>
 8017bee:	213c      	movs	r1, #60	; 0x3c
 8017bf0:	fb01 2203 	mla	r2, r1, r3, r2
 8017bf4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8017bf8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8017bfc:	fb01 2303 	mla	r3, r1, r3, r2
 8017c00:	435c      	muls	r4, r3
 8017c02:	62ac      	str	r4, [r5, #40]	; 0x28
 8017c04:	4c81      	ldr	r4, [pc, #516]	; (8017e0c <_tzset_unlocked_r+0x2dc>)
 8017c06:	4b82      	ldr	r3, [pc, #520]	; (8017e10 <_tzset_unlocked_r+0x2e0>)
 8017c08:	6023      	str	r3, [r4, #0]
 8017c0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c0c:	4981      	ldr	r1, [pc, #516]	; (8017e14 <_tzset_unlocked_r+0x2e4>)
 8017c0e:	441f      	add	r7, r3
 8017c10:	464a      	mov	r2, r9
 8017c12:	4633      	mov	r3, r6
 8017c14:	4638      	mov	r0, r7
 8017c16:	f002 fb6b 	bl	801a2f0 <siscanf>
 8017c1a:	4540      	cmp	r0, r8
 8017c1c:	dc16      	bgt.n	8017c4c <_tzset_unlocked_r+0x11c>
 8017c1e:	6823      	ldr	r3, [r4, #0]
 8017c20:	6063      	str	r3, [r4, #4]
 8017c22:	4b77      	ldr	r3, [pc, #476]	; (8017e00 <_tzset_unlocked_r+0x2d0>)
 8017c24:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8017c26:	601a      	str	r2, [r3, #0]
 8017c28:	4b77      	ldr	r3, [pc, #476]	; (8017e08 <_tzset_unlocked_r+0x2d8>)
 8017c2a:	f8c3 8000 	str.w	r8, [r3]
 8017c2e:	e799      	b.n	8017b64 <_tzset_unlocked_r+0x34>
 8017c30:	f7e8 fece 	bl	80009d0 <strcmp>
 8017c34:	2800      	cmp	r0, #0
 8017c36:	d19b      	bne.n	8017b70 <_tzset_unlocked_r+0x40>
 8017c38:	e794      	b.n	8017b64 <_tzset_unlocked_r+0x34>
 8017c3a:	4621      	mov	r1, r4
 8017c3c:	f7fe feba 	bl	80169b4 <strcpy>
 8017c40:	e7a3      	b.n	8017b8a <_tzset_unlocked_r+0x5a>
 8017c42:	2b2b      	cmp	r3, #43	; 0x2b
 8017c44:	bf08      	it	eq
 8017c46:	3701      	addeq	r7, #1
 8017c48:	2401      	movs	r4, #1
 8017c4a:	e7b3      	b.n	8017bb4 <_tzset_unlocked_r+0x84>
 8017c4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c4e:	f8c4 9004 	str.w	r9, [r4, #4]
 8017c52:	18fc      	adds	r4, r7, r3
 8017c54:	5cfb      	ldrb	r3, [r7, r3]
 8017c56:	2b2d      	cmp	r3, #45	; 0x2d
 8017c58:	f040 808b 	bne.w	8017d72 <_tzset_unlocked_r+0x242>
 8017c5c:	3401      	adds	r4, #1
 8017c5e:	f04f 37ff 	mov.w	r7, #4294967295
 8017c62:	2300      	movs	r3, #0
 8017c64:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017c68:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017c6c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017c70:	930a      	str	r3, [sp, #40]	; 0x28
 8017c72:	e9cd a602 	strd	sl, r6, [sp, #8]
 8017c76:	e9cd b600 	strd	fp, r6, [sp]
 8017c7a:	4967      	ldr	r1, [pc, #412]	; (8017e18 <_tzset_unlocked_r+0x2e8>)
 8017c7c:	4633      	mov	r3, r6
 8017c7e:	aa07      	add	r2, sp, #28
 8017c80:	4620      	mov	r0, r4
 8017c82:	f002 fb35 	bl	801a2f0 <siscanf>
 8017c86:	2800      	cmp	r0, #0
 8017c88:	dc78      	bgt.n	8017d7c <_tzset_unlocked_r+0x24c>
 8017c8a:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8017c8c:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8017c90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c92:	652f      	str	r7, [r5, #80]	; 0x50
 8017c94:	441c      	add	r4, r3
 8017c96:	462f      	mov	r7, r5
 8017c98:	f04f 0900 	mov.w	r9, #0
 8017c9c:	7823      	ldrb	r3, [r4, #0]
 8017c9e:	2b2c      	cmp	r3, #44	; 0x2c
 8017ca0:	bf08      	it	eq
 8017ca2:	3401      	addeq	r4, #1
 8017ca4:	f894 8000 	ldrb.w	r8, [r4]
 8017ca8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8017cac:	d178      	bne.n	8017da0 <_tzset_unlocked_r+0x270>
 8017cae:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8017cb2:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8017cb6:	ab09      	add	r3, sp, #36	; 0x24
 8017cb8:	9300      	str	r3, [sp, #0]
 8017cba:	4958      	ldr	r1, [pc, #352]	; (8017e1c <_tzset_unlocked_r+0x2ec>)
 8017cbc:	9603      	str	r6, [sp, #12]
 8017cbe:	4633      	mov	r3, r6
 8017cc0:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8017cc4:	4620      	mov	r0, r4
 8017cc6:	f002 fb13 	bl	801a2f0 <siscanf>
 8017cca:	2803      	cmp	r0, #3
 8017ccc:	f47f af4a 	bne.w	8017b64 <_tzset_unlocked_r+0x34>
 8017cd0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8017cd4:	1e4b      	subs	r3, r1, #1
 8017cd6:	2b0b      	cmp	r3, #11
 8017cd8:	f63f af44 	bhi.w	8017b64 <_tzset_unlocked_r+0x34>
 8017cdc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8017ce0:	1e53      	subs	r3, r2, #1
 8017ce2:	2b04      	cmp	r3, #4
 8017ce4:	f63f af3e 	bhi.w	8017b64 <_tzset_unlocked_r+0x34>
 8017ce8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8017cec:	2b06      	cmp	r3, #6
 8017cee:	f63f af39 	bhi.w	8017b64 <_tzset_unlocked_r+0x34>
 8017cf2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8017cf6:	f887 8008 	strb.w	r8, [r7, #8]
 8017cfa:	617b      	str	r3, [r7, #20]
 8017cfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017cfe:	eb04 0803 	add.w	r8, r4, r3
 8017d02:	2302      	movs	r3, #2
 8017d04:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017d08:	2300      	movs	r3, #0
 8017d0a:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017d0e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017d12:	930a      	str	r3, [sp, #40]	; 0x28
 8017d14:	f898 3000 	ldrb.w	r3, [r8]
 8017d18:	2b2f      	cmp	r3, #47	; 0x2f
 8017d1a:	d109      	bne.n	8017d30 <_tzset_unlocked_r+0x200>
 8017d1c:	e9cd a602 	strd	sl, r6, [sp, #8]
 8017d20:	e9cd b600 	strd	fp, r6, [sp]
 8017d24:	493e      	ldr	r1, [pc, #248]	; (8017e20 <_tzset_unlocked_r+0x2f0>)
 8017d26:	4633      	mov	r3, r6
 8017d28:	aa07      	add	r2, sp, #28
 8017d2a:	4640      	mov	r0, r8
 8017d2c:	f002 fae0 	bl	801a2f0 <siscanf>
 8017d30:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8017d34:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8017d38:	213c      	movs	r1, #60	; 0x3c
 8017d3a:	fb01 2203 	mla	r2, r1, r3, r2
 8017d3e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8017d42:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8017d46:	fb01 2303 	mla	r3, r1, r3, r2
 8017d4a:	61bb      	str	r3, [r7, #24]
 8017d4c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017d4e:	3728      	adds	r7, #40	; 0x28
 8017d50:	4444      	add	r4, r8
 8017d52:	f1b9 0f00 	cmp.w	r9, #0
 8017d56:	d020      	beq.n	8017d9a <_tzset_unlocked_r+0x26a>
 8017d58:	6868      	ldr	r0, [r5, #4]
 8017d5a:	f7ff fe2f 	bl	80179bc <__tzcalc_limits>
 8017d5e:	4b28      	ldr	r3, [pc, #160]	; (8017e00 <_tzset_unlocked_r+0x2d0>)
 8017d60:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8017d62:	601a      	str	r2, [r3, #0]
 8017d64:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8017d66:	1a9b      	subs	r3, r3, r2
 8017d68:	4a27      	ldr	r2, [pc, #156]	; (8017e08 <_tzset_unlocked_r+0x2d8>)
 8017d6a:	bf18      	it	ne
 8017d6c:	2301      	movne	r3, #1
 8017d6e:	6013      	str	r3, [r2, #0]
 8017d70:	e6f8      	b.n	8017b64 <_tzset_unlocked_r+0x34>
 8017d72:	2b2b      	cmp	r3, #43	; 0x2b
 8017d74:	bf08      	it	eq
 8017d76:	3401      	addeq	r4, #1
 8017d78:	2701      	movs	r7, #1
 8017d7a:	e772      	b.n	8017c62 <_tzset_unlocked_r+0x132>
 8017d7c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8017d80:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8017d84:	213c      	movs	r1, #60	; 0x3c
 8017d86:	fb01 2203 	mla	r2, r1, r3, r2
 8017d8a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8017d8e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8017d92:	fb01 2303 	mla	r3, r1, r3, r2
 8017d96:	435f      	muls	r7, r3
 8017d98:	e77a      	b.n	8017c90 <_tzset_unlocked_r+0x160>
 8017d9a:	f04f 0901 	mov.w	r9, #1
 8017d9e:	e77d      	b.n	8017c9c <_tzset_unlocked_r+0x16c>
 8017da0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8017da4:	bf06      	itte	eq
 8017da6:	3401      	addeq	r4, #1
 8017da8:	4643      	moveq	r3, r8
 8017daa:	2344      	movne	r3, #68	; 0x44
 8017dac:	220a      	movs	r2, #10
 8017dae:	a90b      	add	r1, sp, #44	; 0x2c
 8017db0:	4620      	mov	r0, r4
 8017db2:	9305      	str	r3, [sp, #20]
 8017db4:	f002 fb8c 	bl	801a4d0 <strtoul>
 8017db8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8017dbc:	9b05      	ldr	r3, [sp, #20]
 8017dbe:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8017dc2:	45a0      	cmp	r8, r4
 8017dc4:	d114      	bne.n	8017df0 <_tzset_unlocked_r+0x2c0>
 8017dc6:	234d      	movs	r3, #77	; 0x4d
 8017dc8:	f1b9 0f00 	cmp.w	r9, #0
 8017dcc:	d107      	bne.n	8017dde <_tzset_unlocked_r+0x2ae>
 8017dce:	722b      	strb	r3, [r5, #8]
 8017dd0:	2103      	movs	r1, #3
 8017dd2:	2302      	movs	r3, #2
 8017dd4:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8017dd8:	f8c5 9014 	str.w	r9, [r5, #20]
 8017ddc:	e791      	b.n	8017d02 <_tzset_unlocked_r+0x1d2>
 8017dde:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8017de2:	220b      	movs	r2, #11
 8017de4:	2301      	movs	r3, #1
 8017de6:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8017dea:	2300      	movs	r3, #0
 8017dec:	63eb      	str	r3, [r5, #60]	; 0x3c
 8017dee:	e788      	b.n	8017d02 <_tzset_unlocked_r+0x1d2>
 8017df0:	b280      	uxth	r0, r0
 8017df2:	723b      	strb	r3, [r7, #8]
 8017df4:	6178      	str	r0, [r7, #20]
 8017df6:	e784      	b.n	8017d02 <_tzset_unlocked_r+0x1d2>
 8017df8:	0801c1b8 	.word	0x0801c1b8
 8017dfc:	200021a4 	.word	0x200021a4
 8017e00:	200021ac 	.word	0x200021ac
 8017e04:	0801c1bb 	.word	0x0801c1bb
 8017e08:	200021a8 	.word	0x200021a8
 8017e0c:	200014f8 	.word	0x200014f8
 8017e10:	20002197 	.word	0x20002197
 8017e14:	0801c1bf 	.word	0x0801c1bf
 8017e18:	0801c1e2 	.word	0x0801c1e2
 8017e1c:	0801c1ce 	.word	0x0801c1ce
 8017e20:	0801c1e1 	.word	0x0801c1e1
 8017e24:	2000218c 	.word	0x2000218c

08017e28 <__utoa>:
 8017e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e2a:	4c1f      	ldr	r4, [pc, #124]	; (8017ea8 <__utoa+0x80>)
 8017e2c:	b08b      	sub	sp, #44	; 0x2c
 8017e2e:	4605      	mov	r5, r0
 8017e30:	460b      	mov	r3, r1
 8017e32:	466e      	mov	r6, sp
 8017e34:	f104 0c20 	add.w	ip, r4, #32
 8017e38:	6820      	ldr	r0, [r4, #0]
 8017e3a:	6861      	ldr	r1, [r4, #4]
 8017e3c:	4637      	mov	r7, r6
 8017e3e:	c703      	stmia	r7!, {r0, r1}
 8017e40:	3408      	adds	r4, #8
 8017e42:	4564      	cmp	r4, ip
 8017e44:	463e      	mov	r6, r7
 8017e46:	d1f7      	bne.n	8017e38 <__utoa+0x10>
 8017e48:	7921      	ldrb	r1, [r4, #4]
 8017e4a:	7139      	strb	r1, [r7, #4]
 8017e4c:	1e91      	subs	r1, r2, #2
 8017e4e:	6820      	ldr	r0, [r4, #0]
 8017e50:	6038      	str	r0, [r7, #0]
 8017e52:	2922      	cmp	r1, #34	; 0x22
 8017e54:	f04f 0100 	mov.w	r1, #0
 8017e58:	d904      	bls.n	8017e64 <__utoa+0x3c>
 8017e5a:	7019      	strb	r1, [r3, #0]
 8017e5c:	460b      	mov	r3, r1
 8017e5e:	4618      	mov	r0, r3
 8017e60:	b00b      	add	sp, #44	; 0x2c
 8017e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e64:	1e58      	subs	r0, r3, #1
 8017e66:	4684      	mov	ip, r0
 8017e68:	fbb5 f7f2 	udiv	r7, r5, r2
 8017e6c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8017e70:	fb02 5617 	mls	r6, r2, r7, r5
 8017e74:	4476      	add	r6, lr
 8017e76:	460c      	mov	r4, r1
 8017e78:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8017e7c:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8017e80:	462e      	mov	r6, r5
 8017e82:	42b2      	cmp	r2, r6
 8017e84:	f101 0101 	add.w	r1, r1, #1
 8017e88:	463d      	mov	r5, r7
 8017e8a:	d9ed      	bls.n	8017e68 <__utoa+0x40>
 8017e8c:	2200      	movs	r2, #0
 8017e8e:	545a      	strb	r2, [r3, r1]
 8017e90:	1919      	adds	r1, r3, r4
 8017e92:	1aa5      	subs	r5, r4, r2
 8017e94:	42aa      	cmp	r2, r5
 8017e96:	dae2      	bge.n	8017e5e <__utoa+0x36>
 8017e98:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8017e9c:	780e      	ldrb	r6, [r1, #0]
 8017e9e:	7006      	strb	r6, [r0, #0]
 8017ea0:	3201      	adds	r2, #1
 8017ea2:	f801 5901 	strb.w	r5, [r1], #-1
 8017ea6:	e7f4      	b.n	8017e92 <__utoa+0x6a>
 8017ea8:	0801c1f4 	.word	0x0801c1f4

08017eac <__assert_func>:
 8017eac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017eae:	4614      	mov	r4, r2
 8017eb0:	461a      	mov	r2, r3
 8017eb2:	4b09      	ldr	r3, [pc, #36]	; (8017ed8 <__assert_func+0x2c>)
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	4605      	mov	r5, r0
 8017eb8:	68d8      	ldr	r0, [r3, #12]
 8017eba:	b14c      	cbz	r4, 8017ed0 <__assert_func+0x24>
 8017ebc:	4b07      	ldr	r3, [pc, #28]	; (8017edc <__assert_func+0x30>)
 8017ebe:	9100      	str	r1, [sp, #0]
 8017ec0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017ec4:	4906      	ldr	r1, [pc, #24]	; (8017ee0 <__assert_func+0x34>)
 8017ec6:	462b      	mov	r3, r5
 8017ec8:	f000 fe9a 	bl	8018c00 <fiprintf>
 8017ecc:	f002 fbea 	bl	801a6a4 <abort>
 8017ed0:	4b04      	ldr	r3, [pc, #16]	; (8017ee4 <__assert_func+0x38>)
 8017ed2:	461c      	mov	r4, r3
 8017ed4:	e7f3      	b.n	8017ebe <__assert_func+0x12>
 8017ed6:	bf00      	nop
 8017ed8:	20001494 	.word	0x20001494
 8017edc:	0801c219 	.word	0x0801c219
 8017ee0:	0801c226 	.word	0x0801c226
 8017ee4:	0801c254 	.word	0x0801c254

08017ee8 <div>:
 8017ee8:	2900      	cmp	r1, #0
 8017eea:	b510      	push	{r4, lr}
 8017eec:	fb91 f4f2 	sdiv	r4, r1, r2
 8017ef0:	fb02 1314 	mls	r3, r2, r4, r1
 8017ef4:	db06      	blt.n	8017f04 <div+0x1c>
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	da01      	bge.n	8017efe <div+0x16>
 8017efa:	3401      	adds	r4, #1
 8017efc:	1a9b      	subs	r3, r3, r2
 8017efe:	e9c0 4300 	strd	r4, r3, [r0]
 8017f02:	bd10      	pop	{r4, pc}
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	bfc4      	itt	gt
 8017f08:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8017f0c:	189b      	addgt	r3, r3, r2
 8017f0e:	e7f6      	b.n	8017efe <div+0x16>

08017f10 <quorem>:
 8017f10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f14:	6903      	ldr	r3, [r0, #16]
 8017f16:	690c      	ldr	r4, [r1, #16]
 8017f18:	42a3      	cmp	r3, r4
 8017f1a:	4607      	mov	r7, r0
 8017f1c:	f2c0 8081 	blt.w	8018022 <quorem+0x112>
 8017f20:	3c01      	subs	r4, #1
 8017f22:	f101 0814 	add.w	r8, r1, #20
 8017f26:	f100 0514 	add.w	r5, r0, #20
 8017f2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017f2e:	9301      	str	r3, [sp, #4]
 8017f30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017f34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017f38:	3301      	adds	r3, #1
 8017f3a:	429a      	cmp	r2, r3
 8017f3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017f40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017f44:	fbb2 f6f3 	udiv	r6, r2, r3
 8017f48:	d331      	bcc.n	8017fae <quorem+0x9e>
 8017f4a:	f04f 0e00 	mov.w	lr, #0
 8017f4e:	4640      	mov	r0, r8
 8017f50:	46ac      	mov	ip, r5
 8017f52:	46f2      	mov	sl, lr
 8017f54:	f850 2b04 	ldr.w	r2, [r0], #4
 8017f58:	b293      	uxth	r3, r2
 8017f5a:	fb06 e303 	mla	r3, r6, r3, lr
 8017f5e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8017f62:	b29b      	uxth	r3, r3
 8017f64:	ebaa 0303 	sub.w	r3, sl, r3
 8017f68:	0c12      	lsrs	r2, r2, #16
 8017f6a:	f8dc a000 	ldr.w	sl, [ip]
 8017f6e:	fb06 e202 	mla	r2, r6, r2, lr
 8017f72:	fa13 f38a 	uxtah	r3, r3, sl
 8017f76:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017f7a:	fa1f fa82 	uxth.w	sl, r2
 8017f7e:	f8dc 2000 	ldr.w	r2, [ip]
 8017f82:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8017f86:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017f8a:	b29b      	uxth	r3, r3
 8017f8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017f90:	4581      	cmp	r9, r0
 8017f92:	f84c 3b04 	str.w	r3, [ip], #4
 8017f96:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017f9a:	d2db      	bcs.n	8017f54 <quorem+0x44>
 8017f9c:	f855 300b 	ldr.w	r3, [r5, fp]
 8017fa0:	b92b      	cbnz	r3, 8017fae <quorem+0x9e>
 8017fa2:	9b01      	ldr	r3, [sp, #4]
 8017fa4:	3b04      	subs	r3, #4
 8017fa6:	429d      	cmp	r5, r3
 8017fa8:	461a      	mov	r2, r3
 8017faa:	d32e      	bcc.n	801800a <quorem+0xfa>
 8017fac:	613c      	str	r4, [r7, #16]
 8017fae:	4638      	mov	r0, r7
 8017fb0:	f001 fcde 	bl	8019970 <__mcmp>
 8017fb4:	2800      	cmp	r0, #0
 8017fb6:	db24      	blt.n	8018002 <quorem+0xf2>
 8017fb8:	3601      	adds	r6, #1
 8017fba:	4628      	mov	r0, r5
 8017fbc:	f04f 0c00 	mov.w	ip, #0
 8017fc0:	f858 2b04 	ldr.w	r2, [r8], #4
 8017fc4:	f8d0 e000 	ldr.w	lr, [r0]
 8017fc8:	b293      	uxth	r3, r2
 8017fca:	ebac 0303 	sub.w	r3, ip, r3
 8017fce:	0c12      	lsrs	r2, r2, #16
 8017fd0:	fa13 f38e 	uxtah	r3, r3, lr
 8017fd4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017fd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017fdc:	b29b      	uxth	r3, r3
 8017fde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017fe2:	45c1      	cmp	r9, r8
 8017fe4:	f840 3b04 	str.w	r3, [r0], #4
 8017fe8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017fec:	d2e8      	bcs.n	8017fc0 <quorem+0xb0>
 8017fee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017ff2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017ff6:	b922      	cbnz	r2, 8018002 <quorem+0xf2>
 8017ff8:	3b04      	subs	r3, #4
 8017ffa:	429d      	cmp	r5, r3
 8017ffc:	461a      	mov	r2, r3
 8017ffe:	d30a      	bcc.n	8018016 <quorem+0x106>
 8018000:	613c      	str	r4, [r7, #16]
 8018002:	4630      	mov	r0, r6
 8018004:	b003      	add	sp, #12
 8018006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801800a:	6812      	ldr	r2, [r2, #0]
 801800c:	3b04      	subs	r3, #4
 801800e:	2a00      	cmp	r2, #0
 8018010:	d1cc      	bne.n	8017fac <quorem+0x9c>
 8018012:	3c01      	subs	r4, #1
 8018014:	e7c7      	b.n	8017fa6 <quorem+0x96>
 8018016:	6812      	ldr	r2, [r2, #0]
 8018018:	3b04      	subs	r3, #4
 801801a:	2a00      	cmp	r2, #0
 801801c:	d1f0      	bne.n	8018000 <quorem+0xf0>
 801801e:	3c01      	subs	r4, #1
 8018020:	e7eb      	b.n	8017ffa <quorem+0xea>
 8018022:	2000      	movs	r0, #0
 8018024:	e7ee      	b.n	8018004 <quorem+0xf4>
	...

08018028 <_dtoa_r>:
 8018028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801802c:	ed2d 8b02 	vpush	{d8}
 8018030:	ec57 6b10 	vmov	r6, r7, d0
 8018034:	b095      	sub	sp, #84	; 0x54
 8018036:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018038:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801803c:	9105      	str	r1, [sp, #20]
 801803e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8018042:	4604      	mov	r4, r0
 8018044:	9209      	str	r2, [sp, #36]	; 0x24
 8018046:	930f      	str	r3, [sp, #60]	; 0x3c
 8018048:	b975      	cbnz	r5, 8018068 <_dtoa_r+0x40>
 801804a:	2010      	movs	r0, #16
 801804c:	f7fd fcae 	bl	80159ac <malloc>
 8018050:	4602      	mov	r2, r0
 8018052:	6260      	str	r0, [r4, #36]	; 0x24
 8018054:	b920      	cbnz	r0, 8018060 <_dtoa_r+0x38>
 8018056:	4bb2      	ldr	r3, [pc, #712]	; (8018320 <_dtoa_r+0x2f8>)
 8018058:	21ea      	movs	r1, #234	; 0xea
 801805a:	48b2      	ldr	r0, [pc, #712]	; (8018324 <_dtoa_r+0x2fc>)
 801805c:	f7ff ff26 	bl	8017eac <__assert_func>
 8018060:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018064:	6005      	str	r5, [r0, #0]
 8018066:	60c5      	str	r5, [r0, #12]
 8018068:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801806a:	6819      	ldr	r1, [r3, #0]
 801806c:	b151      	cbz	r1, 8018084 <_dtoa_r+0x5c>
 801806e:	685a      	ldr	r2, [r3, #4]
 8018070:	604a      	str	r2, [r1, #4]
 8018072:	2301      	movs	r3, #1
 8018074:	4093      	lsls	r3, r2
 8018076:	608b      	str	r3, [r1, #8]
 8018078:	4620      	mov	r0, r4
 801807a:	f001 f9f1 	bl	8019460 <_Bfree>
 801807e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018080:	2200      	movs	r2, #0
 8018082:	601a      	str	r2, [r3, #0]
 8018084:	1e3b      	subs	r3, r7, #0
 8018086:	bfb9      	ittee	lt
 8018088:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801808c:	9303      	strlt	r3, [sp, #12]
 801808e:	2300      	movge	r3, #0
 8018090:	f8c8 3000 	strge.w	r3, [r8]
 8018094:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8018098:	4ba3      	ldr	r3, [pc, #652]	; (8018328 <_dtoa_r+0x300>)
 801809a:	bfbc      	itt	lt
 801809c:	2201      	movlt	r2, #1
 801809e:	f8c8 2000 	strlt.w	r2, [r8]
 80180a2:	ea33 0309 	bics.w	r3, r3, r9
 80180a6:	d11b      	bne.n	80180e0 <_dtoa_r+0xb8>
 80180a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80180aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80180ae:	6013      	str	r3, [r2, #0]
 80180b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80180b4:	4333      	orrs	r3, r6
 80180b6:	f000 857a 	beq.w	8018bae <_dtoa_r+0xb86>
 80180ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80180bc:	b963      	cbnz	r3, 80180d8 <_dtoa_r+0xb0>
 80180be:	4b9b      	ldr	r3, [pc, #620]	; (801832c <_dtoa_r+0x304>)
 80180c0:	e024      	b.n	801810c <_dtoa_r+0xe4>
 80180c2:	4b9b      	ldr	r3, [pc, #620]	; (8018330 <_dtoa_r+0x308>)
 80180c4:	9300      	str	r3, [sp, #0]
 80180c6:	3308      	adds	r3, #8
 80180c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80180ca:	6013      	str	r3, [r2, #0]
 80180cc:	9800      	ldr	r0, [sp, #0]
 80180ce:	b015      	add	sp, #84	; 0x54
 80180d0:	ecbd 8b02 	vpop	{d8}
 80180d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180d8:	4b94      	ldr	r3, [pc, #592]	; (801832c <_dtoa_r+0x304>)
 80180da:	9300      	str	r3, [sp, #0]
 80180dc:	3303      	adds	r3, #3
 80180de:	e7f3      	b.n	80180c8 <_dtoa_r+0xa0>
 80180e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80180e4:	2200      	movs	r2, #0
 80180e6:	ec51 0b17 	vmov	r0, r1, d7
 80180ea:	2300      	movs	r3, #0
 80180ec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80180f0:	f7e9 f8fa 	bl	80012e8 <__aeabi_dcmpeq>
 80180f4:	4680      	mov	r8, r0
 80180f6:	b158      	cbz	r0, 8018110 <_dtoa_r+0xe8>
 80180f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80180fa:	2301      	movs	r3, #1
 80180fc:	6013      	str	r3, [r2, #0]
 80180fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018100:	2b00      	cmp	r3, #0
 8018102:	f000 8551 	beq.w	8018ba8 <_dtoa_r+0xb80>
 8018106:	488b      	ldr	r0, [pc, #556]	; (8018334 <_dtoa_r+0x30c>)
 8018108:	6018      	str	r0, [r3, #0]
 801810a:	1e43      	subs	r3, r0, #1
 801810c:	9300      	str	r3, [sp, #0]
 801810e:	e7dd      	b.n	80180cc <_dtoa_r+0xa4>
 8018110:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8018114:	aa12      	add	r2, sp, #72	; 0x48
 8018116:	a913      	add	r1, sp, #76	; 0x4c
 8018118:	4620      	mov	r0, r4
 801811a:	f001 fd49 	bl	8019bb0 <__d2b>
 801811e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018122:	4683      	mov	fp, r0
 8018124:	2d00      	cmp	r5, #0
 8018126:	d07c      	beq.n	8018222 <_dtoa_r+0x1fa>
 8018128:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801812a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801812e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018132:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8018136:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801813a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801813e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8018142:	4b7d      	ldr	r3, [pc, #500]	; (8018338 <_dtoa_r+0x310>)
 8018144:	2200      	movs	r2, #0
 8018146:	4630      	mov	r0, r6
 8018148:	4639      	mov	r1, r7
 801814a:	f7e8 fcad 	bl	8000aa8 <__aeabi_dsub>
 801814e:	a36e      	add	r3, pc, #440	; (adr r3, 8018308 <_dtoa_r+0x2e0>)
 8018150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018154:	f7e8 fe60 	bl	8000e18 <__aeabi_dmul>
 8018158:	a36d      	add	r3, pc, #436	; (adr r3, 8018310 <_dtoa_r+0x2e8>)
 801815a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801815e:	f7e8 fca5 	bl	8000aac <__adddf3>
 8018162:	4606      	mov	r6, r0
 8018164:	4628      	mov	r0, r5
 8018166:	460f      	mov	r7, r1
 8018168:	f7e8 fdec 	bl	8000d44 <__aeabi_i2d>
 801816c:	a36a      	add	r3, pc, #424	; (adr r3, 8018318 <_dtoa_r+0x2f0>)
 801816e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018172:	f7e8 fe51 	bl	8000e18 <__aeabi_dmul>
 8018176:	4602      	mov	r2, r0
 8018178:	460b      	mov	r3, r1
 801817a:	4630      	mov	r0, r6
 801817c:	4639      	mov	r1, r7
 801817e:	f7e8 fc95 	bl	8000aac <__adddf3>
 8018182:	4606      	mov	r6, r0
 8018184:	460f      	mov	r7, r1
 8018186:	f7e9 f8f7 	bl	8001378 <__aeabi_d2iz>
 801818a:	2200      	movs	r2, #0
 801818c:	4682      	mov	sl, r0
 801818e:	2300      	movs	r3, #0
 8018190:	4630      	mov	r0, r6
 8018192:	4639      	mov	r1, r7
 8018194:	f7e9 f8b2 	bl	80012fc <__aeabi_dcmplt>
 8018198:	b148      	cbz	r0, 80181ae <_dtoa_r+0x186>
 801819a:	4650      	mov	r0, sl
 801819c:	f7e8 fdd2 	bl	8000d44 <__aeabi_i2d>
 80181a0:	4632      	mov	r2, r6
 80181a2:	463b      	mov	r3, r7
 80181a4:	f7e9 f8a0 	bl	80012e8 <__aeabi_dcmpeq>
 80181a8:	b908      	cbnz	r0, 80181ae <_dtoa_r+0x186>
 80181aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80181ae:	f1ba 0f16 	cmp.w	sl, #22
 80181b2:	d854      	bhi.n	801825e <_dtoa_r+0x236>
 80181b4:	4b61      	ldr	r3, [pc, #388]	; (801833c <_dtoa_r+0x314>)
 80181b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80181ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80181c2:	f7e9 f89b 	bl	80012fc <__aeabi_dcmplt>
 80181c6:	2800      	cmp	r0, #0
 80181c8:	d04b      	beq.n	8018262 <_dtoa_r+0x23a>
 80181ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80181ce:	2300      	movs	r3, #0
 80181d0:	930e      	str	r3, [sp, #56]	; 0x38
 80181d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80181d4:	1b5d      	subs	r5, r3, r5
 80181d6:	1e6b      	subs	r3, r5, #1
 80181d8:	9304      	str	r3, [sp, #16]
 80181da:	bf43      	ittte	mi
 80181dc:	2300      	movmi	r3, #0
 80181de:	f1c5 0801 	rsbmi	r8, r5, #1
 80181e2:	9304      	strmi	r3, [sp, #16]
 80181e4:	f04f 0800 	movpl.w	r8, #0
 80181e8:	f1ba 0f00 	cmp.w	sl, #0
 80181ec:	db3b      	blt.n	8018266 <_dtoa_r+0x23e>
 80181ee:	9b04      	ldr	r3, [sp, #16]
 80181f0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80181f4:	4453      	add	r3, sl
 80181f6:	9304      	str	r3, [sp, #16]
 80181f8:	2300      	movs	r3, #0
 80181fa:	9306      	str	r3, [sp, #24]
 80181fc:	9b05      	ldr	r3, [sp, #20]
 80181fe:	2b09      	cmp	r3, #9
 8018200:	d869      	bhi.n	80182d6 <_dtoa_r+0x2ae>
 8018202:	2b05      	cmp	r3, #5
 8018204:	bfc4      	itt	gt
 8018206:	3b04      	subgt	r3, #4
 8018208:	9305      	strgt	r3, [sp, #20]
 801820a:	9b05      	ldr	r3, [sp, #20]
 801820c:	f1a3 0302 	sub.w	r3, r3, #2
 8018210:	bfcc      	ite	gt
 8018212:	2500      	movgt	r5, #0
 8018214:	2501      	movle	r5, #1
 8018216:	2b03      	cmp	r3, #3
 8018218:	d869      	bhi.n	80182ee <_dtoa_r+0x2c6>
 801821a:	e8df f003 	tbb	[pc, r3]
 801821e:	4e2c      	.short	0x4e2c
 8018220:	5a4c      	.short	0x5a4c
 8018222:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8018226:	441d      	add	r5, r3
 8018228:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801822c:	2b20      	cmp	r3, #32
 801822e:	bfc1      	itttt	gt
 8018230:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8018234:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8018238:	fa09 f303 	lslgt.w	r3, r9, r3
 801823c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8018240:	bfda      	itte	le
 8018242:	f1c3 0320 	rsble	r3, r3, #32
 8018246:	fa06 f003 	lslle.w	r0, r6, r3
 801824a:	4318      	orrgt	r0, r3
 801824c:	f7e8 fd6a 	bl	8000d24 <__aeabi_ui2d>
 8018250:	2301      	movs	r3, #1
 8018252:	4606      	mov	r6, r0
 8018254:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8018258:	3d01      	subs	r5, #1
 801825a:	9310      	str	r3, [sp, #64]	; 0x40
 801825c:	e771      	b.n	8018142 <_dtoa_r+0x11a>
 801825e:	2301      	movs	r3, #1
 8018260:	e7b6      	b.n	80181d0 <_dtoa_r+0x1a8>
 8018262:	900e      	str	r0, [sp, #56]	; 0x38
 8018264:	e7b5      	b.n	80181d2 <_dtoa_r+0x1aa>
 8018266:	f1ca 0300 	rsb	r3, sl, #0
 801826a:	9306      	str	r3, [sp, #24]
 801826c:	2300      	movs	r3, #0
 801826e:	eba8 080a 	sub.w	r8, r8, sl
 8018272:	930d      	str	r3, [sp, #52]	; 0x34
 8018274:	e7c2      	b.n	80181fc <_dtoa_r+0x1d4>
 8018276:	2300      	movs	r3, #0
 8018278:	9308      	str	r3, [sp, #32]
 801827a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801827c:	2b00      	cmp	r3, #0
 801827e:	dc39      	bgt.n	80182f4 <_dtoa_r+0x2cc>
 8018280:	f04f 0901 	mov.w	r9, #1
 8018284:	f8cd 9004 	str.w	r9, [sp, #4]
 8018288:	464b      	mov	r3, r9
 801828a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801828e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018290:	2200      	movs	r2, #0
 8018292:	6042      	str	r2, [r0, #4]
 8018294:	2204      	movs	r2, #4
 8018296:	f102 0614 	add.w	r6, r2, #20
 801829a:	429e      	cmp	r6, r3
 801829c:	6841      	ldr	r1, [r0, #4]
 801829e:	d92f      	bls.n	8018300 <_dtoa_r+0x2d8>
 80182a0:	4620      	mov	r0, r4
 80182a2:	f001 f89d 	bl	80193e0 <_Balloc>
 80182a6:	9000      	str	r0, [sp, #0]
 80182a8:	2800      	cmp	r0, #0
 80182aa:	d14b      	bne.n	8018344 <_dtoa_r+0x31c>
 80182ac:	4b24      	ldr	r3, [pc, #144]	; (8018340 <_dtoa_r+0x318>)
 80182ae:	4602      	mov	r2, r0
 80182b0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80182b4:	e6d1      	b.n	801805a <_dtoa_r+0x32>
 80182b6:	2301      	movs	r3, #1
 80182b8:	e7de      	b.n	8018278 <_dtoa_r+0x250>
 80182ba:	2300      	movs	r3, #0
 80182bc:	9308      	str	r3, [sp, #32]
 80182be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182c0:	eb0a 0903 	add.w	r9, sl, r3
 80182c4:	f109 0301 	add.w	r3, r9, #1
 80182c8:	2b01      	cmp	r3, #1
 80182ca:	9301      	str	r3, [sp, #4]
 80182cc:	bfb8      	it	lt
 80182ce:	2301      	movlt	r3, #1
 80182d0:	e7dd      	b.n	801828e <_dtoa_r+0x266>
 80182d2:	2301      	movs	r3, #1
 80182d4:	e7f2      	b.n	80182bc <_dtoa_r+0x294>
 80182d6:	2501      	movs	r5, #1
 80182d8:	2300      	movs	r3, #0
 80182da:	9305      	str	r3, [sp, #20]
 80182dc:	9508      	str	r5, [sp, #32]
 80182de:	f04f 39ff 	mov.w	r9, #4294967295
 80182e2:	2200      	movs	r2, #0
 80182e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80182e8:	2312      	movs	r3, #18
 80182ea:	9209      	str	r2, [sp, #36]	; 0x24
 80182ec:	e7cf      	b.n	801828e <_dtoa_r+0x266>
 80182ee:	2301      	movs	r3, #1
 80182f0:	9308      	str	r3, [sp, #32]
 80182f2:	e7f4      	b.n	80182de <_dtoa_r+0x2b6>
 80182f4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80182f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80182fc:	464b      	mov	r3, r9
 80182fe:	e7c6      	b.n	801828e <_dtoa_r+0x266>
 8018300:	3101      	adds	r1, #1
 8018302:	6041      	str	r1, [r0, #4]
 8018304:	0052      	lsls	r2, r2, #1
 8018306:	e7c6      	b.n	8018296 <_dtoa_r+0x26e>
 8018308:	636f4361 	.word	0x636f4361
 801830c:	3fd287a7 	.word	0x3fd287a7
 8018310:	8b60c8b3 	.word	0x8b60c8b3
 8018314:	3fc68a28 	.word	0x3fc68a28
 8018318:	509f79fb 	.word	0x509f79fb
 801831c:	3fd34413 	.word	0x3fd34413
 8018320:	0801c140 	.word	0x0801c140
 8018324:	0801c363 	.word	0x0801c363
 8018328:	7ff00000 	.word	0x7ff00000
 801832c:	0801c35f 	.word	0x0801c35f
 8018330:	0801c356 	.word	0x0801c356
 8018334:	0801c685 	.word	0x0801c685
 8018338:	3ff80000 	.word	0x3ff80000
 801833c:	0801c538 	.word	0x0801c538
 8018340:	0801c3c2 	.word	0x0801c3c2
 8018344:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018346:	9a00      	ldr	r2, [sp, #0]
 8018348:	601a      	str	r2, [r3, #0]
 801834a:	9b01      	ldr	r3, [sp, #4]
 801834c:	2b0e      	cmp	r3, #14
 801834e:	f200 80ad 	bhi.w	80184ac <_dtoa_r+0x484>
 8018352:	2d00      	cmp	r5, #0
 8018354:	f000 80aa 	beq.w	80184ac <_dtoa_r+0x484>
 8018358:	f1ba 0f00 	cmp.w	sl, #0
 801835c:	dd36      	ble.n	80183cc <_dtoa_r+0x3a4>
 801835e:	4ac3      	ldr	r2, [pc, #780]	; (801866c <_dtoa_r+0x644>)
 8018360:	f00a 030f 	and.w	r3, sl, #15
 8018364:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8018368:	ed93 7b00 	vldr	d7, [r3]
 801836c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8018370:	ea4f 172a 	mov.w	r7, sl, asr #4
 8018374:	eeb0 8a47 	vmov.f32	s16, s14
 8018378:	eef0 8a67 	vmov.f32	s17, s15
 801837c:	d016      	beq.n	80183ac <_dtoa_r+0x384>
 801837e:	4bbc      	ldr	r3, [pc, #752]	; (8018670 <_dtoa_r+0x648>)
 8018380:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018384:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018388:	f7e8 fe70 	bl	800106c <__aeabi_ddiv>
 801838c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018390:	f007 070f 	and.w	r7, r7, #15
 8018394:	2503      	movs	r5, #3
 8018396:	4eb6      	ldr	r6, [pc, #728]	; (8018670 <_dtoa_r+0x648>)
 8018398:	b957      	cbnz	r7, 80183b0 <_dtoa_r+0x388>
 801839a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801839e:	ec53 2b18 	vmov	r2, r3, d8
 80183a2:	f7e8 fe63 	bl	800106c <__aeabi_ddiv>
 80183a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80183aa:	e029      	b.n	8018400 <_dtoa_r+0x3d8>
 80183ac:	2502      	movs	r5, #2
 80183ae:	e7f2      	b.n	8018396 <_dtoa_r+0x36e>
 80183b0:	07f9      	lsls	r1, r7, #31
 80183b2:	d508      	bpl.n	80183c6 <_dtoa_r+0x39e>
 80183b4:	ec51 0b18 	vmov	r0, r1, d8
 80183b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80183bc:	f7e8 fd2c 	bl	8000e18 <__aeabi_dmul>
 80183c0:	ec41 0b18 	vmov	d8, r0, r1
 80183c4:	3501      	adds	r5, #1
 80183c6:	107f      	asrs	r7, r7, #1
 80183c8:	3608      	adds	r6, #8
 80183ca:	e7e5      	b.n	8018398 <_dtoa_r+0x370>
 80183cc:	f000 80a6 	beq.w	801851c <_dtoa_r+0x4f4>
 80183d0:	f1ca 0600 	rsb	r6, sl, #0
 80183d4:	4ba5      	ldr	r3, [pc, #660]	; (801866c <_dtoa_r+0x644>)
 80183d6:	4fa6      	ldr	r7, [pc, #664]	; (8018670 <_dtoa_r+0x648>)
 80183d8:	f006 020f 	and.w	r2, r6, #15
 80183dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80183e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80183e8:	f7e8 fd16 	bl	8000e18 <__aeabi_dmul>
 80183ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80183f0:	1136      	asrs	r6, r6, #4
 80183f2:	2300      	movs	r3, #0
 80183f4:	2502      	movs	r5, #2
 80183f6:	2e00      	cmp	r6, #0
 80183f8:	f040 8085 	bne.w	8018506 <_dtoa_r+0x4de>
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d1d2      	bne.n	80183a6 <_dtoa_r+0x37e>
 8018400:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018402:	2b00      	cmp	r3, #0
 8018404:	f000 808c 	beq.w	8018520 <_dtoa_r+0x4f8>
 8018408:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801840c:	4b99      	ldr	r3, [pc, #612]	; (8018674 <_dtoa_r+0x64c>)
 801840e:	2200      	movs	r2, #0
 8018410:	4630      	mov	r0, r6
 8018412:	4639      	mov	r1, r7
 8018414:	f7e8 ff72 	bl	80012fc <__aeabi_dcmplt>
 8018418:	2800      	cmp	r0, #0
 801841a:	f000 8081 	beq.w	8018520 <_dtoa_r+0x4f8>
 801841e:	9b01      	ldr	r3, [sp, #4]
 8018420:	2b00      	cmp	r3, #0
 8018422:	d07d      	beq.n	8018520 <_dtoa_r+0x4f8>
 8018424:	f1b9 0f00 	cmp.w	r9, #0
 8018428:	dd3c      	ble.n	80184a4 <_dtoa_r+0x47c>
 801842a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801842e:	9307      	str	r3, [sp, #28]
 8018430:	2200      	movs	r2, #0
 8018432:	4b91      	ldr	r3, [pc, #580]	; (8018678 <_dtoa_r+0x650>)
 8018434:	4630      	mov	r0, r6
 8018436:	4639      	mov	r1, r7
 8018438:	f7e8 fcee 	bl	8000e18 <__aeabi_dmul>
 801843c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018440:	3501      	adds	r5, #1
 8018442:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8018446:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801844a:	4628      	mov	r0, r5
 801844c:	f7e8 fc7a 	bl	8000d44 <__aeabi_i2d>
 8018450:	4632      	mov	r2, r6
 8018452:	463b      	mov	r3, r7
 8018454:	f7e8 fce0 	bl	8000e18 <__aeabi_dmul>
 8018458:	4b88      	ldr	r3, [pc, #544]	; (801867c <_dtoa_r+0x654>)
 801845a:	2200      	movs	r2, #0
 801845c:	f7e8 fb26 	bl	8000aac <__adddf3>
 8018460:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8018464:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018468:	9303      	str	r3, [sp, #12]
 801846a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801846c:	2b00      	cmp	r3, #0
 801846e:	d15c      	bne.n	801852a <_dtoa_r+0x502>
 8018470:	4b83      	ldr	r3, [pc, #524]	; (8018680 <_dtoa_r+0x658>)
 8018472:	2200      	movs	r2, #0
 8018474:	4630      	mov	r0, r6
 8018476:	4639      	mov	r1, r7
 8018478:	f7e8 fb16 	bl	8000aa8 <__aeabi_dsub>
 801847c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018480:	4606      	mov	r6, r0
 8018482:	460f      	mov	r7, r1
 8018484:	f7e8 ff58 	bl	8001338 <__aeabi_dcmpgt>
 8018488:	2800      	cmp	r0, #0
 801848a:	f040 8296 	bne.w	80189ba <_dtoa_r+0x992>
 801848e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8018492:	4630      	mov	r0, r6
 8018494:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018498:	4639      	mov	r1, r7
 801849a:	f7e8 ff2f 	bl	80012fc <__aeabi_dcmplt>
 801849e:	2800      	cmp	r0, #0
 80184a0:	f040 8288 	bne.w	80189b4 <_dtoa_r+0x98c>
 80184a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80184a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80184ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	f2c0 8158 	blt.w	8018764 <_dtoa_r+0x73c>
 80184b4:	f1ba 0f0e 	cmp.w	sl, #14
 80184b8:	f300 8154 	bgt.w	8018764 <_dtoa_r+0x73c>
 80184bc:	4b6b      	ldr	r3, [pc, #428]	; (801866c <_dtoa_r+0x644>)
 80184be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80184c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80184c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	f280 80e3 	bge.w	8018694 <_dtoa_r+0x66c>
 80184ce:	9b01      	ldr	r3, [sp, #4]
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	f300 80df 	bgt.w	8018694 <_dtoa_r+0x66c>
 80184d6:	f040 826d 	bne.w	80189b4 <_dtoa_r+0x98c>
 80184da:	4b69      	ldr	r3, [pc, #420]	; (8018680 <_dtoa_r+0x658>)
 80184dc:	2200      	movs	r2, #0
 80184de:	4640      	mov	r0, r8
 80184e0:	4649      	mov	r1, r9
 80184e2:	f7e8 fc99 	bl	8000e18 <__aeabi_dmul>
 80184e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80184ea:	f7e8 ff1b 	bl	8001324 <__aeabi_dcmpge>
 80184ee:	9e01      	ldr	r6, [sp, #4]
 80184f0:	4637      	mov	r7, r6
 80184f2:	2800      	cmp	r0, #0
 80184f4:	f040 8243 	bne.w	801897e <_dtoa_r+0x956>
 80184f8:	9d00      	ldr	r5, [sp, #0]
 80184fa:	2331      	movs	r3, #49	; 0x31
 80184fc:	f805 3b01 	strb.w	r3, [r5], #1
 8018500:	f10a 0a01 	add.w	sl, sl, #1
 8018504:	e23f      	b.n	8018986 <_dtoa_r+0x95e>
 8018506:	07f2      	lsls	r2, r6, #31
 8018508:	d505      	bpl.n	8018516 <_dtoa_r+0x4ee>
 801850a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801850e:	f7e8 fc83 	bl	8000e18 <__aeabi_dmul>
 8018512:	3501      	adds	r5, #1
 8018514:	2301      	movs	r3, #1
 8018516:	1076      	asrs	r6, r6, #1
 8018518:	3708      	adds	r7, #8
 801851a:	e76c      	b.n	80183f6 <_dtoa_r+0x3ce>
 801851c:	2502      	movs	r5, #2
 801851e:	e76f      	b.n	8018400 <_dtoa_r+0x3d8>
 8018520:	9b01      	ldr	r3, [sp, #4]
 8018522:	f8cd a01c 	str.w	sl, [sp, #28]
 8018526:	930c      	str	r3, [sp, #48]	; 0x30
 8018528:	e78d      	b.n	8018446 <_dtoa_r+0x41e>
 801852a:	9900      	ldr	r1, [sp, #0]
 801852c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801852e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018530:	4b4e      	ldr	r3, [pc, #312]	; (801866c <_dtoa_r+0x644>)
 8018532:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018536:	4401      	add	r1, r0
 8018538:	9102      	str	r1, [sp, #8]
 801853a:	9908      	ldr	r1, [sp, #32]
 801853c:	eeb0 8a47 	vmov.f32	s16, s14
 8018540:	eef0 8a67 	vmov.f32	s17, s15
 8018544:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018548:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801854c:	2900      	cmp	r1, #0
 801854e:	d045      	beq.n	80185dc <_dtoa_r+0x5b4>
 8018550:	494c      	ldr	r1, [pc, #304]	; (8018684 <_dtoa_r+0x65c>)
 8018552:	2000      	movs	r0, #0
 8018554:	f7e8 fd8a 	bl	800106c <__aeabi_ddiv>
 8018558:	ec53 2b18 	vmov	r2, r3, d8
 801855c:	f7e8 faa4 	bl	8000aa8 <__aeabi_dsub>
 8018560:	9d00      	ldr	r5, [sp, #0]
 8018562:	ec41 0b18 	vmov	d8, r0, r1
 8018566:	4639      	mov	r1, r7
 8018568:	4630      	mov	r0, r6
 801856a:	f7e8 ff05 	bl	8001378 <__aeabi_d2iz>
 801856e:	900c      	str	r0, [sp, #48]	; 0x30
 8018570:	f7e8 fbe8 	bl	8000d44 <__aeabi_i2d>
 8018574:	4602      	mov	r2, r0
 8018576:	460b      	mov	r3, r1
 8018578:	4630      	mov	r0, r6
 801857a:	4639      	mov	r1, r7
 801857c:	f7e8 fa94 	bl	8000aa8 <__aeabi_dsub>
 8018580:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018582:	3330      	adds	r3, #48	; 0x30
 8018584:	f805 3b01 	strb.w	r3, [r5], #1
 8018588:	ec53 2b18 	vmov	r2, r3, d8
 801858c:	4606      	mov	r6, r0
 801858e:	460f      	mov	r7, r1
 8018590:	f7e8 feb4 	bl	80012fc <__aeabi_dcmplt>
 8018594:	2800      	cmp	r0, #0
 8018596:	d165      	bne.n	8018664 <_dtoa_r+0x63c>
 8018598:	4632      	mov	r2, r6
 801859a:	463b      	mov	r3, r7
 801859c:	4935      	ldr	r1, [pc, #212]	; (8018674 <_dtoa_r+0x64c>)
 801859e:	2000      	movs	r0, #0
 80185a0:	f7e8 fa82 	bl	8000aa8 <__aeabi_dsub>
 80185a4:	ec53 2b18 	vmov	r2, r3, d8
 80185a8:	f7e8 fea8 	bl	80012fc <__aeabi_dcmplt>
 80185ac:	2800      	cmp	r0, #0
 80185ae:	f040 80b9 	bne.w	8018724 <_dtoa_r+0x6fc>
 80185b2:	9b02      	ldr	r3, [sp, #8]
 80185b4:	429d      	cmp	r5, r3
 80185b6:	f43f af75 	beq.w	80184a4 <_dtoa_r+0x47c>
 80185ba:	4b2f      	ldr	r3, [pc, #188]	; (8018678 <_dtoa_r+0x650>)
 80185bc:	ec51 0b18 	vmov	r0, r1, d8
 80185c0:	2200      	movs	r2, #0
 80185c2:	f7e8 fc29 	bl	8000e18 <__aeabi_dmul>
 80185c6:	4b2c      	ldr	r3, [pc, #176]	; (8018678 <_dtoa_r+0x650>)
 80185c8:	ec41 0b18 	vmov	d8, r0, r1
 80185cc:	2200      	movs	r2, #0
 80185ce:	4630      	mov	r0, r6
 80185d0:	4639      	mov	r1, r7
 80185d2:	f7e8 fc21 	bl	8000e18 <__aeabi_dmul>
 80185d6:	4606      	mov	r6, r0
 80185d8:	460f      	mov	r7, r1
 80185da:	e7c4      	b.n	8018566 <_dtoa_r+0x53e>
 80185dc:	ec51 0b17 	vmov	r0, r1, d7
 80185e0:	f7e8 fc1a 	bl	8000e18 <__aeabi_dmul>
 80185e4:	9b02      	ldr	r3, [sp, #8]
 80185e6:	9d00      	ldr	r5, [sp, #0]
 80185e8:	930c      	str	r3, [sp, #48]	; 0x30
 80185ea:	ec41 0b18 	vmov	d8, r0, r1
 80185ee:	4639      	mov	r1, r7
 80185f0:	4630      	mov	r0, r6
 80185f2:	f7e8 fec1 	bl	8001378 <__aeabi_d2iz>
 80185f6:	9011      	str	r0, [sp, #68]	; 0x44
 80185f8:	f7e8 fba4 	bl	8000d44 <__aeabi_i2d>
 80185fc:	4602      	mov	r2, r0
 80185fe:	460b      	mov	r3, r1
 8018600:	4630      	mov	r0, r6
 8018602:	4639      	mov	r1, r7
 8018604:	f7e8 fa50 	bl	8000aa8 <__aeabi_dsub>
 8018608:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801860a:	3330      	adds	r3, #48	; 0x30
 801860c:	f805 3b01 	strb.w	r3, [r5], #1
 8018610:	9b02      	ldr	r3, [sp, #8]
 8018612:	429d      	cmp	r5, r3
 8018614:	4606      	mov	r6, r0
 8018616:	460f      	mov	r7, r1
 8018618:	f04f 0200 	mov.w	r2, #0
 801861c:	d134      	bne.n	8018688 <_dtoa_r+0x660>
 801861e:	4b19      	ldr	r3, [pc, #100]	; (8018684 <_dtoa_r+0x65c>)
 8018620:	ec51 0b18 	vmov	r0, r1, d8
 8018624:	f7e8 fa42 	bl	8000aac <__adddf3>
 8018628:	4602      	mov	r2, r0
 801862a:	460b      	mov	r3, r1
 801862c:	4630      	mov	r0, r6
 801862e:	4639      	mov	r1, r7
 8018630:	f7e8 fe82 	bl	8001338 <__aeabi_dcmpgt>
 8018634:	2800      	cmp	r0, #0
 8018636:	d175      	bne.n	8018724 <_dtoa_r+0x6fc>
 8018638:	ec53 2b18 	vmov	r2, r3, d8
 801863c:	4911      	ldr	r1, [pc, #68]	; (8018684 <_dtoa_r+0x65c>)
 801863e:	2000      	movs	r0, #0
 8018640:	f7e8 fa32 	bl	8000aa8 <__aeabi_dsub>
 8018644:	4602      	mov	r2, r0
 8018646:	460b      	mov	r3, r1
 8018648:	4630      	mov	r0, r6
 801864a:	4639      	mov	r1, r7
 801864c:	f7e8 fe56 	bl	80012fc <__aeabi_dcmplt>
 8018650:	2800      	cmp	r0, #0
 8018652:	f43f af27 	beq.w	80184a4 <_dtoa_r+0x47c>
 8018656:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018658:	1e6b      	subs	r3, r5, #1
 801865a:	930c      	str	r3, [sp, #48]	; 0x30
 801865c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018660:	2b30      	cmp	r3, #48	; 0x30
 8018662:	d0f8      	beq.n	8018656 <_dtoa_r+0x62e>
 8018664:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018668:	e04a      	b.n	8018700 <_dtoa_r+0x6d8>
 801866a:	bf00      	nop
 801866c:	0801c538 	.word	0x0801c538
 8018670:	0801c510 	.word	0x0801c510
 8018674:	3ff00000 	.word	0x3ff00000
 8018678:	40240000 	.word	0x40240000
 801867c:	401c0000 	.word	0x401c0000
 8018680:	40140000 	.word	0x40140000
 8018684:	3fe00000 	.word	0x3fe00000
 8018688:	4baf      	ldr	r3, [pc, #700]	; (8018948 <_dtoa_r+0x920>)
 801868a:	f7e8 fbc5 	bl	8000e18 <__aeabi_dmul>
 801868e:	4606      	mov	r6, r0
 8018690:	460f      	mov	r7, r1
 8018692:	e7ac      	b.n	80185ee <_dtoa_r+0x5c6>
 8018694:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018698:	9d00      	ldr	r5, [sp, #0]
 801869a:	4642      	mov	r2, r8
 801869c:	464b      	mov	r3, r9
 801869e:	4630      	mov	r0, r6
 80186a0:	4639      	mov	r1, r7
 80186a2:	f7e8 fce3 	bl	800106c <__aeabi_ddiv>
 80186a6:	f7e8 fe67 	bl	8001378 <__aeabi_d2iz>
 80186aa:	9002      	str	r0, [sp, #8]
 80186ac:	f7e8 fb4a 	bl	8000d44 <__aeabi_i2d>
 80186b0:	4642      	mov	r2, r8
 80186b2:	464b      	mov	r3, r9
 80186b4:	f7e8 fbb0 	bl	8000e18 <__aeabi_dmul>
 80186b8:	4602      	mov	r2, r0
 80186ba:	460b      	mov	r3, r1
 80186bc:	4630      	mov	r0, r6
 80186be:	4639      	mov	r1, r7
 80186c0:	f7e8 f9f2 	bl	8000aa8 <__aeabi_dsub>
 80186c4:	9e02      	ldr	r6, [sp, #8]
 80186c6:	9f01      	ldr	r7, [sp, #4]
 80186c8:	3630      	adds	r6, #48	; 0x30
 80186ca:	f805 6b01 	strb.w	r6, [r5], #1
 80186ce:	9e00      	ldr	r6, [sp, #0]
 80186d0:	1bae      	subs	r6, r5, r6
 80186d2:	42b7      	cmp	r7, r6
 80186d4:	4602      	mov	r2, r0
 80186d6:	460b      	mov	r3, r1
 80186d8:	d137      	bne.n	801874a <_dtoa_r+0x722>
 80186da:	f7e8 f9e7 	bl	8000aac <__adddf3>
 80186de:	4642      	mov	r2, r8
 80186e0:	464b      	mov	r3, r9
 80186e2:	4606      	mov	r6, r0
 80186e4:	460f      	mov	r7, r1
 80186e6:	f7e8 fe27 	bl	8001338 <__aeabi_dcmpgt>
 80186ea:	b9c8      	cbnz	r0, 8018720 <_dtoa_r+0x6f8>
 80186ec:	4642      	mov	r2, r8
 80186ee:	464b      	mov	r3, r9
 80186f0:	4630      	mov	r0, r6
 80186f2:	4639      	mov	r1, r7
 80186f4:	f7e8 fdf8 	bl	80012e8 <__aeabi_dcmpeq>
 80186f8:	b110      	cbz	r0, 8018700 <_dtoa_r+0x6d8>
 80186fa:	9b02      	ldr	r3, [sp, #8]
 80186fc:	07d9      	lsls	r1, r3, #31
 80186fe:	d40f      	bmi.n	8018720 <_dtoa_r+0x6f8>
 8018700:	4620      	mov	r0, r4
 8018702:	4659      	mov	r1, fp
 8018704:	f000 feac 	bl	8019460 <_Bfree>
 8018708:	2300      	movs	r3, #0
 801870a:	702b      	strb	r3, [r5, #0]
 801870c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801870e:	f10a 0001 	add.w	r0, sl, #1
 8018712:	6018      	str	r0, [r3, #0]
 8018714:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018716:	2b00      	cmp	r3, #0
 8018718:	f43f acd8 	beq.w	80180cc <_dtoa_r+0xa4>
 801871c:	601d      	str	r5, [r3, #0]
 801871e:	e4d5      	b.n	80180cc <_dtoa_r+0xa4>
 8018720:	f8cd a01c 	str.w	sl, [sp, #28]
 8018724:	462b      	mov	r3, r5
 8018726:	461d      	mov	r5, r3
 8018728:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801872c:	2a39      	cmp	r2, #57	; 0x39
 801872e:	d108      	bne.n	8018742 <_dtoa_r+0x71a>
 8018730:	9a00      	ldr	r2, [sp, #0]
 8018732:	429a      	cmp	r2, r3
 8018734:	d1f7      	bne.n	8018726 <_dtoa_r+0x6fe>
 8018736:	9a07      	ldr	r2, [sp, #28]
 8018738:	9900      	ldr	r1, [sp, #0]
 801873a:	3201      	adds	r2, #1
 801873c:	9207      	str	r2, [sp, #28]
 801873e:	2230      	movs	r2, #48	; 0x30
 8018740:	700a      	strb	r2, [r1, #0]
 8018742:	781a      	ldrb	r2, [r3, #0]
 8018744:	3201      	adds	r2, #1
 8018746:	701a      	strb	r2, [r3, #0]
 8018748:	e78c      	b.n	8018664 <_dtoa_r+0x63c>
 801874a:	4b7f      	ldr	r3, [pc, #508]	; (8018948 <_dtoa_r+0x920>)
 801874c:	2200      	movs	r2, #0
 801874e:	f7e8 fb63 	bl	8000e18 <__aeabi_dmul>
 8018752:	2200      	movs	r2, #0
 8018754:	2300      	movs	r3, #0
 8018756:	4606      	mov	r6, r0
 8018758:	460f      	mov	r7, r1
 801875a:	f7e8 fdc5 	bl	80012e8 <__aeabi_dcmpeq>
 801875e:	2800      	cmp	r0, #0
 8018760:	d09b      	beq.n	801869a <_dtoa_r+0x672>
 8018762:	e7cd      	b.n	8018700 <_dtoa_r+0x6d8>
 8018764:	9a08      	ldr	r2, [sp, #32]
 8018766:	2a00      	cmp	r2, #0
 8018768:	f000 80c4 	beq.w	80188f4 <_dtoa_r+0x8cc>
 801876c:	9a05      	ldr	r2, [sp, #20]
 801876e:	2a01      	cmp	r2, #1
 8018770:	f300 80a8 	bgt.w	80188c4 <_dtoa_r+0x89c>
 8018774:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018776:	2a00      	cmp	r2, #0
 8018778:	f000 80a0 	beq.w	80188bc <_dtoa_r+0x894>
 801877c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018780:	9e06      	ldr	r6, [sp, #24]
 8018782:	4645      	mov	r5, r8
 8018784:	9a04      	ldr	r2, [sp, #16]
 8018786:	2101      	movs	r1, #1
 8018788:	441a      	add	r2, r3
 801878a:	4620      	mov	r0, r4
 801878c:	4498      	add	r8, r3
 801878e:	9204      	str	r2, [sp, #16]
 8018790:	f000 ff6c 	bl	801966c <__i2b>
 8018794:	4607      	mov	r7, r0
 8018796:	2d00      	cmp	r5, #0
 8018798:	dd0b      	ble.n	80187b2 <_dtoa_r+0x78a>
 801879a:	9b04      	ldr	r3, [sp, #16]
 801879c:	2b00      	cmp	r3, #0
 801879e:	dd08      	ble.n	80187b2 <_dtoa_r+0x78a>
 80187a0:	42ab      	cmp	r3, r5
 80187a2:	9a04      	ldr	r2, [sp, #16]
 80187a4:	bfa8      	it	ge
 80187a6:	462b      	movge	r3, r5
 80187a8:	eba8 0803 	sub.w	r8, r8, r3
 80187ac:	1aed      	subs	r5, r5, r3
 80187ae:	1ad3      	subs	r3, r2, r3
 80187b0:	9304      	str	r3, [sp, #16]
 80187b2:	9b06      	ldr	r3, [sp, #24]
 80187b4:	b1fb      	cbz	r3, 80187f6 <_dtoa_r+0x7ce>
 80187b6:	9b08      	ldr	r3, [sp, #32]
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	f000 809f 	beq.w	80188fc <_dtoa_r+0x8d4>
 80187be:	2e00      	cmp	r6, #0
 80187c0:	dd11      	ble.n	80187e6 <_dtoa_r+0x7be>
 80187c2:	4639      	mov	r1, r7
 80187c4:	4632      	mov	r2, r6
 80187c6:	4620      	mov	r0, r4
 80187c8:	f001 f80c 	bl	80197e4 <__pow5mult>
 80187cc:	465a      	mov	r2, fp
 80187ce:	4601      	mov	r1, r0
 80187d0:	4607      	mov	r7, r0
 80187d2:	4620      	mov	r0, r4
 80187d4:	f000 ff60 	bl	8019698 <__multiply>
 80187d8:	4659      	mov	r1, fp
 80187da:	9007      	str	r0, [sp, #28]
 80187dc:	4620      	mov	r0, r4
 80187de:	f000 fe3f 	bl	8019460 <_Bfree>
 80187e2:	9b07      	ldr	r3, [sp, #28]
 80187e4:	469b      	mov	fp, r3
 80187e6:	9b06      	ldr	r3, [sp, #24]
 80187e8:	1b9a      	subs	r2, r3, r6
 80187ea:	d004      	beq.n	80187f6 <_dtoa_r+0x7ce>
 80187ec:	4659      	mov	r1, fp
 80187ee:	4620      	mov	r0, r4
 80187f0:	f000 fff8 	bl	80197e4 <__pow5mult>
 80187f4:	4683      	mov	fp, r0
 80187f6:	2101      	movs	r1, #1
 80187f8:	4620      	mov	r0, r4
 80187fa:	f000 ff37 	bl	801966c <__i2b>
 80187fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018800:	2b00      	cmp	r3, #0
 8018802:	4606      	mov	r6, r0
 8018804:	dd7c      	ble.n	8018900 <_dtoa_r+0x8d8>
 8018806:	461a      	mov	r2, r3
 8018808:	4601      	mov	r1, r0
 801880a:	4620      	mov	r0, r4
 801880c:	f000 ffea 	bl	80197e4 <__pow5mult>
 8018810:	9b05      	ldr	r3, [sp, #20]
 8018812:	2b01      	cmp	r3, #1
 8018814:	4606      	mov	r6, r0
 8018816:	dd76      	ble.n	8018906 <_dtoa_r+0x8de>
 8018818:	2300      	movs	r3, #0
 801881a:	9306      	str	r3, [sp, #24]
 801881c:	6933      	ldr	r3, [r6, #16]
 801881e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8018822:	6918      	ldr	r0, [r3, #16]
 8018824:	f000 fed2 	bl	80195cc <__hi0bits>
 8018828:	f1c0 0020 	rsb	r0, r0, #32
 801882c:	9b04      	ldr	r3, [sp, #16]
 801882e:	4418      	add	r0, r3
 8018830:	f010 001f 	ands.w	r0, r0, #31
 8018834:	f000 8086 	beq.w	8018944 <_dtoa_r+0x91c>
 8018838:	f1c0 0320 	rsb	r3, r0, #32
 801883c:	2b04      	cmp	r3, #4
 801883e:	dd7f      	ble.n	8018940 <_dtoa_r+0x918>
 8018840:	f1c0 001c 	rsb	r0, r0, #28
 8018844:	9b04      	ldr	r3, [sp, #16]
 8018846:	4403      	add	r3, r0
 8018848:	4480      	add	r8, r0
 801884a:	4405      	add	r5, r0
 801884c:	9304      	str	r3, [sp, #16]
 801884e:	f1b8 0f00 	cmp.w	r8, #0
 8018852:	dd05      	ble.n	8018860 <_dtoa_r+0x838>
 8018854:	4659      	mov	r1, fp
 8018856:	4642      	mov	r2, r8
 8018858:	4620      	mov	r0, r4
 801885a:	f001 f81d 	bl	8019898 <__lshift>
 801885e:	4683      	mov	fp, r0
 8018860:	9b04      	ldr	r3, [sp, #16]
 8018862:	2b00      	cmp	r3, #0
 8018864:	dd05      	ble.n	8018872 <_dtoa_r+0x84a>
 8018866:	4631      	mov	r1, r6
 8018868:	461a      	mov	r2, r3
 801886a:	4620      	mov	r0, r4
 801886c:	f001 f814 	bl	8019898 <__lshift>
 8018870:	4606      	mov	r6, r0
 8018872:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018874:	2b00      	cmp	r3, #0
 8018876:	d069      	beq.n	801894c <_dtoa_r+0x924>
 8018878:	4631      	mov	r1, r6
 801887a:	4658      	mov	r0, fp
 801887c:	f001 f878 	bl	8019970 <__mcmp>
 8018880:	2800      	cmp	r0, #0
 8018882:	da63      	bge.n	801894c <_dtoa_r+0x924>
 8018884:	2300      	movs	r3, #0
 8018886:	4659      	mov	r1, fp
 8018888:	220a      	movs	r2, #10
 801888a:	4620      	mov	r0, r4
 801888c:	f000 fe0a 	bl	80194a4 <__multadd>
 8018890:	9b08      	ldr	r3, [sp, #32]
 8018892:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018896:	4683      	mov	fp, r0
 8018898:	2b00      	cmp	r3, #0
 801889a:	f000 818f 	beq.w	8018bbc <_dtoa_r+0xb94>
 801889e:	4639      	mov	r1, r7
 80188a0:	2300      	movs	r3, #0
 80188a2:	220a      	movs	r2, #10
 80188a4:	4620      	mov	r0, r4
 80188a6:	f000 fdfd 	bl	80194a4 <__multadd>
 80188aa:	f1b9 0f00 	cmp.w	r9, #0
 80188ae:	4607      	mov	r7, r0
 80188b0:	f300 808e 	bgt.w	80189d0 <_dtoa_r+0x9a8>
 80188b4:	9b05      	ldr	r3, [sp, #20]
 80188b6:	2b02      	cmp	r3, #2
 80188b8:	dc50      	bgt.n	801895c <_dtoa_r+0x934>
 80188ba:	e089      	b.n	80189d0 <_dtoa_r+0x9a8>
 80188bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80188be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80188c2:	e75d      	b.n	8018780 <_dtoa_r+0x758>
 80188c4:	9b01      	ldr	r3, [sp, #4]
 80188c6:	1e5e      	subs	r6, r3, #1
 80188c8:	9b06      	ldr	r3, [sp, #24]
 80188ca:	42b3      	cmp	r3, r6
 80188cc:	bfbf      	itttt	lt
 80188ce:	9b06      	ldrlt	r3, [sp, #24]
 80188d0:	9606      	strlt	r6, [sp, #24]
 80188d2:	1af2      	sublt	r2, r6, r3
 80188d4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80188d6:	bfb6      	itet	lt
 80188d8:	189b      	addlt	r3, r3, r2
 80188da:	1b9e      	subge	r6, r3, r6
 80188dc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80188de:	9b01      	ldr	r3, [sp, #4]
 80188e0:	bfb8      	it	lt
 80188e2:	2600      	movlt	r6, #0
 80188e4:	2b00      	cmp	r3, #0
 80188e6:	bfb5      	itete	lt
 80188e8:	eba8 0503 	sublt.w	r5, r8, r3
 80188ec:	9b01      	ldrge	r3, [sp, #4]
 80188ee:	2300      	movlt	r3, #0
 80188f0:	4645      	movge	r5, r8
 80188f2:	e747      	b.n	8018784 <_dtoa_r+0x75c>
 80188f4:	9e06      	ldr	r6, [sp, #24]
 80188f6:	9f08      	ldr	r7, [sp, #32]
 80188f8:	4645      	mov	r5, r8
 80188fa:	e74c      	b.n	8018796 <_dtoa_r+0x76e>
 80188fc:	9a06      	ldr	r2, [sp, #24]
 80188fe:	e775      	b.n	80187ec <_dtoa_r+0x7c4>
 8018900:	9b05      	ldr	r3, [sp, #20]
 8018902:	2b01      	cmp	r3, #1
 8018904:	dc18      	bgt.n	8018938 <_dtoa_r+0x910>
 8018906:	9b02      	ldr	r3, [sp, #8]
 8018908:	b9b3      	cbnz	r3, 8018938 <_dtoa_r+0x910>
 801890a:	9b03      	ldr	r3, [sp, #12]
 801890c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018910:	b9a3      	cbnz	r3, 801893c <_dtoa_r+0x914>
 8018912:	9b03      	ldr	r3, [sp, #12]
 8018914:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018918:	0d1b      	lsrs	r3, r3, #20
 801891a:	051b      	lsls	r3, r3, #20
 801891c:	b12b      	cbz	r3, 801892a <_dtoa_r+0x902>
 801891e:	9b04      	ldr	r3, [sp, #16]
 8018920:	3301      	adds	r3, #1
 8018922:	9304      	str	r3, [sp, #16]
 8018924:	f108 0801 	add.w	r8, r8, #1
 8018928:	2301      	movs	r3, #1
 801892a:	9306      	str	r3, [sp, #24]
 801892c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801892e:	2b00      	cmp	r3, #0
 8018930:	f47f af74 	bne.w	801881c <_dtoa_r+0x7f4>
 8018934:	2001      	movs	r0, #1
 8018936:	e779      	b.n	801882c <_dtoa_r+0x804>
 8018938:	2300      	movs	r3, #0
 801893a:	e7f6      	b.n	801892a <_dtoa_r+0x902>
 801893c:	9b02      	ldr	r3, [sp, #8]
 801893e:	e7f4      	b.n	801892a <_dtoa_r+0x902>
 8018940:	d085      	beq.n	801884e <_dtoa_r+0x826>
 8018942:	4618      	mov	r0, r3
 8018944:	301c      	adds	r0, #28
 8018946:	e77d      	b.n	8018844 <_dtoa_r+0x81c>
 8018948:	40240000 	.word	0x40240000
 801894c:	9b01      	ldr	r3, [sp, #4]
 801894e:	2b00      	cmp	r3, #0
 8018950:	dc38      	bgt.n	80189c4 <_dtoa_r+0x99c>
 8018952:	9b05      	ldr	r3, [sp, #20]
 8018954:	2b02      	cmp	r3, #2
 8018956:	dd35      	ble.n	80189c4 <_dtoa_r+0x99c>
 8018958:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801895c:	f1b9 0f00 	cmp.w	r9, #0
 8018960:	d10d      	bne.n	801897e <_dtoa_r+0x956>
 8018962:	4631      	mov	r1, r6
 8018964:	464b      	mov	r3, r9
 8018966:	2205      	movs	r2, #5
 8018968:	4620      	mov	r0, r4
 801896a:	f000 fd9b 	bl	80194a4 <__multadd>
 801896e:	4601      	mov	r1, r0
 8018970:	4606      	mov	r6, r0
 8018972:	4658      	mov	r0, fp
 8018974:	f000 fffc 	bl	8019970 <__mcmp>
 8018978:	2800      	cmp	r0, #0
 801897a:	f73f adbd 	bgt.w	80184f8 <_dtoa_r+0x4d0>
 801897e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018980:	9d00      	ldr	r5, [sp, #0]
 8018982:	ea6f 0a03 	mvn.w	sl, r3
 8018986:	f04f 0800 	mov.w	r8, #0
 801898a:	4631      	mov	r1, r6
 801898c:	4620      	mov	r0, r4
 801898e:	f000 fd67 	bl	8019460 <_Bfree>
 8018992:	2f00      	cmp	r7, #0
 8018994:	f43f aeb4 	beq.w	8018700 <_dtoa_r+0x6d8>
 8018998:	f1b8 0f00 	cmp.w	r8, #0
 801899c:	d005      	beq.n	80189aa <_dtoa_r+0x982>
 801899e:	45b8      	cmp	r8, r7
 80189a0:	d003      	beq.n	80189aa <_dtoa_r+0x982>
 80189a2:	4641      	mov	r1, r8
 80189a4:	4620      	mov	r0, r4
 80189a6:	f000 fd5b 	bl	8019460 <_Bfree>
 80189aa:	4639      	mov	r1, r7
 80189ac:	4620      	mov	r0, r4
 80189ae:	f000 fd57 	bl	8019460 <_Bfree>
 80189b2:	e6a5      	b.n	8018700 <_dtoa_r+0x6d8>
 80189b4:	2600      	movs	r6, #0
 80189b6:	4637      	mov	r7, r6
 80189b8:	e7e1      	b.n	801897e <_dtoa_r+0x956>
 80189ba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80189bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80189c0:	4637      	mov	r7, r6
 80189c2:	e599      	b.n	80184f8 <_dtoa_r+0x4d0>
 80189c4:	9b08      	ldr	r3, [sp, #32]
 80189c6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	f000 80fd 	beq.w	8018bca <_dtoa_r+0xba2>
 80189d0:	2d00      	cmp	r5, #0
 80189d2:	dd05      	ble.n	80189e0 <_dtoa_r+0x9b8>
 80189d4:	4639      	mov	r1, r7
 80189d6:	462a      	mov	r2, r5
 80189d8:	4620      	mov	r0, r4
 80189da:	f000 ff5d 	bl	8019898 <__lshift>
 80189de:	4607      	mov	r7, r0
 80189e0:	9b06      	ldr	r3, [sp, #24]
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	d05c      	beq.n	8018aa0 <_dtoa_r+0xa78>
 80189e6:	6879      	ldr	r1, [r7, #4]
 80189e8:	4620      	mov	r0, r4
 80189ea:	f000 fcf9 	bl	80193e0 <_Balloc>
 80189ee:	4605      	mov	r5, r0
 80189f0:	b928      	cbnz	r0, 80189fe <_dtoa_r+0x9d6>
 80189f2:	4b80      	ldr	r3, [pc, #512]	; (8018bf4 <_dtoa_r+0xbcc>)
 80189f4:	4602      	mov	r2, r0
 80189f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80189fa:	f7ff bb2e 	b.w	801805a <_dtoa_r+0x32>
 80189fe:	693a      	ldr	r2, [r7, #16]
 8018a00:	3202      	adds	r2, #2
 8018a02:	0092      	lsls	r2, r2, #2
 8018a04:	f107 010c 	add.w	r1, r7, #12
 8018a08:	300c      	adds	r0, #12
 8018a0a:	f7fc ffdf 	bl	80159cc <memcpy>
 8018a0e:	2201      	movs	r2, #1
 8018a10:	4629      	mov	r1, r5
 8018a12:	4620      	mov	r0, r4
 8018a14:	f000 ff40 	bl	8019898 <__lshift>
 8018a18:	9b00      	ldr	r3, [sp, #0]
 8018a1a:	3301      	adds	r3, #1
 8018a1c:	9301      	str	r3, [sp, #4]
 8018a1e:	9b00      	ldr	r3, [sp, #0]
 8018a20:	444b      	add	r3, r9
 8018a22:	9307      	str	r3, [sp, #28]
 8018a24:	9b02      	ldr	r3, [sp, #8]
 8018a26:	f003 0301 	and.w	r3, r3, #1
 8018a2a:	46b8      	mov	r8, r7
 8018a2c:	9306      	str	r3, [sp, #24]
 8018a2e:	4607      	mov	r7, r0
 8018a30:	9b01      	ldr	r3, [sp, #4]
 8018a32:	4631      	mov	r1, r6
 8018a34:	3b01      	subs	r3, #1
 8018a36:	4658      	mov	r0, fp
 8018a38:	9302      	str	r3, [sp, #8]
 8018a3a:	f7ff fa69 	bl	8017f10 <quorem>
 8018a3e:	4603      	mov	r3, r0
 8018a40:	3330      	adds	r3, #48	; 0x30
 8018a42:	9004      	str	r0, [sp, #16]
 8018a44:	4641      	mov	r1, r8
 8018a46:	4658      	mov	r0, fp
 8018a48:	9308      	str	r3, [sp, #32]
 8018a4a:	f000 ff91 	bl	8019970 <__mcmp>
 8018a4e:	463a      	mov	r2, r7
 8018a50:	4681      	mov	r9, r0
 8018a52:	4631      	mov	r1, r6
 8018a54:	4620      	mov	r0, r4
 8018a56:	f000 ffa7 	bl	80199a8 <__mdiff>
 8018a5a:	68c2      	ldr	r2, [r0, #12]
 8018a5c:	9b08      	ldr	r3, [sp, #32]
 8018a5e:	4605      	mov	r5, r0
 8018a60:	bb02      	cbnz	r2, 8018aa4 <_dtoa_r+0xa7c>
 8018a62:	4601      	mov	r1, r0
 8018a64:	4658      	mov	r0, fp
 8018a66:	f000 ff83 	bl	8019970 <__mcmp>
 8018a6a:	9b08      	ldr	r3, [sp, #32]
 8018a6c:	4602      	mov	r2, r0
 8018a6e:	4629      	mov	r1, r5
 8018a70:	4620      	mov	r0, r4
 8018a72:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8018a76:	f000 fcf3 	bl	8019460 <_Bfree>
 8018a7a:	9b05      	ldr	r3, [sp, #20]
 8018a7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018a7e:	9d01      	ldr	r5, [sp, #4]
 8018a80:	ea43 0102 	orr.w	r1, r3, r2
 8018a84:	9b06      	ldr	r3, [sp, #24]
 8018a86:	430b      	orrs	r3, r1
 8018a88:	9b08      	ldr	r3, [sp, #32]
 8018a8a:	d10d      	bne.n	8018aa8 <_dtoa_r+0xa80>
 8018a8c:	2b39      	cmp	r3, #57	; 0x39
 8018a8e:	d029      	beq.n	8018ae4 <_dtoa_r+0xabc>
 8018a90:	f1b9 0f00 	cmp.w	r9, #0
 8018a94:	dd01      	ble.n	8018a9a <_dtoa_r+0xa72>
 8018a96:	9b04      	ldr	r3, [sp, #16]
 8018a98:	3331      	adds	r3, #49	; 0x31
 8018a9a:	9a02      	ldr	r2, [sp, #8]
 8018a9c:	7013      	strb	r3, [r2, #0]
 8018a9e:	e774      	b.n	801898a <_dtoa_r+0x962>
 8018aa0:	4638      	mov	r0, r7
 8018aa2:	e7b9      	b.n	8018a18 <_dtoa_r+0x9f0>
 8018aa4:	2201      	movs	r2, #1
 8018aa6:	e7e2      	b.n	8018a6e <_dtoa_r+0xa46>
 8018aa8:	f1b9 0f00 	cmp.w	r9, #0
 8018aac:	db06      	blt.n	8018abc <_dtoa_r+0xa94>
 8018aae:	9905      	ldr	r1, [sp, #20]
 8018ab0:	ea41 0909 	orr.w	r9, r1, r9
 8018ab4:	9906      	ldr	r1, [sp, #24]
 8018ab6:	ea59 0101 	orrs.w	r1, r9, r1
 8018aba:	d120      	bne.n	8018afe <_dtoa_r+0xad6>
 8018abc:	2a00      	cmp	r2, #0
 8018abe:	ddec      	ble.n	8018a9a <_dtoa_r+0xa72>
 8018ac0:	4659      	mov	r1, fp
 8018ac2:	2201      	movs	r2, #1
 8018ac4:	4620      	mov	r0, r4
 8018ac6:	9301      	str	r3, [sp, #4]
 8018ac8:	f000 fee6 	bl	8019898 <__lshift>
 8018acc:	4631      	mov	r1, r6
 8018ace:	4683      	mov	fp, r0
 8018ad0:	f000 ff4e 	bl	8019970 <__mcmp>
 8018ad4:	2800      	cmp	r0, #0
 8018ad6:	9b01      	ldr	r3, [sp, #4]
 8018ad8:	dc02      	bgt.n	8018ae0 <_dtoa_r+0xab8>
 8018ada:	d1de      	bne.n	8018a9a <_dtoa_r+0xa72>
 8018adc:	07da      	lsls	r2, r3, #31
 8018ade:	d5dc      	bpl.n	8018a9a <_dtoa_r+0xa72>
 8018ae0:	2b39      	cmp	r3, #57	; 0x39
 8018ae2:	d1d8      	bne.n	8018a96 <_dtoa_r+0xa6e>
 8018ae4:	9a02      	ldr	r2, [sp, #8]
 8018ae6:	2339      	movs	r3, #57	; 0x39
 8018ae8:	7013      	strb	r3, [r2, #0]
 8018aea:	462b      	mov	r3, r5
 8018aec:	461d      	mov	r5, r3
 8018aee:	3b01      	subs	r3, #1
 8018af0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8018af4:	2a39      	cmp	r2, #57	; 0x39
 8018af6:	d050      	beq.n	8018b9a <_dtoa_r+0xb72>
 8018af8:	3201      	adds	r2, #1
 8018afa:	701a      	strb	r2, [r3, #0]
 8018afc:	e745      	b.n	801898a <_dtoa_r+0x962>
 8018afe:	2a00      	cmp	r2, #0
 8018b00:	dd03      	ble.n	8018b0a <_dtoa_r+0xae2>
 8018b02:	2b39      	cmp	r3, #57	; 0x39
 8018b04:	d0ee      	beq.n	8018ae4 <_dtoa_r+0xabc>
 8018b06:	3301      	adds	r3, #1
 8018b08:	e7c7      	b.n	8018a9a <_dtoa_r+0xa72>
 8018b0a:	9a01      	ldr	r2, [sp, #4]
 8018b0c:	9907      	ldr	r1, [sp, #28]
 8018b0e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8018b12:	428a      	cmp	r2, r1
 8018b14:	d02a      	beq.n	8018b6c <_dtoa_r+0xb44>
 8018b16:	4659      	mov	r1, fp
 8018b18:	2300      	movs	r3, #0
 8018b1a:	220a      	movs	r2, #10
 8018b1c:	4620      	mov	r0, r4
 8018b1e:	f000 fcc1 	bl	80194a4 <__multadd>
 8018b22:	45b8      	cmp	r8, r7
 8018b24:	4683      	mov	fp, r0
 8018b26:	f04f 0300 	mov.w	r3, #0
 8018b2a:	f04f 020a 	mov.w	r2, #10
 8018b2e:	4641      	mov	r1, r8
 8018b30:	4620      	mov	r0, r4
 8018b32:	d107      	bne.n	8018b44 <_dtoa_r+0xb1c>
 8018b34:	f000 fcb6 	bl	80194a4 <__multadd>
 8018b38:	4680      	mov	r8, r0
 8018b3a:	4607      	mov	r7, r0
 8018b3c:	9b01      	ldr	r3, [sp, #4]
 8018b3e:	3301      	adds	r3, #1
 8018b40:	9301      	str	r3, [sp, #4]
 8018b42:	e775      	b.n	8018a30 <_dtoa_r+0xa08>
 8018b44:	f000 fcae 	bl	80194a4 <__multadd>
 8018b48:	4639      	mov	r1, r7
 8018b4a:	4680      	mov	r8, r0
 8018b4c:	2300      	movs	r3, #0
 8018b4e:	220a      	movs	r2, #10
 8018b50:	4620      	mov	r0, r4
 8018b52:	f000 fca7 	bl	80194a4 <__multadd>
 8018b56:	4607      	mov	r7, r0
 8018b58:	e7f0      	b.n	8018b3c <_dtoa_r+0xb14>
 8018b5a:	f1b9 0f00 	cmp.w	r9, #0
 8018b5e:	9a00      	ldr	r2, [sp, #0]
 8018b60:	bfcc      	ite	gt
 8018b62:	464d      	movgt	r5, r9
 8018b64:	2501      	movle	r5, #1
 8018b66:	4415      	add	r5, r2
 8018b68:	f04f 0800 	mov.w	r8, #0
 8018b6c:	4659      	mov	r1, fp
 8018b6e:	2201      	movs	r2, #1
 8018b70:	4620      	mov	r0, r4
 8018b72:	9301      	str	r3, [sp, #4]
 8018b74:	f000 fe90 	bl	8019898 <__lshift>
 8018b78:	4631      	mov	r1, r6
 8018b7a:	4683      	mov	fp, r0
 8018b7c:	f000 fef8 	bl	8019970 <__mcmp>
 8018b80:	2800      	cmp	r0, #0
 8018b82:	dcb2      	bgt.n	8018aea <_dtoa_r+0xac2>
 8018b84:	d102      	bne.n	8018b8c <_dtoa_r+0xb64>
 8018b86:	9b01      	ldr	r3, [sp, #4]
 8018b88:	07db      	lsls	r3, r3, #31
 8018b8a:	d4ae      	bmi.n	8018aea <_dtoa_r+0xac2>
 8018b8c:	462b      	mov	r3, r5
 8018b8e:	461d      	mov	r5, r3
 8018b90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018b94:	2a30      	cmp	r2, #48	; 0x30
 8018b96:	d0fa      	beq.n	8018b8e <_dtoa_r+0xb66>
 8018b98:	e6f7      	b.n	801898a <_dtoa_r+0x962>
 8018b9a:	9a00      	ldr	r2, [sp, #0]
 8018b9c:	429a      	cmp	r2, r3
 8018b9e:	d1a5      	bne.n	8018aec <_dtoa_r+0xac4>
 8018ba0:	f10a 0a01 	add.w	sl, sl, #1
 8018ba4:	2331      	movs	r3, #49	; 0x31
 8018ba6:	e779      	b.n	8018a9c <_dtoa_r+0xa74>
 8018ba8:	4b13      	ldr	r3, [pc, #76]	; (8018bf8 <_dtoa_r+0xbd0>)
 8018baa:	f7ff baaf 	b.w	801810c <_dtoa_r+0xe4>
 8018bae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018bb0:	2b00      	cmp	r3, #0
 8018bb2:	f47f aa86 	bne.w	80180c2 <_dtoa_r+0x9a>
 8018bb6:	4b11      	ldr	r3, [pc, #68]	; (8018bfc <_dtoa_r+0xbd4>)
 8018bb8:	f7ff baa8 	b.w	801810c <_dtoa_r+0xe4>
 8018bbc:	f1b9 0f00 	cmp.w	r9, #0
 8018bc0:	dc03      	bgt.n	8018bca <_dtoa_r+0xba2>
 8018bc2:	9b05      	ldr	r3, [sp, #20]
 8018bc4:	2b02      	cmp	r3, #2
 8018bc6:	f73f aec9 	bgt.w	801895c <_dtoa_r+0x934>
 8018bca:	9d00      	ldr	r5, [sp, #0]
 8018bcc:	4631      	mov	r1, r6
 8018bce:	4658      	mov	r0, fp
 8018bd0:	f7ff f99e 	bl	8017f10 <quorem>
 8018bd4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8018bd8:	f805 3b01 	strb.w	r3, [r5], #1
 8018bdc:	9a00      	ldr	r2, [sp, #0]
 8018bde:	1aaa      	subs	r2, r5, r2
 8018be0:	4591      	cmp	r9, r2
 8018be2:	ddba      	ble.n	8018b5a <_dtoa_r+0xb32>
 8018be4:	4659      	mov	r1, fp
 8018be6:	2300      	movs	r3, #0
 8018be8:	220a      	movs	r2, #10
 8018bea:	4620      	mov	r0, r4
 8018bec:	f000 fc5a 	bl	80194a4 <__multadd>
 8018bf0:	4683      	mov	fp, r0
 8018bf2:	e7eb      	b.n	8018bcc <_dtoa_r+0xba4>
 8018bf4:	0801c3c2 	.word	0x0801c3c2
 8018bf8:	0801c684 	.word	0x0801c684
 8018bfc:	0801c356 	.word	0x0801c356

08018c00 <fiprintf>:
 8018c00:	b40e      	push	{r1, r2, r3}
 8018c02:	b503      	push	{r0, r1, lr}
 8018c04:	4601      	mov	r1, r0
 8018c06:	ab03      	add	r3, sp, #12
 8018c08:	4805      	ldr	r0, [pc, #20]	; (8018c20 <fiprintf+0x20>)
 8018c0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8018c0e:	6800      	ldr	r0, [r0, #0]
 8018c10:	9301      	str	r3, [sp, #4]
 8018c12:	f001 fa35 	bl	801a080 <_vfiprintf_r>
 8018c16:	b002      	add	sp, #8
 8018c18:	f85d eb04 	ldr.w	lr, [sp], #4
 8018c1c:	b003      	add	sp, #12
 8018c1e:	4770      	bx	lr
 8018c20:	20001494 	.word	0x20001494

08018c24 <rshift>:
 8018c24:	6903      	ldr	r3, [r0, #16]
 8018c26:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8018c2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018c2e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8018c32:	f100 0414 	add.w	r4, r0, #20
 8018c36:	dd45      	ble.n	8018cc4 <rshift+0xa0>
 8018c38:	f011 011f 	ands.w	r1, r1, #31
 8018c3c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018c40:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018c44:	d10c      	bne.n	8018c60 <rshift+0x3c>
 8018c46:	f100 0710 	add.w	r7, r0, #16
 8018c4a:	4629      	mov	r1, r5
 8018c4c:	42b1      	cmp	r1, r6
 8018c4e:	d334      	bcc.n	8018cba <rshift+0x96>
 8018c50:	1a9b      	subs	r3, r3, r2
 8018c52:	009b      	lsls	r3, r3, #2
 8018c54:	1eea      	subs	r2, r5, #3
 8018c56:	4296      	cmp	r6, r2
 8018c58:	bf38      	it	cc
 8018c5a:	2300      	movcc	r3, #0
 8018c5c:	4423      	add	r3, r4
 8018c5e:	e015      	b.n	8018c8c <rshift+0x68>
 8018c60:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018c64:	f1c1 0820 	rsb	r8, r1, #32
 8018c68:	40cf      	lsrs	r7, r1
 8018c6a:	f105 0e04 	add.w	lr, r5, #4
 8018c6e:	46a1      	mov	r9, r4
 8018c70:	4576      	cmp	r6, lr
 8018c72:	46f4      	mov	ip, lr
 8018c74:	d815      	bhi.n	8018ca2 <rshift+0x7e>
 8018c76:	1a9b      	subs	r3, r3, r2
 8018c78:	009a      	lsls	r2, r3, #2
 8018c7a:	3a04      	subs	r2, #4
 8018c7c:	3501      	adds	r5, #1
 8018c7e:	42ae      	cmp	r6, r5
 8018c80:	bf38      	it	cc
 8018c82:	2200      	movcc	r2, #0
 8018c84:	18a3      	adds	r3, r4, r2
 8018c86:	50a7      	str	r7, [r4, r2]
 8018c88:	b107      	cbz	r7, 8018c8c <rshift+0x68>
 8018c8a:	3304      	adds	r3, #4
 8018c8c:	1b1a      	subs	r2, r3, r4
 8018c8e:	42a3      	cmp	r3, r4
 8018c90:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018c94:	bf08      	it	eq
 8018c96:	2300      	moveq	r3, #0
 8018c98:	6102      	str	r2, [r0, #16]
 8018c9a:	bf08      	it	eq
 8018c9c:	6143      	streq	r3, [r0, #20]
 8018c9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018ca2:	f8dc c000 	ldr.w	ip, [ip]
 8018ca6:	fa0c fc08 	lsl.w	ip, ip, r8
 8018caa:	ea4c 0707 	orr.w	r7, ip, r7
 8018cae:	f849 7b04 	str.w	r7, [r9], #4
 8018cb2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018cb6:	40cf      	lsrs	r7, r1
 8018cb8:	e7da      	b.n	8018c70 <rshift+0x4c>
 8018cba:	f851 cb04 	ldr.w	ip, [r1], #4
 8018cbe:	f847 cf04 	str.w	ip, [r7, #4]!
 8018cc2:	e7c3      	b.n	8018c4c <rshift+0x28>
 8018cc4:	4623      	mov	r3, r4
 8018cc6:	e7e1      	b.n	8018c8c <rshift+0x68>

08018cc8 <__hexdig_fun>:
 8018cc8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018ccc:	2b09      	cmp	r3, #9
 8018cce:	d802      	bhi.n	8018cd6 <__hexdig_fun+0xe>
 8018cd0:	3820      	subs	r0, #32
 8018cd2:	b2c0      	uxtb	r0, r0
 8018cd4:	4770      	bx	lr
 8018cd6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018cda:	2b05      	cmp	r3, #5
 8018cdc:	d801      	bhi.n	8018ce2 <__hexdig_fun+0x1a>
 8018cde:	3847      	subs	r0, #71	; 0x47
 8018ce0:	e7f7      	b.n	8018cd2 <__hexdig_fun+0xa>
 8018ce2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018ce6:	2b05      	cmp	r3, #5
 8018ce8:	d801      	bhi.n	8018cee <__hexdig_fun+0x26>
 8018cea:	3827      	subs	r0, #39	; 0x27
 8018cec:	e7f1      	b.n	8018cd2 <__hexdig_fun+0xa>
 8018cee:	2000      	movs	r0, #0
 8018cf0:	4770      	bx	lr
	...

08018cf4 <__gethex>:
 8018cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cf8:	ed2d 8b02 	vpush	{d8}
 8018cfc:	b089      	sub	sp, #36	; 0x24
 8018cfe:	ee08 0a10 	vmov	s16, r0
 8018d02:	9304      	str	r3, [sp, #16]
 8018d04:	4bbc      	ldr	r3, [pc, #752]	; (8018ff8 <__gethex+0x304>)
 8018d06:	681b      	ldr	r3, [r3, #0]
 8018d08:	9301      	str	r3, [sp, #4]
 8018d0a:	4618      	mov	r0, r3
 8018d0c:	468b      	mov	fp, r1
 8018d0e:	4690      	mov	r8, r2
 8018d10:	f7e7 fe68 	bl	80009e4 <strlen>
 8018d14:	9b01      	ldr	r3, [sp, #4]
 8018d16:	f8db 2000 	ldr.w	r2, [fp]
 8018d1a:	4403      	add	r3, r0
 8018d1c:	4682      	mov	sl, r0
 8018d1e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018d22:	9305      	str	r3, [sp, #20]
 8018d24:	1c93      	adds	r3, r2, #2
 8018d26:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8018d2a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8018d2e:	32fe      	adds	r2, #254	; 0xfe
 8018d30:	18d1      	adds	r1, r2, r3
 8018d32:	461f      	mov	r7, r3
 8018d34:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018d38:	9100      	str	r1, [sp, #0]
 8018d3a:	2830      	cmp	r0, #48	; 0x30
 8018d3c:	d0f8      	beq.n	8018d30 <__gethex+0x3c>
 8018d3e:	f7ff ffc3 	bl	8018cc8 <__hexdig_fun>
 8018d42:	4604      	mov	r4, r0
 8018d44:	2800      	cmp	r0, #0
 8018d46:	d13a      	bne.n	8018dbe <__gethex+0xca>
 8018d48:	9901      	ldr	r1, [sp, #4]
 8018d4a:	4652      	mov	r2, sl
 8018d4c:	4638      	mov	r0, r7
 8018d4e:	f7fd fe39 	bl	80169c4 <strncmp>
 8018d52:	4605      	mov	r5, r0
 8018d54:	2800      	cmp	r0, #0
 8018d56:	d168      	bne.n	8018e2a <__gethex+0x136>
 8018d58:	f817 000a 	ldrb.w	r0, [r7, sl]
 8018d5c:	eb07 060a 	add.w	r6, r7, sl
 8018d60:	f7ff ffb2 	bl	8018cc8 <__hexdig_fun>
 8018d64:	2800      	cmp	r0, #0
 8018d66:	d062      	beq.n	8018e2e <__gethex+0x13a>
 8018d68:	4633      	mov	r3, r6
 8018d6a:	7818      	ldrb	r0, [r3, #0]
 8018d6c:	2830      	cmp	r0, #48	; 0x30
 8018d6e:	461f      	mov	r7, r3
 8018d70:	f103 0301 	add.w	r3, r3, #1
 8018d74:	d0f9      	beq.n	8018d6a <__gethex+0x76>
 8018d76:	f7ff ffa7 	bl	8018cc8 <__hexdig_fun>
 8018d7a:	2301      	movs	r3, #1
 8018d7c:	fab0 f480 	clz	r4, r0
 8018d80:	0964      	lsrs	r4, r4, #5
 8018d82:	4635      	mov	r5, r6
 8018d84:	9300      	str	r3, [sp, #0]
 8018d86:	463a      	mov	r2, r7
 8018d88:	4616      	mov	r6, r2
 8018d8a:	3201      	adds	r2, #1
 8018d8c:	7830      	ldrb	r0, [r6, #0]
 8018d8e:	f7ff ff9b 	bl	8018cc8 <__hexdig_fun>
 8018d92:	2800      	cmp	r0, #0
 8018d94:	d1f8      	bne.n	8018d88 <__gethex+0x94>
 8018d96:	9901      	ldr	r1, [sp, #4]
 8018d98:	4652      	mov	r2, sl
 8018d9a:	4630      	mov	r0, r6
 8018d9c:	f7fd fe12 	bl	80169c4 <strncmp>
 8018da0:	b980      	cbnz	r0, 8018dc4 <__gethex+0xd0>
 8018da2:	b94d      	cbnz	r5, 8018db8 <__gethex+0xc4>
 8018da4:	eb06 050a 	add.w	r5, r6, sl
 8018da8:	462a      	mov	r2, r5
 8018daa:	4616      	mov	r6, r2
 8018dac:	3201      	adds	r2, #1
 8018dae:	7830      	ldrb	r0, [r6, #0]
 8018db0:	f7ff ff8a 	bl	8018cc8 <__hexdig_fun>
 8018db4:	2800      	cmp	r0, #0
 8018db6:	d1f8      	bne.n	8018daa <__gethex+0xb6>
 8018db8:	1bad      	subs	r5, r5, r6
 8018dba:	00ad      	lsls	r5, r5, #2
 8018dbc:	e004      	b.n	8018dc8 <__gethex+0xd4>
 8018dbe:	2400      	movs	r4, #0
 8018dc0:	4625      	mov	r5, r4
 8018dc2:	e7e0      	b.n	8018d86 <__gethex+0x92>
 8018dc4:	2d00      	cmp	r5, #0
 8018dc6:	d1f7      	bne.n	8018db8 <__gethex+0xc4>
 8018dc8:	7833      	ldrb	r3, [r6, #0]
 8018dca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018dce:	2b50      	cmp	r3, #80	; 0x50
 8018dd0:	d13b      	bne.n	8018e4a <__gethex+0x156>
 8018dd2:	7873      	ldrb	r3, [r6, #1]
 8018dd4:	2b2b      	cmp	r3, #43	; 0x2b
 8018dd6:	d02c      	beq.n	8018e32 <__gethex+0x13e>
 8018dd8:	2b2d      	cmp	r3, #45	; 0x2d
 8018dda:	d02e      	beq.n	8018e3a <__gethex+0x146>
 8018ddc:	1c71      	adds	r1, r6, #1
 8018dde:	f04f 0900 	mov.w	r9, #0
 8018de2:	7808      	ldrb	r0, [r1, #0]
 8018de4:	f7ff ff70 	bl	8018cc8 <__hexdig_fun>
 8018de8:	1e43      	subs	r3, r0, #1
 8018dea:	b2db      	uxtb	r3, r3
 8018dec:	2b18      	cmp	r3, #24
 8018dee:	d82c      	bhi.n	8018e4a <__gethex+0x156>
 8018df0:	f1a0 0210 	sub.w	r2, r0, #16
 8018df4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018df8:	f7ff ff66 	bl	8018cc8 <__hexdig_fun>
 8018dfc:	1e43      	subs	r3, r0, #1
 8018dfe:	b2db      	uxtb	r3, r3
 8018e00:	2b18      	cmp	r3, #24
 8018e02:	d91d      	bls.n	8018e40 <__gethex+0x14c>
 8018e04:	f1b9 0f00 	cmp.w	r9, #0
 8018e08:	d000      	beq.n	8018e0c <__gethex+0x118>
 8018e0a:	4252      	negs	r2, r2
 8018e0c:	4415      	add	r5, r2
 8018e0e:	f8cb 1000 	str.w	r1, [fp]
 8018e12:	b1e4      	cbz	r4, 8018e4e <__gethex+0x15a>
 8018e14:	9b00      	ldr	r3, [sp, #0]
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	bf14      	ite	ne
 8018e1a:	2700      	movne	r7, #0
 8018e1c:	2706      	moveq	r7, #6
 8018e1e:	4638      	mov	r0, r7
 8018e20:	b009      	add	sp, #36	; 0x24
 8018e22:	ecbd 8b02 	vpop	{d8}
 8018e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e2a:	463e      	mov	r6, r7
 8018e2c:	4625      	mov	r5, r4
 8018e2e:	2401      	movs	r4, #1
 8018e30:	e7ca      	b.n	8018dc8 <__gethex+0xd4>
 8018e32:	f04f 0900 	mov.w	r9, #0
 8018e36:	1cb1      	adds	r1, r6, #2
 8018e38:	e7d3      	b.n	8018de2 <__gethex+0xee>
 8018e3a:	f04f 0901 	mov.w	r9, #1
 8018e3e:	e7fa      	b.n	8018e36 <__gethex+0x142>
 8018e40:	230a      	movs	r3, #10
 8018e42:	fb03 0202 	mla	r2, r3, r2, r0
 8018e46:	3a10      	subs	r2, #16
 8018e48:	e7d4      	b.n	8018df4 <__gethex+0x100>
 8018e4a:	4631      	mov	r1, r6
 8018e4c:	e7df      	b.n	8018e0e <__gethex+0x11a>
 8018e4e:	1bf3      	subs	r3, r6, r7
 8018e50:	3b01      	subs	r3, #1
 8018e52:	4621      	mov	r1, r4
 8018e54:	2b07      	cmp	r3, #7
 8018e56:	dc0b      	bgt.n	8018e70 <__gethex+0x17c>
 8018e58:	ee18 0a10 	vmov	r0, s16
 8018e5c:	f000 fac0 	bl	80193e0 <_Balloc>
 8018e60:	4604      	mov	r4, r0
 8018e62:	b940      	cbnz	r0, 8018e76 <__gethex+0x182>
 8018e64:	4b65      	ldr	r3, [pc, #404]	; (8018ffc <__gethex+0x308>)
 8018e66:	4602      	mov	r2, r0
 8018e68:	21de      	movs	r1, #222	; 0xde
 8018e6a:	4865      	ldr	r0, [pc, #404]	; (8019000 <__gethex+0x30c>)
 8018e6c:	f7ff f81e 	bl	8017eac <__assert_func>
 8018e70:	3101      	adds	r1, #1
 8018e72:	105b      	asrs	r3, r3, #1
 8018e74:	e7ee      	b.n	8018e54 <__gethex+0x160>
 8018e76:	f100 0914 	add.w	r9, r0, #20
 8018e7a:	f04f 0b00 	mov.w	fp, #0
 8018e7e:	f1ca 0301 	rsb	r3, sl, #1
 8018e82:	f8cd 9008 	str.w	r9, [sp, #8]
 8018e86:	f8cd b000 	str.w	fp, [sp]
 8018e8a:	9306      	str	r3, [sp, #24]
 8018e8c:	42b7      	cmp	r7, r6
 8018e8e:	d340      	bcc.n	8018f12 <__gethex+0x21e>
 8018e90:	9802      	ldr	r0, [sp, #8]
 8018e92:	9b00      	ldr	r3, [sp, #0]
 8018e94:	f840 3b04 	str.w	r3, [r0], #4
 8018e98:	eba0 0009 	sub.w	r0, r0, r9
 8018e9c:	1080      	asrs	r0, r0, #2
 8018e9e:	0146      	lsls	r6, r0, #5
 8018ea0:	6120      	str	r0, [r4, #16]
 8018ea2:	4618      	mov	r0, r3
 8018ea4:	f000 fb92 	bl	80195cc <__hi0bits>
 8018ea8:	1a30      	subs	r0, r6, r0
 8018eaa:	f8d8 6000 	ldr.w	r6, [r8]
 8018eae:	42b0      	cmp	r0, r6
 8018eb0:	dd63      	ble.n	8018f7a <__gethex+0x286>
 8018eb2:	1b87      	subs	r7, r0, r6
 8018eb4:	4639      	mov	r1, r7
 8018eb6:	4620      	mov	r0, r4
 8018eb8:	f000 ff2c 	bl	8019d14 <__any_on>
 8018ebc:	4682      	mov	sl, r0
 8018ebe:	b1a8      	cbz	r0, 8018eec <__gethex+0x1f8>
 8018ec0:	1e7b      	subs	r3, r7, #1
 8018ec2:	1159      	asrs	r1, r3, #5
 8018ec4:	f003 021f 	and.w	r2, r3, #31
 8018ec8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018ecc:	f04f 0a01 	mov.w	sl, #1
 8018ed0:	fa0a f202 	lsl.w	r2, sl, r2
 8018ed4:	420a      	tst	r2, r1
 8018ed6:	d009      	beq.n	8018eec <__gethex+0x1f8>
 8018ed8:	4553      	cmp	r3, sl
 8018eda:	dd05      	ble.n	8018ee8 <__gethex+0x1f4>
 8018edc:	1eb9      	subs	r1, r7, #2
 8018ede:	4620      	mov	r0, r4
 8018ee0:	f000 ff18 	bl	8019d14 <__any_on>
 8018ee4:	2800      	cmp	r0, #0
 8018ee6:	d145      	bne.n	8018f74 <__gethex+0x280>
 8018ee8:	f04f 0a02 	mov.w	sl, #2
 8018eec:	4639      	mov	r1, r7
 8018eee:	4620      	mov	r0, r4
 8018ef0:	f7ff fe98 	bl	8018c24 <rshift>
 8018ef4:	443d      	add	r5, r7
 8018ef6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018efa:	42ab      	cmp	r3, r5
 8018efc:	da4c      	bge.n	8018f98 <__gethex+0x2a4>
 8018efe:	ee18 0a10 	vmov	r0, s16
 8018f02:	4621      	mov	r1, r4
 8018f04:	f000 faac 	bl	8019460 <_Bfree>
 8018f08:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018f0a:	2300      	movs	r3, #0
 8018f0c:	6013      	str	r3, [r2, #0]
 8018f0e:	27a3      	movs	r7, #163	; 0xa3
 8018f10:	e785      	b.n	8018e1e <__gethex+0x12a>
 8018f12:	1e73      	subs	r3, r6, #1
 8018f14:	9a05      	ldr	r2, [sp, #20]
 8018f16:	9303      	str	r3, [sp, #12]
 8018f18:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018f1c:	4293      	cmp	r3, r2
 8018f1e:	d019      	beq.n	8018f54 <__gethex+0x260>
 8018f20:	f1bb 0f20 	cmp.w	fp, #32
 8018f24:	d107      	bne.n	8018f36 <__gethex+0x242>
 8018f26:	9b02      	ldr	r3, [sp, #8]
 8018f28:	9a00      	ldr	r2, [sp, #0]
 8018f2a:	f843 2b04 	str.w	r2, [r3], #4
 8018f2e:	9302      	str	r3, [sp, #8]
 8018f30:	2300      	movs	r3, #0
 8018f32:	9300      	str	r3, [sp, #0]
 8018f34:	469b      	mov	fp, r3
 8018f36:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018f3a:	f7ff fec5 	bl	8018cc8 <__hexdig_fun>
 8018f3e:	9b00      	ldr	r3, [sp, #0]
 8018f40:	f000 000f 	and.w	r0, r0, #15
 8018f44:	fa00 f00b 	lsl.w	r0, r0, fp
 8018f48:	4303      	orrs	r3, r0
 8018f4a:	9300      	str	r3, [sp, #0]
 8018f4c:	f10b 0b04 	add.w	fp, fp, #4
 8018f50:	9b03      	ldr	r3, [sp, #12]
 8018f52:	e00d      	b.n	8018f70 <__gethex+0x27c>
 8018f54:	9b03      	ldr	r3, [sp, #12]
 8018f56:	9a06      	ldr	r2, [sp, #24]
 8018f58:	4413      	add	r3, r2
 8018f5a:	42bb      	cmp	r3, r7
 8018f5c:	d3e0      	bcc.n	8018f20 <__gethex+0x22c>
 8018f5e:	4618      	mov	r0, r3
 8018f60:	9901      	ldr	r1, [sp, #4]
 8018f62:	9307      	str	r3, [sp, #28]
 8018f64:	4652      	mov	r2, sl
 8018f66:	f7fd fd2d 	bl	80169c4 <strncmp>
 8018f6a:	9b07      	ldr	r3, [sp, #28]
 8018f6c:	2800      	cmp	r0, #0
 8018f6e:	d1d7      	bne.n	8018f20 <__gethex+0x22c>
 8018f70:	461e      	mov	r6, r3
 8018f72:	e78b      	b.n	8018e8c <__gethex+0x198>
 8018f74:	f04f 0a03 	mov.w	sl, #3
 8018f78:	e7b8      	b.n	8018eec <__gethex+0x1f8>
 8018f7a:	da0a      	bge.n	8018f92 <__gethex+0x29e>
 8018f7c:	1a37      	subs	r7, r6, r0
 8018f7e:	4621      	mov	r1, r4
 8018f80:	ee18 0a10 	vmov	r0, s16
 8018f84:	463a      	mov	r2, r7
 8018f86:	f000 fc87 	bl	8019898 <__lshift>
 8018f8a:	1bed      	subs	r5, r5, r7
 8018f8c:	4604      	mov	r4, r0
 8018f8e:	f100 0914 	add.w	r9, r0, #20
 8018f92:	f04f 0a00 	mov.w	sl, #0
 8018f96:	e7ae      	b.n	8018ef6 <__gethex+0x202>
 8018f98:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018f9c:	42a8      	cmp	r0, r5
 8018f9e:	dd72      	ble.n	8019086 <__gethex+0x392>
 8018fa0:	1b45      	subs	r5, r0, r5
 8018fa2:	42ae      	cmp	r6, r5
 8018fa4:	dc36      	bgt.n	8019014 <__gethex+0x320>
 8018fa6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018faa:	2b02      	cmp	r3, #2
 8018fac:	d02a      	beq.n	8019004 <__gethex+0x310>
 8018fae:	2b03      	cmp	r3, #3
 8018fb0:	d02c      	beq.n	801900c <__gethex+0x318>
 8018fb2:	2b01      	cmp	r3, #1
 8018fb4:	d115      	bne.n	8018fe2 <__gethex+0x2ee>
 8018fb6:	42ae      	cmp	r6, r5
 8018fb8:	d113      	bne.n	8018fe2 <__gethex+0x2ee>
 8018fba:	2e01      	cmp	r6, #1
 8018fbc:	d10b      	bne.n	8018fd6 <__gethex+0x2e2>
 8018fbe:	9a04      	ldr	r2, [sp, #16]
 8018fc0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018fc4:	6013      	str	r3, [r2, #0]
 8018fc6:	2301      	movs	r3, #1
 8018fc8:	6123      	str	r3, [r4, #16]
 8018fca:	f8c9 3000 	str.w	r3, [r9]
 8018fce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018fd0:	2762      	movs	r7, #98	; 0x62
 8018fd2:	601c      	str	r4, [r3, #0]
 8018fd4:	e723      	b.n	8018e1e <__gethex+0x12a>
 8018fd6:	1e71      	subs	r1, r6, #1
 8018fd8:	4620      	mov	r0, r4
 8018fda:	f000 fe9b 	bl	8019d14 <__any_on>
 8018fde:	2800      	cmp	r0, #0
 8018fe0:	d1ed      	bne.n	8018fbe <__gethex+0x2ca>
 8018fe2:	ee18 0a10 	vmov	r0, s16
 8018fe6:	4621      	mov	r1, r4
 8018fe8:	f000 fa3a 	bl	8019460 <_Bfree>
 8018fec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018fee:	2300      	movs	r3, #0
 8018ff0:	6013      	str	r3, [r2, #0]
 8018ff2:	2750      	movs	r7, #80	; 0x50
 8018ff4:	e713      	b.n	8018e1e <__gethex+0x12a>
 8018ff6:	bf00      	nop
 8018ff8:	0801c43c 	.word	0x0801c43c
 8018ffc:	0801c3c2 	.word	0x0801c3c2
 8019000:	0801c3d3 	.word	0x0801c3d3
 8019004:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019006:	2b00      	cmp	r3, #0
 8019008:	d1eb      	bne.n	8018fe2 <__gethex+0x2ee>
 801900a:	e7d8      	b.n	8018fbe <__gethex+0x2ca>
 801900c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801900e:	2b00      	cmp	r3, #0
 8019010:	d1d5      	bne.n	8018fbe <__gethex+0x2ca>
 8019012:	e7e6      	b.n	8018fe2 <__gethex+0x2ee>
 8019014:	1e6f      	subs	r7, r5, #1
 8019016:	f1ba 0f00 	cmp.w	sl, #0
 801901a:	d131      	bne.n	8019080 <__gethex+0x38c>
 801901c:	b127      	cbz	r7, 8019028 <__gethex+0x334>
 801901e:	4639      	mov	r1, r7
 8019020:	4620      	mov	r0, r4
 8019022:	f000 fe77 	bl	8019d14 <__any_on>
 8019026:	4682      	mov	sl, r0
 8019028:	117b      	asrs	r3, r7, #5
 801902a:	2101      	movs	r1, #1
 801902c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8019030:	f007 071f 	and.w	r7, r7, #31
 8019034:	fa01 f707 	lsl.w	r7, r1, r7
 8019038:	421f      	tst	r7, r3
 801903a:	4629      	mov	r1, r5
 801903c:	4620      	mov	r0, r4
 801903e:	bf18      	it	ne
 8019040:	f04a 0a02 	orrne.w	sl, sl, #2
 8019044:	1b76      	subs	r6, r6, r5
 8019046:	f7ff fded 	bl	8018c24 <rshift>
 801904a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801904e:	2702      	movs	r7, #2
 8019050:	f1ba 0f00 	cmp.w	sl, #0
 8019054:	d048      	beq.n	80190e8 <__gethex+0x3f4>
 8019056:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801905a:	2b02      	cmp	r3, #2
 801905c:	d015      	beq.n	801908a <__gethex+0x396>
 801905e:	2b03      	cmp	r3, #3
 8019060:	d017      	beq.n	8019092 <__gethex+0x39e>
 8019062:	2b01      	cmp	r3, #1
 8019064:	d109      	bne.n	801907a <__gethex+0x386>
 8019066:	f01a 0f02 	tst.w	sl, #2
 801906a:	d006      	beq.n	801907a <__gethex+0x386>
 801906c:	f8d9 0000 	ldr.w	r0, [r9]
 8019070:	ea4a 0a00 	orr.w	sl, sl, r0
 8019074:	f01a 0f01 	tst.w	sl, #1
 8019078:	d10e      	bne.n	8019098 <__gethex+0x3a4>
 801907a:	f047 0710 	orr.w	r7, r7, #16
 801907e:	e033      	b.n	80190e8 <__gethex+0x3f4>
 8019080:	f04f 0a01 	mov.w	sl, #1
 8019084:	e7d0      	b.n	8019028 <__gethex+0x334>
 8019086:	2701      	movs	r7, #1
 8019088:	e7e2      	b.n	8019050 <__gethex+0x35c>
 801908a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801908c:	f1c3 0301 	rsb	r3, r3, #1
 8019090:	9315      	str	r3, [sp, #84]	; 0x54
 8019092:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019094:	2b00      	cmp	r3, #0
 8019096:	d0f0      	beq.n	801907a <__gethex+0x386>
 8019098:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801909c:	f104 0314 	add.w	r3, r4, #20
 80190a0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80190a4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80190a8:	f04f 0c00 	mov.w	ip, #0
 80190ac:	4618      	mov	r0, r3
 80190ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80190b2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80190b6:	d01c      	beq.n	80190f2 <__gethex+0x3fe>
 80190b8:	3201      	adds	r2, #1
 80190ba:	6002      	str	r2, [r0, #0]
 80190bc:	2f02      	cmp	r7, #2
 80190be:	f104 0314 	add.w	r3, r4, #20
 80190c2:	d13f      	bne.n	8019144 <__gethex+0x450>
 80190c4:	f8d8 2000 	ldr.w	r2, [r8]
 80190c8:	3a01      	subs	r2, #1
 80190ca:	42b2      	cmp	r2, r6
 80190cc:	d10a      	bne.n	80190e4 <__gethex+0x3f0>
 80190ce:	1171      	asrs	r1, r6, #5
 80190d0:	2201      	movs	r2, #1
 80190d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80190d6:	f006 061f 	and.w	r6, r6, #31
 80190da:	fa02 f606 	lsl.w	r6, r2, r6
 80190de:	421e      	tst	r6, r3
 80190e0:	bf18      	it	ne
 80190e2:	4617      	movne	r7, r2
 80190e4:	f047 0720 	orr.w	r7, r7, #32
 80190e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80190ea:	601c      	str	r4, [r3, #0]
 80190ec:	9b04      	ldr	r3, [sp, #16]
 80190ee:	601d      	str	r5, [r3, #0]
 80190f0:	e695      	b.n	8018e1e <__gethex+0x12a>
 80190f2:	4299      	cmp	r1, r3
 80190f4:	f843 cc04 	str.w	ip, [r3, #-4]
 80190f8:	d8d8      	bhi.n	80190ac <__gethex+0x3b8>
 80190fa:	68a3      	ldr	r3, [r4, #8]
 80190fc:	459b      	cmp	fp, r3
 80190fe:	db19      	blt.n	8019134 <__gethex+0x440>
 8019100:	6861      	ldr	r1, [r4, #4]
 8019102:	ee18 0a10 	vmov	r0, s16
 8019106:	3101      	adds	r1, #1
 8019108:	f000 f96a 	bl	80193e0 <_Balloc>
 801910c:	4681      	mov	r9, r0
 801910e:	b918      	cbnz	r0, 8019118 <__gethex+0x424>
 8019110:	4b1a      	ldr	r3, [pc, #104]	; (801917c <__gethex+0x488>)
 8019112:	4602      	mov	r2, r0
 8019114:	2184      	movs	r1, #132	; 0x84
 8019116:	e6a8      	b.n	8018e6a <__gethex+0x176>
 8019118:	6922      	ldr	r2, [r4, #16]
 801911a:	3202      	adds	r2, #2
 801911c:	f104 010c 	add.w	r1, r4, #12
 8019120:	0092      	lsls	r2, r2, #2
 8019122:	300c      	adds	r0, #12
 8019124:	f7fc fc52 	bl	80159cc <memcpy>
 8019128:	4621      	mov	r1, r4
 801912a:	ee18 0a10 	vmov	r0, s16
 801912e:	f000 f997 	bl	8019460 <_Bfree>
 8019132:	464c      	mov	r4, r9
 8019134:	6923      	ldr	r3, [r4, #16]
 8019136:	1c5a      	adds	r2, r3, #1
 8019138:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801913c:	6122      	str	r2, [r4, #16]
 801913e:	2201      	movs	r2, #1
 8019140:	615a      	str	r2, [r3, #20]
 8019142:	e7bb      	b.n	80190bc <__gethex+0x3c8>
 8019144:	6922      	ldr	r2, [r4, #16]
 8019146:	455a      	cmp	r2, fp
 8019148:	dd0b      	ble.n	8019162 <__gethex+0x46e>
 801914a:	2101      	movs	r1, #1
 801914c:	4620      	mov	r0, r4
 801914e:	f7ff fd69 	bl	8018c24 <rshift>
 8019152:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019156:	3501      	adds	r5, #1
 8019158:	42ab      	cmp	r3, r5
 801915a:	f6ff aed0 	blt.w	8018efe <__gethex+0x20a>
 801915e:	2701      	movs	r7, #1
 8019160:	e7c0      	b.n	80190e4 <__gethex+0x3f0>
 8019162:	f016 061f 	ands.w	r6, r6, #31
 8019166:	d0fa      	beq.n	801915e <__gethex+0x46a>
 8019168:	449a      	add	sl, r3
 801916a:	f1c6 0620 	rsb	r6, r6, #32
 801916e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8019172:	f000 fa2b 	bl	80195cc <__hi0bits>
 8019176:	42b0      	cmp	r0, r6
 8019178:	dbe7      	blt.n	801914a <__gethex+0x456>
 801917a:	e7f0      	b.n	801915e <__gethex+0x46a>
 801917c:	0801c3c2 	.word	0x0801c3c2

08019180 <L_shift>:
 8019180:	f1c2 0208 	rsb	r2, r2, #8
 8019184:	0092      	lsls	r2, r2, #2
 8019186:	b570      	push	{r4, r5, r6, lr}
 8019188:	f1c2 0620 	rsb	r6, r2, #32
 801918c:	6843      	ldr	r3, [r0, #4]
 801918e:	6804      	ldr	r4, [r0, #0]
 8019190:	fa03 f506 	lsl.w	r5, r3, r6
 8019194:	432c      	orrs	r4, r5
 8019196:	40d3      	lsrs	r3, r2
 8019198:	6004      	str	r4, [r0, #0]
 801919a:	f840 3f04 	str.w	r3, [r0, #4]!
 801919e:	4288      	cmp	r0, r1
 80191a0:	d3f4      	bcc.n	801918c <L_shift+0xc>
 80191a2:	bd70      	pop	{r4, r5, r6, pc}

080191a4 <__match>:
 80191a4:	b530      	push	{r4, r5, lr}
 80191a6:	6803      	ldr	r3, [r0, #0]
 80191a8:	3301      	adds	r3, #1
 80191aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80191ae:	b914      	cbnz	r4, 80191b6 <__match+0x12>
 80191b0:	6003      	str	r3, [r0, #0]
 80191b2:	2001      	movs	r0, #1
 80191b4:	bd30      	pop	{r4, r5, pc}
 80191b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80191ba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80191be:	2d19      	cmp	r5, #25
 80191c0:	bf98      	it	ls
 80191c2:	3220      	addls	r2, #32
 80191c4:	42a2      	cmp	r2, r4
 80191c6:	d0f0      	beq.n	80191aa <__match+0x6>
 80191c8:	2000      	movs	r0, #0
 80191ca:	e7f3      	b.n	80191b4 <__match+0x10>

080191cc <__hexnan>:
 80191cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191d0:	680b      	ldr	r3, [r1, #0]
 80191d2:	6801      	ldr	r1, [r0, #0]
 80191d4:	115e      	asrs	r6, r3, #5
 80191d6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80191da:	f013 031f 	ands.w	r3, r3, #31
 80191de:	b087      	sub	sp, #28
 80191e0:	bf18      	it	ne
 80191e2:	3604      	addne	r6, #4
 80191e4:	2500      	movs	r5, #0
 80191e6:	1f37      	subs	r7, r6, #4
 80191e8:	4682      	mov	sl, r0
 80191ea:	4690      	mov	r8, r2
 80191ec:	9301      	str	r3, [sp, #4]
 80191ee:	f846 5c04 	str.w	r5, [r6, #-4]
 80191f2:	46b9      	mov	r9, r7
 80191f4:	463c      	mov	r4, r7
 80191f6:	9502      	str	r5, [sp, #8]
 80191f8:	46ab      	mov	fp, r5
 80191fa:	784a      	ldrb	r2, [r1, #1]
 80191fc:	1c4b      	adds	r3, r1, #1
 80191fe:	9303      	str	r3, [sp, #12]
 8019200:	b342      	cbz	r2, 8019254 <__hexnan+0x88>
 8019202:	4610      	mov	r0, r2
 8019204:	9105      	str	r1, [sp, #20]
 8019206:	9204      	str	r2, [sp, #16]
 8019208:	f7ff fd5e 	bl	8018cc8 <__hexdig_fun>
 801920c:	2800      	cmp	r0, #0
 801920e:	d14f      	bne.n	80192b0 <__hexnan+0xe4>
 8019210:	9a04      	ldr	r2, [sp, #16]
 8019212:	9905      	ldr	r1, [sp, #20]
 8019214:	2a20      	cmp	r2, #32
 8019216:	d818      	bhi.n	801924a <__hexnan+0x7e>
 8019218:	9b02      	ldr	r3, [sp, #8]
 801921a:	459b      	cmp	fp, r3
 801921c:	dd13      	ble.n	8019246 <__hexnan+0x7a>
 801921e:	454c      	cmp	r4, r9
 8019220:	d206      	bcs.n	8019230 <__hexnan+0x64>
 8019222:	2d07      	cmp	r5, #7
 8019224:	dc04      	bgt.n	8019230 <__hexnan+0x64>
 8019226:	462a      	mov	r2, r5
 8019228:	4649      	mov	r1, r9
 801922a:	4620      	mov	r0, r4
 801922c:	f7ff ffa8 	bl	8019180 <L_shift>
 8019230:	4544      	cmp	r4, r8
 8019232:	d950      	bls.n	80192d6 <__hexnan+0x10a>
 8019234:	2300      	movs	r3, #0
 8019236:	f1a4 0904 	sub.w	r9, r4, #4
 801923a:	f844 3c04 	str.w	r3, [r4, #-4]
 801923e:	f8cd b008 	str.w	fp, [sp, #8]
 8019242:	464c      	mov	r4, r9
 8019244:	461d      	mov	r5, r3
 8019246:	9903      	ldr	r1, [sp, #12]
 8019248:	e7d7      	b.n	80191fa <__hexnan+0x2e>
 801924a:	2a29      	cmp	r2, #41	; 0x29
 801924c:	d156      	bne.n	80192fc <__hexnan+0x130>
 801924e:	3102      	adds	r1, #2
 8019250:	f8ca 1000 	str.w	r1, [sl]
 8019254:	f1bb 0f00 	cmp.w	fp, #0
 8019258:	d050      	beq.n	80192fc <__hexnan+0x130>
 801925a:	454c      	cmp	r4, r9
 801925c:	d206      	bcs.n	801926c <__hexnan+0xa0>
 801925e:	2d07      	cmp	r5, #7
 8019260:	dc04      	bgt.n	801926c <__hexnan+0xa0>
 8019262:	462a      	mov	r2, r5
 8019264:	4649      	mov	r1, r9
 8019266:	4620      	mov	r0, r4
 8019268:	f7ff ff8a 	bl	8019180 <L_shift>
 801926c:	4544      	cmp	r4, r8
 801926e:	d934      	bls.n	80192da <__hexnan+0x10e>
 8019270:	f1a8 0204 	sub.w	r2, r8, #4
 8019274:	4623      	mov	r3, r4
 8019276:	f853 1b04 	ldr.w	r1, [r3], #4
 801927a:	f842 1f04 	str.w	r1, [r2, #4]!
 801927e:	429f      	cmp	r7, r3
 8019280:	d2f9      	bcs.n	8019276 <__hexnan+0xaa>
 8019282:	1b3b      	subs	r3, r7, r4
 8019284:	f023 0303 	bic.w	r3, r3, #3
 8019288:	3304      	adds	r3, #4
 801928a:	3401      	adds	r4, #1
 801928c:	3e03      	subs	r6, #3
 801928e:	42b4      	cmp	r4, r6
 8019290:	bf88      	it	hi
 8019292:	2304      	movhi	r3, #4
 8019294:	4443      	add	r3, r8
 8019296:	2200      	movs	r2, #0
 8019298:	f843 2b04 	str.w	r2, [r3], #4
 801929c:	429f      	cmp	r7, r3
 801929e:	d2fb      	bcs.n	8019298 <__hexnan+0xcc>
 80192a0:	683b      	ldr	r3, [r7, #0]
 80192a2:	b91b      	cbnz	r3, 80192ac <__hexnan+0xe0>
 80192a4:	4547      	cmp	r7, r8
 80192a6:	d127      	bne.n	80192f8 <__hexnan+0x12c>
 80192a8:	2301      	movs	r3, #1
 80192aa:	603b      	str	r3, [r7, #0]
 80192ac:	2005      	movs	r0, #5
 80192ae:	e026      	b.n	80192fe <__hexnan+0x132>
 80192b0:	3501      	adds	r5, #1
 80192b2:	2d08      	cmp	r5, #8
 80192b4:	f10b 0b01 	add.w	fp, fp, #1
 80192b8:	dd06      	ble.n	80192c8 <__hexnan+0xfc>
 80192ba:	4544      	cmp	r4, r8
 80192bc:	d9c3      	bls.n	8019246 <__hexnan+0x7a>
 80192be:	2300      	movs	r3, #0
 80192c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80192c4:	2501      	movs	r5, #1
 80192c6:	3c04      	subs	r4, #4
 80192c8:	6822      	ldr	r2, [r4, #0]
 80192ca:	f000 000f 	and.w	r0, r0, #15
 80192ce:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80192d2:	6022      	str	r2, [r4, #0]
 80192d4:	e7b7      	b.n	8019246 <__hexnan+0x7a>
 80192d6:	2508      	movs	r5, #8
 80192d8:	e7b5      	b.n	8019246 <__hexnan+0x7a>
 80192da:	9b01      	ldr	r3, [sp, #4]
 80192dc:	2b00      	cmp	r3, #0
 80192de:	d0df      	beq.n	80192a0 <__hexnan+0xd4>
 80192e0:	f04f 32ff 	mov.w	r2, #4294967295
 80192e4:	f1c3 0320 	rsb	r3, r3, #32
 80192e8:	fa22 f303 	lsr.w	r3, r2, r3
 80192ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80192f0:	401a      	ands	r2, r3
 80192f2:	f846 2c04 	str.w	r2, [r6, #-4]
 80192f6:	e7d3      	b.n	80192a0 <__hexnan+0xd4>
 80192f8:	3f04      	subs	r7, #4
 80192fa:	e7d1      	b.n	80192a0 <__hexnan+0xd4>
 80192fc:	2004      	movs	r0, #4
 80192fe:	b007      	add	sp, #28
 8019300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019304 <_findenv_r>:
 8019304:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019308:	4607      	mov	r7, r0
 801930a:	4689      	mov	r9, r1
 801930c:	4616      	mov	r6, r2
 801930e:	f001 f9e1 	bl	801a6d4 <__env_lock>
 8019312:	4b18      	ldr	r3, [pc, #96]	; (8019374 <_findenv_r+0x70>)
 8019314:	681c      	ldr	r4, [r3, #0]
 8019316:	469a      	mov	sl, r3
 8019318:	b134      	cbz	r4, 8019328 <_findenv_r+0x24>
 801931a:	464b      	mov	r3, r9
 801931c:	4698      	mov	r8, r3
 801931e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8019322:	b139      	cbz	r1, 8019334 <_findenv_r+0x30>
 8019324:	293d      	cmp	r1, #61	; 0x3d
 8019326:	d1f9      	bne.n	801931c <_findenv_r+0x18>
 8019328:	4638      	mov	r0, r7
 801932a:	f001 f9d9 	bl	801a6e0 <__env_unlock>
 801932e:	2000      	movs	r0, #0
 8019330:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019334:	eba8 0809 	sub.w	r8, r8, r9
 8019338:	46a3      	mov	fp, r4
 801933a:	f854 0b04 	ldr.w	r0, [r4], #4
 801933e:	2800      	cmp	r0, #0
 8019340:	d0f2      	beq.n	8019328 <_findenv_r+0x24>
 8019342:	4642      	mov	r2, r8
 8019344:	4649      	mov	r1, r9
 8019346:	f7fd fb3d 	bl	80169c4 <strncmp>
 801934a:	2800      	cmp	r0, #0
 801934c:	d1f4      	bne.n	8019338 <_findenv_r+0x34>
 801934e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8019352:	eb03 0508 	add.w	r5, r3, r8
 8019356:	f813 3008 	ldrb.w	r3, [r3, r8]
 801935a:	2b3d      	cmp	r3, #61	; 0x3d
 801935c:	d1ec      	bne.n	8019338 <_findenv_r+0x34>
 801935e:	f8da 3000 	ldr.w	r3, [sl]
 8019362:	ebab 0303 	sub.w	r3, fp, r3
 8019366:	109b      	asrs	r3, r3, #2
 8019368:	4638      	mov	r0, r7
 801936a:	6033      	str	r3, [r6, #0]
 801936c:	f001 f9b8 	bl	801a6e0 <__env_unlock>
 8019370:	1c68      	adds	r0, r5, #1
 8019372:	e7dd      	b.n	8019330 <_findenv_r+0x2c>
 8019374:	20000ff4 	.word	0x20000ff4

08019378 <_getenv_r>:
 8019378:	b507      	push	{r0, r1, r2, lr}
 801937a:	aa01      	add	r2, sp, #4
 801937c:	f7ff ffc2 	bl	8019304 <_findenv_r>
 8019380:	b003      	add	sp, #12
 8019382:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08019388 <__gettzinfo>:
 8019388:	4800      	ldr	r0, [pc, #0]	; (801938c <__gettzinfo+0x4>)
 801938a:	4770      	bx	lr
 801938c:	20001500 	.word	0x20001500

08019390 <_localeconv_r>:
 8019390:	4800      	ldr	r0, [pc, #0]	; (8019394 <_localeconv_r+0x4>)
 8019392:	4770      	bx	lr
 8019394:	2000164c 	.word	0x2000164c

08019398 <__retarget_lock_init_recursive>:
 8019398:	4770      	bx	lr

0801939a <__retarget_lock_acquire>:
 801939a:	4770      	bx	lr

0801939c <__retarget_lock_acquire_recursive>:
 801939c:	4770      	bx	lr

0801939e <__retarget_lock_release>:
 801939e:	4770      	bx	lr

080193a0 <__retarget_lock_release_recursive>:
 80193a0:	4770      	bx	lr

080193a2 <__ascii_mbtowc>:
 80193a2:	b082      	sub	sp, #8
 80193a4:	b901      	cbnz	r1, 80193a8 <__ascii_mbtowc+0x6>
 80193a6:	a901      	add	r1, sp, #4
 80193a8:	b142      	cbz	r2, 80193bc <__ascii_mbtowc+0x1a>
 80193aa:	b14b      	cbz	r3, 80193c0 <__ascii_mbtowc+0x1e>
 80193ac:	7813      	ldrb	r3, [r2, #0]
 80193ae:	600b      	str	r3, [r1, #0]
 80193b0:	7812      	ldrb	r2, [r2, #0]
 80193b2:	1e10      	subs	r0, r2, #0
 80193b4:	bf18      	it	ne
 80193b6:	2001      	movne	r0, #1
 80193b8:	b002      	add	sp, #8
 80193ba:	4770      	bx	lr
 80193bc:	4610      	mov	r0, r2
 80193be:	e7fb      	b.n	80193b8 <__ascii_mbtowc+0x16>
 80193c0:	f06f 0001 	mvn.w	r0, #1
 80193c4:	e7f8      	b.n	80193b8 <__ascii_mbtowc+0x16>
	...

080193c8 <__malloc_lock>:
 80193c8:	4801      	ldr	r0, [pc, #4]	; (80193d0 <__malloc_lock+0x8>)
 80193ca:	f7ff bfe7 	b.w	801939c <__retarget_lock_acquire_recursive>
 80193ce:	bf00      	nop
 80193d0:	20007130 	.word	0x20007130

080193d4 <__malloc_unlock>:
 80193d4:	4801      	ldr	r0, [pc, #4]	; (80193dc <__malloc_unlock+0x8>)
 80193d6:	f7ff bfe3 	b.w	80193a0 <__retarget_lock_release_recursive>
 80193da:	bf00      	nop
 80193dc:	20007130 	.word	0x20007130

080193e0 <_Balloc>:
 80193e0:	b570      	push	{r4, r5, r6, lr}
 80193e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80193e4:	4604      	mov	r4, r0
 80193e6:	460d      	mov	r5, r1
 80193e8:	b976      	cbnz	r6, 8019408 <_Balloc+0x28>
 80193ea:	2010      	movs	r0, #16
 80193ec:	f7fc fade 	bl	80159ac <malloc>
 80193f0:	4602      	mov	r2, r0
 80193f2:	6260      	str	r0, [r4, #36]	; 0x24
 80193f4:	b920      	cbnz	r0, 8019400 <_Balloc+0x20>
 80193f6:	4b18      	ldr	r3, [pc, #96]	; (8019458 <_Balloc+0x78>)
 80193f8:	4818      	ldr	r0, [pc, #96]	; (801945c <_Balloc+0x7c>)
 80193fa:	2166      	movs	r1, #102	; 0x66
 80193fc:	f7fe fd56 	bl	8017eac <__assert_func>
 8019400:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019404:	6006      	str	r6, [r0, #0]
 8019406:	60c6      	str	r6, [r0, #12]
 8019408:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801940a:	68f3      	ldr	r3, [r6, #12]
 801940c:	b183      	cbz	r3, 8019430 <_Balloc+0x50>
 801940e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019410:	68db      	ldr	r3, [r3, #12]
 8019412:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019416:	b9b8      	cbnz	r0, 8019448 <_Balloc+0x68>
 8019418:	2101      	movs	r1, #1
 801941a:	fa01 f605 	lsl.w	r6, r1, r5
 801941e:	1d72      	adds	r2, r6, #5
 8019420:	0092      	lsls	r2, r2, #2
 8019422:	4620      	mov	r0, r4
 8019424:	f000 fc97 	bl	8019d56 <_calloc_r>
 8019428:	b160      	cbz	r0, 8019444 <_Balloc+0x64>
 801942a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801942e:	e00e      	b.n	801944e <_Balloc+0x6e>
 8019430:	2221      	movs	r2, #33	; 0x21
 8019432:	2104      	movs	r1, #4
 8019434:	4620      	mov	r0, r4
 8019436:	f000 fc8e 	bl	8019d56 <_calloc_r>
 801943a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801943c:	60f0      	str	r0, [r6, #12]
 801943e:	68db      	ldr	r3, [r3, #12]
 8019440:	2b00      	cmp	r3, #0
 8019442:	d1e4      	bne.n	801940e <_Balloc+0x2e>
 8019444:	2000      	movs	r0, #0
 8019446:	bd70      	pop	{r4, r5, r6, pc}
 8019448:	6802      	ldr	r2, [r0, #0]
 801944a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801944e:	2300      	movs	r3, #0
 8019450:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019454:	e7f7      	b.n	8019446 <_Balloc+0x66>
 8019456:	bf00      	nop
 8019458:	0801c140 	.word	0x0801c140
 801945c:	0801c4b0 	.word	0x0801c4b0

08019460 <_Bfree>:
 8019460:	b570      	push	{r4, r5, r6, lr}
 8019462:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019464:	4605      	mov	r5, r0
 8019466:	460c      	mov	r4, r1
 8019468:	b976      	cbnz	r6, 8019488 <_Bfree+0x28>
 801946a:	2010      	movs	r0, #16
 801946c:	f7fc fa9e 	bl	80159ac <malloc>
 8019470:	4602      	mov	r2, r0
 8019472:	6268      	str	r0, [r5, #36]	; 0x24
 8019474:	b920      	cbnz	r0, 8019480 <_Bfree+0x20>
 8019476:	4b09      	ldr	r3, [pc, #36]	; (801949c <_Bfree+0x3c>)
 8019478:	4809      	ldr	r0, [pc, #36]	; (80194a0 <_Bfree+0x40>)
 801947a:	218a      	movs	r1, #138	; 0x8a
 801947c:	f7fe fd16 	bl	8017eac <__assert_func>
 8019480:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019484:	6006      	str	r6, [r0, #0]
 8019486:	60c6      	str	r6, [r0, #12]
 8019488:	b13c      	cbz	r4, 801949a <_Bfree+0x3a>
 801948a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801948c:	6862      	ldr	r2, [r4, #4]
 801948e:	68db      	ldr	r3, [r3, #12]
 8019490:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019494:	6021      	str	r1, [r4, #0]
 8019496:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801949a:	bd70      	pop	{r4, r5, r6, pc}
 801949c:	0801c140 	.word	0x0801c140
 80194a0:	0801c4b0 	.word	0x0801c4b0

080194a4 <__multadd>:
 80194a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194a8:	690e      	ldr	r6, [r1, #16]
 80194aa:	4607      	mov	r7, r0
 80194ac:	4698      	mov	r8, r3
 80194ae:	460c      	mov	r4, r1
 80194b0:	f101 0014 	add.w	r0, r1, #20
 80194b4:	2300      	movs	r3, #0
 80194b6:	6805      	ldr	r5, [r0, #0]
 80194b8:	b2a9      	uxth	r1, r5
 80194ba:	fb02 8101 	mla	r1, r2, r1, r8
 80194be:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80194c2:	0c2d      	lsrs	r5, r5, #16
 80194c4:	fb02 c505 	mla	r5, r2, r5, ip
 80194c8:	b289      	uxth	r1, r1
 80194ca:	3301      	adds	r3, #1
 80194cc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80194d0:	429e      	cmp	r6, r3
 80194d2:	f840 1b04 	str.w	r1, [r0], #4
 80194d6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80194da:	dcec      	bgt.n	80194b6 <__multadd+0x12>
 80194dc:	f1b8 0f00 	cmp.w	r8, #0
 80194e0:	d022      	beq.n	8019528 <__multadd+0x84>
 80194e2:	68a3      	ldr	r3, [r4, #8]
 80194e4:	42b3      	cmp	r3, r6
 80194e6:	dc19      	bgt.n	801951c <__multadd+0x78>
 80194e8:	6861      	ldr	r1, [r4, #4]
 80194ea:	4638      	mov	r0, r7
 80194ec:	3101      	adds	r1, #1
 80194ee:	f7ff ff77 	bl	80193e0 <_Balloc>
 80194f2:	4605      	mov	r5, r0
 80194f4:	b928      	cbnz	r0, 8019502 <__multadd+0x5e>
 80194f6:	4602      	mov	r2, r0
 80194f8:	4b0d      	ldr	r3, [pc, #52]	; (8019530 <__multadd+0x8c>)
 80194fa:	480e      	ldr	r0, [pc, #56]	; (8019534 <__multadd+0x90>)
 80194fc:	21b5      	movs	r1, #181	; 0xb5
 80194fe:	f7fe fcd5 	bl	8017eac <__assert_func>
 8019502:	6922      	ldr	r2, [r4, #16]
 8019504:	3202      	adds	r2, #2
 8019506:	f104 010c 	add.w	r1, r4, #12
 801950a:	0092      	lsls	r2, r2, #2
 801950c:	300c      	adds	r0, #12
 801950e:	f7fc fa5d 	bl	80159cc <memcpy>
 8019512:	4621      	mov	r1, r4
 8019514:	4638      	mov	r0, r7
 8019516:	f7ff ffa3 	bl	8019460 <_Bfree>
 801951a:	462c      	mov	r4, r5
 801951c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8019520:	3601      	adds	r6, #1
 8019522:	f8c3 8014 	str.w	r8, [r3, #20]
 8019526:	6126      	str	r6, [r4, #16]
 8019528:	4620      	mov	r0, r4
 801952a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801952e:	bf00      	nop
 8019530:	0801c3c2 	.word	0x0801c3c2
 8019534:	0801c4b0 	.word	0x0801c4b0

08019538 <__s2b>:
 8019538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801953c:	460c      	mov	r4, r1
 801953e:	4615      	mov	r5, r2
 8019540:	461f      	mov	r7, r3
 8019542:	2209      	movs	r2, #9
 8019544:	3308      	adds	r3, #8
 8019546:	4606      	mov	r6, r0
 8019548:	fb93 f3f2 	sdiv	r3, r3, r2
 801954c:	2100      	movs	r1, #0
 801954e:	2201      	movs	r2, #1
 8019550:	429a      	cmp	r2, r3
 8019552:	db09      	blt.n	8019568 <__s2b+0x30>
 8019554:	4630      	mov	r0, r6
 8019556:	f7ff ff43 	bl	80193e0 <_Balloc>
 801955a:	b940      	cbnz	r0, 801956e <__s2b+0x36>
 801955c:	4602      	mov	r2, r0
 801955e:	4b19      	ldr	r3, [pc, #100]	; (80195c4 <__s2b+0x8c>)
 8019560:	4819      	ldr	r0, [pc, #100]	; (80195c8 <__s2b+0x90>)
 8019562:	21ce      	movs	r1, #206	; 0xce
 8019564:	f7fe fca2 	bl	8017eac <__assert_func>
 8019568:	0052      	lsls	r2, r2, #1
 801956a:	3101      	adds	r1, #1
 801956c:	e7f0      	b.n	8019550 <__s2b+0x18>
 801956e:	9b08      	ldr	r3, [sp, #32]
 8019570:	6143      	str	r3, [r0, #20]
 8019572:	2d09      	cmp	r5, #9
 8019574:	f04f 0301 	mov.w	r3, #1
 8019578:	6103      	str	r3, [r0, #16]
 801957a:	dd16      	ble.n	80195aa <__s2b+0x72>
 801957c:	f104 0909 	add.w	r9, r4, #9
 8019580:	46c8      	mov	r8, r9
 8019582:	442c      	add	r4, r5
 8019584:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019588:	4601      	mov	r1, r0
 801958a:	3b30      	subs	r3, #48	; 0x30
 801958c:	220a      	movs	r2, #10
 801958e:	4630      	mov	r0, r6
 8019590:	f7ff ff88 	bl	80194a4 <__multadd>
 8019594:	45a0      	cmp	r8, r4
 8019596:	d1f5      	bne.n	8019584 <__s2b+0x4c>
 8019598:	f1a5 0408 	sub.w	r4, r5, #8
 801959c:	444c      	add	r4, r9
 801959e:	1b2d      	subs	r5, r5, r4
 80195a0:	1963      	adds	r3, r4, r5
 80195a2:	42bb      	cmp	r3, r7
 80195a4:	db04      	blt.n	80195b0 <__s2b+0x78>
 80195a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80195aa:	340a      	adds	r4, #10
 80195ac:	2509      	movs	r5, #9
 80195ae:	e7f6      	b.n	801959e <__s2b+0x66>
 80195b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80195b4:	4601      	mov	r1, r0
 80195b6:	3b30      	subs	r3, #48	; 0x30
 80195b8:	220a      	movs	r2, #10
 80195ba:	4630      	mov	r0, r6
 80195bc:	f7ff ff72 	bl	80194a4 <__multadd>
 80195c0:	e7ee      	b.n	80195a0 <__s2b+0x68>
 80195c2:	bf00      	nop
 80195c4:	0801c3c2 	.word	0x0801c3c2
 80195c8:	0801c4b0 	.word	0x0801c4b0

080195cc <__hi0bits>:
 80195cc:	0c03      	lsrs	r3, r0, #16
 80195ce:	041b      	lsls	r3, r3, #16
 80195d0:	b9d3      	cbnz	r3, 8019608 <__hi0bits+0x3c>
 80195d2:	0400      	lsls	r0, r0, #16
 80195d4:	2310      	movs	r3, #16
 80195d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80195da:	bf04      	itt	eq
 80195dc:	0200      	lsleq	r0, r0, #8
 80195de:	3308      	addeq	r3, #8
 80195e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80195e4:	bf04      	itt	eq
 80195e6:	0100      	lsleq	r0, r0, #4
 80195e8:	3304      	addeq	r3, #4
 80195ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80195ee:	bf04      	itt	eq
 80195f0:	0080      	lsleq	r0, r0, #2
 80195f2:	3302      	addeq	r3, #2
 80195f4:	2800      	cmp	r0, #0
 80195f6:	db05      	blt.n	8019604 <__hi0bits+0x38>
 80195f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80195fc:	f103 0301 	add.w	r3, r3, #1
 8019600:	bf08      	it	eq
 8019602:	2320      	moveq	r3, #32
 8019604:	4618      	mov	r0, r3
 8019606:	4770      	bx	lr
 8019608:	2300      	movs	r3, #0
 801960a:	e7e4      	b.n	80195d6 <__hi0bits+0xa>

0801960c <__lo0bits>:
 801960c:	6803      	ldr	r3, [r0, #0]
 801960e:	f013 0207 	ands.w	r2, r3, #7
 8019612:	4601      	mov	r1, r0
 8019614:	d00b      	beq.n	801962e <__lo0bits+0x22>
 8019616:	07da      	lsls	r2, r3, #31
 8019618:	d424      	bmi.n	8019664 <__lo0bits+0x58>
 801961a:	0798      	lsls	r0, r3, #30
 801961c:	bf49      	itett	mi
 801961e:	085b      	lsrmi	r3, r3, #1
 8019620:	089b      	lsrpl	r3, r3, #2
 8019622:	2001      	movmi	r0, #1
 8019624:	600b      	strmi	r3, [r1, #0]
 8019626:	bf5c      	itt	pl
 8019628:	600b      	strpl	r3, [r1, #0]
 801962a:	2002      	movpl	r0, #2
 801962c:	4770      	bx	lr
 801962e:	b298      	uxth	r0, r3
 8019630:	b9b0      	cbnz	r0, 8019660 <__lo0bits+0x54>
 8019632:	0c1b      	lsrs	r3, r3, #16
 8019634:	2010      	movs	r0, #16
 8019636:	f013 0fff 	tst.w	r3, #255	; 0xff
 801963a:	bf04      	itt	eq
 801963c:	0a1b      	lsreq	r3, r3, #8
 801963e:	3008      	addeq	r0, #8
 8019640:	071a      	lsls	r2, r3, #28
 8019642:	bf04      	itt	eq
 8019644:	091b      	lsreq	r3, r3, #4
 8019646:	3004      	addeq	r0, #4
 8019648:	079a      	lsls	r2, r3, #30
 801964a:	bf04      	itt	eq
 801964c:	089b      	lsreq	r3, r3, #2
 801964e:	3002      	addeq	r0, #2
 8019650:	07da      	lsls	r2, r3, #31
 8019652:	d403      	bmi.n	801965c <__lo0bits+0x50>
 8019654:	085b      	lsrs	r3, r3, #1
 8019656:	f100 0001 	add.w	r0, r0, #1
 801965a:	d005      	beq.n	8019668 <__lo0bits+0x5c>
 801965c:	600b      	str	r3, [r1, #0]
 801965e:	4770      	bx	lr
 8019660:	4610      	mov	r0, r2
 8019662:	e7e8      	b.n	8019636 <__lo0bits+0x2a>
 8019664:	2000      	movs	r0, #0
 8019666:	4770      	bx	lr
 8019668:	2020      	movs	r0, #32
 801966a:	4770      	bx	lr

0801966c <__i2b>:
 801966c:	b510      	push	{r4, lr}
 801966e:	460c      	mov	r4, r1
 8019670:	2101      	movs	r1, #1
 8019672:	f7ff feb5 	bl	80193e0 <_Balloc>
 8019676:	4602      	mov	r2, r0
 8019678:	b928      	cbnz	r0, 8019686 <__i2b+0x1a>
 801967a:	4b05      	ldr	r3, [pc, #20]	; (8019690 <__i2b+0x24>)
 801967c:	4805      	ldr	r0, [pc, #20]	; (8019694 <__i2b+0x28>)
 801967e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8019682:	f7fe fc13 	bl	8017eac <__assert_func>
 8019686:	2301      	movs	r3, #1
 8019688:	6144      	str	r4, [r0, #20]
 801968a:	6103      	str	r3, [r0, #16]
 801968c:	bd10      	pop	{r4, pc}
 801968e:	bf00      	nop
 8019690:	0801c3c2 	.word	0x0801c3c2
 8019694:	0801c4b0 	.word	0x0801c4b0

08019698 <__multiply>:
 8019698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801969c:	4614      	mov	r4, r2
 801969e:	690a      	ldr	r2, [r1, #16]
 80196a0:	6923      	ldr	r3, [r4, #16]
 80196a2:	429a      	cmp	r2, r3
 80196a4:	bfb8      	it	lt
 80196a6:	460b      	movlt	r3, r1
 80196a8:	460d      	mov	r5, r1
 80196aa:	bfbc      	itt	lt
 80196ac:	4625      	movlt	r5, r4
 80196ae:	461c      	movlt	r4, r3
 80196b0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80196b4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80196b8:	68ab      	ldr	r3, [r5, #8]
 80196ba:	6869      	ldr	r1, [r5, #4]
 80196bc:	eb0a 0709 	add.w	r7, sl, r9
 80196c0:	42bb      	cmp	r3, r7
 80196c2:	b085      	sub	sp, #20
 80196c4:	bfb8      	it	lt
 80196c6:	3101      	addlt	r1, #1
 80196c8:	f7ff fe8a 	bl	80193e0 <_Balloc>
 80196cc:	b930      	cbnz	r0, 80196dc <__multiply+0x44>
 80196ce:	4602      	mov	r2, r0
 80196d0:	4b42      	ldr	r3, [pc, #264]	; (80197dc <__multiply+0x144>)
 80196d2:	4843      	ldr	r0, [pc, #268]	; (80197e0 <__multiply+0x148>)
 80196d4:	f240 115d 	movw	r1, #349	; 0x15d
 80196d8:	f7fe fbe8 	bl	8017eac <__assert_func>
 80196dc:	f100 0614 	add.w	r6, r0, #20
 80196e0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80196e4:	4633      	mov	r3, r6
 80196e6:	2200      	movs	r2, #0
 80196e8:	4543      	cmp	r3, r8
 80196ea:	d31e      	bcc.n	801972a <__multiply+0x92>
 80196ec:	f105 0c14 	add.w	ip, r5, #20
 80196f0:	f104 0314 	add.w	r3, r4, #20
 80196f4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80196f8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80196fc:	9202      	str	r2, [sp, #8]
 80196fe:	ebac 0205 	sub.w	r2, ip, r5
 8019702:	3a15      	subs	r2, #21
 8019704:	f022 0203 	bic.w	r2, r2, #3
 8019708:	3204      	adds	r2, #4
 801970a:	f105 0115 	add.w	r1, r5, #21
 801970e:	458c      	cmp	ip, r1
 8019710:	bf38      	it	cc
 8019712:	2204      	movcc	r2, #4
 8019714:	9201      	str	r2, [sp, #4]
 8019716:	9a02      	ldr	r2, [sp, #8]
 8019718:	9303      	str	r3, [sp, #12]
 801971a:	429a      	cmp	r2, r3
 801971c:	d808      	bhi.n	8019730 <__multiply+0x98>
 801971e:	2f00      	cmp	r7, #0
 8019720:	dc55      	bgt.n	80197ce <__multiply+0x136>
 8019722:	6107      	str	r7, [r0, #16]
 8019724:	b005      	add	sp, #20
 8019726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801972a:	f843 2b04 	str.w	r2, [r3], #4
 801972e:	e7db      	b.n	80196e8 <__multiply+0x50>
 8019730:	f8b3 a000 	ldrh.w	sl, [r3]
 8019734:	f1ba 0f00 	cmp.w	sl, #0
 8019738:	d020      	beq.n	801977c <__multiply+0xe4>
 801973a:	f105 0e14 	add.w	lr, r5, #20
 801973e:	46b1      	mov	r9, r6
 8019740:	2200      	movs	r2, #0
 8019742:	f85e 4b04 	ldr.w	r4, [lr], #4
 8019746:	f8d9 b000 	ldr.w	fp, [r9]
 801974a:	b2a1      	uxth	r1, r4
 801974c:	fa1f fb8b 	uxth.w	fp, fp
 8019750:	fb0a b101 	mla	r1, sl, r1, fp
 8019754:	4411      	add	r1, r2
 8019756:	f8d9 2000 	ldr.w	r2, [r9]
 801975a:	0c24      	lsrs	r4, r4, #16
 801975c:	0c12      	lsrs	r2, r2, #16
 801975e:	fb0a 2404 	mla	r4, sl, r4, r2
 8019762:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8019766:	b289      	uxth	r1, r1
 8019768:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801976c:	45f4      	cmp	ip, lr
 801976e:	f849 1b04 	str.w	r1, [r9], #4
 8019772:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8019776:	d8e4      	bhi.n	8019742 <__multiply+0xaa>
 8019778:	9901      	ldr	r1, [sp, #4]
 801977a:	5072      	str	r2, [r6, r1]
 801977c:	9a03      	ldr	r2, [sp, #12]
 801977e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8019782:	3304      	adds	r3, #4
 8019784:	f1b9 0f00 	cmp.w	r9, #0
 8019788:	d01f      	beq.n	80197ca <__multiply+0x132>
 801978a:	6834      	ldr	r4, [r6, #0]
 801978c:	f105 0114 	add.w	r1, r5, #20
 8019790:	46b6      	mov	lr, r6
 8019792:	f04f 0a00 	mov.w	sl, #0
 8019796:	880a      	ldrh	r2, [r1, #0]
 8019798:	f8be b002 	ldrh.w	fp, [lr, #2]
 801979c:	fb09 b202 	mla	r2, r9, r2, fp
 80197a0:	4492      	add	sl, r2
 80197a2:	b2a4      	uxth	r4, r4
 80197a4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80197a8:	f84e 4b04 	str.w	r4, [lr], #4
 80197ac:	f851 4b04 	ldr.w	r4, [r1], #4
 80197b0:	f8be 2000 	ldrh.w	r2, [lr]
 80197b4:	0c24      	lsrs	r4, r4, #16
 80197b6:	fb09 2404 	mla	r4, r9, r4, r2
 80197ba:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80197be:	458c      	cmp	ip, r1
 80197c0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80197c4:	d8e7      	bhi.n	8019796 <__multiply+0xfe>
 80197c6:	9a01      	ldr	r2, [sp, #4]
 80197c8:	50b4      	str	r4, [r6, r2]
 80197ca:	3604      	adds	r6, #4
 80197cc:	e7a3      	b.n	8019716 <__multiply+0x7e>
 80197ce:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	d1a5      	bne.n	8019722 <__multiply+0x8a>
 80197d6:	3f01      	subs	r7, #1
 80197d8:	e7a1      	b.n	801971e <__multiply+0x86>
 80197da:	bf00      	nop
 80197dc:	0801c3c2 	.word	0x0801c3c2
 80197e0:	0801c4b0 	.word	0x0801c4b0

080197e4 <__pow5mult>:
 80197e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80197e8:	4615      	mov	r5, r2
 80197ea:	f012 0203 	ands.w	r2, r2, #3
 80197ee:	4606      	mov	r6, r0
 80197f0:	460f      	mov	r7, r1
 80197f2:	d007      	beq.n	8019804 <__pow5mult+0x20>
 80197f4:	4c25      	ldr	r4, [pc, #148]	; (801988c <__pow5mult+0xa8>)
 80197f6:	3a01      	subs	r2, #1
 80197f8:	2300      	movs	r3, #0
 80197fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80197fe:	f7ff fe51 	bl	80194a4 <__multadd>
 8019802:	4607      	mov	r7, r0
 8019804:	10ad      	asrs	r5, r5, #2
 8019806:	d03d      	beq.n	8019884 <__pow5mult+0xa0>
 8019808:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801980a:	b97c      	cbnz	r4, 801982c <__pow5mult+0x48>
 801980c:	2010      	movs	r0, #16
 801980e:	f7fc f8cd 	bl	80159ac <malloc>
 8019812:	4602      	mov	r2, r0
 8019814:	6270      	str	r0, [r6, #36]	; 0x24
 8019816:	b928      	cbnz	r0, 8019824 <__pow5mult+0x40>
 8019818:	4b1d      	ldr	r3, [pc, #116]	; (8019890 <__pow5mult+0xac>)
 801981a:	481e      	ldr	r0, [pc, #120]	; (8019894 <__pow5mult+0xb0>)
 801981c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8019820:	f7fe fb44 	bl	8017eac <__assert_func>
 8019824:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019828:	6004      	str	r4, [r0, #0]
 801982a:	60c4      	str	r4, [r0, #12]
 801982c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8019830:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019834:	b94c      	cbnz	r4, 801984a <__pow5mult+0x66>
 8019836:	f240 2171 	movw	r1, #625	; 0x271
 801983a:	4630      	mov	r0, r6
 801983c:	f7ff ff16 	bl	801966c <__i2b>
 8019840:	2300      	movs	r3, #0
 8019842:	f8c8 0008 	str.w	r0, [r8, #8]
 8019846:	4604      	mov	r4, r0
 8019848:	6003      	str	r3, [r0, #0]
 801984a:	f04f 0900 	mov.w	r9, #0
 801984e:	07eb      	lsls	r3, r5, #31
 8019850:	d50a      	bpl.n	8019868 <__pow5mult+0x84>
 8019852:	4639      	mov	r1, r7
 8019854:	4622      	mov	r2, r4
 8019856:	4630      	mov	r0, r6
 8019858:	f7ff ff1e 	bl	8019698 <__multiply>
 801985c:	4639      	mov	r1, r7
 801985e:	4680      	mov	r8, r0
 8019860:	4630      	mov	r0, r6
 8019862:	f7ff fdfd 	bl	8019460 <_Bfree>
 8019866:	4647      	mov	r7, r8
 8019868:	106d      	asrs	r5, r5, #1
 801986a:	d00b      	beq.n	8019884 <__pow5mult+0xa0>
 801986c:	6820      	ldr	r0, [r4, #0]
 801986e:	b938      	cbnz	r0, 8019880 <__pow5mult+0x9c>
 8019870:	4622      	mov	r2, r4
 8019872:	4621      	mov	r1, r4
 8019874:	4630      	mov	r0, r6
 8019876:	f7ff ff0f 	bl	8019698 <__multiply>
 801987a:	6020      	str	r0, [r4, #0]
 801987c:	f8c0 9000 	str.w	r9, [r0]
 8019880:	4604      	mov	r4, r0
 8019882:	e7e4      	b.n	801984e <__pow5mult+0x6a>
 8019884:	4638      	mov	r0, r7
 8019886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801988a:	bf00      	nop
 801988c:	0801c600 	.word	0x0801c600
 8019890:	0801c140 	.word	0x0801c140
 8019894:	0801c4b0 	.word	0x0801c4b0

08019898 <__lshift>:
 8019898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801989c:	460c      	mov	r4, r1
 801989e:	6849      	ldr	r1, [r1, #4]
 80198a0:	6923      	ldr	r3, [r4, #16]
 80198a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80198a6:	68a3      	ldr	r3, [r4, #8]
 80198a8:	4607      	mov	r7, r0
 80198aa:	4691      	mov	r9, r2
 80198ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80198b0:	f108 0601 	add.w	r6, r8, #1
 80198b4:	42b3      	cmp	r3, r6
 80198b6:	db0b      	blt.n	80198d0 <__lshift+0x38>
 80198b8:	4638      	mov	r0, r7
 80198ba:	f7ff fd91 	bl	80193e0 <_Balloc>
 80198be:	4605      	mov	r5, r0
 80198c0:	b948      	cbnz	r0, 80198d6 <__lshift+0x3e>
 80198c2:	4602      	mov	r2, r0
 80198c4:	4b28      	ldr	r3, [pc, #160]	; (8019968 <__lshift+0xd0>)
 80198c6:	4829      	ldr	r0, [pc, #164]	; (801996c <__lshift+0xd4>)
 80198c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80198cc:	f7fe faee 	bl	8017eac <__assert_func>
 80198d0:	3101      	adds	r1, #1
 80198d2:	005b      	lsls	r3, r3, #1
 80198d4:	e7ee      	b.n	80198b4 <__lshift+0x1c>
 80198d6:	2300      	movs	r3, #0
 80198d8:	f100 0114 	add.w	r1, r0, #20
 80198dc:	f100 0210 	add.w	r2, r0, #16
 80198e0:	4618      	mov	r0, r3
 80198e2:	4553      	cmp	r3, sl
 80198e4:	db33      	blt.n	801994e <__lshift+0xb6>
 80198e6:	6920      	ldr	r0, [r4, #16]
 80198e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80198ec:	f104 0314 	add.w	r3, r4, #20
 80198f0:	f019 091f 	ands.w	r9, r9, #31
 80198f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80198f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80198fc:	d02b      	beq.n	8019956 <__lshift+0xbe>
 80198fe:	f1c9 0e20 	rsb	lr, r9, #32
 8019902:	468a      	mov	sl, r1
 8019904:	2200      	movs	r2, #0
 8019906:	6818      	ldr	r0, [r3, #0]
 8019908:	fa00 f009 	lsl.w	r0, r0, r9
 801990c:	4302      	orrs	r2, r0
 801990e:	f84a 2b04 	str.w	r2, [sl], #4
 8019912:	f853 2b04 	ldr.w	r2, [r3], #4
 8019916:	459c      	cmp	ip, r3
 8019918:	fa22 f20e 	lsr.w	r2, r2, lr
 801991c:	d8f3      	bhi.n	8019906 <__lshift+0x6e>
 801991e:	ebac 0304 	sub.w	r3, ip, r4
 8019922:	3b15      	subs	r3, #21
 8019924:	f023 0303 	bic.w	r3, r3, #3
 8019928:	3304      	adds	r3, #4
 801992a:	f104 0015 	add.w	r0, r4, #21
 801992e:	4584      	cmp	ip, r0
 8019930:	bf38      	it	cc
 8019932:	2304      	movcc	r3, #4
 8019934:	50ca      	str	r2, [r1, r3]
 8019936:	b10a      	cbz	r2, 801993c <__lshift+0xa4>
 8019938:	f108 0602 	add.w	r6, r8, #2
 801993c:	3e01      	subs	r6, #1
 801993e:	4638      	mov	r0, r7
 8019940:	612e      	str	r6, [r5, #16]
 8019942:	4621      	mov	r1, r4
 8019944:	f7ff fd8c 	bl	8019460 <_Bfree>
 8019948:	4628      	mov	r0, r5
 801994a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801994e:	f842 0f04 	str.w	r0, [r2, #4]!
 8019952:	3301      	adds	r3, #1
 8019954:	e7c5      	b.n	80198e2 <__lshift+0x4a>
 8019956:	3904      	subs	r1, #4
 8019958:	f853 2b04 	ldr.w	r2, [r3], #4
 801995c:	f841 2f04 	str.w	r2, [r1, #4]!
 8019960:	459c      	cmp	ip, r3
 8019962:	d8f9      	bhi.n	8019958 <__lshift+0xc0>
 8019964:	e7ea      	b.n	801993c <__lshift+0xa4>
 8019966:	bf00      	nop
 8019968:	0801c3c2 	.word	0x0801c3c2
 801996c:	0801c4b0 	.word	0x0801c4b0

08019970 <__mcmp>:
 8019970:	b530      	push	{r4, r5, lr}
 8019972:	6902      	ldr	r2, [r0, #16]
 8019974:	690c      	ldr	r4, [r1, #16]
 8019976:	1b12      	subs	r2, r2, r4
 8019978:	d10e      	bne.n	8019998 <__mcmp+0x28>
 801997a:	f100 0314 	add.w	r3, r0, #20
 801997e:	3114      	adds	r1, #20
 8019980:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019984:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019988:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801998c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019990:	42a5      	cmp	r5, r4
 8019992:	d003      	beq.n	801999c <__mcmp+0x2c>
 8019994:	d305      	bcc.n	80199a2 <__mcmp+0x32>
 8019996:	2201      	movs	r2, #1
 8019998:	4610      	mov	r0, r2
 801999a:	bd30      	pop	{r4, r5, pc}
 801999c:	4283      	cmp	r3, r0
 801999e:	d3f3      	bcc.n	8019988 <__mcmp+0x18>
 80199a0:	e7fa      	b.n	8019998 <__mcmp+0x28>
 80199a2:	f04f 32ff 	mov.w	r2, #4294967295
 80199a6:	e7f7      	b.n	8019998 <__mcmp+0x28>

080199a8 <__mdiff>:
 80199a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199ac:	460c      	mov	r4, r1
 80199ae:	4606      	mov	r6, r0
 80199b0:	4611      	mov	r1, r2
 80199b2:	4620      	mov	r0, r4
 80199b4:	4617      	mov	r7, r2
 80199b6:	f7ff ffdb 	bl	8019970 <__mcmp>
 80199ba:	1e05      	subs	r5, r0, #0
 80199bc:	d110      	bne.n	80199e0 <__mdiff+0x38>
 80199be:	4629      	mov	r1, r5
 80199c0:	4630      	mov	r0, r6
 80199c2:	f7ff fd0d 	bl	80193e0 <_Balloc>
 80199c6:	b930      	cbnz	r0, 80199d6 <__mdiff+0x2e>
 80199c8:	4b39      	ldr	r3, [pc, #228]	; (8019ab0 <__mdiff+0x108>)
 80199ca:	4602      	mov	r2, r0
 80199cc:	f240 2132 	movw	r1, #562	; 0x232
 80199d0:	4838      	ldr	r0, [pc, #224]	; (8019ab4 <__mdiff+0x10c>)
 80199d2:	f7fe fa6b 	bl	8017eac <__assert_func>
 80199d6:	2301      	movs	r3, #1
 80199d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80199dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199e0:	bfa4      	itt	ge
 80199e2:	463b      	movge	r3, r7
 80199e4:	4627      	movge	r7, r4
 80199e6:	4630      	mov	r0, r6
 80199e8:	6879      	ldr	r1, [r7, #4]
 80199ea:	bfa6      	itte	ge
 80199ec:	461c      	movge	r4, r3
 80199ee:	2500      	movge	r5, #0
 80199f0:	2501      	movlt	r5, #1
 80199f2:	f7ff fcf5 	bl	80193e0 <_Balloc>
 80199f6:	b920      	cbnz	r0, 8019a02 <__mdiff+0x5a>
 80199f8:	4b2d      	ldr	r3, [pc, #180]	; (8019ab0 <__mdiff+0x108>)
 80199fa:	4602      	mov	r2, r0
 80199fc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8019a00:	e7e6      	b.n	80199d0 <__mdiff+0x28>
 8019a02:	693e      	ldr	r6, [r7, #16]
 8019a04:	60c5      	str	r5, [r0, #12]
 8019a06:	6925      	ldr	r5, [r4, #16]
 8019a08:	f107 0114 	add.w	r1, r7, #20
 8019a0c:	f104 0914 	add.w	r9, r4, #20
 8019a10:	f100 0e14 	add.w	lr, r0, #20
 8019a14:	f107 0210 	add.w	r2, r7, #16
 8019a18:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8019a1c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8019a20:	46f2      	mov	sl, lr
 8019a22:	2700      	movs	r7, #0
 8019a24:	f859 3b04 	ldr.w	r3, [r9], #4
 8019a28:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019a2c:	fa1f f883 	uxth.w	r8, r3
 8019a30:	fa17 f78b 	uxtah	r7, r7, fp
 8019a34:	0c1b      	lsrs	r3, r3, #16
 8019a36:	eba7 0808 	sub.w	r8, r7, r8
 8019a3a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8019a3e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019a42:	fa1f f888 	uxth.w	r8, r8
 8019a46:	141f      	asrs	r7, r3, #16
 8019a48:	454d      	cmp	r5, r9
 8019a4a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8019a4e:	f84a 3b04 	str.w	r3, [sl], #4
 8019a52:	d8e7      	bhi.n	8019a24 <__mdiff+0x7c>
 8019a54:	1b2b      	subs	r3, r5, r4
 8019a56:	3b15      	subs	r3, #21
 8019a58:	f023 0303 	bic.w	r3, r3, #3
 8019a5c:	3304      	adds	r3, #4
 8019a5e:	3415      	adds	r4, #21
 8019a60:	42a5      	cmp	r5, r4
 8019a62:	bf38      	it	cc
 8019a64:	2304      	movcc	r3, #4
 8019a66:	4419      	add	r1, r3
 8019a68:	4473      	add	r3, lr
 8019a6a:	469e      	mov	lr, r3
 8019a6c:	460d      	mov	r5, r1
 8019a6e:	4565      	cmp	r5, ip
 8019a70:	d30e      	bcc.n	8019a90 <__mdiff+0xe8>
 8019a72:	f10c 0203 	add.w	r2, ip, #3
 8019a76:	1a52      	subs	r2, r2, r1
 8019a78:	f022 0203 	bic.w	r2, r2, #3
 8019a7c:	3903      	subs	r1, #3
 8019a7e:	458c      	cmp	ip, r1
 8019a80:	bf38      	it	cc
 8019a82:	2200      	movcc	r2, #0
 8019a84:	441a      	add	r2, r3
 8019a86:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8019a8a:	b17b      	cbz	r3, 8019aac <__mdiff+0x104>
 8019a8c:	6106      	str	r6, [r0, #16]
 8019a8e:	e7a5      	b.n	80199dc <__mdiff+0x34>
 8019a90:	f855 8b04 	ldr.w	r8, [r5], #4
 8019a94:	fa17 f488 	uxtah	r4, r7, r8
 8019a98:	1422      	asrs	r2, r4, #16
 8019a9a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8019a9e:	b2a4      	uxth	r4, r4
 8019aa0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8019aa4:	f84e 4b04 	str.w	r4, [lr], #4
 8019aa8:	1417      	asrs	r7, r2, #16
 8019aaa:	e7e0      	b.n	8019a6e <__mdiff+0xc6>
 8019aac:	3e01      	subs	r6, #1
 8019aae:	e7ea      	b.n	8019a86 <__mdiff+0xde>
 8019ab0:	0801c3c2 	.word	0x0801c3c2
 8019ab4:	0801c4b0 	.word	0x0801c4b0

08019ab8 <__ulp>:
 8019ab8:	b082      	sub	sp, #8
 8019aba:	ed8d 0b00 	vstr	d0, [sp]
 8019abe:	9b01      	ldr	r3, [sp, #4]
 8019ac0:	4912      	ldr	r1, [pc, #72]	; (8019b0c <__ulp+0x54>)
 8019ac2:	4019      	ands	r1, r3
 8019ac4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8019ac8:	2900      	cmp	r1, #0
 8019aca:	dd05      	ble.n	8019ad8 <__ulp+0x20>
 8019acc:	2200      	movs	r2, #0
 8019ace:	460b      	mov	r3, r1
 8019ad0:	ec43 2b10 	vmov	d0, r2, r3
 8019ad4:	b002      	add	sp, #8
 8019ad6:	4770      	bx	lr
 8019ad8:	4249      	negs	r1, r1
 8019ada:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8019ade:	ea4f 5021 	mov.w	r0, r1, asr #20
 8019ae2:	f04f 0200 	mov.w	r2, #0
 8019ae6:	f04f 0300 	mov.w	r3, #0
 8019aea:	da04      	bge.n	8019af6 <__ulp+0x3e>
 8019aec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8019af0:	fa41 f300 	asr.w	r3, r1, r0
 8019af4:	e7ec      	b.n	8019ad0 <__ulp+0x18>
 8019af6:	f1a0 0114 	sub.w	r1, r0, #20
 8019afa:	291e      	cmp	r1, #30
 8019afc:	bfda      	itte	le
 8019afe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8019b02:	fa20 f101 	lsrle.w	r1, r0, r1
 8019b06:	2101      	movgt	r1, #1
 8019b08:	460a      	mov	r2, r1
 8019b0a:	e7e1      	b.n	8019ad0 <__ulp+0x18>
 8019b0c:	7ff00000 	.word	0x7ff00000

08019b10 <__b2d>:
 8019b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b12:	6905      	ldr	r5, [r0, #16]
 8019b14:	f100 0714 	add.w	r7, r0, #20
 8019b18:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8019b1c:	1f2e      	subs	r6, r5, #4
 8019b1e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8019b22:	4620      	mov	r0, r4
 8019b24:	f7ff fd52 	bl	80195cc <__hi0bits>
 8019b28:	f1c0 0320 	rsb	r3, r0, #32
 8019b2c:	280a      	cmp	r0, #10
 8019b2e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8019bac <__b2d+0x9c>
 8019b32:	600b      	str	r3, [r1, #0]
 8019b34:	dc14      	bgt.n	8019b60 <__b2d+0x50>
 8019b36:	f1c0 0e0b 	rsb	lr, r0, #11
 8019b3a:	fa24 f10e 	lsr.w	r1, r4, lr
 8019b3e:	42b7      	cmp	r7, r6
 8019b40:	ea41 030c 	orr.w	r3, r1, ip
 8019b44:	bf34      	ite	cc
 8019b46:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019b4a:	2100      	movcs	r1, #0
 8019b4c:	3015      	adds	r0, #21
 8019b4e:	fa04 f000 	lsl.w	r0, r4, r0
 8019b52:	fa21 f10e 	lsr.w	r1, r1, lr
 8019b56:	ea40 0201 	orr.w	r2, r0, r1
 8019b5a:	ec43 2b10 	vmov	d0, r2, r3
 8019b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b60:	42b7      	cmp	r7, r6
 8019b62:	bf3a      	itte	cc
 8019b64:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019b68:	f1a5 0608 	subcc.w	r6, r5, #8
 8019b6c:	2100      	movcs	r1, #0
 8019b6e:	380b      	subs	r0, #11
 8019b70:	d017      	beq.n	8019ba2 <__b2d+0x92>
 8019b72:	f1c0 0c20 	rsb	ip, r0, #32
 8019b76:	fa04 f500 	lsl.w	r5, r4, r0
 8019b7a:	42be      	cmp	r6, r7
 8019b7c:	fa21 f40c 	lsr.w	r4, r1, ip
 8019b80:	ea45 0504 	orr.w	r5, r5, r4
 8019b84:	bf8c      	ite	hi
 8019b86:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8019b8a:	2400      	movls	r4, #0
 8019b8c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8019b90:	fa01 f000 	lsl.w	r0, r1, r0
 8019b94:	fa24 f40c 	lsr.w	r4, r4, ip
 8019b98:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019b9c:	ea40 0204 	orr.w	r2, r0, r4
 8019ba0:	e7db      	b.n	8019b5a <__b2d+0x4a>
 8019ba2:	ea44 030c 	orr.w	r3, r4, ip
 8019ba6:	460a      	mov	r2, r1
 8019ba8:	e7d7      	b.n	8019b5a <__b2d+0x4a>
 8019baa:	bf00      	nop
 8019bac:	3ff00000 	.word	0x3ff00000

08019bb0 <__d2b>:
 8019bb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019bb4:	4689      	mov	r9, r1
 8019bb6:	2101      	movs	r1, #1
 8019bb8:	ec57 6b10 	vmov	r6, r7, d0
 8019bbc:	4690      	mov	r8, r2
 8019bbe:	f7ff fc0f 	bl	80193e0 <_Balloc>
 8019bc2:	4604      	mov	r4, r0
 8019bc4:	b930      	cbnz	r0, 8019bd4 <__d2b+0x24>
 8019bc6:	4602      	mov	r2, r0
 8019bc8:	4b25      	ldr	r3, [pc, #148]	; (8019c60 <__d2b+0xb0>)
 8019bca:	4826      	ldr	r0, [pc, #152]	; (8019c64 <__d2b+0xb4>)
 8019bcc:	f240 310a 	movw	r1, #778	; 0x30a
 8019bd0:	f7fe f96c 	bl	8017eac <__assert_func>
 8019bd4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8019bd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019bdc:	bb35      	cbnz	r5, 8019c2c <__d2b+0x7c>
 8019bde:	2e00      	cmp	r6, #0
 8019be0:	9301      	str	r3, [sp, #4]
 8019be2:	d028      	beq.n	8019c36 <__d2b+0x86>
 8019be4:	4668      	mov	r0, sp
 8019be6:	9600      	str	r6, [sp, #0]
 8019be8:	f7ff fd10 	bl	801960c <__lo0bits>
 8019bec:	9900      	ldr	r1, [sp, #0]
 8019bee:	b300      	cbz	r0, 8019c32 <__d2b+0x82>
 8019bf0:	9a01      	ldr	r2, [sp, #4]
 8019bf2:	f1c0 0320 	rsb	r3, r0, #32
 8019bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8019bfa:	430b      	orrs	r3, r1
 8019bfc:	40c2      	lsrs	r2, r0
 8019bfe:	6163      	str	r3, [r4, #20]
 8019c00:	9201      	str	r2, [sp, #4]
 8019c02:	9b01      	ldr	r3, [sp, #4]
 8019c04:	61a3      	str	r3, [r4, #24]
 8019c06:	2b00      	cmp	r3, #0
 8019c08:	bf14      	ite	ne
 8019c0a:	2202      	movne	r2, #2
 8019c0c:	2201      	moveq	r2, #1
 8019c0e:	6122      	str	r2, [r4, #16]
 8019c10:	b1d5      	cbz	r5, 8019c48 <__d2b+0x98>
 8019c12:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019c16:	4405      	add	r5, r0
 8019c18:	f8c9 5000 	str.w	r5, [r9]
 8019c1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019c20:	f8c8 0000 	str.w	r0, [r8]
 8019c24:	4620      	mov	r0, r4
 8019c26:	b003      	add	sp, #12
 8019c28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019c2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019c30:	e7d5      	b.n	8019bde <__d2b+0x2e>
 8019c32:	6161      	str	r1, [r4, #20]
 8019c34:	e7e5      	b.n	8019c02 <__d2b+0x52>
 8019c36:	a801      	add	r0, sp, #4
 8019c38:	f7ff fce8 	bl	801960c <__lo0bits>
 8019c3c:	9b01      	ldr	r3, [sp, #4]
 8019c3e:	6163      	str	r3, [r4, #20]
 8019c40:	2201      	movs	r2, #1
 8019c42:	6122      	str	r2, [r4, #16]
 8019c44:	3020      	adds	r0, #32
 8019c46:	e7e3      	b.n	8019c10 <__d2b+0x60>
 8019c48:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019c4c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019c50:	f8c9 0000 	str.w	r0, [r9]
 8019c54:	6918      	ldr	r0, [r3, #16]
 8019c56:	f7ff fcb9 	bl	80195cc <__hi0bits>
 8019c5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019c5e:	e7df      	b.n	8019c20 <__d2b+0x70>
 8019c60:	0801c3c2 	.word	0x0801c3c2
 8019c64:	0801c4b0 	.word	0x0801c4b0

08019c68 <__ratio>:
 8019c68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c6c:	4688      	mov	r8, r1
 8019c6e:	4669      	mov	r1, sp
 8019c70:	4681      	mov	r9, r0
 8019c72:	f7ff ff4d 	bl	8019b10 <__b2d>
 8019c76:	a901      	add	r1, sp, #4
 8019c78:	4640      	mov	r0, r8
 8019c7a:	ec55 4b10 	vmov	r4, r5, d0
 8019c7e:	f7ff ff47 	bl	8019b10 <__b2d>
 8019c82:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019c86:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019c8a:	eba3 0c02 	sub.w	ip, r3, r2
 8019c8e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019c92:	1a9b      	subs	r3, r3, r2
 8019c94:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8019c98:	ec51 0b10 	vmov	r0, r1, d0
 8019c9c:	2b00      	cmp	r3, #0
 8019c9e:	bfd6      	itet	le
 8019ca0:	460a      	movle	r2, r1
 8019ca2:	462a      	movgt	r2, r5
 8019ca4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019ca8:	468b      	mov	fp, r1
 8019caa:	462f      	mov	r7, r5
 8019cac:	bfd4      	ite	le
 8019cae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8019cb2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8019cb6:	4620      	mov	r0, r4
 8019cb8:	ee10 2a10 	vmov	r2, s0
 8019cbc:	465b      	mov	r3, fp
 8019cbe:	4639      	mov	r1, r7
 8019cc0:	f7e7 f9d4 	bl	800106c <__aeabi_ddiv>
 8019cc4:	ec41 0b10 	vmov	d0, r0, r1
 8019cc8:	b003      	add	sp, #12
 8019cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019cce <__copybits>:
 8019cce:	3901      	subs	r1, #1
 8019cd0:	b570      	push	{r4, r5, r6, lr}
 8019cd2:	1149      	asrs	r1, r1, #5
 8019cd4:	6914      	ldr	r4, [r2, #16]
 8019cd6:	3101      	adds	r1, #1
 8019cd8:	f102 0314 	add.w	r3, r2, #20
 8019cdc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019ce0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019ce4:	1f05      	subs	r5, r0, #4
 8019ce6:	42a3      	cmp	r3, r4
 8019ce8:	d30c      	bcc.n	8019d04 <__copybits+0x36>
 8019cea:	1aa3      	subs	r3, r4, r2
 8019cec:	3b11      	subs	r3, #17
 8019cee:	f023 0303 	bic.w	r3, r3, #3
 8019cf2:	3211      	adds	r2, #17
 8019cf4:	42a2      	cmp	r2, r4
 8019cf6:	bf88      	it	hi
 8019cf8:	2300      	movhi	r3, #0
 8019cfa:	4418      	add	r0, r3
 8019cfc:	2300      	movs	r3, #0
 8019cfe:	4288      	cmp	r0, r1
 8019d00:	d305      	bcc.n	8019d0e <__copybits+0x40>
 8019d02:	bd70      	pop	{r4, r5, r6, pc}
 8019d04:	f853 6b04 	ldr.w	r6, [r3], #4
 8019d08:	f845 6f04 	str.w	r6, [r5, #4]!
 8019d0c:	e7eb      	b.n	8019ce6 <__copybits+0x18>
 8019d0e:	f840 3b04 	str.w	r3, [r0], #4
 8019d12:	e7f4      	b.n	8019cfe <__copybits+0x30>

08019d14 <__any_on>:
 8019d14:	f100 0214 	add.w	r2, r0, #20
 8019d18:	6900      	ldr	r0, [r0, #16]
 8019d1a:	114b      	asrs	r3, r1, #5
 8019d1c:	4298      	cmp	r0, r3
 8019d1e:	b510      	push	{r4, lr}
 8019d20:	db11      	blt.n	8019d46 <__any_on+0x32>
 8019d22:	dd0a      	ble.n	8019d3a <__any_on+0x26>
 8019d24:	f011 011f 	ands.w	r1, r1, #31
 8019d28:	d007      	beq.n	8019d3a <__any_on+0x26>
 8019d2a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019d2e:	fa24 f001 	lsr.w	r0, r4, r1
 8019d32:	fa00 f101 	lsl.w	r1, r0, r1
 8019d36:	428c      	cmp	r4, r1
 8019d38:	d10b      	bne.n	8019d52 <__any_on+0x3e>
 8019d3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019d3e:	4293      	cmp	r3, r2
 8019d40:	d803      	bhi.n	8019d4a <__any_on+0x36>
 8019d42:	2000      	movs	r0, #0
 8019d44:	bd10      	pop	{r4, pc}
 8019d46:	4603      	mov	r3, r0
 8019d48:	e7f7      	b.n	8019d3a <__any_on+0x26>
 8019d4a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019d4e:	2900      	cmp	r1, #0
 8019d50:	d0f5      	beq.n	8019d3e <__any_on+0x2a>
 8019d52:	2001      	movs	r0, #1
 8019d54:	e7f6      	b.n	8019d44 <__any_on+0x30>

08019d56 <_calloc_r>:
 8019d56:	b513      	push	{r0, r1, r4, lr}
 8019d58:	434a      	muls	r2, r1
 8019d5a:	4611      	mov	r1, r2
 8019d5c:	9201      	str	r2, [sp, #4]
 8019d5e:	f7fc f919 	bl	8015f94 <_malloc_r>
 8019d62:	4604      	mov	r4, r0
 8019d64:	b118      	cbz	r0, 8019d6e <_calloc_r+0x18>
 8019d66:	9a01      	ldr	r2, [sp, #4]
 8019d68:	2100      	movs	r1, #0
 8019d6a:	f7fb fe3d 	bl	80159e8 <memset>
 8019d6e:	4620      	mov	r0, r4
 8019d70:	b002      	add	sp, #8
 8019d72:	bd10      	pop	{r4, pc}

08019d74 <__ssputs_r>:
 8019d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d78:	688e      	ldr	r6, [r1, #8]
 8019d7a:	429e      	cmp	r6, r3
 8019d7c:	4682      	mov	sl, r0
 8019d7e:	460c      	mov	r4, r1
 8019d80:	4690      	mov	r8, r2
 8019d82:	461f      	mov	r7, r3
 8019d84:	d838      	bhi.n	8019df8 <__ssputs_r+0x84>
 8019d86:	898a      	ldrh	r2, [r1, #12]
 8019d88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019d8c:	d032      	beq.n	8019df4 <__ssputs_r+0x80>
 8019d8e:	6825      	ldr	r5, [r4, #0]
 8019d90:	6909      	ldr	r1, [r1, #16]
 8019d92:	eba5 0901 	sub.w	r9, r5, r1
 8019d96:	6965      	ldr	r5, [r4, #20]
 8019d98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019d9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019da0:	3301      	adds	r3, #1
 8019da2:	444b      	add	r3, r9
 8019da4:	106d      	asrs	r5, r5, #1
 8019da6:	429d      	cmp	r5, r3
 8019da8:	bf38      	it	cc
 8019daa:	461d      	movcc	r5, r3
 8019dac:	0553      	lsls	r3, r2, #21
 8019dae:	d531      	bpl.n	8019e14 <__ssputs_r+0xa0>
 8019db0:	4629      	mov	r1, r5
 8019db2:	f7fc f8ef 	bl	8015f94 <_malloc_r>
 8019db6:	4606      	mov	r6, r0
 8019db8:	b950      	cbnz	r0, 8019dd0 <__ssputs_r+0x5c>
 8019dba:	230c      	movs	r3, #12
 8019dbc:	f8ca 3000 	str.w	r3, [sl]
 8019dc0:	89a3      	ldrh	r3, [r4, #12]
 8019dc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019dc6:	81a3      	strh	r3, [r4, #12]
 8019dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8019dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019dd0:	6921      	ldr	r1, [r4, #16]
 8019dd2:	464a      	mov	r2, r9
 8019dd4:	f7fb fdfa 	bl	80159cc <memcpy>
 8019dd8:	89a3      	ldrh	r3, [r4, #12]
 8019dda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019de2:	81a3      	strh	r3, [r4, #12]
 8019de4:	6126      	str	r6, [r4, #16]
 8019de6:	6165      	str	r5, [r4, #20]
 8019de8:	444e      	add	r6, r9
 8019dea:	eba5 0509 	sub.w	r5, r5, r9
 8019dee:	6026      	str	r6, [r4, #0]
 8019df0:	60a5      	str	r5, [r4, #8]
 8019df2:	463e      	mov	r6, r7
 8019df4:	42be      	cmp	r6, r7
 8019df6:	d900      	bls.n	8019dfa <__ssputs_r+0x86>
 8019df8:	463e      	mov	r6, r7
 8019dfa:	4632      	mov	r2, r6
 8019dfc:	6820      	ldr	r0, [r4, #0]
 8019dfe:	4641      	mov	r1, r8
 8019e00:	f000 fea2 	bl	801ab48 <memmove>
 8019e04:	68a3      	ldr	r3, [r4, #8]
 8019e06:	6822      	ldr	r2, [r4, #0]
 8019e08:	1b9b      	subs	r3, r3, r6
 8019e0a:	4432      	add	r2, r6
 8019e0c:	60a3      	str	r3, [r4, #8]
 8019e0e:	6022      	str	r2, [r4, #0]
 8019e10:	2000      	movs	r0, #0
 8019e12:	e7db      	b.n	8019dcc <__ssputs_r+0x58>
 8019e14:	462a      	mov	r2, r5
 8019e16:	f000 feb1 	bl	801ab7c <_realloc_r>
 8019e1a:	4606      	mov	r6, r0
 8019e1c:	2800      	cmp	r0, #0
 8019e1e:	d1e1      	bne.n	8019de4 <__ssputs_r+0x70>
 8019e20:	6921      	ldr	r1, [r4, #16]
 8019e22:	4650      	mov	r0, sl
 8019e24:	f7fc f866 	bl	8015ef4 <_free_r>
 8019e28:	e7c7      	b.n	8019dba <__ssputs_r+0x46>
	...

08019e2c <_svfiprintf_r>:
 8019e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e30:	4698      	mov	r8, r3
 8019e32:	898b      	ldrh	r3, [r1, #12]
 8019e34:	061b      	lsls	r3, r3, #24
 8019e36:	b09d      	sub	sp, #116	; 0x74
 8019e38:	4607      	mov	r7, r0
 8019e3a:	460d      	mov	r5, r1
 8019e3c:	4614      	mov	r4, r2
 8019e3e:	d50e      	bpl.n	8019e5e <_svfiprintf_r+0x32>
 8019e40:	690b      	ldr	r3, [r1, #16]
 8019e42:	b963      	cbnz	r3, 8019e5e <_svfiprintf_r+0x32>
 8019e44:	2140      	movs	r1, #64	; 0x40
 8019e46:	f7fc f8a5 	bl	8015f94 <_malloc_r>
 8019e4a:	6028      	str	r0, [r5, #0]
 8019e4c:	6128      	str	r0, [r5, #16]
 8019e4e:	b920      	cbnz	r0, 8019e5a <_svfiprintf_r+0x2e>
 8019e50:	230c      	movs	r3, #12
 8019e52:	603b      	str	r3, [r7, #0]
 8019e54:	f04f 30ff 	mov.w	r0, #4294967295
 8019e58:	e0d1      	b.n	8019ffe <_svfiprintf_r+0x1d2>
 8019e5a:	2340      	movs	r3, #64	; 0x40
 8019e5c:	616b      	str	r3, [r5, #20]
 8019e5e:	2300      	movs	r3, #0
 8019e60:	9309      	str	r3, [sp, #36]	; 0x24
 8019e62:	2320      	movs	r3, #32
 8019e64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019e68:	f8cd 800c 	str.w	r8, [sp, #12]
 8019e6c:	2330      	movs	r3, #48	; 0x30
 8019e6e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801a018 <_svfiprintf_r+0x1ec>
 8019e72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019e76:	f04f 0901 	mov.w	r9, #1
 8019e7a:	4623      	mov	r3, r4
 8019e7c:	469a      	mov	sl, r3
 8019e7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019e82:	b10a      	cbz	r2, 8019e88 <_svfiprintf_r+0x5c>
 8019e84:	2a25      	cmp	r2, #37	; 0x25
 8019e86:	d1f9      	bne.n	8019e7c <_svfiprintf_r+0x50>
 8019e88:	ebba 0b04 	subs.w	fp, sl, r4
 8019e8c:	d00b      	beq.n	8019ea6 <_svfiprintf_r+0x7a>
 8019e8e:	465b      	mov	r3, fp
 8019e90:	4622      	mov	r2, r4
 8019e92:	4629      	mov	r1, r5
 8019e94:	4638      	mov	r0, r7
 8019e96:	f7ff ff6d 	bl	8019d74 <__ssputs_r>
 8019e9a:	3001      	adds	r0, #1
 8019e9c:	f000 80aa 	beq.w	8019ff4 <_svfiprintf_r+0x1c8>
 8019ea0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019ea2:	445a      	add	r2, fp
 8019ea4:	9209      	str	r2, [sp, #36]	; 0x24
 8019ea6:	f89a 3000 	ldrb.w	r3, [sl]
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	f000 80a2 	beq.w	8019ff4 <_svfiprintf_r+0x1c8>
 8019eb0:	2300      	movs	r3, #0
 8019eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8019eb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019eba:	f10a 0a01 	add.w	sl, sl, #1
 8019ebe:	9304      	str	r3, [sp, #16]
 8019ec0:	9307      	str	r3, [sp, #28]
 8019ec2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019ec6:	931a      	str	r3, [sp, #104]	; 0x68
 8019ec8:	4654      	mov	r4, sl
 8019eca:	2205      	movs	r2, #5
 8019ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019ed0:	4851      	ldr	r0, [pc, #324]	; (801a018 <_svfiprintf_r+0x1ec>)
 8019ed2:	f7e6 fd95 	bl	8000a00 <memchr>
 8019ed6:	9a04      	ldr	r2, [sp, #16]
 8019ed8:	b9d8      	cbnz	r0, 8019f12 <_svfiprintf_r+0xe6>
 8019eda:	06d0      	lsls	r0, r2, #27
 8019edc:	bf44      	itt	mi
 8019ede:	2320      	movmi	r3, #32
 8019ee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019ee4:	0711      	lsls	r1, r2, #28
 8019ee6:	bf44      	itt	mi
 8019ee8:	232b      	movmi	r3, #43	; 0x2b
 8019eea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019eee:	f89a 3000 	ldrb.w	r3, [sl]
 8019ef2:	2b2a      	cmp	r3, #42	; 0x2a
 8019ef4:	d015      	beq.n	8019f22 <_svfiprintf_r+0xf6>
 8019ef6:	9a07      	ldr	r2, [sp, #28]
 8019ef8:	4654      	mov	r4, sl
 8019efa:	2000      	movs	r0, #0
 8019efc:	f04f 0c0a 	mov.w	ip, #10
 8019f00:	4621      	mov	r1, r4
 8019f02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019f06:	3b30      	subs	r3, #48	; 0x30
 8019f08:	2b09      	cmp	r3, #9
 8019f0a:	d94e      	bls.n	8019faa <_svfiprintf_r+0x17e>
 8019f0c:	b1b0      	cbz	r0, 8019f3c <_svfiprintf_r+0x110>
 8019f0e:	9207      	str	r2, [sp, #28]
 8019f10:	e014      	b.n	8019f3c <_svfiprintf_r+0x110>
 8019f12:	eba0 0308 	sub.w	r3, r0, r8
 8019f16:	fa09 f303 	lsl.w	r3, r9, r3
 8019f1a:	4313      	orrs	r3, r2
 8019f1c:	9304      	str	r3, [sp, #16]
 8019f1e:	46a2      	mov	sl, r4
 8019f20:	e7d2      	b.n	8019ec8 <_svfiprintf_r+0x9c>
 8019f22:	9b03      	ldr	r3, [sp, #12]
 8019f24:	1d19      	adds	r1, r3, #4
 8019f26:	681b      	ldr	r3, [r3, #0]
 8019f28:	9103      	str	r1, [sp, #12]
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	bfbb      	ittet	lt
 8019f2e:	425b      	neglt	r3, r3
 8019f30:	f042 0202 	orrlt.w	r2, r2, #2
 8019f34:	9307      	strge	r3, [sp, #28]
 8019f36:	9307      	strlt	r3, [sp, #28]
 8019f38:	bfb8      	it	lt
 8019f3a:	9204      	strlt	r2, [sp, #16]
 8019f3c:	7823      	ldrb	r3, [r4, #0]
 8019f3e:	2b2e      	cmp	r3, #46	; 0x2e
 8019f40:	d10c      	bne.n	8019f5c <_svfiprintf_r+0x130>
 8019f42:	7863      	ldrb	r3, [r4, #1]
 8019f44:	2b2a      	cmp	r3, #42	; 0x2a
 8019f46:	d135      	bne.n	8019fb4 <_svfiprintf_r+0x188>
 8019f48:	9b03      	ldr	r3, [sp, #12]
 8019f4a:	1d1a      	adds	r2, r3, #4
 8019f4c:	681b      	ldr	r3, [r3, #0]
 8019f4e:	9203      	str	r2, [sp, #12]
 8019f50:	2b00      	cmp	r3, #0
 8019f52:	bfb8      	it	lt
 8019f54:	f04f 33ff 	movlt.w	r3, #4294967295
 8019f58:	3402      	adds	r4, #2
 8019f5a:	9305      	str	r3, [sp, #20]
 8019f5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801a028 <_svfiprintf_r+0x1fc>
 8019f60:	7821      	ldrb	r1, [r4, #0]
 8019f62:	2203      	movs	r2, #3
 8019f64:	4650      	mov	r0, sl
 8019f66:	f7e6 fd4b 	bl	8000a00 <memchr>
 8019f6a:	b140      	cbz	r0, 8019f7e <_svfiprintf_r+0x152>
 8019f6c:	2340      	movs	r3, #64	; 0x40
 8019f6e:	eba0 000a 	sub.w	r0, r0, sl
 8019f72:	fa03 f000 	lsl.w	r0, r3, r0
 8019f76:	9b04      	ldr	r3, [sp, #16]
 8019f78:	4303      	orrs	r3, r0
 8019f7a:	3401      	adds	r4, #1
 8019f7c:	9304      	str	r3, [sp, #16]
 8019f7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f82:	4826      	ldr	r0, [pc, #152]	; (801a01c <_svfiprintf_r+0x1f0>)
 8019f84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019f88:	2206      	movs	r2, #6
 8019f8a:	f7e6 fd39 	bl	8000a00 <memchr>
 8019f8e:	2800      	cmp	r0, #0
 8019f90:	d038      	beq.n	801a004 <_svfiprintf_r+0x1d8>
 8019f92:	4b23      	ldr	r3, [pc, #140]	; (801a020 <_svfiprintf_r+0x1f4>)
 8019f94:	bb1b      	cbnz	r3, 8019fde <_svfiprintf_r+0x1b2>
 8019f96:	9b03      	ldr	r3, [sp, #12]
 8019f98:	3307      	adds	r3, #7
 8019f9a:	f023 0307 	bic.w	r3, r3, #7
 8019f9e:	3308      	adds	r3, #8
 8019fa0:	9303      	str	r3, [sp, #12]
 8019fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019fa4:	4433      	add	r3, r6
 8019fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8019fa8:	e767      	b.n	8019e7a <_svfiprintf_r+0x4e>
 8019faa:	fb0c 3202 	mla	r2, ip, r2, r3
 8019fae:	460c      	mov	r4, r1
 8019fb0:	2001      	movs	r0, #1
 8019fb2:	e7a5      	b.n	8019f00 <_svfiprintf_r+0xd4>
 8019fb4:	2300      	movs	r3, #0
 8019fb6:	3401      	adds	r4, #1
 8019fb8:	9305      	str	r3, [sp, #20]
 8019fba:	4619      	mov	r1, r3
 8019fbc:	f04f 0c0a 	mov.w	ip, #10
 8019fc0:	4620      	mov	r0, r4
 8019fc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019fc6:	3a30      	subs	r2, #48	; 0x30
 8019fc8:	2a09      	cmp	r2, #9
 8019fca:	d903      	bls.n	8019fd4 <_svfiprintf_r+0x1a8>
 8019fcc:	2b00      	cmp	r3, #0
 8019fce:	d0c5      	beq.n	8019f5c <_svfiprintf_r+0x130>
 8019fd0:	9105      	str	r1, [sp, #20]
 8019fd2:	e7c3      	b.n	8019f5c <_svfiprintf_r+0x130>
 8019fd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8019fd8:	4604      	mov	r4, r0
 8019fda:	2301      	movs	r3, #1
 8019fdc:	e7f0      	b.n	8019fc0 <_svfiprintf_r+0x194>
 8019fde:	ab03      	add	r3, sp, #12
 8019fe0:	9300      	str	r3, [sp, #0]
 8019fe2:	462a      	mov	r2, r5
 8019fe4:	4b0f      	ldr	r3, [pc, #60]	; (801a024 <_svfiprintf_r+0x1f8>)
 8019fe6:	a904      	add	r1, sp, #16
 8019fe8:	4638      	mov	r0, r7
 8019fea:	f7fc f8cd 	bl	8016188 <_printf_float>
 8019fee:	1c42      	adds	r2, r0, #1
 8019ff0:	4606      	mov	r6, r0
 8019ff2:	d1d6      	bne.n	8019fa2 <_svfiprintf_r+0x176>
 8019ff4:	89ab      	ldrh	r3, [r5, #12]
 8019ff6:	065b      	lsls	r3, r3, #25
 8019ff8:	f53f af2c 	bmi.w	8019e54 <_svfiprintf_r+0x28>
 8019ffc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019ffe:	b01d      	add	sp, #116	; 0x74
 801a000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a004:	ab03      	add	r3, sp, #12
 801a006:	9300      	str	r3, [sp, #0]
 801a008:	462a      	mov	r2, r5
 801a00a:	4b06      	ldr	r3, [pc, #24]	; (801a024 <_svfiprintf_r+0x1f8>)
 801a00c:	a904      	add	r1, sp, #16
 801a00e:	4638      	mov	r0, r7
 801a010:	f7fc fb5e 	bl	80166d0 <_printf_i>
 801a014:	e7eb      	b.n	8019fee <_svfiprintf_r+0x1c2>
 801a016:	bf00      	nop
 801a018:	0801c60c 	.word	0x0801c60c
 801a01c:	0801c616 	.word	0x0801c616
 801a020:	08016189 	.word	0x08016189
 801a024:	08019d75 	.word	0x08019d75
 801a028:	0801c612 	.word	0x0801c612

0801a02c <__sfputc_r>:
 801a02c:	6893      	ldr	r3, [r2, #8]
 801a02e:	3b01      	subs	r3, #1
 801a030:	2b00      	cmp	r3, #0
 801a032:	b410      	push	{r4}
 801a034:	6093      	str	r3, [r2, #8]
 801a036:	da08      	bge.n	801a04a <__sfputc_r+0x1e>
 801a038:	6994      	ldr	r4, [r2, #24]
 801a03a:	42a3      	cmp	r3, r4
 801a03c:	db01      	blt.n	801a042 <__sfputc_r+0x16>
 801a03e:	290a      	cmp	r1, #10
 801a040:	d103      	bne.n	801a04a <__sfputc_r+0x1e>
 801a042:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a046:	f000 ba4d 	b.w	801a4e4 <__swbuf_r>
 801a04a:	6813      	ldr	r3, [r2, #0]
 801a04c:	1c58      	adds	r0, r3, #1
 801a04e:	6010      	str	r0, [r2, #0]
 801a050:	7019      	strb	r1, [r3, #0]
 801a052:	4608      	mov	r0, r1
 801a054:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a058:	4770      	bx	lr

0801a05a <__sfputs_r>:
 801a05a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a05c:	4606      	mov	r6, r0
 801a05e:	460f      	mov	r7, r1
 801a060:	4614      	mov	r4, r2
 801a062:	18d5      	adds	r5, r2, r3
 801a064:	42ac      	cmp	r4, r5
 801a066:	d101      	bne.n	801a06c <__sfputs_r+0x12>
 801a068:	2000      	movs	r0, #0
 801a06a:	e007      	b.n	801a07c <__sfputs_r+0x22>
 801a06c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a070:	463a      	mov	r2, r7
 801a072:	4630      	mov	r0, r6
 801a074:	f7ff ffda 	bl	801a02c <__sfputc_r>
 801a078:	1c43      	adds	r3, r0, #1
 801a07a:	d1f3      	bne.n	801a064 <__sfputs_r+0xa>
 801a07c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a080 <_vfiprintf_r>:
 801a080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a084:	460d      	mov	r5, r1
 801a086:	b09d      	sub	sp, #116	; 0x74
 801a088:	4614      	mov	r4, r2
 801a08a:	4698      	mov	r8, r3
 801a08c:	4606      	mov	r6, r0
 801a08e:	b118      	cbz	r0, 801a098 <_vfiprintf_r+0x18>
 801a090:	6983      	ldr	r3, [r0, #24]
 801a092:	b90b      	cbnz	r3, 801a098 <_vfiprintf_r+0x18>
 801a094:	f000 fc44 	bl	801a920 <__sinit>
 801a098:	4b89      	ldr	r3, [pc, #548]	; (801a2c0 <_vfiprintf_r+0x240>)
 801a09a:	429d      	cmp	r5, r3
 801a09c:	d11b      	bne.n	801a0d6 <_vfiprintf_r+0x56>
 801a09e:	6875      	ldr	r5, [r6, #4]
 801a0a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a0a2:	07d9      	lsls	r1, r3, #31
 801a0a4:	d405      	bmi.n	801a0b2 <_vfiprintf_r+0x32>
 801a0a6:	89ab      	ldrh	r3, [r5, #12]
 801a0a8:	059a      	lsls	r2, r3, #22
 801a0aa:	d402      	bmi.n	801a0b2 <_vfiprintf_r+0x32>
 801a0ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a0ae:	f7ff f975 	bl	801939c <__retarget_lock_acquire_recursive>
 801a0b2:	89ab      	ldrh	r3, [r5, #12]
 801a0b4:	071b      	lsls	r3, r3, #28
 801a0b6:	d501      	bpl.n	801a0bc <_vfiprintf_r+0x3c>
 801a0b8:	692b      	ldr	r3, [r5, #16]
 801a0ba:	b9eb      	cbnz	r3, 801a0f8 <_vfiprintf_r+0x78>
 801a0bc:	4629      	mov	r1, r5
 801a0be:	4630      	mov	r0, r6
 801a0c0:	f000 fa82 	bl	801a5c8 <__swsetup_r>
 801a0c4:	b1c0      	cbz	r0, 801a0f8 <_vfiprintf_r+0x78>
 801a0c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a0c8:	07dc      	lsls	r4, r3, #31
 801a0ca:	d50e      	bpl.n	801a0ea <_vfiprintf_r+0x6a>
 801a0cc:	f04f 30ff 	mov.w	r0, #4294967295
 801a0d0:	b01d      	add	sp, #116	; 0x74
 801a0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0d6:	4b7b      	ldr	r3, [pc, #492]	; (801a2c4 <_vfiprintf_r+0x244>)
 801a0d8:	429d      	cmp	r5, r3
 801a0da:	d101      	bne.n	801a0e0 <_vfiprintf_r+0x60>
 801a0dc:	68b5      	ldr	r5, [r6, #8]
 801a0de:	e7df      	b.n	801a0a0 <_vfiprintf_r+0x20>
 801a0e0:	4b79      	ldr	r3, [pc, #484]	; (801a2c8 <_vfiprintf_r+0x248>)
 801a0e2:	429d      	cmp	r5, r3
 801a0e4:	bf08      	it	eq
 801a0e6:	68f5      	ldreq	r5, [r6, #12]
 801a0e8:	e7da      	b.n	801a0a0 <_vfiprintf_r+0x20>
 801a0ea:	89ab      	ldrh	r3, [r5, #12]
 801a0ec:	0598      	lsls	r0, r3, #22
 801a0ee:	d4ed      	bmi.n	801a0cc <_vfiprintf_r+0x4c>
 801a0f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a0f2:	f7ff f955 	bl	80193a0 <__retarget_lock_release_recursive>
 801a0f6:	e7e9      	b.n	801a0cc <_vfiprintf_r+0x4c>
 801a0f8:	2300      	movs	r3, #0
 801a0fa:	9309      	str	r3, [sp, #36]	; 0x24
 801a0fc:	2320      	movs	r3, #32
 801a0fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a102:	f8cd 800c 	str.w	r8, [sp, #12]
 801a106:	2330      	movs	r3, #48	; 0x30
 801a108:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a2cc <_vfiprintf_r+0x24c>
 801a10c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a110:	f04f 0901 	mov.w	r9, #1
 801a114:	4623      	mov	r3, r4
 801a116:	469a      	mov	sl, r3
 801a118:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a11c:	b10a      	cbz	r2, 801a122 <_vfiprintf_r+0xa2>
 801a11e:	2a25      	cmp	r2, #37	; 0x25
 801a120:	d1f9      	bne.n	801a116 <_vfiprintf_r+0x96>
 801a122:	ebba 0b04 	subs.w	fp, sl, r4
 801a126:	d00b      	beq.n	801a140 <_vfiprintf_r+0xc0>
 801a128:	465b      	mov	r3, fp
 801a12a:	4622      	mov	r2, r4
 801a12c:	4629      	mov	r1, r5
 801a12e:	4630      	mov	r0, r6
 801a130:	f7ff ff93 	bl	801a05a <__sfputs_r>
 801a134:	3001      	adds	r0, #1
 801a136:	f000 80aa 	beq.w	801a28e <_vfiprintf_r+0x20e>
 801a13a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a13c:	445a      	add	r2, fp
 801a13e:	9209      	str	r2, [sp, #36]	; 0x24
 801a140:	f89a 3000 	ldrb.w	r3, [sl]
 801a144:	2b00      	cmp	r3, #0
 801a146:	f000 80a2 	beq.w	801a28e <_vfiprintf_r+0x20e>
 801a14a:	2300      	movs	r3, #0
 801a14c:	f04f 32ff 	mov.w	r2, #4294967295
 801a150:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a154:	f10a 0a01 	add.w	sl, sl, #1
 801a158:	9304      	str	r3, [sp, #16]
 801a15a:	9307      	str	r3, [sp, #28]
 801a15c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a160:	931a      	str	r3, [sp, #104]	; 0x68
 801a162:	4654      	mov	r4, sl
 801a164:	2205      	movs	r2, #5
 801a166:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a16a:	4858      	ldr	r0, [pc, #352]	; (801a2cc <_vfiprintf_r+0x24c>)
 801a16c:	f7e6 fc48 	bl	8000a00 <memchr>
 801a170:	9a04      	ldr	r2, [sp, #16]
 801a172:	b9d8      	cbnz	r0, 801a1ac <_vfiprintf_r+0x12c>
 801a174:	06d1      	lsls	r1, r2, #27
 801a176:	bf44      	itt	mi
 801a178:	2320      	movmi	r3, #32
 801a17a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a17e:	0713      	lsls	r3, r2, #28
 801a180:	bf44      	itt	mi
 801a182:	232b      	movmi	r3, #43	; 0x2b
 801a184:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a188:	f89a 3000 	ldrb.w	r3, [sl]
 801a18c:	2b2a      	cmp	r3, #42	; 0x2a
 801a18e:	d015      	beq.n	801a1bc <_vfiprintf_r+0x13c>
 801a190:	9a07      	ldr	r2, [sp, #28]
 801a192:	4654      	mov	r4, sl
 801a194:	2000      	movs	r0, #0
 801a196:	f04f 0c0a 	mov.w	ip, #10
 801a19a:	4621      	mov	r1, r4
 801a19c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a1a0:	3b30      	subs	r3, #48	; 0x30
 801a1a2:	2b09      	cmp	r3, #9
 801a1a4:	d94e      	bls.n	801a244 <_vfiprintf_r+0x1c4>
 801a1a6:	b1b0      	cbz	r0, 801a1d6 <_vfiprintf_r+0x156>
 801a1a8:	9207      	str	r2, [sp, #28]
 801a1aa:	e014      	b.n	801a1d6 <_vfiprintf_r+0x156>
 801a1ac:	eba0 0308 	sub.w	r3, r0, r8
 801a1b0:	fa09 f303 	lsl.w	r3, r9, r3
 801a1b4:	4313      	orrs	r3, r2
 801a1b6:	9304      	str	r3, [sp, #16]
 801a1b8:	46a2      	mov	sl, r4
 801a1ba:	e7d2      	b.n	801a162 <_vfiprintf_r+0xe2>
 801a1bc:	9b03      	ldr	r3, [sp, #12]
 801a1be:	1d19      	adds	r1, r3, #4
 801a1c0:	681b      	ldr	r3, [r3, #0]
 801a1c2:	9103      	str	r1, [sp, #12]
 801a1c4:	2b00      	cmp	r3, #0
 801a1c6:	bfbb      	ittet	lt
 801a1c8:	425b      	neglt	r3, r3
 801a1ca:	f042 0202 	orrlt.w	r2, r2, #2
 801a1ce:	9307      	strge	r3, [sp, #28]
 801a1d0:	9307      	strlt	r3, [sp, #28]
 801a1d2:	bfb8      	it	lt
 801a1d4:	9204      	strlt	r2, [sp, #16]
 801a1d6:	7823      	ldrb	r3, [r4, #0]
 801a1d8:	2b2e      	cmp	r3, #46	; 0x2e
 801a1da:	d10c      	bne.n	801a1f6 <_vfiprintf_r+0x176>
 801a1dc:	7863      	ldrb	r3, [r4, #1]
 801a1de:	2b2a      	cmp	r3, #42	; 0x2a
 801a1e0:	d135      	bne.n	801a24e <_vfiprintf_r+0x1ce>
 801a1e2:	9b03      	ldr	r3, [sp, #12]
 801a1e4:	1d1a      	adds	r2, r3, #4
 801a1e6:	681b      	ldr	r3, [r3, #0]
 801a1e8:	9203      	str	r2, [sp, #12]
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	bfb8      	it	lt
 801a1ee:	f04f 33ff 	movlt.w	r3, #4294967295
 801a1f2:	3402      	adds	r4, #2
 801a1f4:	9305      	str	r3, [sp, #20]
 801a1f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a2dc <_vfiprintf_r+0x25c>
 801a1fa:	7821      	ldrb	r1, [r4, #0]
 801a1fc:	2203      	movs	r2, #3
 801a1fe:	4650      	mov	r0, sl
 801a200:	f7e6 fbfe 	bl	8000a00 <memchr>
 801a204:	b140      	cbz	r0, 801a218 <_vfiprintf_r+0x198>
 801a206:	2340      	movs	r3, #64	; 0x40
 801a208:	eba0 000a 	sub.w	r0, r0, sl
 801a20c:	fa03 f000 	lsl.w	r0, r3, r0
 801a210:	9b04      	ldr	r3, [sp, #16]
 801a212:	4303      	orrs	r3, r0
 801a214:	3401      	adds	r4, #1
 801a216:	9304      	str	r3, [sp, #16]
 801a218:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a21c:	482c      	ldr	r0, [pc, #176]	; (801a2d0 <_vfiprintf_r+0x250>)
 801a21e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a222:	2206      	movs	r2, #6
 801a224:	f7e6 fbec 	bl	8000a00 <memchr>
 801a228:	2800      	cmp	r0, #0
 801a22a:	d03f      	beq.n	801a2ac <_vfiprintf_r+0x22c>
 801a22c:	4b29      	ldr	r3, [pc, #164]	; (801a2d4 <_vfiprintf_r+0x254>)
 801a22e:	bb1b      	cbnz	r3, 801a278 <_vfiprintf_r+0x1f8>
 801a230:	9b03      	ldr	r3, [sp, #12]
 801a232:	3307      	adds	r3, #7
 801a234:	f023 0307 	bic.w	r3, r3, #7
 801a238:	3308      	adds	r3, #8
 801a23a:	9303      	str	r3, [sp, #12]
 801a23c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a23e:	443b      	add	r3, r7
 801a240:	9309      	str	r3, [sp, #36]	; 0x24
 801a242:	e767      	b.n	801a114 <_vfiprintf_r+0x94>
 801a244:	fb0c 3202 	mla	r2, ip, r2, r3
 801a248:	460c      	mov	r4, r1
 801a24a:	2001      	movs	r0, #1
 801a24c:	e7a5      	b.n	801a19a <_vfiprintf_r+0x11a>
 801a24e:	2300      	movs	r3, #0
 801a250:	3401      	adds	r4, #1
 801a252:	9305      	str	r3, [sp, #20]
 801a254:	4619      	mov	r1, r3
 801a256:	f04f 0c0a 	mov.w	ip, #10
 801a25a:	4620      	mov	r0, r4
 801a25c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a260:	3a30      	subs	r2, #48	; 0x30
 801a262:	2a09      	cmp	r2, #9
 801a264:	d903      	bls.n	801a26e <_vfiprintf_r+0x1ee>
 801a266:	2b00      	cmp	r3, #0
 801a268:	d0c5      	beq.n	801a1f6 <_vfiprintf_r+0x176>
 801a26a:	9105      	str	r1, [sp, #20]
 801a26c:	e7c3      	b.n	801a1f6 <_vfiprintf_r+0x176>
 801a26e:	fb0c 2101 	mla	r1, ip, r1, r2
 801a272:	4604      	mov	r4, r0
 801a274:	2301      	movs	r3, #1
 801a276:	e7f0      	b.n	801a25a <_vfiprintf_r+0x1da>
 801a278:	ab03      	add	r3, sp, #12
 801a27a:	9300      	str	r3, [sp, #0]
 801a27c:	462a      	mov	r2, r5
 801a27e:	4b16      	ldr	r3, [pc, #88]	; (801a2d8 <_vfiprintf_r+0x258>)
 801a280:	a904      	add	r1, sp, #16
 801a282:	4630      	mov	r0, r6
 801a284:	f7fb ff80 	bl	8016188 <_printf_float>
 801a288:	4607      	mov	r7, r0
 801a28a:	1c78      	adds	r0, r7, #1
 801a28c:	d1d6      	bne.n	801a23c <_vfiprintf_r+0x1bc>
 801a28e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a290:	07d9      	lsls	r1, r3, #31
 801a292:	d405      	bmi.n	801a2a0 <_vfiprintf_r+0x220>
 801a294:	89ab      	ldrh	r3, [r5, #12]
 801a296:	059a      	lsls	r2, r3, #22
 801a298:	d402      	bmi.n	801a2a0 <_vfiprintf_r+0x220>
 801a29a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a29c:	f7ff f880 	bl	80193a0 <__retarget_lock_release_recursive>
 801a2a0:	89ab      	ldrh	r3, [r5, #12]
 801a2a2:	065b      	lsls	r3, r3, #25
 801a2a4:	f53f af12 	bmi.w	801a0cc <_vfiprintf_r+0x4c>
 801a2a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a2aa:	e711      	b.n	801a0d0 <_vfiprintf_r+0x50>
 801a2ac:	ab03      	add	r3, sp, #12
 801a2ae:	9300      	str	r3, [sp, #0]
 801a2b0:	462a      	mov	r2, r5
 801a2b2:	4b09      	ldr	r3, [pc, #36]	; (801a2d8 <_vfiprintf_r+0x258>)
 801a2b4:	a904      	add	r1, sp, #16
 801a2b6:	4630      	mov	r0, r6
 801a2b8:	f7fc fa0a 	bl	80166d0 <_printf_i>
 801a2bc:	e7e4      	b.n	801a288 <_vfiprintf_r+0x208>
 801a2be:	bf00      	nop
 801a2c0:	0801c640 	.word	0x0801c640
 801a2c4:	0801c660 	.word	0x0801c660
 801a2c8:	0801c620 	.word	0x0801c620
 801a2cc:	0801c60c 	.word	0x0801c60c
 801a2d0:	0801c616 	.word	0x0801c616
 801a2d4:	08016189 	.word	0x08016189
 801a2d8:	0801a05b 	.word	0x0801a05b
 801a2dc:	0801c612 	.word	0x0801c612

0801a2e0 <nan>:
 801a2e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a2e8 <nan+0x8>
 801a2e4:	4770      	bx	lr
 801a2e6:	bf00      	nop
 801a2e8:	00000000 	.word	0x00000000
 801a2ec:	7ff80000 	.word	0x7ff80000

0801a2f0 <siscanf>:
 801a2f0:	b40e      	push	{r1, r2, r3}
 801a2f2:	b510      	push	{r4, lr}
 801a2f4:	b09f      	sub	sp, #124	; 0x7c
 801a2f6:	ac21      	add	r4, sp, #132	; 0x84
 801a2f8:	f44f 7101 	mov.w	r1, #516	; 0x204
 801a2fc:	f854 2b04 	ldr.w	r2, [r4], #4
 801a300:	9201      	str	r2, [sp, #4]
 801a302:	f8ad 101c 	strh.w	r1, [sp, #28]
 801a306:	9004      	str	r0, [sp, #16]
 801a308:	9008      	str	r0, [sp, #32]
 801a30a:	f7e6 fb6b 	bl	80009e4 <strlen>
 801a30e:	4b0c      	ldr	r3, [pc, #48]	; (801a340 <siscanf+0x50>)
 801a310:	9005      	str	r0, [sp, #20]
 801a312:	9009      	str	r0, [sp, #36]	; 0x24
 801a314:	930d      	str	r3, [sp, #52]	; 0x34
 801a316:	480b      	ldr	r0, [pc, #44]	; (801a344 <siscanf+0x54>)
 801a318:	9a01      	ldr	r2, [sp, #4]
 801a31a:	6800      	ldr	r0, [r0, #0]
 801a31c:	9403      	str	r4, [sp, #12]
 801a31e:	2300      	movs	r3, #0
 801a320:	9311      	str	r3, [sp, #68]	; 0x44
 801a322:	9316      	str	r3, [sp, #88]	; 0x58
 801a324:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a328:	f8ad 301e 	strh.w	r3, [sp, #30]
 801a32c:	a904      	add	r1, sp, #16
 801a32e:	4623      	mov	r3, r4
 801a330:	f000 fca4 	bl	801ac7c <__ssvfiscanf_r>
 801a334:	b01f      	add	sp, #124	; 0x7c
 801a336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a33a:	b003      	add	sp, #12
 801a33c:	4770      	bx	lr
 801a33e:	bf00      	nop
 801a340:	0801a36b 	.word	0x0801a36b
 801a344:	20001494 	.word	0x20001494

0801a348 <__sread>:
 801a348:	b510      	push	{r4, lr}
 801a34a:	460c      	mov	r4, r1
 801a34c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a350:	f000 ff58 	bl	801b204 <_read_r>
 801a354:	2800      	cmp	r0, #0
 801a356:	bfab      	itete	ge
 801a358:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a35a:	89a3      	ldrhlt	r3, [r4, #12]
 801a35c:	181b      	addge	r3, r3, r0
 801a35e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a362:	bfac      	ite	ge
 801a364:	6563      	strge	r3, [r4, #84]	; 0x54
 801a366:	81a3      	strhlt	r3, [r4, #12]
 801a368:	bd10      	pop	{r4, pc}

0801a36a <__seofread>:
 801a36a:	2000      	movs	r0, #0
 801a36c:	4770      	bx	lr

0801a36e <__swrite>:
 801a36e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a372:	461f      	mov	r7, r3
 801a374:	898b      	ldrh	r3, [r1, #12]
 801a376:	05db      	lsls	r3, r3, #23
 801a378:	4605      	mov	r5, r0
 801a37a:	460c      	mov	r4, r1
 801a37c:	4616      	mov	r6, r2
 801a37e:	d505      	bpl.n	801a38c <__swrite+0x1e>
 801a380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a384:	2302      	movs	r3, #2
 801a386:	2200      	movs	r2, #0
 801a388:	f000 fb68 	bl	801aa5c <_lseek_r>
 801a38c:	89a3      	ldrh	r3, [r4, #12]
 801a38e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a392:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a396:	81a3      	strh	r3, [r4, #12]
 801a398:	4632      	mov	r2, r6
 801a39a:	463b      	mov	r3, r7
 801a39c:	4628      	mov	r0, r5
 801a39e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a3a2:	f000 b8ff 	b.w	801a5a4 <_write_r>

0801a3a6 <__sseek>:
 801a3a6:	b510      	push	{r4, lr}
 801a3a8:	460c      	mov	r4, r1
 801a3aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a3ae:	f000 fb55 	bl	801aa5c <_lseek_r>
 801a3b2:	1c43      	adds	r3, r0, #1
 801a3b4:	89a3      	ldrh	r3, [r4, #12]
 801a3b6:	bf15      	itete	ne
 801a3b8:	6560      	strne	r0, [r4, #84]	; 0x54
 801a3ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a3be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a3c2:	81a3      	strheq	r3, [r4, #12]
 801a3c4:	bf18      	it	ne
 801a3c6:	81a3      	strhne	r3, [r4, #12]
 801a3c8:	bd10      	pop	{r4, pc}

0801a3ca <__sclose>:
 801a3ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a3ce:	f000 b971 	b.w	801a6b4 <_close_r>
	...

0801a3d4 <_strtoul_l.isra.0>:
 801a3d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a3d8:	4e3b      	ldr	r6, [pc, #236]	; (801a4c8 <_strtoul_l.isra.0+0xf4>)
 801a3da:	4686      	mov	lr, r0
 801a3dc:	468c      	mov	ip, r1
 801a3de:	4660      	mov	r0, ip
 801a3e0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801a3e4:	5da5      	ldrb	r5, [r4, r6]
 801a3e6:	f015 0508 	ands.w	r5, r5, #8
 801a3ea:	d1f8      	bne.n	801a3de <_strtoul_l.isra.0+0xa>
 801a3ec:	2c2d      	cmp	r4, #45	; 0x2d
 801a3ee:	d134      	bne.n	801a45a <_strtoul_l.isra.0+0x86>
 801a3f0:	f89c 4000 	ldrb.w	r4, [ip]
 801a3f4:	f04f 0801 	mov.w	r8, #1
 801a3f8:	f100 0c02 	add.w	ip, r0, #2
 801a3fc:	2b00      	cmp	r3, #0
 801a3fe:	d05e      	beq.n	801a4be <_strtoul_l.isra.0+0xea>
 801a400:	2b10      	cmp	r3, #16
 801a402:	d10c      	bne.n	801a41e <_strtoul_l.isra.0+0x4a>
 801a404:	2c30      	cmp	r4, #48	; 0x30
 801a406:	d10a      	bne.n	801a41e <_strtoul_l.isra.0+0x4a>
 801a408:	f89c 0000 	ldrb.w	r0, [ip]
 801a40c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801a410:	2858      	cmp	r0, #88	; 0x58
 801a412:	d14f      	bne.n	801a4b4 <_strtoul_l.isra.0+0xe0>
 801a414:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801a418:	2310      	movs	r3, #16
 801a41a:	f10c 0c02 	add.w	ip, ip, #2
 801a41e:	f04f 37ff 	mov.w	r7, #4294967295
 801a422:	2500      	movs	r5, #0
 801a424:	fbb7 f7f3 	udiv	r7, r7, r3
 801a428:	fb03 f907 	mul.w	r9, r3, r7
 801a42c:	ea6f 0909 	mvn.w	r9, r9
 801a430:	4628      	mov	r0, r5
 801a432:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801a436:	2e09      	cmp	r6, #9
 801a438:	d818      	bhi.n	801a46c <_strtoul_l.isra.0+0x98>
 801a43a:	4634      	mov	r4, r6
 801a43c:	42a3      	cmp	r3, r4
 801a43e:	dd24      	ble.n	801a48a <_strtoul_l.isra.0+0xb6>
 801a440:	2d00      	cmp	r5, #0
 801a442:	db1f      	blt.n	801a484 <_strtoul_l.isra.0+0xb0>
 801a444:	4287      	cmp	r7, r0
 801a446:	d31d      	bcc.n	801a484 <_strtoul_l.isra.0+0xb0>
 801a448:	d101      	bne.n	801a44e <_strtoul_l.isra.0+0x7a>
 801a44a:	45a1      	cmp	r9, r4
 801a44c:	db1a      	blt.n	801a484 <_strtoul_l.isra.0+0xb0>
 801a44e:	fb00 4003 	mla	r0, r0, r3, r4
 801a452:	2501      	movs	r5, #1
 801a454:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801a458:	e7eb      	b.n	801a432 <_strtoul_l.isra.0+0x5e>
 801a45a:	2c2b      	cmp	r4, #43	; 0x2b
 801a45c:	bf08      	it	eq
 801a45e:	f89c 4000 	ldrbeq.w	r4, [ip]
 801a462:	46a8      	mov	r8, r5
 801a464:	bf08      	it	eq
 801a466:	f100 0c02 	addeq.w	ip, r0, #2
 801a46a:	e7c7      	b.n	801a3fc <_strtoul_l.isra.0+0x28>
 801a46c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801a470:	2e19      	cmp	r6, #25
 801a472:	d801      	bhi.n	801a478 <_strtoul_l.isra.0+0xa4>
 801a474:	3c37      	subs	r4, #55	; 0x37
 801a476:	e7e1      	b.n	801a43c <_strtoul_l.isra.0+0x68>
 801a478:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801a47c:	2e19      	cmp	r6, #25
 801a47e:	d804      	bhi.n	801a48a <_strtoul_l.isra.0+0xb6>
 801a480:	3c57      	subs	r4, #87	; 0x57
 801a482:	e7db      	b.n	801a43c <_strtoul_l.isra.0+0x68>
 801a484:	f04f 35ff 	mov.w	r5, #4294967295
 801a488:	e7e4      	b.n	801a454 <_strtoul_l.isra.0+0x80>
 801a48a:	2d00      	cmp	r5, #0
 801a48c:	da07      	bge.n	801a49e <_strtoul_l.isra.0+0xca>
 801a48e:	2322      	movs	r3, #34	; 0x22
 801a490:	f8ce 3000 	str.w	r3, [lr]
 801a494:	f04f 30ff 	mov.w	r0, #4294967295
 801a498:	b942      	cbnz	r2, 801a4ac <_strtoul_l.isra.0+0xd8>
 801a49a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a49e:	f1b8 0f00 	cmp.w	r8, #0
 801a4a2:	d000      	beq.n	801a4a6 <_strtoul_l.isra.0+0xd2>
 801a4a4:	4240      	negs	r0, r0
 801a4a6:	2a00      	cmp	r2, #0
 801a4a8:	d0f7      	beq.n	801a49a <_strtoul_l.isra.0+0xc6>
 801a4aa:	b10d      	cbz	r5, 801a4b0 <_strtoul_l.isra.0+0xdc>
 801a4ac:	f10c 31ff 	add.w	r1, ip, #4294967295
 801a4b0:	6011      	str	r1, [r2, #0]
 801a4b2:	e7f2      	b.n	801a49a <_strtoul_l.isra.0+0xc6>
 801a4b4:	2430      	movs	r4, #48	; 0x30
 801a4b6:	2b00      	cmp	r3, #0
 801a4b8:	d1b1      	bne.n	801a41e <_strtoul_l.isra.0+0x4a>
 801a4ba:	2308      	movs	r3, #8
 801a4bc:	e7af      	b.n	801a41e <_strtoul_l.isra.0+0x4a>
 801a4be:	2c30      	cmp	r4, #48	; 0x30
 801a4c0:	d0a2      	beq.n	801a408 <_strtoul_l.isra.0+0x34>
 801a4c2:	230a      	movs	r3, #10
 801a4c4:	e7ab      	b.n	801a41e <_strtoul_l.isra.0+0x4a>
 801a4c6:	bf00      	nop
 801a4c8:	0801c256 	.word	0x0801c256

0801a4cc <_strtoul_r>:
 801a4cc:	f7ff bf82 	b.w	801a3d4 <_strtoul_l.isra.0>

0801a4d0 <strtoul>:
 801a4d0:	4613      	mov	r3, r2
 801a4d2:	460a      	mov	r2, r1
 801a4d4:	4601      	mov	r1, r0
 801a4d6:	4802      	ldr	r0, [pc, #8]	; (801a4e0 <strtoul+0x10>)
 801a4d8:	6800      	ldr	r0, [r0, #0]
 801a4da:	f7ff bf7b 	b.w	801a3d4 <_strtoul_l.isra.0>
 801a4de:	bf00      	nop
 801a4e0:	20001494 	.word	0x20001494

0801a4e4 <__swbuf_r>:
 801a4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4e6:	460e      	mov	r6, r1
 801a4e8:	4614      	mov	r4, r2
 801a4ea:	4605      	mov	r5, r0
 801a4ec:	b118      	cbz	r0, 801a4f6 <__swbuf_r+0x12>
 801a4ee:	6983      	ldr	r3, [r0, #24]
 801a4f0:	b90b      	cbnz	r3, 801a4f6 <__swbuf_r+0x12>
 801a4f2:	f000 fa15 	bl	801a920 <__sinit>
 801a4f6:	4b21      	ldr	r3, [pc, #132]	; (801a57c <__swbuf_r+0x98>)
 801a4f8:	429c      	cmp	r4, r3
 801a4fa:	d12b      	bne.n	801a554 <__swbuf_r+0x70>
 801a4fc:	686c      	ldr	r4, [r5, #4]
 801a4fe:	69a3      	ldr	r3, [r4, #24]
 801a500:	60a3      	str	r3, [r4, #8]
 801a502:	89a3      	ldrh	r3, [r4, #12]
 801a504:	071a      	lsls	r2, r3, #28
 801a506:	d52f      	bpl.n	801a568 <__swbuf_r+0x84>
 801a508:	6923      	ldr	r3, [r4, #16]
 801a50a:	b36b      	cbz	r3, 801a568 <__swbuf_r+0x84>
 801a50c:	6923      	ldr	r3, [r4, #16]
 801a50e:	6820      	ldr	r0, [r4, #0]
 801a510:	1ac0      	subs	r0, r0, r3
 801a512:	6963      	ldr	r3, [r4, #20]
 801a514:	b2f6      	uxtb	r6, r6
 801a516:	4283      	cmp	r3, r0
 801a518:	4637      	mov	r7, r6
 801a51a:	dc04      	bgt.n	801a526 <__swbuf_r+0x42>
 801a51c:	4621      	mov	r1, r4
 801a51e:	4628      	mov	r0, r5
 801a520:	f000 f96a 	bl	801a7f8 <_fflush_r>
 801a524:	bb30      	cbnz	r0, 801a574 <__swbuf_r+0x90>
 801a526:	68a3      	ldr	r3, [r4, #8]
 801a528:	3b01      	subs	r3, #1
 801a52a:	60a3      	str	r3, [r4, #8]
 801a52c:	6823      	ldr	r3, [r4, #0]
 801a52e:	1c5a      	adds	r2, r3, #1
 801a530:	6022      	str	r2, [r4, #0]
 801a532:	701e      	strb	r6, [r3, #0]
 801a534:	6963      	ldr	r3, [r4, #20]
 801a536:	3001      	adds	r0, #1
 801a538:	4283      	cmp	r3, r0
 801a53a:	d004      	beq.n	801a546 <__swbuf_r+0x62>
 801a53c:	89a3      	ldrh	r3, [r4, #12]
 801a53e:	07db      	lsls	r3, r3, #31
 801a540:	d506      	bpl.n	801a550 <__swbuf_r+0x6c>
 801a542:	2e0a      	cmp	r6, #10
 801a544:	d104      	bne.n	801a550 <__swbuf_r+0x6c>
 801a546:	4621      	mov	r1, r4
 801a548:	4628      	mov	r0, r5
 801a54a:	f000 f955 	bl	801a7f8 <_fflush_r>
 801a54e:	b988      	cbnz	r0, 801a574 <__swbuf_r+0x90>
 801a550:	4638      	mov	r0, r7
 801a552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a554:	4b0a      	ldr	r3, [pc, #40]	; (801a580 <__swbuf_r+0x9c>)
 801a556:	429c      	cmp	r4, r3
 801a558:	d101      	bne.n	801a55e <__swbuf_r+0x7a>
 801a55a:	68ac      	ldr	r4, [r5, #8]
 801a55c:	e7cf      	b.n	801a4fe <__swbuf_r+0x1a>
 801a55e:	4b09      	ldr	r3, [pc, #36]	; (801a584 <__swbuf_r+0xa0>)
 801a560:	429c      	cmp	r4, r3
 801a562:	bf08      	it	eq
 801a564:	68ec      	ldreq	r4, [r5, #12]
 801a566:	e7ca      	b.n	801a4fe <__swbuf_r+0x1a>
 801a568:	4621      	mov	r1, r4
 801a56a:	4628      	mov	r0, r5
 801a56c:	f000 f82c 	bl	801a5c8 <__swsetup_r>
 801a570:	2800      	cmp	r0, #0
 801a572:	d0cb      	beq.n	801a50c <__swbuf_r+0x28>
 801a574:	f04f 37ff 	mov.w	r7, #4294967295
 801a578:	e7ea      	b.n	801a550 <__swbuf_r+0x6c>
 801a57a:	bf00      	nop
 801a57c:	0801c640 	.word	0x0801c640
 801a580:	0801c660 	.word	0x0801c660
 801a584:	0801c620 	.word	0x0801c620

0801a588 <__ascii_wctomb>:
 801a588:	b149      	cbz	r1, 801a59e <__ascii_wctomb+0x16>
 801a58a:	2aff      	cmp	r2, #255	; 0xff
 801a58c:	bf85      	ittet	hi
 801a58e:	238a      	movhi	r3, #138	; 0x8a
 801a590:	6003      	strhi	r3, [r0, #0]
 801a592:	700a      	strbls	r2, [r1, #0]
 801a594:	f04f 30ff 	movhi.w	r0, #4294967295
 801a598:	bf98      	it	ls
 801a59a:	2001      	movls	r0, #1
 801a59c:	4770      	bx	lr
 801a59e:	4608      	mov	r0, r1
 801a5a0:	4770      	bx	lr
	...

0801a5a4 <_write_r>:
 801a5a4:	b538      	push	{r3, r4, r5, lr}
 801a5a6:	4d07      	ldr	r5, [pc, #28]	; (801a5c4 <_write_r+0x20>)
 801a5a8:	4604      	mov	r4, r0
 801a5aa:	4608      	mov	r0, r1
 801a5ac:	4611      	mov	r1, r2
 801a5ae:	2200      	movs	r2, #0
 801a5b0:	602a      	str	r2, [r5, #0]
 801a5b2:	461a      	mov	r2, r3
 801a5b4:	f7ec fe4b 	bl	800724e <_write>
 801a5b8:	1c43      	adds	r3, r0, #1
 801a5ba:	d102      	bne.n	801a5c2 <_write_r+0x1e>
 801a5bc:	682b      	ldr	r3, [r5, #0]
 801a5be:	b103      	cbz	r3, 801a5c2 <_write_r+0x1e>
 801a5c0:	6023      	str	r3, [r4, #0]
 801a5c2:	bd38      	pop	{r3, r4, r5, pc}
 801a5c4:	20007138 	.word	0x20007138

0801a5c8 <__swsetup_r>:
 801a5c8:	4b32      	ldr	r3, [pc, #200]	; (801a694 <__swsetup_r+0xcc>)
 801a5ca:	b570      	push	{r4, r5, r6, lr}
 801a5cc:	681d      	ldr	r5, [r3, #0]
 801a5ce:	4606      	mov	r6, r0
 801a5d0:	460c      	mov	r4, r1
 801a5d2:	b125      	cbz	r5, 801a5de <__swsetup_r+0x16>
 801a5d4:	69ab      	ldr	r3, [r5, #24]
 801a5d6:	b913      	cbnz	r3, 801a5de <__swsetup_r+0x16>
 801a5d8:	4628      	mov	r0, r5
 801a5da:	f000 f9a1 	bl	801a920 <__sinit>
 801a5de:	4b2e      	ldr	r3, [pc, #184]	; (801a698 <__swsetup_r+0xd0>)
 801a5e0:	429c      	cmp	r4, r3
 801a5e2:	d10f      	bne.n	801a604 <__swsetup_r+0x3c>
 801a5e4:	686c      	ldr	r4, [r5, #4]
 801a5e6:	89a3      	ldrh	r3, [r4, #12]
 801a5e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a5ec:	0719      	lsls	r1, r3, #28
 801a5ee:	d42c      	bmi.n	801a64a <__swsetup_r+0x82>
 801a5f0:	06dd      	lsls	r5, r3, #27
 801a5f2:	d411      	bmi.n	801a618 <__swsetup_r+0x50>
 801a5f4:	2309      	movs	r3, #9
 801a5f6:	6033      	str	r3, [r6, #0]
 801a5f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a5fc:	81a3      	strh	r3, [r4, #12]
 801a5fe:	f04f 30ff 	mov.w	r0, #4294967295
 801a602:	e03e      	b.n	801a682 <__swsetup_r+0xba>
 801a604:	4b25      	ldr	r3, [pc, #148]	; (801a69c <__swsetup_r+0xd4>)
 801a606:	429c      	cmp	r4, r3
 801a608:	d101      	bne.n	801a60e <__swsetup_r+0x46>
 801a60a:	68ac      	ldr	r4, [r5, #8]
 801a60c:	e7eb      	b.n	801a5e6 <__swsetup_r+0x1e>
 801a60e:	4b24      	ldr	r3, [pc, #144]	; (801a6a0 <__swsetup_r+0xd8>)
 801a610:	429c      	cmp	r4, r3
 801a612:	bf08      	it	eq
 801a614:	68ec      	ldreq	r4, [r5, #12]
 801a616:	e7e6      	b.n	801a5e6 <__swsetup_r+0x1e>
 801a618:	0758      	lsls	r0, r3, #29
 801a61a:	d512      	bpl.n	801a642 <__swsetup_r+0x7a>
 801a61c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a61e:	b141      	cbz	r1, 801a632 <__swsetup_r+0x6a>
 801a620:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a624:	4299      	cmp	r1, r3
 801a626:	d002      	beq.n	801a62e <__swsetup_r+0x66>
 801a628:	4630      	mov	r0, r6
 801a62a:	f7fb fc63 	bl	8015ef4 <_free_r>
 801a62e:	2300      	movs	r3, #0
 801a630:	6363      	str	r3, [r4, #52]	; 0x34
 801a632:	89a3      	ldrh	r3, [r4, #12]
 801a634:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a638:	81a3      	strh	r3, [r4, #12]
 801a63a:	2300      	movs	r3, #0
 801a63c:	6063      	str	r3, [r4, #4]
 801a63e:	6923      	ldr	r3, [r4, #16]
 801a640:	6023      	str	r3, [r4, #0]
 801a642:	89a3      	ldrh	r3, [r4, #12]
 801a644:	f043 0308 	orr.w	r3, r3, #8
 801a648:	81a3      	strh	r3, [r4, #12]
 801a64a:	6923      	ldr	r3, [r4, #16]
 801a64c:	b94b      	cbnz	r3, 801a662 <__swsetup_r+0x9a>
 801a64e:	89a3      	ldrh	r3, [r4, #12]
 801a650:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a658:	d003      	beq.n	801a662 <__swsetup_r+0x9a>
 801a65a:	4621      	mov	r1, r4
 801a65c:	4630      	mov	r0, r6
 801a65e:	f000 fa33 	bl	801aac8 <__smakebuf_r>
 801a662:	89a0      	ldrh	r0, [r4, #12]
 801a664:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a668:	f010 0301 	ands.w	r3, r0, #1
 801a66c:	d00a      	beq.n	801a684 <__swsetup_r+0xbc>
 801a66e:	2300      	movs	r3, #0
 801a670:	60a3      	str	r3, [r4, #8]
 801a672:	6963      	ldr	r3, [r4, #20]
 801a674:	425b      	negs	r3, r3
 801a676:	61a3      	str	r3, [r4, #24]
 801a678:	6923      	ldr	r3, [r4, #16]
 801a67a:	b943      	cbnz	r3, 801a68e <__swsetup_r+0xc6>
 801a67c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a680:	d1ba      	bne.n	801a5f8 <__swsetup_r+0x30>
 801a682:	bd70      	pop	{r4, r5, r6, pc}
 801a684:	0781      	lsls	r1, r0, #30
 801a686:	bf58      	it	pl
 801a688:	6963      	ldrpl	r3, [r4, #20]
 801a68a:	60a3      	str	r3, [r4, #8]
 801a68c:	e7f4      	b.n	801a678 <__swsetup_r+0xb0>
 801a68e:	2000      	movs	r0, #0
 801a690:	e7f7      	b.n	801a682 <__swsetup_r+0xba>
 801a692:	bf00      	nop
 801a694:	20001494 	.word	0x20001494
 801a698:	0801c640 	.word	0x0801c640
 801a69c:	0801c660 	.word	0x0801c660
 801a6a0:	0801c620 	.word	0x0801c620

0801a6a4 <abort>:
 801a6a4:	b508      	push	{r3, lr}
 801a6a6:	2006      	movs	r0, #6
 801a6a8:	f000 fe20 	bl	801b2ec <raise>
 801a6ac:	2001      	movs	r0, #1
 801a6ae:	f7ec fda7 	bl	8007200 <_exit>
	...

0801a6b4 <_close_r>:
 801a6b4:	b538      	push	{r3, r4, r5, lr}
 801a6b6:	4d06      	ldr	r5, [pc, #24]	; (801a6d0 <_close_r+0x1c>)
 801a6b8:	2300      	movs	r3, #0
 801a6ba:	4604      	mov	r4, r0
 801a6bc:	4608      	mov	r0, r1
 801a6be:	602b      	str	r3, [r5, #0]
 801a6c0:	f7ec fde1 	bl	8007286 <_close>
 801a6c4:	1c43      	adds	r3, r0, #1
 801a6c6:	d102      	bne.n	801a6ce <_close_r+0x1a>
 801a6c8:	682b      	ldr	r3, [r5, #0]
 801a6ca:	b103      	cbz	r3, 801a6ce <_close_r+0x1a>
 801a6cc:	6023      	str	r3, [r4, #0]
 801a6ce:	bd38      	pop	{r3, r4, r5, pc}
 801a6d0:	20007138 	.word	0x20007138

0801a6d4 <__env_lock>:
 801a6d4:	4801      	ldr	r0, [pc, #4]	; (801a6dc <__env_lock+0x8>)
 801a6d6:	f7fe be61 	b.w	801939c <__retarget_lock_acquire_recursive>
 801a6da:	bf00      	nop
 801a6dc:	2000712e 	.word	0x2000712e

0801a6e0 <__env_unlock>:
 801a6e0:	4801      	ldr	r0, [pc, #4]	; (801a6e8 <__env_unlock+0x8>)
 801a6e2:	f7fe be5d 	b.w	80193a0 <__retarget_lock_release_recursive>
 801a6e6:	bf00      	nop
 801a6e8:	2000712e 	.word	0x2000712e

0801a6ec <__sflush_r>:
 801a6ec:	898a      	ldrh	r2, [r1, #12]
 801a6ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6f2:	4605      	mov	r5, r0
 801a6f4:	0710      	lsls	r0, r2, #28
 801a6f6:	460c      	mov	r4, r1
 801a6f8:	d458      	bmi.n	801a7ac <__sflush_r+0xc0>
 801a6fa:	684b      	ldr	r3, [r1, #4]
 801a6fc:	2b00      	cmp	r3, #0
 801a6fe:	dc05      	bgt.n	801a70c <__sflush_r+0x20>
 801a700:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a702:	2b00      	cmp	r3, #0
 801a704:	dc02      	bgt.n	801a70c <__sflush_r+0x20>
 801a706:	2000      	movs	r0, #0
 801a708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a70c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a70e:	2e00      	cmp	r6, #0
 801a710:	d0f9      	beq.n	801a706 <__sflush_r+0x1a>
 801a712:	2300      	movs	r3, #0
 801a714:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a718:	682f      	ldr	r7, [r5, #0]
 801a71a:	602b      	str	r3, [r5, #0]
 801a71c:	d032      	beq.n	801a784 <__sflush_r+0x98>
 801a71e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a720:	89a3      	ldrh	r3, [r4, #12]
 801a722:	075a      	lsls	r2, r3, #29
 801a724:	d505      	bpl.n	801a732 <__sflush_r+0x46>
 801a726:	6863      	ldr	r3, [r4, #4]
 801a728:	1ac0      	subs	r0, r0, r3
 801a72a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a72c:	b10b      	cbz	r3, 801a732 <__sflush_r+0x46>
 801a72e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a730:	1ac0      	subs	r0, r0, r3
 801a732:	2300      	movs	r3, #0
 801a734:	4602      	mov	r2, r0
 801a736:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a738:	6a21      	ldr	r1, [r4, #32]
 801a73a:	4628      	mov	r0, r5
 801a73c:	47b0      	blx	r6
 801a73e:	1c43      	adds	r3, r0, #1
 801a740:	89a3      	ldrh	r3, [r4, #12]
 801a742:	d106      	bne.n	801a752 <__sflush_r+0x66>
 801a744:	6829      	ldr	r1, [r5, #0]
 801a746:	291d      	cmp	r1, #29
 801a748:	d82c      	bhi.n	801a7a4 <__sflush_r+0xb8>
 801a74a:	4a2a      	ldr	r2, [pc, #168]	; (801a7f4 <__sflush_r+0x108>)
 801a74c:	40ca      	lsrs	r2, r1
 801a74e:	07d6      	lsls	r6, r2, #31
 801a750:	d528      	bpl.n	801a7a4 <__sflush_r+0xb8>
 801a752:	2200      	movs	r2, #0
 801a754:	6062      	str	r2, [r4, #4]
 801a756:	04d9      	lsls	r1, r3, #19
 801a758:	6922      	ldr	r2, [r4, #16]
 801a75a:	6022      	str	r2, [r4, #0]
 801a75c:	d504      	bpl.n	801a768 <__sflush_r+0x7c>
 801a75e:	1c42      	adds	r2, r0, #1
 801a760:	d101      	bne.n	801a766 <__sflush_r+0x7a>
 801a762:	682b      	ldr	r3, [r5, #0]
 801a764:	b903      	cbnz	r3, 801a768 <__sflush_r+0x7c>
 801a766:	6560      	str	r0, [r4, #84]	; 0x54
 801a768:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a76a:	602f      	str	r7, [r5, #0]
 801a76c:	2900      	cmp	r1, #0
 801a76e:	d0ca      	beq.n	801a706 <__sflush_r+0x1a>
 801a770:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a774:	4299      	cmp	r1, r3
 801a776:	d002      	beq.n	801a77e <__sflush_r+0x92>
 801a778:	4628      	mov	r0, r5
 801a77a:	f7fb fbbb 	bl	8015ef4 <_free_r>
 801a77e:	2000      	movs	r0, #0
 801a780:	6360      	str	r0, [r4, #52]	; 0x34
 801a782:	e7c1      	b.n	801a708 <__sflush_r+0x1c>
 801a784:	6a21      	ldr	r1, [r4, #32]
 801a786:	2301      	movs	r3, #1
 801a788:	4628      	mov	r0, r5
 801a78a:	47b0      	blx	r6
 801a78c:	1c41      	adds	r1, r0, #1
 801a78e:	d1c7      	bne.n	801a720 <__sflush_r+0x34>
 801a790:	682b      	ldr	r3, [r5, #0]
 801a792:	2b00      	cmp	r3, #0
 801a794:	d0c4      	beq.n	801a720 <__sflush_r+0x34>
 801a796:	2b1d      	cmp	r3, #29
 801a798:	d001      	beq.n	801a79e <__sflush_r+0xb2>
 801a79a:	2b16      	cmp	r3, #22
 801a79c:	d101      	bne.n	801a7a2 <__sflush_r+0xb6>
 801a79e:	602f      	str	r7, [r5, #0]
 801a7a0:	e7b1      	b.n	801a706 <__sflush_r+0x1a>
 801a7a2:	89a3      	ldrh	r3, [r4, #12]
 801a7a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a7a8:	81a3      	strh	r3, [r4, #12]
 801a7aa:	e7ad      	b.n	801a708 <__sflush_r+0x1c>
 801a7ac:	690f      	ldr	r7, [r1, #16]
 801a7ae:	2f00      	cmp	r7, #0
 801a7b0:	d0a9      	beq.n	801a706 <__sflush_r+0x1a>
 801a7b2:	0793      	lsls	r3, r2, #30
 801a7b4:	680e      	ldr	r6, [r1, #0]
 801a7b6:	bf08      	it	eq
 801a7b8:	694b      	ldreq	r3, [r1, #20]
 801a7ba:	600f      	str	r7, [r1, #0]
 801a7bc:	bf18      	it	ne
 801a7be:	2300      	movne	r3, #0
 801a7c0:	eba6 0807 	sub.w	r8, r6, r7
 801a7c4:	608b      	str	r3, [r1, #8]
 801a7c6:	f1b8 0f00 	cmp.w	r8, #0
 801a7ca:	dd9c      	ble.n	801a706 <__sflush_r+0x1a>
 801a7cc:	6a21      	ldr	r1, [r4, #32]
 801a7ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a7d0:	4643      	mov	r3, r8
 801a7d2:	463a      	mov	r2, r7
 801a7d4:	4628      	mov	r0, r5
 801a7d6:	47b0      	blx	r6
 801a7d8:	2800      	cmp	r0, #0
 801a7da:	dc06      	bgt.n	801a7ea <__sflush_r+0xfe>
 801a7dc:	89a3      	ldrh	r3, [r4, #12]
 801a7de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a7e2:	81a3      	strh	r3, [r4, #12]
 801a7e4:	f04f 30ff 	mov.w	r0, #4294967295
 801a7e8:	e78e      	b.n	801a708 <__sflush_r+0x1c>
 801a7ea:	4407      	add	r7, r0
 801a7ec:	eba8 0800 	sub.w	r8, r8, r0
 801a7f0:	e7e9      	b.n	801a7c6 <__sflush_r+0xda>
 801a7f2:	bf00      	nop
 801a7f4:	20400001 	.word	0x20400001

0801a7f8 <_fflush_r>:
 801a7f8:	b538      	push	{r3, r4, r5, lr}
 801a7fa:	690b      	ldr	r3, [r1, #16]
 801a7fc:	4605      	mov	r5, r0
 801a7fe:	460c      	mov	r4, r1
 801a800:	b913      	cbnz	r3, 801a808 <_fflush_r+0x10>
 801a802:	2500      	movs	r5, #0
 801a804:	4628      	mov	r0, r5
 801a806:	bd38      	pop	{r3, r4, r5, pc}
 801a808:	b118      	cbz	r0, 801a812 <_fflush_r+0x1a>
 801a80a:	6983      	ldr	r3, [r0, #24]
 801a80c:	b90b      	cbnz	r3, 801a812 <_fflush_r+0x1a>
 801a80e:	f000 f887 	bl	801a920 <__sinit>
 801a812:	4b14      	ldr	r3, [pc, #80]	; (801a864 <_fflush_r+0x6c>)
 801a814:	429c      	cmp	r4, r3
 801a816:	d11b      	bne.n	801a850 <_fflush_r+0x58>
 801a818:	686c      	ldr	r4, [r5, #4]
 801a81a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a81e:	2b00      	cmp	r3, #0
 801a820:	d0ef      	beq.n	801a802 <_fflush_r+0xa>
 801a822:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a824:	07d0      	lsls	r0, r2, #31
 801a826:	d404      	bmi.n	801a832 <_fflush_r+0x3a>
 801a828:	0599      	lsls	r1, r3, #22
 801a82a:	d402      	bmi.n	801a832 <_fflush_r+0x3a>
 801a82c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a82e:	f7fe fdb5 	bl	801939c <__retarget_lock_acquire_recursive>
 801a832:	4628      	mov	r0, r5
 801a834:	4621      	mov	r1, r4
 801a836:	f7ff ff59 	bl	801a6ec <__sflush_r>
 801a83a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a83c:	07da      	lsls	r2, r3, #31
 801a83e:	4605      	mov	r5, r0
 801a840:	d4e0      	bmi.n	801a804 <_fflush_r+0xc>
 801a842:	89a3      	ldrh	r3, [r4, #12]
 801a844:	059b      	lsls	r3, r3, #22
 801a846:	d4dd      	bmi.n	801a804 <_fflush_r+0xc>
 801a848:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a84a:	f7fe fda9 	bl	80193a0 <__retarget_lock_release_recursive>
 801a84e:	e7d9      	b.n	801a804 <_fflush_r+0xc>
 801a850:	4b05      	ldr	r3, [pc, #20]	; (801a868 <_fflush_r+0x70>)
 801a852:	429c      	cmp	r4, r3
 801a854:	d101      	bne.n	801a85a <_fflush_r+0x62>
 801a856:	68ac      	ldr	r4, [r5, #8]
 801a858:	e7df      	b.n	801a81a <_fflush_r+0x22>
 801a85a:	4b04      	ldr	r3, [pc, #16]	; (801a86c <_fflush_r+0x74>)
 801a85c:	429c      	cmp	r4, r3
 801a85e:	bf08      	it	eq
 801a860:	68ec      	ldreq	r4, [r5, #12]
 801a862:	e7da      	b.n	801a81a <_fflush_r+0x22>
 801a864:	0801c640 	.word	0x0801c640
 801a868:	0801c660 	.word	0x0801c660
 801a86c:	0801c620 	.word	0x0801c620

0801a870 <std>:
 801a870:	2300      	movs	r3, #0
 801a872:	b510      	push	{r4, lr}
 801a874:	4604      	mov	r4, r0
 801a876:	e9c0 3300 	strd	r3, r3, [r0]
 801a87a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a87e:	6083      	str	r3, [r0, #8]
 801a880:	8181      	strh	r1, [r0, #12]
 801a882:	6643      	str	r3, [r0, #100]	; 0x64
 801a884:	81c2      	strh	r2, [r0, #14]
 801a886:	6183      	str	r3, [r0, #24]
 801a888:	4619      	mov	r1, r3
 801a88a:	2208      	movs	r2, #8
 801a88c:	305c      	adds	r0, #92	; 0x5c
 801a88e:	f7fb f8ab 	bl	80159e8 <memset>
 801a892:	4b05      	ldr	r3, [pc, #20]	; (801a8a8 <std+0x38>)
 801a894:	6263      	str	r3, [r4, #36]	; 0x24
 801a896:	4b05      	ldr	r3, [pc, #20]	; (801a8ac <std+0x3c>)
 801a898:	62a3      	str	r3, [r4, #40]	; 0x28
 801a89a:	4b05      	ldr	r3, [pc, #20]	; (801a8b0 <std+0x40>)
 801a89c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a89e:	4b05      	ldr	r3, [pc, #20]	; (801a8b4 <std+0x44>)
 801a8a0:	6224      	str	r4, [r4, #32]
 801a8a2:	6323      	str	r3, [r4, #48]	; 0x30
 801a8a4:	bd10      	pop	{r4, pc}
 801a8a6:	bf00      	nop
 801a8a8:	0801a349 	.word	0x0801a349
 801a8ac:	0801a36f 	.word	0x0801a36f
 801a8b0:	0801a3a7 	.word	0x0801a3a7
 801a8b4:	0801a3cb 	.word	0x0801a3cb

0801a8b8 <_cleanup_r>:
 801a8b8:	4901      	ldr	r1, [pc, #4]	; (801a8c0 <_cleanup_r+0x8>)
 801a8ba:	f000 b8af 	b.w	801aa1c <_fwalk_reent>
 801a8be:	bf00      	nop
 801a8c0:	0801a7f9 	.word	0x0801a7f9

0801a8c4 <__sfmoreglue>:
 801a8c4:	b570      	push	{r4, r5, r6, lr}
 801a8c6:	1e4a      	subs	r2, r1, #1
 801a8c8:	2568      	movs	r5, #104	; 0x68
 801a8ca:	4355      	muls	r5, r2
 801a8cc:	460e      	mov	r6, r1
 801a8ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a8d2:	f7fb fb5f 	bl	8015f94 <_malloc_r>
 801a8d6:	4604      	mov	r4, r0
 801a8d8:	b140      	cbz	r0, 801a8ec <__sfmoreglue+0x28>
 801a8da:	2100      	movs	r1, #0
 801a8dc:	e9c0 1600 	strd	r1, r6, [r0]
 801a8e0:	300c      	adds	r0, #12
 801a8e2:	60a0      	str	r0, [r4, #8]
 801a8e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a8e8:	f7fb f87e 	bl	80159e8 <memset>
 801a8ec:	4620      	mov	r0, r4
 801a8ee:	bd70      	pop	{r4, r5, r6, pc}

0801a8f0 <__sfp_lock_acquire>:
 801a8f0:	4801      	ldr	r0, [pc, #4]	; (801a8f8 <__sfp_lock_acquire+0x8>)
 801a8f2:	f7fe bd53 	b.w	801939c <__retarget_lock_acquire_recursive>
 801a8f6:	bf00      	nop
 801a8f8:	20007134 	.word	0x20007134

0801a8fc <__sfp_lock_release>:
 801a8fc:	4801      	ldr	r0, [pc, #4]	; (801a904 <__sfp_lock_release+0x8>)
 801a8fe:	f7fe bd4f 	b.w	80193a0 <__retarget_lock_release_recursive>
 801a902:	bf00      	nop
 801a904:	20007134 	.word	0x20007134

0801a908 <__sinit_lock_acquire>:
 801a908:	4801      	ldr	r0, [pc, #4]	; (801a910 <__sinit_lock_acquire+0x8>)
 801a90a:	f7fe bd47 	b.w	801939c <__retarget_lock_acquire_recursive>
 801a90e:	bf00      	nop
 801a910:	2000712f 	.word	0x2000712f

0801a914 <__sinit_lock_release>:
 801a914:	4801      	ldr	r0, [pc, #4]	; (801a91c <__sinit_lock_release+0x8>)
 801a916:	f7fe bd43 	b.w	80193a0 <__retarget_lock_release_recursive>
 801a91a:	bf00      	nop
 801a91c:	2000712f 	.word	0x2000712f

0801a920 <__sinit>:
 801a920:	b510      	push	{r4, lr}
 801a922:	4604      	mov	r4, r0
 801a924:	f7ff fff0 	bl	801a908 <__sinit_lock_acquire>
 801a928:	69a3      	ldr	r3, [r4, #24]
 801a92a:	b11b      	cbz	r3, 801a934 <__sinit+0x14>
 801a92c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a930:	f7ff bff0 	b.w	801a914 <__sinit_lock_release>
 801a934:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a938:	6523      	str	r3, [r4, #80]	; 0x50
 801a93a:	4b13      	ldr	r3, [pc, #76]	; (801a988 <__sinit+0x68>)
 801a93c:	4a13      	ldr	r2, [pc, #76]	; (801a98c <__sinit+0x6c>)
 801a93e:	681b      	ldr	r3, [r3, #0]
 801a940:	62a2      	str	r2, [r4, #40]	; 0x28
 801a942:	42a3      	cmp	r3, r4
 801a944:	bf04      	itt	eq
 801a946:	2301      	moveq	r3, #1
 801a948:	61a3      	streq	r3, [r4, #24]
 801a94a:	4620      	mov	r0, r4
 801a94c:	f000 f820 	bl	801a990 <__sfp>
 801a950:	6060      	str	r0, [r4, #4]
 801a952:	4620      	mov	r0, r4
 801a954:	f000 f81c 	bl	801a990 <__sfp>
 801a958:	60a0      	str	r0, [r4, #8]
 801a95a:	4620      	mov	r0, r4
 801a95c:	f000 f818 	bl	801a990 <__sfp>
 801a960:	2200      	movs	r2, #0
 801a962:	60e0      	str	r0, [r4, #12]
 801a964:	2104      	movs	r1, #4
 801a966:	6860      	ldr	r0, [r4, #4]
 801a968:	f7ff ff82 	bl	801a870 <std>
 801a96c:	68a0      	ldr	r0, [r4, #8]
 801a96e:	2201      	movs	r2, #1
 801a970:	2109      	movs	r1, #9
 801a972:	f7ff ff7d 	bl	801a870 <std>
 801a976:	68e0      	ldr	r0, [r4, #12]
 801a978:	2202      	movs	r2, #2
 801a97a:	2112      	movs	r1, #18
 801a97c:	f7ff ff78 	bl	801a870 <std>
 801a980:	2301      	movs	r3, #1
 801a982:	61a3      	str	r3, [r4, #24]
 801a984:	e7d2      	b.n	801a92c <__sinit+0xc>
 801a986:	bf00      	nop
 801a988:	0801c054 	.word	0x0801c054
 801a98c:	0801a8b9 	.word	0x0801a8b9

0801a990 <__sfp>:
 801a990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a992:	4607      	mov	r7, r0
 801a994:	f7ff ffac 	bl	801a8f0 <__sfp_lock_acquire>
 801a998:	4b1e      	ldr	r3, [pc, #120]	; (801aa14 <__sfp+0x84>)
 801a99a:	681e      	ldr	r6, [r3, #0]
 801a99c:	69b3      	ldr	r3, [r6, #24]
 801a99e:	b913      	cbnz	r3, 801a9a6 <__sfp+0x16>
 801a9a0:	4630      	mov	r0, r6
 801a9a2:	f7ff ffbd 	bl	801a920 <__sinit>
 801a9a6:	3648      	adds	r6, #72	; 0x48
 801a9a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a9ac:	3b01      	subs	r3, #1
 801a9ae:	d503      	bpl.n	801a9b8 <__sfp+0x28>
 801a9b0:	6833      	ldr	r3, [r6, #0]
 801a9b2:	b30b      	cbz	r3, 801a9f8 <__sfp+0x68>
 801a9b4:	6836      	ldr	r6, [r6, #0]
 801a9b6:	e7f7      	b.n	801a9a8 <__sfp+0x18>
 801a9b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a9bc:	b9d5      	cbnz	r5, 801a9f4 <__sfp+0x64>
 801a9be:	4b16      	ldr	r3, [pc, #88]	; (801aa18 <__sfp+0x88>)
 801a9c0:	60e3      	str	r3, [r4, #12]
 801a9c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a9c6:	6665      	str	r5, [r4, #100]	; 0x64
 801a9c8:	f7fe fce6 	bl	8019398 <__retarget_lock_init_recursive>
 801a9cc:	f7ff ff96 	bl	801a8fc <__sfp_lock_release>
 801a9d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a9d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a9d8:	6025      	str	r5, [r4, #0]
 801a9da:	61a5      	str	r5, [r4, #24]
 801a9dc:	2208      	movs	r2, #8
 801a9de:	4629      	mov	r1, r5
 801a9e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a9e4:	f7fb f800 	bl	80159e8 <memset>
 801a9e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a9ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a9f0:	4620      	mov	r0, r4
 801a9f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a9f4:	3468      	adds	r4, #104	; 0x68
 801a9f6:	e7d9      	b.n	801a9ac <__sfp+0x1c>
 801a9f8:	2104      	movs	r1, #4
 801a9fa:	4638      	mov	r0, r7
 801a9fc:	f7ff ff62 	bl	801a8c4 <__sfmoreglue>
 801aa00:	4604      	mov	r4, r0
 801aa02:	6030      	str	r0, [r6, #0]
 801aa04:	2800      	cmp	r0, #0
 801aa06:	d1d5      	bne.n	801a9b4 <__sfp+0x24>
 801aa08:	f7ff ff78 	bl	801a8fc <__sfp_lock_release>
 801aa0c:	230c      	movs	r3, #12
 801aa0e:	603b      	str	r3, [r7, #0]
 801aa10:	e7ee      	b.n	801a9f0 <__sfp+0x60>
 801aa12:	bf00      	nop
 801aa14:	0801c054 	.word	0x0801c054
 801aa18:	ffff0001 	.word	0xffff0001

0801aa1c <_fwalk_reent>:
 801aa1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aa20:	4606      	mov	r6, r0
 801aa22:	4688      	mov	r8, r1
 801aa24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801aa28:	2700      	movs	r7, #0
 801aa2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801aa2e:	f1b9 0901 	subs.w	r9, r9, #1
 801aa32:	d505      	bpl.n	801aa40 <_fwalk_reent+0x24>
 801aa34:	6824      	ldr	r4, [r4, #0]
 801aa36:	2c00      	cmp	r4, #0
 801aa38:	d1f7      	bne.n	801aa2a <_fwalk_reent+0xe>
 801aa3a:	4638      	mov	r0, r7
 801aa3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aa40:	89ab      	ldrh	r3, [r5, #12]
 801aa42:	2b01      	cmp	r3, #1
 801aa44:	d907      	bls.n	801aa56 <_fwalk_reent+0x3a>
 801aa46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801aa4a:	3301      	adds	r3, #1
 801aa4c:	d003      	beq.n	801aa56 <_fwalk_reent+0x3a>
 801aa4e:	4629      	mov	r1, r5
 801aa50:	4630      	mov	r0, r6
 801aa52:	47c0      	blx	r8
 801aa54:	4307      	orrs	r7, r0
 801aa56:	3568      	adds	r5, #104	; 0x68
 801aa58:	e7e9      	b.n	801aa2e <_fwalk_reent+0x12>
	...

0801aa5c <_lseek_r>:
 801aa5c:	b538      	push	{r3, r4, r5, lr}
 801aa5e:	4d07      	ldr	r5, [pc, #28]	; (801aa7c <_lseek_r+0x20>)
 801aa60:	4604      	mov	r4, r0
 801aa62:	4608      	mov	r0, r1
 801aa64:	4611      	mov	r1, r2
 801aa66:	2200      	movs	r2, #0
 801aa68:	602a      	str	r2, [r5, #0]
 801aa6a:	461a      	mov	r2, r3
 801aa6c:	f7ec fc32 	bl	80072d4 <_lseek>
 801aa70:	1c43      	adds	r3, r0, #1
 801aa72:	d102      	bne.n	801aa7a <_lseek_r+0x1e>
 801aa74:	682b      	ldr	r3, [r5, #0]
 801aa76:	b103      	cbz	r3, 801aa7a <_lseek_r+0x1e>
 801aa78:	6023      	str	r3, [r4, #0]
 801aa7a:	bd38      	pop	{r3, r4, r5, pc}
 801aa7c:	20007138 	.word	0x20007138

0801aa80 <__swhatbuf_r>:
 801aa80:	b570      	push	{r4, r5, r6, lr}
 801aa82:	460e      	mov	r6, r1
 801aa84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aa88:	2900      	cmp	r1, #0
 801aa8a:	b096      	sub	sp, #88	; 0x58
 801aa8c:	4614      	mov	r4, r2
 801aa8e:	461d      	mov	r5, r3
 801aa90:	da07      	bge.n	801aaa2 <__swhatbuf_r+0x22>
 801aa92:	2300      	movs	r3, #0
 801aa94:	602b      	str	r3, [r5, #0]
 801aa96:	89b3      	ldrh	r3, [r6, #12]
 801aa98:	061a      	lsls	r2, r3, #24
 801aa9a:	d410      	bmi.n	801aabe <__swhatbuf_r+0x3e>
 801aa9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801aaa0:	e00e      	b.n	801aac0 <__swhatbuf_r+0x40>
 801aaa2:	466a      	mov	r2, sp
 801aaa4:	f000 fc78 	bl	801b398 <_fstat_r>
 801aaa8:	2800      	cmp	r0, #0
 801aaaa:	dbf2      	blt.n	801aa92 <__swhatbuf_r+0x12>
 801aaac:	9a01      	ldr	r2, [sp, #4]
 801aaae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801aab2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801aab6:	425a      	negs	r2, r3
 801aab8:	415a      	adcs	r2, r3
 801aaba:	602a      	str	r2, [r5, #0]
 801aabc:	e7ee      	b.n	801aa9c <__swhatbuf_r+0x1c>
 801aabe:	2340      	movs	r3, #64	; 0x40
 801aac0:	2000      	movs	r0, #0
 801aac2:	6023      	str	r3, [r4, #0]
 801aac4:	b016      	add	sp, #88	; 0x58
 801aac6:	bd70      	pop	{r4, r5, r6, pc}

0801aac8 <__smakebuf_r>:
 801aac8:	898b      	ldrh	r3, [r1, #12]
 801aaca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801aacc:	079d      	lsls	r5, r3, #30
 801aace:	4606      	mov	r6, r0
 801aad0:	460c      	mov	r4, r1
 801aad2:	d507      	bpl.n	801aae4 <__smakebuf_r+0x1c>
 801aad4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801aad8:	6023      	str	r3, [r4, #0]
 801aada:	6123      	str	r3, [r4, #16]
 801aadc:	2301      	movs	r3, #1
 801aade:	6163      	str	r3, [r4, #20]
 801aae0:	b002      	add	sp, #8
 801aae2:	bd70      	pop	{r4, r5, r6, pc}
 801aae4:	ab01      	add	r3, sp, #4
 801aae6:	466a      	mov	r2, sp
 801aae8:	f7ff ffca 	bl	801aa80 <__swhatbuf_r>
 801aaec:	9900      	ldr	r1, [sp, #0]
 801aaee:	4605      	mov	r5, r0
 801aaf0:	4630      	mov	r0, r6
 801aaf2:	f7fb fa4f 	bl	8015f94 <_malloc_r>
 801aaf6:	b948      	cbnz	r0, 801ab0c <__smakebuf_r+0x44>
 801aaf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aafc:	059a      	lsls	r2, r3, #22
 801aafe:	d4ef      	bmi.n	801aae0 <__smakebuf_r+0x18>
 801ab00:	f023 0303 	bic.w	r3, r3, #3
 801ab04:	f043 0302 	orr.w	r3, r3, #2
 801ab08:	81a3      	strh	r3, [r4, #12]
 801ab0a:	e7e3      	b.n	801aad4 <__smakebuf_r+0xc>
 801ab0c:	4b0d      	ldr	r3, [pc, #52]	; (801ab44 <__smakebuf_r+0x7c>)
 801ab0e:	62b3      	str	r3, [r6, #40]	; 0x28
 801ab10:	89a3      	ldrh	r3, [r4, #12]
 801ab12:	6020      	str	r0, [r4, #0]
 801ab14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ab18:	81a3      	strh	r3, [r4, #12]
 801ab1a:	9b00      	ldr	r3, [sp, #0]
 801ab1c:	6163      	str	r3, [r4, #20]
 801ab1e:	9b01      	ldr	r3, [sp, #4]
 801ab20:	6120      	str	r0, [r4, #16]
 801ab22:	b15b      	cbz	r3, 801ab3c <__smakebuf_r+0x74>
 801ab24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ab28:	4630      	mov	r0, r6
 801ab2a:	f000 fc47 	bl	801b3bc <_isatty_r>
 801ab2e:	b128      	cbz	r0, 801ab3c <__smakebuf_r+0x74>
 801ab30:	89a3      	ldrh	r3, [r4, #12]
 801ab32:	f023 0303 	bic.w	r3, r3, #3
 801ab36:	f043 0301 	orr.w	r3, r3, #1
 801ab3a:	81a3      	strh	r3, [r4, #12]
 801ab3c:	89a0      	ldrh	r0, [r4, #12]
 801ab3e:	4305      	orrs	r5, r0
 801ab40:	81a5      	strh	r5, [r4, #12]
 801ab42:	e7cd      	b.n	801aae0 <__smakebuf_r+0x18>
 801ab44:	0801a8b9 	.word	0x0801a8b9

0801ab48 <memmove>:
 801ab48:	4288      	cmp	r0, r1
 801ab4a:	b510      	push	{r4, lr}
 801ab4c:	eb01 0402 	add.w	r4, r1, r2
 801ab50:	d902      	bls.n	801ab58 <memmove+0x10>
 801ab52:	4284      	cmp	r4, r0
 801ab54:	4623      	mov	r3, r4
 801ab56:	d807      	bhi.n	801ab68 <memmove+0x20>
 801ab58:	1e43      	subs	r3, r0, #1
 801ab5a:	42a1      	cmp	r1, r4
 801ab5c:	d008      	beq.n	801ab70 <memmove+0x28>
 801ab5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ab62:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ab66:	e7f8      	b.n	801ab5a <memmove+0x12>
 801ab68:	4402      	add	r2, r0
 801ab6a:	4601      	mov	r1, r0
 801ab6c:	428a      	cmp	r2, r1
 801ab6e:	d100      	bne.n	801ab72 <memmove+0x2a>
 801ab70:	bd10      	pop	{r4, pc}
 801ab72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ab76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ab7a:	e7f7      	b.n	801ab6c <memmove+0x24>

0801ab7c <_realloc_r>:
 801ab7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab7e:	4607      	mov	r7, r0
 801ab80:	4614      	mov	r4, r2
 801ab82:	460e      	mov	r6, r1
 801ab84:	b921      	cbnz	r1, 801ab90 <_realloc_r+0x14>
 801ab86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801ab8a:	4611      	mov	r1, r2
 801ab8c:	f7fb ba02 	b.w	8015f94 <_malloc_r>
 801ab90:	b922      	cbnz	r2, 801ab9c <_realloc_r+0x20>
 801ab92:	f7fb f9af 	bl	8015ef4 <_free_r>
 801ab96:	4625      	mov	r5, r4
 801ab98:	4628      	mov	r0, r5
 801ab9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ab9c:	f000 fc1e 	bl	801b3dc <_malloc_usable_size_r>
 801aba0:	42a0      	cmp	r0, r4
 801aba2:	d20f      	bcs.n	801abc4 <_realloc_r+0x48>
 801aba4:	4621      	mov	r1, r4
 801aba6:	4638      	mov	r0, r7
 801aba8:	f7fb f9f4 	bl	8015f94 <_malloc_r>
 801abac:	4605      	mov	r5, r0
 801abae:	2800      	cmp	r0, #0
 801abb0:	d0f2      	beq.n	801ab98 <_realloc_r+0x1c>
 801abb2:	4631      	mov	r1, r6
 801abb4:	4622      	mov	r2, r4
 801abb6:	f7fa ff09 	bl	80159cc <memcpy>
 801abba:	4631      	mov	r1, r6
 801abbc:	4638      	mov	r0, r7
 801abbe:	f7fb f999 	bl	8015ef4 <_free_r>
 801abc2:	e7e9      	b.n	801ab98 <_realloc_r+0x1c>
 801abc4:	4635      	mov	r5, r6
 801abc6:	e7e7      	b.n	801ab98 <_realloc_r+0x1c>

0801abc8 <_sungetc_r>:
 801abc8:	b538      	push	{r3, r4, r5, lr}
 801abca:	1c4b      	adds	r3, r1, #1
 801abcc:	4614      	mov	r4, r2
 801abce:	d103      	bne.n	801abd8 <_sungetc_r+0x10>
 801abd0:	f04f 35ff 	mov.w	r5, #4294967295
 801abd4:	4628      	mov	r0, r5
 801abd6:	bd38      	pop	{r3, r4, r5, pc}
 801abd8:	8993      	ldrh	r3, [r2, #12]
 801abda:	f023 0320 	bic.w	r3, r3, #32
 801abde:	8193      	strh	r3, [r2, #12]
 801abe0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801abe2:	6852      	ldr	r2, [r2, #4]
 801abe4:	b2cd      	uxtb	r5, r1
 801abe6:	b18b      	cbz	r3, 801ac0c <_sungetc_r+0x44>
 801abe8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801abea:	4293      	cmp	r3, r2
 801abec:	dd08      	ble.n	801ac00 <_sungetc_r+0x38>
 801abee:	6823      	ldr	r3, [r4, #0]
 801abf0:	1e5a      	subs	r2, r3, #1
 801abf2:	6022      	str	r2, [r4, #0]
 801abf4:	f803 5c01 	strb.w	r5, [r3, #-1]
 801abf8:	6863      	ldr	r3, [r4, #4]
 801abfa:	3301      	adds	r3, #1
 801abfc:	6063      	str	r3, [r4, #4]
 801abfe:	e7e9      	b.n	801abd4 <_sungetc_r+0xc>
 801ac00:	4621      	mov	r1, r4
 801ac02:	f000 fb8f 	bl	801b324 <__submore>
 801ac06:	2800      	cmp	r0, #0
 801ac08:	d0f1      	beq.n	801abee <_sungetc_r+0x26>
 801ac0a:	e7e1      	b.n	801abd0 <_sungetc_r+0x8>
 801ac0c:	6921      	ldr	r1, [r4, #16]
 801ac0e:	6823      	ldr	r3, [r4, #0]
 801ac10:	b151      	cbz	r1, 801ac28 <_sungetc_r+0x60>
 801ac12:	4299      	cmp	r1, r3
 801ac14:	d208      	bcs.n	801ac28 <_sungetc_r+0x60>
 801ac16:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801ac1a:	42a9      	cmp	r1, r5
 801ac1c:	d104      	bne.n	801ac28 <_sungetc_r+0x60>
 801ac1e:	3b01      	subs	r3, #1
 801ac20:	3201      	adds	r2, #1
 801ac22:	6023      	str	r3, [r4, #0]
 801ac24:	6062      	str	r2, [r4, #4]
 801ac26:	e7d5      	b.n	801abd4 <_sungetc_r+0xc>
 801ac28:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801ac2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ac30:	6363      	str	r3, [r4, #52]	; 0x34
 801ac32:	2303      	movs	r3, #3
 801ac34:	63a3      	str	r3, [r4, #56]	; 0x38
 801ac36:	4623      	mov	r3, r4
 801ac38:	f803 5f46 	strb.w	r5, [r3, #70]!
 801ac3c:	6023      	str	r3, [r4, #0]
 801ac3e:	2301      	movs	r3, #1
 801ac40:	e7dc      	b.n	801abfc <_sungetc_r+0x34>

0801ac42 <__ssrefill_r>:
 801ac42:	b510      	push	{r4, lr}
 801ac44:	460c      	mov	r4, r1
 801ac46:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801ac48:	b169      	cbz	r1, 801ac66 <__ssrefill_r+0x24>
 801ac4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ac4e:	4299      	cmp	r1, r3
 801ac50:	d001      	beq.n	801ac56 <__ssrefill_r+0x14>
 801ac52:	f7fb f94f 	bl	8015ef4 <_free_r>
 801ac56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ac58:	6063      	str	r3, [r4, #4]
 801ac5a:	2000      	movs	r0, #0
 801ac5c:	6360      	str	r0, [r4, #52]	; 0x34
 801ac5e:	b113      	cbz	r3, 801ac66 <__ssrefill_r+0x24>
 801ac60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801ac62:	6023      	str	r3, [r4, #0]
 801ac64:	bd10      	pop	{r4, pc}
 801ac66:	6923      	ldr	r3, [r4, #16]
 801ac68:	6023      	str	r3, [r4, #0]
 801ac6a:	2300      	movs	r3, #0
 801ac6c:	6063      	str	r3, [r4, #4]
 801ac6e:	89a3      	ldrh	r3, [r4, #12]
 801ac70:	f043 0320 	orr.w	r3, r3, #32
 801ac74:	81a3      	strh	r3, [r4, #12]
 801ac76:	f04f 30ff 	mov.w	r0, #4294967295
 801ac7a:	e7f3      	b.n	801ac64 <__ssrefill_r+0x22>

0801ac7c <__ssvfiscanf_r>:
 801ac7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac80:	460c      	mov	r4, r1
 801ac82:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801ac86:	2100      	movs	r1, #0
 801ac88:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801ac8c:	49b2      	ldr	r1, [pc, #712]	; (801af58 <__ssvfiscanf_r+0x2dc>)
 801ac8e:	91a0      	str	r1, [sp, #640]	; 0x280
 801ac90:	f10d 0804 	add.w	r8, sp, #4
 801ac94:	49b1      	ldr	r1, [pc, #708]	; (801af5c <__ssvfiscanf_r+0x2e0>)
 801ac96:	4fb2      	ldr	r7, [pc, #712]	; (801af60 <__ssvfiscanf_r+0x2e4>)
 801ac98:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801af64 <__ssvfiscanf_r+0x2e8>
 801ac9c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801aca0:	4606      	mov	r6, r0
 801aca2:	91a1      	str	r1, [sp, #644]	; 0x284
 801aca4:	9300      	str	r3, [sp, #0]
 801aca6:	f892 a000 	ldrb.w	sl, [r2]
 801acaa:	f1ba 0f00 	cmp.w	sl, #0
 801acae:	f000 8151 	beq.w	801af54 <__ssvfiscanf_r+0x2d8>
 801acb2:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801acb6:	f013 0308 	ands.w	r3, r3, #8
 801acba:	f102 0501 	add.w	r5, r2, #1
 801acbe:	d019      	beq.n	801acf4 <__ssvfiscanf_r+0x78>
 801acc0:	6863      	ldr	r3, [r4, #4]
 801acc2:	2b00      	cmp	r3, #0
 801acc4:	dd0f      	ble.n	801ace6 <__ssvfiscanf_r+0x6a>
 801acc6:	6823      	ldr	r3, [r4, #0]
 801acc8:	781a      	ldrb	r2, [r3, #0]
 801acca:	5cba      	ldrb	r2, [r7, r2]
 801accc:	0712      	lsls	r2, r2, #28
 801acce:	d401      	bmi.n	801acd4 <__ssvfiscanf_r+0x58>
 801acd0:	462a      	mov	r2, r5
 801acd2:	e7e8      	b.n	801aca6 <__ssvfiscanf_r+0x2a>
 801acd4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801acd6:	3201      	adds	r2, #1
 801acd8:	9245      	str	r2, [sp, #276]	; 0x114
 801acda:	6862      	ldr	r2, [r4, #4]
 801acdc:	3301      	adds	r3, #1
 801acde:	3a01      	subs	r2, #1
 801ace0:	6062      	str	r2, [r4, #4]
 801ace2:	6023      	str	r3, [r4, #0]
 801ace4:	e7ec      	b.n	801acc0 <__ssvfiscanf_r+0x44>
 801ace6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ace8:	4621      	mov	r1, r4
 801acea:	4630      	mov	r0, r6
 801acec:	4798      	blx	r3
 801acee:	2800      	cmp	r0, #0
 801acf0:	d0e9      	beq.n	801acc6 <__ssvfiscanf_r+0x4a>
 801acf2:	e7ed      	b.n	801acd0 <__ssvfiscanf_r+0x54>
 801acf4:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 801acf8:	f040 8083 	bne.w	801ae02 <__ssvfiscanf_r+0x186>
 801acfc:	9341      	str	r3, [sp, #260]	; 0x104
 801acfe:	9343      	str	r3, [sp, #268]	; 0x10c
 801ad00:	7853      	ldrb	r3, [r2, #1]
 801ad02:	2b2a      	cmp	r3, #42	; 0x2a
 801ad04:	bf02      	ittt	eq
 801ad06:	2310      	moveq	r3, #16
 801ad08:	1c95      	addeq	r5, r2, #2
 801ad0a:	9341      	streq	r3, [sp, #260]	; 0x104
 801ad0c:	220a      	movs	r2, #10
 801ad0e:	46ab      	mov	fp, r5
 801ad10:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801ad14:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801ad18:	2b09      	cmp	r3, #9
 801ad1a:	d91d      	bls.n	801ad58 <__ssvfiscanf_r+0xdc>
 801ad1c:	4891      	ldr	r0, [pc, #580]	; (801af64 <__ssvfiscanf_r+0x2e8>)
 801ad1e:	2203      	movs	r2, #3
 801ad20:	f7e5 fe6e 	bl	8000a00 <memchr>
 801ad24:	b140      	cbz	r0, 801ad38 <__ssvfiscanf_r+0xbc>
 801ad26:	2301      	movs	r3, #1
 801ad28:	eba0 0009 	sub.w	r0, r0, r9
 801ad2c:	fa03 f000 	lsl.w	r0, r3, r0
 801ad30:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801ad32:	4318      	orrs	r0, r3
 801ad34:	9041      	str	r0, [sp, #260]	; 0x104
 801ad36:	465d      	mov	r5, fp
 801ad38:	f815 3b01 	ldrb.w	r3, [r5], #1
 801ad3c:	2b78      	cmp	r3, #120	; 0x78
 801ad3e:	d806      	bhi.n	801ad4e <__ssvfiscanf_r+0xd2>
 801ad40:	2b57      	cmp	r3, #87	; 0x57
 801ad42:	d810      	bhi.n	801ad66 <__ssvfiscanf_r+0xea>
 801ad44:	2b25      	cmp	r3, #37	; 0x25
 801ad46:	d05c      	beq.n	801ae02 <__ssvfiscanf_r+0x186>
 801ad48:	d856      	bhi.n	801adf8 <__ssvfiscanf_r+0x17c>
 801ad4a:	2b00      	cmp	r3, #0
 801ad4c:	d074      	beq.n	801ae38 <__ssvfiscanf_r+0x1bc>
 801ad4e:	2303      	movs	r3, #3
 801ad50:	9347      	str	r3, [sp, #284]	; 0x11c
 801ad52:	230a      	movs	r3, #10
 801ad54:	9342      	str	r3, [sp, #264]	; 0x108
 801ad56:	e081      	b.n	801ae5c <__ssvfiscanf_r+0x1e0>
 801ad58:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801ad5a:	fb02 1303 	mla	r3, r2, r3, r1
 801ad5e:	3b30      	subs	r3, #48	; 0x30
 801ad60:	9343      	str	r3, [sp, #268]	; 0x10c
 801ad62:	465d      	mov	r5, fp
 801ad64:	e7d3      	b.n	801ad0e <__ssvfiscanf_r+0x92>
 801ad66:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801ad6a:	2a20      	cmp	r2, #32
 801ad6c:	d8ef      	bhi.n	801ad4e <__ssvfiscanf_r+0xd2>
 801ad6e:	a101      	add	r1, pc, #4	; (adr r1, 801ad74 <__ssvfiscanf_r+0xf8>)
 801ad70:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801ad74:	0801ae47 	.word	0x0801ae47
 801ad78:	0801ad4f 	.word	0x0801ad4f
 801ad7c:	0801ad4f 	.word	0x0801ad4f
 801ad80:	0801aea5 	.word	0x0801aea5
 801ad84:	0801ad4f 	.word	0x0801ad4f
 801ad88:	0801ad4f 	.word	0x0801ad4f
 801ad8c:	0801ad4f 	.word	0x0801ad4f
 801ad90:	0801ad4f 	.word	0x0801ad4f
 801ad94:	0801ad4f 	.word	0x0801ad4f
 801ad98:	0801ad4f 	.word	0x0801ad4f
 801ad9c:	0801ad4f 	.word	0x0801ad4f
 801ada0:	0801aebb 	.word	0x0801aebb
 801ada4:	0801ae91 	.word	0x0801ae91
 801ada8:	0801adff 	.word	0x0801adff
 801adac:	0801adff 	.word	0x0801adff
 801adb0:	0801adff 	.word	0x0801adff
 801adb4:	0801ad4f 	.word	0x0801ad4f
 801adb8:	0801ae95 	.word	0x0801ae95
 801adbc:	0801ad4f 	.word	0x0801ad4f
 801adc0:	0801ad4f 	.word	0x0801ad4f
 801adc4:	0801ad4f 	.word	0x0801ad4f
 801adc8:	0801ad4f 	.word	0x0801ad4f
 801adcc:	0801aecb 	.word	0x0801aecb
 801add0:	0801ae9d 	.word	0x0801ae9d
 801add4:	0801ae3f 	.word	0x0801ae3f
 801add8:	0801ad4f 	.word	0x0801ad4f
 801addc:	0801ad4f 	.word	0x0801ad4f
 801ade0:	0801aec7 	.word	0x0801aec7
 801ade4:	0801ad4f 	.word	0x0801ad4f
 801ade8:	0801ae91 	.word	0x0801ae91
 801adec:	0801ad4f 	.word	0x0801ad4f
 801adf0:	0801ad4f 	.word	0x0801ad4f
 801adf4:	0801ae47 	.word	0x0801ae47
 801adf8:	3b45      	subs	r3, #69	; 0x45
 801adfa:	2b02      	cmp	r3, #2
 801adfc:	d8a7      	bhi.n	801ad4e <__ssvfiscanf_r+0xd2>
 801adfe:	2305      	movs	r3, #5
 801ae00:	e02b      	b.n	801ae5a <__ssvfiscanf_r+0x1de>
 801ae02:	6863      	ldr	r3, [r4, #4]
 801ae04:	2b00      	cmp	r3, #0
 801ae06:	dd0d      	ble.n	801ae24 <__ssvfiscanf_r+0x1a8>
 801ae08:	6823      	ldr	r3, [r4, #0]
 801ae0a:	781a      	ldrb	r2, [r3, #0]
 801ae0c:	4552      	cmp	r2, sl
 801ae0e:	f040 80a1 	bne.w	801af54 <__ssvfiscanf_r+0x2d8>
 801ae12:	3301      	adds	r3, #1
 801ae14:	6862      	ldr	r2, [r4, #4]
 801ae16:	6023      	str	r3, [r4, #0]
 801ae18:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801ae1a:	3a01      	subs	r2, #1
 801ae1c:	3301      	adds	r3, #1
 801ae1e:	6062      	str	r2, [r4, #4]
 801ae20:	9345      	str	r3, [sp, #276]	; 0x114
 801ae22:	e755      	b.n	801acd0 <__ssvfiscanf_r+0x54>
 801ae24:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ae26:	4621      	mov	r1, r4
 801ae28:	4630      	mov	r0, r6
 801ae2a:	4798      	blx	r3
 801ae2c:	2800      	cmp	r0, #0
 801ae2e:	d0eb      	beq.n	801ae08 <__ssvfiscanf_r+0x18c>
 801ae30:	9844      	ldr	r0, [sp, #272]	; 0x110
 801ae32:	2800      	cmp	r0, #0
 801ae34:	f040 8084 	bne.w	801af40 <__ssvfiscanf_r+0x2c4>
 801ae38:	f04f 30ff 	mov.w	r0, #4294967295
 801ae3c:	e086      	b.n	801af4c <__ssvfiscanf_r+0x2d0>
 801ae3e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801ae40:	f042 0220 	orr.w	r2, r2, #32
 801ae44:	9241      	str	r2, [sp, #260]	; 0x104
 801ae46:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801ae48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ae4c:	9241      	str	r2, [sp, #260]	; 0x104
 801ae4e:	2210      	movs	r2, #16
 801ae50:	2b6f      	cmp	r3, #111	; 0x6f
 801ae52:	9242      	str	r2, [sp, #264]	; 0x108
 801ae54:	bf34      	ite	cc
 801ae56:	2303      	movcc	r3, #3
 801ae58:	2304      	movcs	r3, #4
 801ae5a:	9347      	str	r3, [sp, #284]	; 0x11c
 801ae5c:	6863      	ldr	r3, [r4, #4]
 801ae5e:	2b00      	cmp	r3, #0
 801ae60:	dd41      	ble.n	801aee6 <__ssvfiscanf_r+0x26a>
 801ae62:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801ae64:	0659      	lsls	r1, r3, #25
 801ae66:	d404      	bmi.n	801ae72 <__ssvfiscanf_r+0x1f6>
 801ae68:	6823      	ldr	r3, [r4, #0]
 801ae6a:	781a      	ldrb	r2, [r3, #0]
 801ae6c:	5cba      	ldrb	r2, [r7, r2]
 801ae6e:	0712      	lsls	r2, r2, #28
 801ae70:	d440      	bmi.n	801aef4 <__ssvfiscanf_r+0x278>
 801ae72:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801ae74:	2b02      	cmp	r3, #2
 801ae76:	dc4f      	bgt.n	801af18 <__ssvfiscanf_r+0x29c>
 801ae78:	466b      	mov	r3, sp
 801ae7a:	4622      	mov	r2, r4
 801ae7c:	a941      	add	r1, sp, #260	; 0x104
 801ae7e:	4630      	mov	r0, r6
 801ae80:	f000 f874 	bl	801af6c <_scanf_chars>
 801ae84:	2801      	cmp	r0, #1
 801ae86:	d065      	beq.n	801af54 <__ssvfiscanf_r+0x2d8>
 801ae88:	2802      	cmp	r0, #2
 801ae8a:	f47f af21 	bne.w	801acd0 <__ssvfiscanf_r+0x54>
 801ae8e:	e7cf      	b.n	801ae30 <__ssvfiscanf_r+0x1b4>
 801ae90:	220a      	movs	r2, #10
 801ae92:	e7dd      	b.n	801ae50 <__ssvfiscanf_r+0x1d4>
 801ae94:	2300      	movs	r3, #0
 801ae96:	9342      	str	r3, [sp, #264]	; 0x108
 801ae98:	2303      	movs	r3, #3
 801ae9a:	e7de      	b.n	801ae5a <__ssvfiscanf_r+0x1de>
 801ae9c:	2308      	movs	r3, #8
 801ae9e:	9342      	str	r3, [sp, #264]	; 0x108
 801aea0:	2304      	movs	r3, #4
 801aea2:	e7da      	b.n	801ae5a <__ssvfiscanf_r+0x1de>
 801aea4:	4629      	mov	r1, r5
 801aea6:	4640      	mov	r0, r8
 801aea8:	f000 f9be 	bl	801b228 <__sccl>
 801aeac:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801aeae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aeb2:	9341      	str	r3, [sp, #260]	; 0x104
 801aeb4:	4605      	mov	r5, r0
 801aeb6:	2301      	movs	r3, #1
 801aeb8:	e7cf      	b.n	801ae5a <__ssvfiscanf_r+0x1de>
 801aeba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801aebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aec0:	9341      	str	r3, [sp, #260]	; 0x104
 801aec2:	2300      	movs	r3, #0
 801aec4:	e7c9      	b.n	801ae5a <__ssvfiscanf_r+0x1de>
 801aec6:	2302      	movs	r3, #2
 801aec8:	e7c7      	b.n	801ae5a <__ssvfiscanf_r+0x1de>
 801aeca:	9841      	ldr	r0, [sp, #260]	; 0x104
 801aecc:	06c3      	lsls	r3, r0, #27
 801aece:	f53f aeff 	bmi.w	801acd0 <__ssvfiscanf_r+0x54>
 801aed2:	9b00      	ldr	r3, [sp, #0]
 801aed4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801aed6:	1d19      	adds	r1, r3, #4
 801aed8:	9100      	str	r1, [sp, #0]
 801aeda:	681b      	ldr	r3, [r3, #0]
 801aedc:	07c0      	lsls	r0, r0, #31
 801aede:	bf4c      	ite	mi
 801aee0:	801a      	strhmi	r2, [r3, #0]
 801aee2:	601a      	strpl	r2, [r3, #0]
 801aee4:	e6f4      	b.n	801acd0 <__ssvfiscanf_r+0x54>
 801aee6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801aee8:	4621      	mov	r1, r4
 801aeea:	4630      	mov	r0, r6
 801aeec:	4798      	blx	r3
 801aeee:	2800      	cmp	r0, #0
 801aef0:	d0b7      	beq.n	801ae62 <__ssvfiscanf_r+0x1e6>
 801aef2:	e79d      	b.n	801ae30 <__ssvfiscanf_r+0x1b4>
 801aef4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801aef6:	3201      	adds	r2, #1
 801aef8:	9245      	str	r2, [sp, #276]	; 0x114
 801aefa:	6862      	ldr	r2, [r4, #4]
 801aefc:	3a01      	subs	r2, #1
 801aefe:	2a00      	cmp	r2, #0
 801af00:	6062      	str	r2, [r4, #4]
 801af02:	dd02      	ble.n	801af0a <__ssvfiscanf_r+0x28e>
 801af04:	3301      	adds	r3, #1
 801af06:	6023      	str	r3, [r4, #0]
 801af08:	e7ae      	b.n	801ae68 <__ssvfiscanf_r+0x1ec>
 801af0a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801af0c:	4621      	mov	r1, r4
 801af0e:	4630      	mov	r0, r6
 801af10:	4798      	blx	r3
 801af12:	2800      	cmp	r0, #0
 801af14:	d0a8      	beq.n	801ae68 <__ssvfiscanf_r+0x1ec>
 801af16:	e78b      	b.n	801ae30 <__ssvfiscanf_r+0x1b4>
 801af18:	2b04      	cmp	r3, #4
 801af1a:	dc06      	bgt.n	801af2a <__ssvfiscanf_r+0x2ae>
 801af1c:	466b      	mov	r3, sp
 801af1e:	4622      	mov	r2, r4
 801af20:	a941      	add	r1, sp, #260	; 0x104
 801af22:	4630      	mov	r0, r6
 801af24:	f000 f87a 	bl	801b01c <_scanf_i>
 801af28:	e7ac      	b.n	801ae84 <__ssvfiscanf_r+0x208>
 801af2a:	4b0f      	ldr	r3, [pc, #60]	; (801af68 <__ssvfiscanf_r+0x2ec>)
 801af2c:	2b00      	cmp	r3, #0
 801af2e:	f43f aecf 	beq.w	801acd0 <__ssvfiscanf_r+0x54>
 801af32:	466b      	mov	r3, sp
 801af34:	4622      	mov	r2, r4
 801af36:	a941      	add	r1, sp, #260	; 0x104
 801af38:	4630      	mov	r0, r6
 801af3a:	f3af 8000 	nop.w
 801af3e:	e7a1      	b.n	801ae84 <__ssvfiscanf_r+0x208>
 801af40:	89a3      	ldrh	r3, [r4, #12]
 801af42:	f013 0f40 	tst.w	r3, #64	; 0x40
 801af46:	bf18      	it	ne
 801af48:	f04f 30ff 	movne.w	r0, #4294967295
 801af4c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801af50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af54:	9844      	ldr	r0, [sp, #272]	; 0x110
 801af56:	e7f9      	b.n	801af4c <__ssvfiscanf_r+0x2d0>
 801af58:	0801abc9 	.word	0x0801abc9
 801af5c:	0801ac43 	.word	0x0801ac43
 801af60:	0801c256 	.word	0x0801c256
 801af64:	0801c612 	.word	0x0801c612
 801af68:	00000000 	.word	0x00000000

0801af6c <_scanf_chars>:
 801af6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801af70:	4615      	mov	r5, r2
 801af72:	688a      	ldr	r2, [r1, #8]
 801af74:	4680      	mov	r8, r0
 801af76:	460c      	mov	r4, r1
 801af78:	b932      	cbnz	r2, 801af88 <_scanf_chars+0x1c>
 801af7a:	698a      	ldr	r2, [r1, #24]
 801af7c:	2a00      	cmp	r2, #0
 801af7e:	bf0c      	ite	eq
 801af80:	2201      	moveq	r2, #1
 801af82:	f04f 32ff 	movne.w	r2, #4294967295
 801af86:	608a      	str	r2, [r1, #8]
 801af88:	6822      	ldr	r2, [r4, #0]
 801af8a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801b018 <_scanf_chars+0xac>
 801af8e:	06d1      	lsls	r1, r2, #27
 801af90:	bf5f      	itttt	pl
 801af92:	681a      	ldrpl	r2, [r3, #0]
 801af94:	1d11      	addpl	r1, r2, #4
 801af96:	6019      	strpl	r1, [r3, #0]
 801af98:	6816      	ldrpl	r6, [r2, #0]
 801af9a:	2700      	movs	r7, #0
 801af9c:	69a0      	ldr	r0, [r4, #24]
 801af9e:	b188      	cbz	r0, 801afc4 <_scanf_chars+0x58>
 801afa0:	2801      	cmp	r0, #1
 801afa2:	d107      	bne.n	801afb4 <_scanf_chars+0x48>
 801afa4:	682b      	ldr	r3, [r5, #0]
 801afa6:	781a      	ldrb	r2, [r3, #0]
 801afa8:	6963      	ldr	r3, [r4, #20]
 801afaa:	5c9b      	ldrb	r3, [r3, r2]
 801afac:	b953      	cbnz	r3, 801afc4 <_scanf_chars+0x58>
 801afae:	bb27      	cbnz	r7, 801affa <_scanf_chars+0x8e>
 801afb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801afb4:	2802      	cmp	r0, #2
 801afb6:	d120      	bne.n	801affa <_scanf_chars+0x8e>
 801afb8:	682b      	ldr	r3, [r5, #0]
 801afba:	781b      	ldrb	r3, [r3, #0]
 801afbc:	f813 3009 	ldrb.w	r3, [r3, r9]
 801afc0:	071b      	lsls	r3, r3, #28
 801afc2:	d41a      	bmi.n	801affa <_scanf_chars+0x8e>
 801afc4:	6823      	ldr	r3, [r4, #0]
 801afc6:	06da      	lsls	r2, r3, #27
 801afc8:	bf5e      	ittt	pl
 801afca:	682b      	ldrpl	r3, [r5, #0]
 801afcc:	781b      	ldrbpl	r3, [r3, #0]
 801afce:	f806 3b01 	strbpl.w	r3, [r6], #1
 801afd2:	682a      	ldr	r2, [r5, #0]
 801afd4:	686b      	ldr	r3, [r5, #4]
 801afd6:	3201      	adds	r2, #1
 801afd8:	602a      	str	r2, [r5, #0]
 801afda:	68a2      	ldr	r2, [r4, #8]
 801afdc:	3b01      	subs	r3, #1
 801afde:	3a01      	subs	r2, #1
 801afe0:	606b      	str	r3, [r5, #4]
 801afe2:	3701      	adds	r7, #1
 801afe4:	60a2      	str	r2, [r4, #8]
 801afe6:	b142      	cbz	r2, 801affa <_scanf_chars+0x8e>
 801afe8:	2b00      	cmp	r3, #0
 801afea:	dcd7      	bgt.n	801af9c <_scanf_chars+0x30>
 801afec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801aff0:	4629      	mov	r1, r5
 801aff2:	4640      	mov	r0, r8
 801aff4:	4798      	blx	r3
 801aff6:	2800      	cmp	r0, #0
 801aff8:	d0d0      	beq.n	801af9c <_scanf_chars+0x30>
 801affa:	6823      	ldr	r3, [r4, #0]
 801affc:	f013 0310 	ands.w	r3, r3, #16
 801b000:	d105      	bne.n	801b00e <_scanf_chars+0xa2>
 801b002:	68e2      	ldr	r2, [r4, #12]
 801b004:	3201      	adds	r2, #1
 801b006:	60e2      	str	r2, [r4, #12]
 801b008:	69a2      	ldr	r2, [r4, #24]
 801b00a:	b102      	cbz	r2, 801b00e <_scanf_chars+0xa2>
 801b00c:	7033      	strb	r3, [r6, #0]
 801b00e:	6923      	ldr	r3, [r4, #16]
 801b010:	441f      	add	r7, r3
 801b012:	6127      	str	r7, [r4, #16]
 801b014:	2000      	movs	r0, #0
 801b016:	e7cb      	b.n	801afb0 <_scanf_chars+0x44>
 801b018:	0801c256 	.word	0x0801c256

0801b01c <_scanf_i>:
 801b01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b020:	4698      	mov	r8, r3
 801b022:	4b74      	ldr	r3, [pc, #464]	; (801b1f4 <_scanf_i+0x1d8>)
 801b024:	460c      	mov	r4, r1
 801b026:	4682      	mov	sl, r0
 801b028:	4616      	mov	r6, r2
 801b02a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b02e:	b087      	sub	sp, #28
 801b030:	ab03      	add	r3, sp, #12
 801b032:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801b036:	4b70      	ldr	r3, [pc, #448]	; (801b1f8 <_scanf_i+0x1dc>)
 801b038:	69a1      	ldr	r1, [r4, #24]
 801b03a:	4a70      	ldr	r2, [pc, #448]	; (801b1fc <_scanf_i+0x1e0>)
 801b03c:	2903      	cmp	r1, #3
 801b03e:	bf18      	it	ne
 801b040:	461a      	movne	r2, r3
 801b042:	68a3      	ldr	r3, [r4, #8]
 801b044:	9201      	str	r2, [sp, #4]
 801b046:	1e5a      	subs	r2, r3, #1
 801b048:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801b04c:	bf88      	it	hi
 801b04e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801b052:	4627      	mov	r7, r4
 801b054:	bf82      	ittt	hi
 801b056:	eb03 0905 	addhi.w	r9, r3, r5
 801b05a:	f240 135d 	movwhi	r3, #349	; 0x15d
 801b05e:	60a3      	strhi	r3, [r4, #8]
 801b060:	f857 3b1c 	ldr.w	r3, [r7], #28
 801b064:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801b068:	bf98      	it	ls
 801b06a:	f04f 0900 	movls.w	r9, #0
 801b06e:	6023      	str	r3, [r4, #0]
 801b070:	463d      	mov	r5, r7
 801b072:	f04f 0b00 	mov.w	fp, #0
 801b076:	6831      	ldr	r1, [r6, #0]
 801b078:	ab03      	add	r3, sp, #12
 801b07a:	7809      	ldrb	r1, [r1, #0]
 801b07c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801b080:	2202      	movs	r2, #2
 801b082:	f7e5 fcbd 	bl	8000a00 <memchr>
 801b086:	b328      	cbz	r0, 801b0d4 <_scanf_i+0xb8>
 801b088:	f1bb 0f01 	cmp.w	fp, #1
 801b08c:	d159      	bne.n	801b142 <_scanf_i+0x126>
 801b08e:	6862      	ldr	r2, [r4, #4]
 801b090:	b92a      	cbnz	r2, 801b09e <_scanf_i+0x82>
 801b092:	6822      	ldr	r2, [r4, #0]
 801b094:	2308      	movs	r3, #8
 801b096:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801b09a:	6063      	str	r3, [r4, #4]
 801b09c:	6022      	str	r2, [r4, #0]
 801b09e:	6822      	ldr	r2, [r4, #0]
 801b0a0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801b0a4:	6022      	str	r2, [r4, #0]
 801b0a6:	68a2      	ldr	r2, [r4, #8]
 801b0a8:	1e51      	subs	r1, r2, #1
 801b0aa:	60a1      	str	r1, [r4, #8]
 801b0ac:	b192      	cbz	r2, 801b0d4 <_scanf_i+0xb8>
 801b0ae:	6832      	ldr	r2, [r6, #0]
 801b0b0:	1c51      	adds	r1, r2, #1
 801b0b2:	6031      	str	r1, [r6, #0]
 801b0b4:	7812      	ldrb	r2, [r2, #0]
 801b0b6:	f805 2b01 	strb.w	r2, [r5], #1
 801b0ba:	6872      	ldr	r2, [r6, #4]
 801b0bc:	3a01      	subs	r2, #1
 801b0be:	2a00      	cmp	r2, #0
 801b0c0:	6072      	str	r2, [r6, #4]
 801b0c2:	dc07      	bgt.n	801b0d4 <_scanf_i+0xb8>
 801b0c4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801b0c8:	4631      	mov	r1, r6
 801b0ca:	4650      	mov	r0, sl
 801b0cc:	4790      	blx	r2
 801b0ce:	2800      	cmp	r0, #0
 801b0d0:	f040 8085 	bne.w	801b1de <_scanf_i+0x1c2>
 801b0d4:	f10b 0b01 	add.w	fp, fp, #1
 801b0d8:	f1bb 0f03 	cmp.w	fp, #3
 801b0dc:	d1cb      	bne.n	801b076 <_scanf_i+0x5a>
 801b0de:	6863      	ldr	r3, [r4, #4]
 801b0e0:	b90b      	cbnz	r3, 801b0e6 <_scanf_i+0xca>
 801b0e2:	230a      	movs	r3, #10
 801b0e4:	6063      	str	r3, [r4, #4]
 801b0e6:	6863      	ldr	r3, [r4, #4]
 801b0e8:	4945      	ldr	r1, [pc, #276]	; (801b200 <_scanf_i+0x1e4>)
 801b0ea:	6960      	ldr	r0, [r4, #20]
 801b0ec:	1ac9      	subs	r1, r1, r3
 801b0ee:	f000 f89b 	bl	801b228 <__sccl>
 801b0f2:	f04f 0b00 	mov.w	fp, #0
 801b0f6:	68a3      	ldr	r3, [r4, #8]
 801b0f8:	6822      	ldr	r2, [r4, #0]
 801b0fa:	2b00      	cmp	r3, #0
 801b0fc:	d03d      	beq.n	801b17a <_scanf_i+0x15e>
 801b0fe:	6831      	ldr	r1, [r6, #0]
 801b100:	6960      	ldr	r0, [r4, #20]
 801b102:	f891 c000 	ldrb.w	ip, [r1]
 801b106:	f810 000c 	ldrb.w	r0, [r0, ip]
 801b10a:	2800      	cmp	r0, #0
 801b10c:	d035      	beq.n	801b17a <_scanf_i+0x15e>
 801b10e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801b112:	d124      	bne.n	801b15e <_scanf_i+0x142>
 801b114:	0510      	lsls	r0, r2, #20
 801b116:	d522      	bpl.n	801b15e <_scanf_i+0x142>
 801b118:	f10b 0b01 	add.w	fp, fp, #1
 801b11c:	f1b9 0f00 	cmp.w	r9, #0
 801b120:	d003      	beq.n	801b12a <_scanf_i+0x10e>
 801b122:	3301      	adds	r3, #1
 801b124:	f109 39ff 	add.w	r9, r9, #4294967295
 801b128:	60a3      	str	r3, [r4, #8]
 801b12a:	6873      	ldr	r3, [r6, #4]
 801b12c:	3b01      	subs	r3, #1
 801b12e:	2b00      	cmp	r3, #0
 801b130:	6073      	str	r3, [r6, #4]
 801b132:	dd1b      	ble.n	801b16c <_scanf_i+0x150>
 801b134:	6833      	ldr	r3, [r6, #0]
 801b136:	3301      	adds	r3, #1
 801b138:	6033      	str	r3, [r6, #0]
 801b13a:	68a3      	ldr	r3, [r4, #8]
 801b13c:	3b01      	subs	r3, #1
 801b13e:	60a3      	str	r3, [r4, #8]
 801b140:	e7d9      	b.n	801b0f6 <_scanf_i+0xda>
 801b142:	f1bb 0f02 	cmp.w	fp, #2
 801b146:	d1ae      	bne.n	801b0a6 <_scanf_i+0x8a>
 801b148:	6822      	ldr	r2, [r4, #0]
 801b14a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801b14e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801b152:	d1bf      	bne.n	801b0d4 <_scanf_i+0xb8>
 801b154:	2310      	movs	r3, #16
 801b156:	6063      	str	r3, [r4, #4]
 801b158:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b15c:	e7a2      	b.n	801b0a4 <_scanf_i+0x88>
 801b15e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801b162:	6022      	str	r2, [r4, #0]
 801b164:	780b      	ldrb	r3, [r1, #0]
 801b166:	f805 3b01 	strb.w	r3, [r5], #1
 801b16a:	e7de      	b.n	801b12a <_scanf_i+0x10e>
 801b16c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801b170:	4631      	mov	r1, r6
 801b172:	4650      	mov	r0, sl
 801b174:	4798      	blx	r3
 801b176:	2800      	cmp	r0, #0
 801b178:	d0df      	beq.n	801b13a <_scanf_i+0x11e>
 801b17a:	6823      	ldr	r3, [r4, #0]
 801b17c:	05d9      	lsls	r1, r3, #23
 801b17e:	d50d      	bpl.n	801b19c <_scanf_i+0x180>
 801b180:	42bd      	cmp	r5, r7
 801b182:	d909      	bls.n	801b198 <_scanf_i+0x17c>
 801b184:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801b188:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b18c:	4632      	mov	r2, r6
 801b18e:	4650      	mov	r0, sl
 801b190:	4798      	blx	r3
 801b192:	f105 39ff 	add.w	r9, r5, #4294967295
 801b196:	464d      	mov	r5, r9
 801b198:	42bd      	cmp	r5, r7
 801b19a:	d028      	beq.n	801b1ee <_scanf_i+0x1d2>
 801b19c:	6822      	ldr	r2, [r4, #0]
 801b19e:	f012 0210 	ands.w	r2, r2, #16
 801b1a2:	d113      	bne.n	801b1cc <_scanf_i+0x1b0>
 801b1a4:	702a      	strb	r2, [r5, #0]
 801b1a6:	6863      	ldr	r3, [r4, #4]
 801b1a8:	9e01      	ldr	r6, [sp, #4]
 801b1aa:	4639      	mov	r1, r7
 801b1ac:	4650      	mov	r0, sl
 801b1ae:	47b0      	blx	r6
 801b1b0:	f8d8 3000 	ldr.w	r3, [r8]
 801b1b4:	6821      	ldr	r1, [r4, #0]
 801b1b6:	1d1a      	adds	r2, r3, #4
 801b1b8:	f8c8 2000 	str.w	r2, [r8]
 801b1bc:	f011 0f20 	tst.w	r1, #32
 801b1c0:	681b      	ldr	r3, [r3, #0]
 801b1c2:	d00f      	beq.n	801b1e4 <_scanf_i+0x1c8>
 801b1c4:	6018      	str	r0, [r3, #0]
 801b1c6:	68e3      	ldr	r3, [r4, #12]
 801b1c8:	3301      	adds	r3, #1
 801b1ca:	60e3      	str	r3, [r4, #12]
 801b1cc:	1bed      	subs	r5, r5, r7
 801b1ce:	44ab      	add	fp, r5
 801b1d0:	6925      	ldr	r5, [r4, #16]
 801b1d2:	445d      	add	r5, fp
 801b1d4:	6125      	str	r5, [r4, #16]
 801b1d6:	2000      	movs	r0, #0
 801b1d8:	b007      	add	sp, #28
 801b1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1de:	f04f 0b00 	mov.w	fp, #0
 801b1e2:	e7ca      	b.n	801b17a <_scanf_i+0x15e>
 801b1e4:	07ca      	lsls	r2, r1, #31
 801b1e6:	bf4c      	ite	mi
 801b1e8:	8018      	strhmi	r0, [r3, #0]
 801b1ea:	6018      	strpl	r0, [r3, #0]
 801b1ec:	e7eb      	b.n	801b1c6 <_scanf_i+0x1aa>
 801b1ee:	2001      	movs	r0, #1
 801b1f0:	e7f2      	b.n	801b1d8 <_scanf_i+0x1bc>
 801b1f2:	bf00      	nop
 801b1f4:	0801bc88 	.word	0x0801bc88
 801b1f8:	0801a4cd 	.word	0x0801a4cd
 801b1fc:	08017865 	.word	0x08017865
 801b200:	0801c699 	.word	0x0801c699

0801b204 <_read_r>:
 801b204:	b538      	push	{r3, r4, r5, lr}
 801b206:	4d07      	ldr	r5, [pc, #28]	; (801b224 <_read_r+0x20>)
 801b208:	4604      	mov	r4, r0
 801b20a:	4608      	mov	r0, r1
 801b20c:	4611      	mov	r1, r2
 801b20e:	2200      	movs	r2, #0
 801b210:	602a      	str	r2, [r5, #0]
 801b212:	461a      	mov	r2, r3
 801b214:	f7eb fffe 	bl	8007214 <_read>
 801b218:	1c43      	adds	r3, r0, #1
 801b21a:	d102      	bne.n	801b222 <_read_r+0x1e>
 801b21c:	682b      	ldr	r3, [r5, #0]
 801b21e:	b103      	cbz	r3, 801b222 <_read_r+0x1e>
 801b220:	6023      	str	r3, [r4, #0]
 801b222:	bd38      	pop	{r3, r4, r5, pc}
 801b224:	20007138 	.word	0x20007138

0801b228 <__sccl>:
 801b228:	b570      	push	{r4, r5, r6, lr}
 801b22a:	780b      	ldrb	r3, [r1, #0]
 801b22c:	4604      	mov	r4, r0
 801b22e:	2b5e      	cmp	r3, #94	; 0x5e
 801b230:	bf0b      	itete	eq
 801b232:	784b      	ldrbeq	r3, [r1, #1]
 801b234:	1c48      	addne	r0, r1, #1
 801b236:	1c88      	addeq	r0, r1, #2
 801b238:	2200      	movne	r2, #0
 801b23a:	bf08      	it	eq
 801b23c:	2201      	moveq	r2, #1
 801b23e:	1e61      	subs	r1, r4, #1
 801b240:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801b244:	f801 2f01 	strb.w	r2, [r1, #1]!
 801b248:	42a9      	cmp	r1, r5
 801b24a:	d1fb      	bne.n	801b244 <__sccl+0x1c>
 801b24c:	b90b      	cbnz	r3, 801b252 <__sccl+0x2a>
 801b24e:	3801      	subs	r0, #1
 801b250:	bd70      	pop	{r4, r5, r6, pc}
 801b252:	f082 0101 	eor.w	r1, r2, #1
 801b256:	54e1      	strb	r1, [r4, r3]
 801b258:	1c42      	adds	r2, r0, #1
 801b25a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801b25e:	2d2d      	cmp	r5, #45	; 0x2d
 801b260:	f102 36ff 	add.w	r6, r2, #4294967295
 801b264:	4610      	mov	r0, r2
 801b266:	d006      	beq.n	801b276 <__sccl+0x4e>
 801b268:	2d5d      	cmp	r5, #93	; 0x5d
 801b26a:	d0f1      	beq.n	801b250 <__sccl+0x28>
 801b26c:	b90d      	cbnz	r5, 801b272 <__sccl+0x4a>
 801b26e:	4630      	mov	r0, r6
 801b270:	e7ee      	b.n	801b250 <__sccl+0x28>
 801b272:	462b      	mov	r3, r5
 801b274:	e7ef      	b.n	801b256 <__sccl+0x2e>
 801b276:	7816      	ldrb	r6, [r2, #0]
 801b278:	2e5d      	cmp	r6, #93	; 0x5d
 801b27a:	d0fa      	beq.n	801b272 <__sccl+0x4a>
 801b27c:	42b3      	cmp	r3, r6
 801b27e:	dcf8      	bgt.n	801b272 <__sccl+0x4a>
 801b280:	4618      	mov	r0, r3
 801b282:	3001      	adds	r0, #1
 801b284:	4286      	cmp	r6, r0
 801b286:	5421      	strb	r1, [r4, r0]
 801b288:	dcfb      	bgt.n	801b282 <__sccl+0x5a>
 801b28a:	43d8      	mvns	r0, r3
 801b28c:	4430      	add	r0, r6
 801b28e:	1c5d      	adds	r5, r3, #1
 801b290:	42b3      	cmp	r3, r6
 801b292:	bfa8      	it	ge
 801b294:	2000      	movge	r0, #0
 801b296:	182b      	adds	r3, r5, r0
 801b298:	3202      	adds	r2, #2
 801b29a:	e7de      	b.n	801b25a <__sccl+0x32>

0801b29c <_raise_r>:
 801b29c:	291f      	cmp	r1, #31
 801b29e:	b538      	push	{r3, r4, r5, lr}
 801b2a0:	4604      	mov	r4, r0
 801b2a2:	460d      	mov	r5, r1
 801b2a4:	d904      	bls.n	801b2b0 <_raise_r+0x14>
 801b2a6:	2316      	movs	r3, #22
 801b2a8:	6003      	str	r3, [r0, #0]
 801b2aa:	f04f 30ff 	mov.w	r0, #4294967295
 801b2ae:	bd38      	pop	{r3, r4, r5, pc}
 801b2b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b2b2:	b112      	cbz	r2, 801b2ba <_raise_r+0x1e>
 801b2b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b2b8:	b94b      	cbnz	r3, 801b2ce <_raise_r+0x32>
 801b2ba:	4620      	mov	r0, r4
 801b2bc:	f000 f830 	bl	801b320 <_getpid_r>
 801b2c0:	462a      	mov	r2, r5
 801b2c2:	4601      	mov	r1, r0
 801b2c4:	4620      	mov	r0, r4
 801b2c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b2ca:	f000 b817 	b.w	801b2fc <_kill_r>
 801b2ce:	2b01      	cmp	r3, #1
 801b2d0:	d00a      	beq.n	801b2e8 <_raise_r+0x4c>
 801b2d2:	1c59      	adds	r1, r3, #1
 801b2d4:	d103      	bne.n	801b2de <_raise_r+0x42>
 801b2d6:	2316      	movs	r3, #22
 801b2d8:	6003      	str	r3, [r0, #0]
 801b2da:	2001      	movs	r0, #1
 801b2dc:	e7e7      	b.n	801b2ae <_raise_r+0x12>
 801b2de:	2400      	movs	r4, #0
 801b2e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b2e4:	4628      	mov	r0, r5
 801b2e6:	4798      	blx	r3
 801b2e8:	2000      	movs	r0, #0
 801b2ea:	e7e0      	b.n	801b2ae <_raise_r+0x12>

0801b2ec <raise>:
 801b2ec:	4b02      	ldr	r3, [pc, #8]	; (801b2f8 <raise+0xc>)
 801b2ee:	4601      	mov	r1, r0
 801b2f0:	6818      	ldr	r0, [r3, #0]
 801b2f2:	f7ff bfd3 	b.w	801b29c <_raise_r>
 801b2f6:	bf00      	nop
 801b2f8:	20001494 	.word	0x20001494

0801b2fc <_kill_r>:
 801b2fc:	b538      	push	{r3, r4, r5, lr}
 801b2fe:	4d07      	ldr	r5, [pc, #28]	; (801b31c <_kill_r+0x20>)
 801b300:	2300      	movs	r3, #0
 801b302:	4604      	mov	r4, r0
 801b304:	4608      	mov	r0, r1
 801b306:	4611      	mov	r1, r2
 801b308:	602b      	str	r3, [r5, #0]
 801b30a:	f7eb ff69 	bl	80071e0 <_kill>
 801b30e:	1c43      	adds	r3, r0, #1
 801b310:	d102      	bne.n	801b318 <_kill_r+0x1c>
 801b312:	682b      	ldr	r3, [r5, #0]
 801b314:	b103      	cbz	r3, 801b318 <_kill_r+0x1c>
 801b316:	6023      	str	r3, [r4, #0]
 801b318:	bd38      	pop	{r3, r4, r5, pc}
 801b31a:	bf00      	nop
 801b31c:	20007138 	.word	0x20007138

0801b320 <_getpid_r>:
 801b320:	f7eb bf56 	b.w	80071d0 <_getpid>

0801b324 <__submore>:
 801b324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b328:	460c      	mov	r4, r1
 801b32a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801b32c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b330:	4299      	cmp	r1, r3
 801b332:	d11d      	bne.n	801b370 <__submore+0x4c>
 801b334:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801b338:	f7fa fe2c 	bl	8015f94 <_malloc_r>
 801b33c:	b918      	cbnz	r0, 801b346 <__submore+0x22>
 801b33e:	f04f 30ff 	mov.w	r0, #4294967295
 801b342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b34a:	63a3      	str	r3, [r4, #56]	; 0x38
 801b34c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801b350:	6360      	str	r0, [r4, #52]	; 0x34
 801b352:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801b356:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801b35a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801b35e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801b362:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801b366:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801b36a:	6020      	str	r0, [r4, #0]
 801b36c:	2000      	movs	r0, #0
 801b36e:	e7e8      	b.n	801b342 <__submore+0x1e>
 801b370:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801b372:	0077      	lsls	r7, r6, #1
 801b374:	463a      	mov	r2, r7
 801b376:	f7ff fc01 	bl	801ab7c <_realloc_r>
 801b37a:	4605      	mov	r5, r0
 801b37c:	2800      	cmp	r0, #0
 801b37e:	d0de      	beq.n	801b33e <__submore+0x1a>
 801b380:	eb00 0806 	add.w	r8, r0, r6
 801b384:	4601      	mov	r1, r0
 801b386:	4632      	mov	r2, r6
 801b388:	4640      	mov	r0, r8
 801b38a:	f7fa fb1f 	bl	80159cc <memcpy>
 801b38e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801b392:	f8c4 8000 	str.w	r8, [r4]
 801b396:	e7e9      	b.n	801b36c <__submore+0x48>

0801b398 <_fstat_r>:
 801b398:	b538      	push	{r3, r4, r5, lr}
 801b39a:	4d07      	ldr	r5, [pc, #28]	; (801b3b8 <_fstat_r+0x20>)
 801b39c:	2300      	movs	r3, #0
 801b39e:	4604      	mov	r4, r0
 801b3a0:	4608      	mov	r0, r1
 801b3a2:	4611      	mov	r1, r2
 801b3a4:	602b      	str	r3, [r5, #0]
 801b3a6:	f7eb ff7a 	bl	800729e <_fstat>
 801b3aa:	1c43      	adds	r3, r0, #1
 801b3ac:	d102      	bne.n	801b3b4 <_fstat_r+0x1c>
 801b3ae:	682b      	ldr	r3, [r5, #0]
 801b3b0:	b103      	cbz	r3, 801b3b4 <_fstat_r+0x1c>
 801b3b2:	6023      	str	r3, [r4, #0]
 801b3b4:	bd38      	pop	{r3, r4, r5, pc}
 801b3b6:	bf00      	nop
 801b3b8:	20007138 	.word	0x20007138

0801b3bc <_isatty_r>:
 801b3bc:	b538      	push	{r3, r4, r5, lr}
 801b3be:	4d06      	ldr	r5, [pc, #24]	; (801b3d8 <_isatty_r+0x1c>)
 801b3c0:	2300      	movs	r3, #0
 801b3c2:	4604      	mov	r4, r0
 801b3c4:	4608      	mov	r0, r1
 801b3c6:	602b      	str	r3, [r5, #0]
 801b3c8:	f7eb ff79 	bl	80072be <_isatty>
 801b3cc:	1c43      	adds	r3, r0, #1
 801b3ce:	d102      	bne.n	801b3d6 <_isatty_r+0x1a>
 801b3d0:	682b      	ldr	r3, [r5, #0]
 801b3d2:	b103      	cbz	r3, 801b3d6 <_isatty_r+0x1a>
 801b3d4:	6023      	str	r3, [r4, #0]
 801b3d6:	bd38      	pop	{r3, r4, r5, pc}
 801b3d8:	20007138 	.word	0x20007138

0801b3dc <_malloc_usable_size_r>:
 801b3dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b3e0:	1f18      	subs	r0, r3, #4
 801b3e2:	2b00      	cmp	r3, #0
 801b3e4:	bfbc      	itt	lt
 801b3e6:	580b      	ldrlt	r3, [r1, r0]
 801b3e8:	18c0      	addlt	r0, r0, r3
 801b3ea:	4770      	bx	lr

0801b3ec <_init>:
 801b3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b3ee:	bf00      	nop
 801b3f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b3f2:	bc08      	pop	{r3}
 801b3f4:	469e      	mov	lr, r3
 801b3f6:	4770      	bx	lr

0801b3f8 <_fini>:
 801b3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b3fa:	bf00      	nop
 801b3fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b3fe:	bc08      	pop	{r3}
 801b400:	469e      	mov	lr, r3
 801b402:	4770      	bx	lr
